#######################################################################
# makeinc.vms (EIFFEL_SRC:[C]makeinc.vms) - vms/axp
# top level makeinc.vms
# $Id$
#######################################################################
#
# Boy, I sure do wish this worked.
#DECC_FLAGS_OPENVMSVAX = /vax
#DECC_FLAGS_OPENVMSAXP = /axp
#DECC_FLAGS = $(DECC_FLAGS_)$(PLATFORM)
MY_PLATFORM = vms-axp
# I _really_ wish this could come from the environment!
#PLATFORM = OpenVMSAXP
ISE_PLATFORM = VMSAlpha
VMS_JACKETS = "EIFFEL_SRC/C_library/VMS/Porting_A4"

TOP = [C]
#DECC_INCLUDES = [],$(TOP),vms_jackets_root:[include]
DECC_INCLUDES = vms_jackets_root:[include],$(TOP),[]


# Make is supposed to pick up "environment variables" which, on VMS,
# may be logical names or CLI (DCL) symbols, but it doesn't seem to work.
# MMS/MMK should do so.

# symbols for utilities
AR = libr/create
COPY = copy
LINKFLAGS = $(DEBUG_LINKFLAGS)$(EIF_LINKFLAGS)$(MY_LINKFLAGS)
MKDIR = create/directory/vers=3


# symbols for C compiles
# to compile for debugging:	make <target> "DEBUG_CFLAGS=/debug/noopt"
# to compile for distribution:	make <target> "DEBUG_CFLAGS="
#			or	make <target> "DEBUG_CFLAGS=/opt"
# (DEC C default is /optimize /nodebug)
#DEBUG_CFLAGS = 
# temp, while debugging - dss
DEBUG_CFLAGS = /debug/noopt # /check=(uninit,point=all)/diag

# definitions and rules for compiling C sources into objects
# individual makefiles define the CFLAGS macro with local requirements
# the following flags are required for using Eiffel built with GTK.
# See GTK Release Notes for more information.
#DECC_FLAGS = /prefix=all/name=as_is$(DEBUG_CFLAGS)
DECC_FLAGS = /prefix=all/name=(as_is,shorten)/float=ieee/ieee=denorm $(DEBUG_CFLAGS)$(EIF_CFLAGS)$(MY_CFLAGS)
#DECC_FLAGS = /diag/prefix=all$(DEBUG_CFLAGS)$(EIF_CFLAGS)

#GTK_PATH = EIFFEL_SRC:[C_library.VMS.GTK_1210]
GTK_PATHU = /EIFFEL_SRC/C_library/VMS/gtk_1210
GTK_CFLAGS = 
#GTK_CINCLUDES = "/ISE_EIFFEL/gtk128/gtk","/ISE_EIFFEL/gtk128/glib"
GTK_CINCLUDES = "$(GTK_PATHU)/gtk","$(GTK_PATHU)/glib"
GTK_LINKFLAGS = $(GTK_PATH)VMS_LINK.OPT/OPT
# the following is for testing porpoises only
#TOP_CDEFINES = "top_cdefines=YoDude"

# The following allows different flags for case-sensitive, if necessary.
# It may be overriden by individual makefiles
#CSSUF = _CS
#CFLAGS_CS = $(CFLAGS)
CSSUF =

.c.obj : 
	$(CC) $</obj=$@ $(CFLAGS) 


# Rule to generate preprocessed output. Needs include file list macro.
.SUFFIXES : .i .obji .lis  # .i$(CSSUF) .lis$(CSSUF)
#.PRECIOUS : .i .lis  # .i$(CSSUF) .lis$(CSSUF)
.c.i :
#	- $(CC) $< $(CFLAGS)/nolist/noobj/nodiag/preprocess=$@ 
	$(CC) $(CINCLUDES)$(CDEFINES) $< /noobj/preprocess=$@
.c.lis : 
#	- $(CC) $</list=$@ $(CFLAGS)/noobj/nodiag/show=expan$(LISTFLAGS)$(MY_LISTFLAGS)
	- $(CC) $</list=$@ $(CFLAGS)/noobj/show=expan$(LISTFLAGS)$(MY_LISTFLAGS)

#ifneq ($(CSSUF),)
#.c.i$(CSSUF) :
##	$(CC) $(CINCLUDES) $(CDEFINES) $</noobj/preprocess=$@
#	$(CC) $< $(CFLAGS$(CSSUF))/noobj/nodiag/preprocess=$@
#.c.lis$(CSSUF) :
#	$(CC) $</list=$@/noobj $(CFLAGS$(CSSUF)) 
#endif

.i.obji :
	$(CC) $</obj=$@ $(CFLAGS)

