<document output="envision" title="Code Browsing and Navigation">
	<meta_data>
		<help>
			<toc>
				<envision_title>Code Browsing and Navigation</envision_title>
				<envision_pseudo_name>00</envision_pseudo_name>
			</toc>
			<xml>
				<keyword>
					<index>A</index>
					<term>eevsEiffelEditorCodeBrowsing</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>Editor, Code Browsing and Navigation</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>Eiffel Editor, Code Browsing and Navigation</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>Code Browsing and Navigation</term>
				</keyword>
			</xml>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>
			EiffelEnvision's <link><url>index.xml</url><label>Eiffel Editor</label></link> provides the same code browsing and navigation extensions to the Visual Studio .NET <help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				Core Editor
			</help_link> found in Microsoft languages such as <bold>Visual C#</bold>, <bold>Visual Basic .NET</bold> and <bold>Visual C++</bold>. This information in the documentation describes 
			the <link><url>index.xml</url><label>Eiffel Editor</label></link>'s extended set of code browsing and navigation features.
		</paragraph>
	
		<anchor>outlining_code</anchor>
		<heading>
			<size>2</size>
			<content>Outlining Code</content>
		</heading>
		<paragraph>
		The EiffelEnvision Eiffel editor supports and expands upon Visual Studio .NET core editor <help_link>
				<keywords>vxtskOutliningCode</keywords>
				<tab_index>0</tab_index>
			Outlining Code
		</help_link> abilities. By default, all <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*Eiffel classes</label>
			</link> are automatically outlined. This means that any edits made in the editor will automatically adjust the outline regions as you type. 
			There are a number of outlining options available from the editor <bold>Outlining</bold> context submenu. Please refer to the <help_link>
				<keywords>vxtskOutliningCode</keywords>
				<tab_index>0</tab_index>
			Outlining Code
		</help_link> documentation, in the <bold>Outlining</bold> context submenu, for an explanation of each of the code outlining functions.
		</paragraph>
		<paragraph>
			The Eiffel editor provides a special operation for the <bold>Collapse to Definitions</bold> outlining function. Instead of simply collapsing 
			the code to the signature definitions, as in many other language editors in Visual Studio .NET, the Eiffel editor retains any <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*preconditions</label>
			</link> and obsolete messages. <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*Preconditions</label>
			</link> and obsolete messages are retained because of their considered importance to the feature as code documentation.
		</paragraph>
		
		<anchor>feature_list</anchor>
		<heading>
			<size>2</size>
			<content>Feature Drop Down List</content>
		</heading>
		<paragraph>
			When editing <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*Eiffel classes</label>
			</link>, a feature drop down list will appear at the top at the top of the editor, containing a list of features currently in the class in view. 
			For every feature, there is an associated icon indicating the declared <link><url>feature_type_icons</url><label>*feature type</label></link>. 
			The feature list acts as an index for the code. Selecting a feature from the list will cause the editor to jump and center the view on the associated feature.
		</paragraph>
		<paragraph>
			When editing or browsing the Eiffel code, the feature list will update itself to indicate where the caret is currently positioned in the editor. If the visible list item 
			becomes gray, this is an indication that the caret is between feature declarations and cannot associate a feature with it. If the editor caret is currently positioned inside of 
			a feature declaration, the feature's name will be an active item in the features list.
		</paragraph>
		<paragraph>
			As a final note, the features list is updated in real-time, so changing any feature's name or its declaration type will immediately be reflected in the list. 
		</paragraph>
		
		<anchor>go_to_definition</anchor>
		<heading>
			<size>2</size>
			<content>Go To Definition</content>
		</heading>
		<paragraph>
				For <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*Eiffel classes</label>
			</link> opened in <link>
				<url>index.xml</url>
				<anchor_name>project_editing</anchor_name>
				<label>*project associated editing</label></link> mode (opened from within an EiffelEnvision project), <bold>Go To Definition</bold> (shortcut <bold>F12</bold>) will be available from the 
				Eiffel editor context menu. Go to definition attempts to locate an Eiffel definition for a <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>feature</anchor_name>
				<label>*feature</label>
			</link> or <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*class</label>
			</link> under the editor's caret. Selecting to go to a definition will produce one of 3 outcomes.
			<list ordered="false">
				<item>An Eiffel definition will be located; the class file will be opened and the located feature highlighted, in the editor.</item>
				<item>The located definition was from a .NET assembly; the <link><url>t</url><label>*Object Browser</label></link> will be opened and the definition expanded and centered in view.</item>
				<item>No definition could be found.</item>
			</list>
		</paragraph>
		<paragraph>
			There are many reasons why go to definition may not find the definition you requested.
			<list ordered="false">
				<item>Check the class you are trying to perform the go to definition action on for syntax errors.</item>
				<item>Check if the class you are trying to perform the go to definition action on has been compiled into the project on the last <link><url>url</url><label>*build</label></link>.</item>
				<item>The expression may be too complex to efficiently extract a definition from.</item>
			</list>
			
		</paragraph>
		
		<anchor>sync_class_view</anchor>
		<heading>
			<size>2</size>
			<content>Synchronize Class View</content>
		</heading>
		<paragraph>
			For <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*Eiffel classes</label>
			</link> opened in <link>
				<url>index.xml</url>
				<anchor_name>project_editing</anchor_name>
				<label>*project associated editing</label></link> mode (opened from within an EiffelEnvision project), <bold>Synchronize Class View</bold> will be available from the 
				Eiffel editor context menu. Synchronize Class View attempts to locate the feature at the caret's current position in the <help_link>
					<keywords>vxurfClassViewWindow</keywords>
					<tab_index>0</tab_index>
					Class View
				</help_link>. 
				
				<note>
					<bold>Note</bold>: The class view is a compiled representation of your project(s). This means synchronizing with the <help_link>
					<keywords>vxurfClassViewWindow</keywords>
					<tab_index>0</tab_index>
					Class View
				</help_link> will not synchronize for any features added and not compiled into your project.
				</note>
		</paragraph>

		<anchor>see_also</anchor>
		<heading>
			<size>2</size>
			<content>Related Section</content>
		</heading>
		<seealso>
			<bold>See also</bold>:
			<line_break/>
			<link>
				<url>intellisense.xml</url>
				<label>Intellisense and Completion</label>
			</link>
			<line_break/>
			<help_link>
				<keywords>vxurfVisualStudio70DefaultShortcutKeys</keywords>
				<tab_index>0</tab_index>
				Default Settings Shortcut Keys
			</help_link>
			<line_break/>
			<link>
				<url>index.xml</url>
				<label>Eiffel Editor</label>
			</link>
			<line_break/>
			<link>
				<url>../code_browsing/index.xml</url>
				<label>Navigating and Browsing Code</label>
			</link>
			<line_break/>
			<link>
				<url>t</url>
				<label>*Eiffel the Language</label>
			</link>
		</seealso>
	</paragraph>
</document>
