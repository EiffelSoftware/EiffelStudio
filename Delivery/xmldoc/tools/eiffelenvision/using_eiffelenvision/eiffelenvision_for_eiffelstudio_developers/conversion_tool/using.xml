<document output="envision" title="Using the EiffelStudio Project Conversion Tool">
	<meta_data>
		<help>
			<toc>
				<envision_title>Using the EiffelStudio Project Conversion Tool</envision_title>
				<envision_pseudo_name>20</envision_pseudo_name>
			</toc>
			<xml>
				<keyword>
					<index>K</index>
					<term>Projects, Converting EiffelStudio projects</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>EiffelStudio Project Conversion Tool, Using</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>Tools, EiffelStudio Project Conversion Tool</term>
				</keyword>
			</xml>
		</help>
	</meta_data>
	<paragraph>This section contains documentation on the 
		<bold>EiffelStudio Project Conversion Tool</bold> installed with EiffelEnvision.
		
		<anchor>requirements</anchor>
		<heading>
			<size>2</size>
			<content>Requirements</content>
		</heading>
		<paragraph>
			For successful conversions, the EiffelStudio conversion tool requires that EiffelEnvision 2.5 be installed and that the integrity of the project you are attempting to convert be sound. The project must have also been written for Eiffel Software's EiffelStudio 5.4 or better.
		</paragraph>
		
		<anchor>getting_started</anchor>
		<heading>
			<size>2</size>
			<content>Getting Started</content>
		</heading>
		<paragraph>For information on how to access the 
			<bold>EiffelStudio Project Conversion Tool</bold> please refer to the 
			<link>
				<url>accessing.xml</url>
				<label>Accessing the EiffelStudio Project Conversion Tool</label>
			</link> section of this documentation.
		</paragraph>
		<paragraph>The conversion tool works in a similar way to application wizards found in many Microsoft Windows applications. The conversion tool, however, provides direct access to each page of the wizard through tabs, while providing wizard like functionality through the ubiquitous 
			<bold>Next</bold> and 
			<bold>Back</bold> buttons. Starting the tool by any of the appropriate means will display the tool with the 
			<link>
				<url>#project_settings</url>
				<label>Project Settings</label>
			</link> tab page active. To exit the tool at any time, click the 
			<bold>Exit</bold> button.
		</paragraph>
		
		<anchor>unmanaged_resources</anchor>
		<heading>
			<size>2</size>
			<content>Notes on Unamanged Windows Resources</content>
		</heading>
		<paragraph>EiffelEnvision handles the location of unmanaged resources very differently then EiffelStudio. EiffelStudio takes Resource Scripts (*.rc) from the project compilation location, whereas EiffelEnvision introduces the 
			<bold>resource</bold> folder. Please see the 
			<link>
				<url/>
				<label>*Unamanged Code</label>
			</link> section of this documentation for more information on the resource folder. The conversion tool does not modify or move any of the original EiffelStudio project files, ensuring the project can still be compiled in EiffelStudio after the conversion process. Because of this, using unmanaged resources in EiffelEnvision requires you to create the 
			<bold>resource</bold> folder and add all relevant resources into it prior to converting the project. These resources include the project resource script, header files (*.h) and any referenced resource in the resource script. You may optionally rename the resource script to 
			<bold>app.rc</bold> from 
			<italic>system_name</italic>.rc, where 
			<italic>system_name</italic> is the system name given to your EiffelStudio project. Changing the name will ensure that once you change the 
			<link>
				<url/>
				<label>*Assembly Name</label>
			</link> property in EiffelEnvision, the unmanaged resources will still be available without having to rename the resource script to the new assembly 
			<bold>name</bold>.
		</paragraph>
		
		<anchor>errors</anchor>
		<heading>
			<size>2</size>
			<content>Input Errors</content>
		</heading>
		<paragraph>
			Entry errors in the tool are indicated by highlighting the problematic section. Any errors in any of the tab pages will prevent a conversion from taking place until they have been adjusted. Below shows an example of a specified ace file, in the 
			<link>
				<url>#project_settings</url>
				<label>Project Settings</label>
			</link> tab page, that does not exist.
			<paragraph>
				<image>
					<url>/03_eiffelstudio_developers\10_eiffelstudio_conversion_tool\images\aceimp_error.png</url>
				</image>
			</paragraph>
			Entering a file which does not exist in the 'Project ace file' indicates that there is problem with the specified file name.
		</paragraph>
		
		<anchor>project_settings</anchor>
		<heading>
			<size>2</size>
			<content>Project Settings Tab</content>
		</heading>
		<paragraph>The first of the tool conversion configuration pages displayed is the Project Settings page. From here you'll be able to specify the EiffelStudio project ace file to import into EiffelEnvision and optionally specify a project source location.</paragraph>
		<image>
			<url>/03_eiffelstudio_developers\10_eiffelstudio_conversion_tool\images\aceimp_settings.png</url>
		</image>
		<paragraph>If you opted to run the tool from the Start Menu you will need to specify an ace file manually otherwise the ace file and its location will be used to automatically populate the 
			<bold>Project ace file</bold> and 'Root source path' fields.
		</paragraph>
		<paragraph>The 
			<bold>Project ace file</bold> field is the location of the ace file that will be converted into an EiffelEnvision project file. As indicated in the requirements, the selected ace file must be an ace file written for EiffelStudio 5.4 or better. This field must be valid and correct for a successful import.
			<line_break/>Using the adjacent browse button will display a Windows file browser dialog requesting you specify the ace file to be used with the tool.
		</paragraph>
		<paragraph>
			<bold>Root source path</bold> is an optional field and indicates your project's specified root source location. That is to say, the location where all of the project specific Eiffel source files are located. Not specifying a location in this field will assume all project specific files are under the same location where the specified project ace file is located. This information is required by the tool to cleanly separate clusters into Project Item (classes and files that are the project) and Eiffel Libraries (clusters that have already been written and are reused by the project, located outside of the project's root source location) as is distinguished in all EiffelEnvision projects.
		</paragraph>
		<paragraph>Using the adjacent browse button will display a Windows folder browser dialog requesting that you specify the root source path to use when converting the EiffelStudio project ace file.
			<paragraph/>Clicking the 
			<bold>Next</bold> button will take you to the 
			<link>
				<url>#environment</url>
				<label>Environment</label>
			</link> tab page.
		</paragraph>

		<anchor>environment</anchor>
		<heading>
			<size>2</size>
			<content>Environment Tab</content>
		</heading>
		<paragraph>For successful conversions it 
			<italic>may</italic> be required for you to select which version of EiffelStudio was last used to compile the specified project. 
		</paragraph>
		<paragraph>
			<image>
				<url>/03_eiffelstudio_developers\10_eiffelstudio_conversion_tool\images\aceimp_environment.png</url>
			</image>
		</paragraph>
		<paragraph>The drop-down list contains only those versions of EiffelStudio present, and correctly installed, on your system. If you are unsure of the version of EiffelStudio used, leaving the option as 
			<bold>Auto-Select</bold> will enable the tool to automatically select a version for you.
		</paragraph>
		<paragraph>Clicking the 
			<bold>Next</bold> button will take you to the 
			<link>
				<url>#sta</url>
				<label>Single Threaded Apartment</label>
			</link> tab page.
		</paragraph>

		<anchor>sta</anchor>
		<heading>
			<size>2</size>
			<content>Single Threaded Apartment (STA) Tab</content>
		</heading>
		<paragraph>The conversion tool is able to handle many different types of EiffelStudio project files. It can convert classic Eiffel projects for Windows or other platforms and Eiffel for .NET projects into an EiffelEnvision project. In all of these cases, even for Eiffel for .NET projects, it may be necessary to generate a Single Threaded Apartment (STA) root class for compatibility.</paragraph>
		<note>
			<bold>Note: </bold>If your project already starts execution within a STA, there is no need to generate an STA root class. If this is the case skip to the final 
			<link>
				<url>#output</url>
				<label>Output</label>
			</link> tab page.
		</note>
		<paragraph>If your project makes use of a Graphical User Interface (GUI) library, whether it be Eiffel Software's 
			<bold>Windows Eiffel Library (WEL)</bold> or 
			<bold>EiffelVision2</bold>, Microsoft's 
			<bold>Windows Forms</bold> or any third party GUI library, it is recommended that the application executes in a STA. If your existing EiffelStudio project is a classic Eiffel project and uses a GUI then it is highly recommended you select the option 
			<bold>Generate STA class</bold>. If your project is an Eiffel for .NET project, once converted into an EiffelEnvision project, it will, once compiled, execute nominally. However, if you plan to use aspects of a GUI, such as the Windows file and folder browser dialogs, or even decide to target older versions of the Windows operating system that support the .NET framework, a STA root class will be required.
		</paragraph>
		<note>
			<bold>Note: </bold>Requiring execution within an STA is not specific to Eiffel for .NET or EiffelEnvision. This is applicable to all languages targeting .NET.
		</note>
		<paragraph>
			<image>
				<url>/03_eiffelstudio_developers\10_eiffelstudio_conversion_tool\images\aceimp_sta.png</url>
			</image>
		</paragraph>
		<paragraph>Selecting the option 
			<bold>Generate STA class</bold> will enable the STA Options further down the page.
		</paragraph>
		<paragraph>By default 
			<bold>Automatically generate a STA class name</bold> will be selected. Automatically selecting this option will generate a class name based on the existing EiffelStudio project root class. Unselecting this option will enable the 
			<bold>Class Name</bold> field allowing you to specify a class name manually. Failure to supply a valid Eiffel class name in the 
			<bold>Class Name</bold> field will prevent conversion.
		</paragraph>
		<paragraph>Clicking the 
			<bold>Next</bold> button will take you to the final 
			<link>
				<url>#output</url>
				<label>Output</label>
			</link> tab page.
		</paragraph>

		<anchor>output</anchor>
		<heading>
			<size>2</size>
			<content>Output Tab</content>
		</heading>
		<paragraph>This tab is the final page in the tool. At this stage the 
			<bold>Convert</bold> button will appear, and if there are no input related errors in any of the previous pages, will be enabled and ready to use.
		</paragraph>
		<paragraph>
			<image>
				<url>/03_eiffelstudio_developers\10_eiffelstudio_conversion_tool\images\aceimp_output.png</url>
			</image>
		</paragraph>
		<paragraph>By default the 
			<bold>Launch Visual Studio .NET</bold> option will be selected. If selected, on a successful conversion the tool will launch Visual Studio .NET with the generated EiffelEnvision project file.
		</paragraph>
		<paragraph>To begin the conversion process click 
			<bold>Convert</bold>. The entire process takes only a matter of seconds, and once started the 
			<bold>Output</bold> box will be populated with the report indicating what environment variables are being used, the file(s) that are being generated and the final success or failure of the conversion process. Failures will always be accompanied by a reason for the failure.
		</paragraph>
		<paragraph>
			On a successful conversion the generated EiffelEnvision project file can be located in the specified <link><url></url><label>Root source path</label></link> location in the <link><url></url><label>Project Settings</label></link> tab page. If no root source path was specified, the generated project file will be located in the same location as the specified EiffelStudio project ace file.
		</paragraph>

		<anchor>tool_produce</anchor>
		<heading>
			<size>2</size>
			<content>What the Tool Will Produce</content>
		</heading>
		<paragraph>
			The tool will produce two output files. The primary output is the EiffelEnvision project file (*.eifp). This will be given the name of the specified EiffelStudio project system name, extended with .eifp. The other product is a by-product of the tool, a duplicate of the original ace file with an .aceimp extension. This version of the ace file is a modified version of the specified ace file and contains manipulated project configuration settings. If you were importing a classic Eiffel project, congratulations, you now can use the aceimp ace file to compile your project for .NET in EiffelStudio.
		</paragraph>
		<paragraph>
			As stated, the tool is able to determine if the specified EiffelStudio project ace file is either a classic Eiffel or Eiffel for .NET project. If the project is a classic Eiffel project then the appropriate clusters and externals will be added to the project to ensure it compiles under EiffelEnvision. For all projects, when deemed compatible, one of the precompiled libraries installed with EiffelEnvision will be used to significantly increase compile times.
		</paragraph>

		<anchor>see_also</anchor>
		<heading>
			<size>2</size>
			<content>Related Sections</content>
		</heading>
		<seealso>
			<bold>See also</bold>:
			<line_break/>
			<link>
				<url>..\index.xml</url>
				<label>EiffelEnvision for EiffelStudio Developers</label>
			</link>
			<line_break/>
			<link>
				<url>acessing.xml</url>
				<label>Accessing the EiffelStudio Project Conversion Tool</label>
			</link>
			<line_break/>
			<link>
				<url></url>
				<label>*Configuring an EiffelEnvisio Project</label>
			</link>
		</seealso>
	</paragraph></document>
