<document title="Access Type" output="studio">
	<meta_data/>
	<paragraph>
		<heading>
			<size>1</size>Access Type
		</heading>Regardless of its location, a COM components can be accessed either directly through interface's virtual table or through OLE Automation. 
		<heading>
			<size>2</size>Automation
		</heading>Accessing a COM component through Automation means using a well known interface to access to a group of methods and properties. This interface is called IDispatch, and it includes the method 
		<code>
			<feature_name>invoke</feature_name>
		</code> that allows to call a method, set or get a property on the Automation server. One advantage of that approach is that the interface has a known virtual table layout. As a result, Windows can include a built-in marshaler for that interface (See 
		<link>
			<url>07_deeper_into_com.html#20493</url>
			<label>Marshaling</label>
		</link> for information on what a marshaler is). The supported types (known as Automation types) and their Eiffel equivalents are listed in the following table: The other advantage is a more dynamic discovery of the methods and properties of a component at runtime. Indeed the IDispatch interface also includes methods to check whether a method or property is available and, in that case, get its identifier. This process is called late binding and allows component to discover at runtime what are other components functionality. 
		<paragraph>This approach has also a lot of drawbacks: first, late binding is not an efficient way of calling a function on an interface since its identifier must first be requested and then the function called. That's two round trips which can be expensive in a distributed environment. Second, since the marshaler is built-in, it has to know in advance all the possible types that a function can accept to be able to marshal the corresponding data. There are consequently a limitation on the number of types that one can use in signatures of functions on an Automation compatible interface. The set of available types is called Variant and cover most of the standard types. It does not allow however the passing of complex user defined data types. For these reasons Automation is mostly used in scripting environments (where speed is not an important factor) to accomplish simple tasks. </paragraph>
		<heading>
			<size>2</size>Direct Access
		</heading>Direct interface access is the preferred way to access remote servers where speed becomes a concern and data types are specific to the application. The first interface pointer on the component is obtained through the class object (see 
		<link>
			<url>04_coclass.html#37472</url>
			<label>Class Object</label>
		</link> ). Other interfaces on the component are obtained by calling the QueryInterface function.  
		<paragraph>As information on any interface cannot be accessed dynamically, the description of the interfaces must be provided to tools that need to handle the components such as the EiffelCOM wizard. The official way of describing components and interfaces is through IDL. Once an IDL file has been written to describe a component it can be compiled with MIDL to generate both a type library and the code for the marshaller specific to that interface. </paragraph>
		<heading>
			<size>2</size>EiffelCOM
		</heading>The idea in EiffelCOM is the way a component is accessed is implementation detail that the user should not have to deal with. Of course he should be able to choose what kind of access he wants to use but this choice should have no impact on the design of the Eiffel system itself. For that reason, the Eiffel code generated by the wizard follows the same architecture independently of the choice made for interface access and marshalling. The difference lies in the runtime where the actual calls to the components are implemented. 
		<seealso>See Also 
			<line_break></line_break>
			<link>
				<url>../../tools/wizards/com/index.html</url>
				<label>EiffelCOM wizard</label>
			</link>
			<line_break></line_break>
			<link>
				<url>../../libraries/com/index.html</url>
				<label> EiffelCOM library</label>
			</link>
			<line_break></line_break>
			<link>
				<url>01_introduction.html</url>
				<label> Introduction</label>
			</link>
			<line_break></line_break>
			<link>
				<url>03_interfaces.html</url>
				<label> COM Interfaces</label>
			</link>
			<line_break></line_break>
			<link>
				<url>04_coclass.html</url>
				<label> Coclasses</label>
			</link>
			<line_break></line_break>
			<link>
				<url>05_component_location.html</url>
				<label> Component Location</label>
			</link>
			<line_break></line_break>
			<link>
				<url>06_access_type.html</url>
				<label> Access Type</label>
			</link>
			<line_break></line_break>
			<link>
				<url>07_deeper_into_com.html</url>
				<label> Deeper into COM</label>
			</link>
		</seealso>
	</paragraph>
</document>