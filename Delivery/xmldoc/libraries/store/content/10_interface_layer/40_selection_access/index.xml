<document output="studio" title="Selection Access">
	<meta_data/>
	<paragraph>
		<paragraph>Once you have 
			<link>
				<url>../30_database_selection/index.xml</url>
				<label>selected data</label>
			</link> from the database, it returns a set of rows containing queried columns values. Each row loaded with DB_SELECTION is stored in a DB_RESULT object. The easiest way to access the data is thus to refer to DB_RESULT objects themselves. 
		</paragraph>
		<note>
			<bold>Note</bold>: Take a look at the 
			<link>
				<url>../50_data_object_coupling/index.xml</url>
				<label>Database/Eiffel objects Coupling</label>
			</link> to learn advanced data handling features.
		</note>
		<paragraph>To use DB_RESULT, process in 2 steps:</paragraph>
		<list ordered="false">
			<item>
				<link>
					<url>#retrieve</url>
					<label>retrieve</label>
				</link> DB_RESULT objects.
			</item>
			<item>
				<link>
					<url>#access</url>
					<label>access</label>
				</link> DB_RESULT content. 
			</item>
		</list>
		<heading>
			<size>2</size>Retrieving DB_RESULT objects
		</heading>
		<paragraph><link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link> class provides different ways to customize result loading:</paragraph>
		<list ordered="false">
			<item>You want to access an 
				<bold>unique</bold> row: <link><url>/libraries/store/reference/interface/DB_RESULT_flatshort.html</url><label>DB_RESULT</label></link> object is accessible via cursor:
<code_block>
	<feature_name>selection</feature_name><symbol>:</symbol> <class_name>DB_SELECTION</class_name>
	<feature_name>my_result</feature_name><symbol>:</symbol> <class_name>DB_RESULT</class_name>
	...
	<feature_name>selection</feature_name>.<feature_name>query</feature_name> <symbol>(</symbol>"<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>"<symbol>)</symbol>
	<keyword>if</keyword> <feature_name>selection</feature_name>.<feature_name>is_ok</feature_name> <keyword>then</keyword>
		<feature_name>selection</feature_name>.<feature_name>load_result</feature_name>
		<feature_name>my_result</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>selection</feature_name>.<feature_name>cursor</feature_name>
	<keyword>end</keyword>
</code_block>
			</item>
			<item>You want to load a 
				<bold>complete list</bold> of rows: <link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link> can store <link><url>/libraries/store/reference/interface/DB_RESULT_flatshort.html</url><label>DB_RESULT</label></link> objects in a list. To do this, you have mainly to provide a LIST object to DB_SELECTION with set_container:
<code_block>
	<feature_name>selection</feature_name><symbol>:</symbol> <class_name>DB_SELECTION</class_name>
	<feature_name>container</feature_name><symbol>:</symbol> <class_name>ARRAYED_LIST</class_name> <symbol>[</symbol><class_name>DB_RESULT</class_name><symbol>]</symbol>
	<keyword>create</keyword> <feature_name>container</feature_name>.<feature_name>make</feature_name> <symbol>(</symbol><feature_name>Max_results</feature_name><symbol>)</symbol>
	...
	<feature_name>selection</feature_name>.<feature_name>set_container</feature_name> <symbol>(</symbol><feature_name>container</feature_name><symbol>)</symbol>
	...
	<keyword>from</keyword>
		<feature_name>container</feature_name>.<feature_name>start</feature_name>
	<keyword>until</keyword>
		<feature_name>container</feature_name>.<feature_name>after</feature_name>
	<keyword>loop</keyword>
		...
	<keyword>end</keyword>
</code_block>
				<tip>
					<bold>Tip</bold>: Provide <link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link> with the LIST structure convenient for what you need to do with the results.
				</tip>
			</item>
			<item>You want to 
				<bold>select part</bold> of the result set: you can set an action in <link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link> that will be executed each time a row is loaded. This action can for instance manipulate current row and define a stop condition. 
				<list ordered="false">
					<item>You need to define a descendant of class ACTION and set it to <link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link>:
<code_block>
	<keyword>class</keyword>
		<class_name>MY_ACTION</class_name>
	<keyword>inherit</keyword>
		<class_name>ACTION</class_name>
			<keyword>redefine</keyword>
				<feature_name>execute, found</feature_name>
			<keyword>end</keyword>
	...
	<feature_name>execute</feature_name> <keyword>is</keyword>
		<keyword>do</keyword>
			i <symbol>:</symbol><symbol>=</symbol> i <symbol>+</symbol> 1
		<keyword>end</keyword>
	...
	<feature_name>found</feature_name><symbol>:</symbol> <class_name>BOOLEAN</class_name> <keyword>is</keyword>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:</symbol><symbol>=</symbol> i ><symbol>=</symbol> <feature_name>Max_result</feature_name>
		<keyword>end</keyword>
</code_block>
					</item>
					<item>Then set action to <link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link>:
<code_block>
	<feature_name>selection</feature_name><symbol>:</symbol> <class_name>DB_SELECTION</class_name>
	<feature_name>action</feature_name><symbol>:</symbol> <class_name>MY_ACTION</class_name>
	...
	<feature_name>selection</feature_name>.<feature_name>set_action</feature_name> <symbol>(</symbol><feature_name>action</feature_name><symbol>)</symbol>
	<feature_name>selection</feature_name>.<feature_name>query</feature_name> <symbol>(</symbol>"<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>"<symbol>)</symbol>
	<keyword>if</keyword> <feature_name>selection</feature_name>.<feature_name>is_ok</feature_name> <keyword>then</keyword>
		<feature_name>selection</feature_name>.<feature_name>load_result</feature_name>
	<keyword>end</keyword>
</code_block>
					</item>
				</list>
			</item>
		</list>
		<heading>
			<size>2</size>Accessing content of DB_RESULT
		</heading>
		<paragraph>A DB_RESULT object merely carries data retrieved from the database. You have to convert it to a DB_TUPLE to access data within the retrieved row conveniently, i.e. mostly the column values:
<code_block>
	<feature_name>selection</feature_name><symbol>:</symbol> <class_name>DB_SELECTION</class_name>
	<feature_name>tuple</feature_name><symbol>:</symbol> <class_name>DB_TUPLE</class_name>
	...
	<keyword>create</keyword> <feature_name>tuple</feature_name>
	<feature_name>tuple</feature_name>.<feature_name>copy</feature_name> <symbol>(</symbol><feature_name>selection</feature_name>.<feature_name>cursor</feature_name><symbol>)</symbol>
	<keyword>if</keyword> <feature_name>tuple</feature_name>.<feature_name>count</feature_name> ><symbol>=</symbol> 2 <keyword>and</keyword> <keyword>then</keyword> <feature_name>tuple</feature_name>.<feature_name>column_name</feature_name> <symbol>(</symbol>2<symbol>)</symbol><feature_name></feature_name>.<feature_name>is_equal</feature_name> <symbol>(</symbol><string>"Firstname"</string><symbol>)</symbol> <keyword>then</keyword>
		<feature_name>io</feature_name>.<feature_name>putstring</feature_name> <symbol>(</symbol><feature_name>tuple</feature_name>.<feature_name>item</feature_name> <symbol>(</symbol>2<symbol>)</symbol><feature_name></feature_name>.<feature_name>out</feature_name><symbol>)</symbol>
	<keyword>end</keyword>
</code_block>
			<seealso>
				<bold>See Also</bold>
				<line_break/>
				<link>
					<url>../30_database_selection/index.xml</url>
					<label>Performing a database selection.</label>
				</link>
				<line_break/>
				<link>
					<url>../50_data_object_coupling/index.xml</url>
					<label>Coupling database data and Eiffel objects.</label>
				</link>
				<line_break/>
			</seealso>
		</paragraph>
	</paragraph></document>
