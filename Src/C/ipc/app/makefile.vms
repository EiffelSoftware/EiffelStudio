########################################################################
# Makefile.VMS generated from Makefile.SH on Fri Nov 18 08:53:49 PST 1994
#   .../C/ipc/app/makefile
# $Id$

SHELL = /bin/sh
JMAKE = jmake
#TOP = [--]
CURRENT = [.ipc.app]
DIR = [ipc.app]

########################################################################
# Parameters set by Configure -- edit config.sh if changes are needed

#CC = cc
CTAGS = ctags
JCFLAGS = $(CFLAGS) /jcflag
LD = ld
MAKE = make
MKDEP = /home/tomh/Eiffel3/C/mkdep $(DPFLAGS) --
MV = move
RM = delete/log
SED = /bin/sed

########################################################################
# Automatically generated parameters -- do not edit

SOURCES =  $(LIB)

########################################################################
# New suffixes and associated building rules -- edit with care

.c.o:
#	$(RM) $@
#	$(CC) /names=as_is /prefix=all /def=workbench $<
	$(CC) /moose /prefix=all /def=workbench $<



########################################################################
# Jmake rules for building libraries, programs, scripts, and data files
# $X-Id: Jmake.rules,v 3.0 1993/08/18 12:04:14 ram Exp $

########################################################################
# Force 'make depend' to be performed first -- do not edit

.FORCE_DEPEND::

all :: .FORCE_DEPEND

########################################################################
# Start of Jmakefile

# define vms specific symbols for compiling, etc.
#include $(TOP)makeinc.vms
include [-]makeinc.vms		# ipc common definitions

# to compile for debugging, say	    make <target> "DEBUG_CFLAGS=/debug/noopt"
# to compile for distribution, say  make <target> "DEBUG_CFLAGS="
#                              or   make <target> "DEBUG_CFLAGS=/opt"

#DPFLAGS = /Inc=($(TOP),$(LIBDIR),$(LIBRUN),$(LIBIDR))/prefix=all/names=as_is
#CFLAGS = $(DPFLAGS) /Def=WORKBENCH $(DEBUG_CFLAGS)
#LDFLAGS = $(LIBARCH)
#LDFLAGS = $(LIBDIR)$(LIBNAME)
CINCLUDES = /INCL=($(TOP),$(LIBDIR),[--.run-time],[--.run-time.include],$(LIBIDR))
CINCLUDES = /INCL=($(DECC_INCLUDES),$(LIBDIR),[--.run-time],[--.run-time.include],$(LIBIDR))
LOCAL_CDEFINES = WORKBENCH,EIF_IPC
ifneq ($(LOCAL_CDEFINES),)
ifneq ($(IPC_CDEFINES),)
CDEFINES = /DEF=($(LOCAL_CDEFINES),$(IPC_CDEFINES))
else
CDEFINES = /DEF=($(LOCAL_CDEFINES))
endif
else
ifneq ($(IPC_CDEFINES),)
CDEFINES = /DEF=($(IPC_CDEFINES))
else
#CDEFINES = 
endif
endif

DPFLAGS = $(CINCLUDES)$(CDEFINES)
CFLAGS = $(DECC_FLAGS)$(DPFLAGS)


# Files used to build the application
LIB = app_listen.c app_proto.c app_server.c

# Derived object file names
#OBJ = \
	app_listen.obj \
	app_proto.obj \
	app_server.obj 

# Derived library object file names
#LOBJ = \
	app_listen.obj \
	app_proto.obj \
	app_server.obj 

OBJ = $(patsubst %.c,%.obj,$(LIB))
#OBJ_CS = $(patsubst %.c,%.obj_cs,$(LIB))
LOBJ = $(OBJ)

#$(OBJ) $(LOBJ) $(OBJ_CS) : $(LOCAL_MAKEFILE)   # make objects depend on this makefile 
$(OBJ) $(LOBJ) : $(LOCAL_MAKEFILE)   # make objects depend on this makefile 

all :: network.olb

#LOBJC = \
	app_listen.obj,\
	app_proto.obj,\
	app_server.obj 

# Where shared archive is located (path and name)
LIBDIR = [-.shared]
#LIBRUN = [--.run-time]
LIBIDR = [--.idrs]
LIBIDRNAME = idr.olb
LIBNAME = ipc.olb
#LIBWKBENCH = libwkbench.olb
LIBARCH = $(LIBDIR)$(LIBNAME)
LIBIDRARCH = $(LIBIDR)$(LIBIDRNAME)

# hack -- we really want the objects here, but olbs depend on objects
#SHARED_OBJ = $(LIBDIR)$(LIBNAME) #$(LIBIDR)$(LIBIDRNAME)

depend:: ../../mkdep

../../mkdep:
	@echo "You have to run Configure in $(TOP) first."; exit 1

depend::
	($(SED) '/^# DO NOT DELETE/q' Makefile && \
	$(MKDEP) $(SOURCES) | \
	$(SED) 's/: \.\//: /; /\/usr\/include/d' \
	) > Makefile.new
	cp Makefile Makefile.bak
	cp Makefile.new Makefile
	$(RM) Makefile.new

all:: $(OBJ)

listings : $(patsubst %.c,%.lis,$(SOURCES))

show_decc :
	@write sys$$output "DECC_FLAGS=$(DECC_FLAGS)"

local_realclean::
#	$(RM) $(OBJ)
	-delete/log *.obj;*,*.dia;*

.FORCE:

$(LIBDIR)$(LIBNAME): .FORCE
	@echo "Checking $(LIBNAME) in $(LIBDIR)..."
#	cd $(LIBDIR); $(MAKE) $(LIBNAME)
#	@\@[-.shared]make.com $(LIBDIR)$(LIBNAME)
	\@[c]make.vms $(LIBDIR)$(LIBNAME)
	@echo "Continuing in $(CURRENT)..."

network.olb:: $(LIBDIR)$(LIBNAME)

$(LIBIDR)$(LIBIDRNAME): .FORCE
	@echo "Checking $(LIBIDRNAME) in $(LIBIDR)..."
#	cd $(LIBIDR); $(MAKE) $(LIBIDRNAME)
#	@\@idrs:make.com $(LIBIDR)$(LIBIDRNAME)
#	@\@[--.idrs]make.com $(LIBIDR)$(LIBIDRNAME)
	@\@[c]make.vms $(LIBIDR)$(LIBIDRNAME)
	@echo "Continuing in $(CURRENT)..."

network.olb:: $(LIBIDR)$(LIBIDRNAME)

# target for local objects
local :: $(LOBJ)

local_realclean::
#	$(RM) network.olb
	-delete/log *.olb;*

#network.olb : $(LOBJ)
network.olb : $(LOBJ) $(LIBARCH) $(LIBIDRARCH)
#	$(RM) $@
#	$(LD) $(JLKFLAGS) -r $(LOBJ) -o $@ $(LIBARCH) $(LIBIDRARCH)
#	libr/create $@  $(LOBJC), $(LIBDIR)*.OBJ, $(LIBIDR)*.OBJ
#	libr/create $@  $^, $(LIBDIR)*.obj, $(LIBIDR)*.obj
	libr/create $@  *.obj
	libr/insert $@  $(LIBDIR)*.obj, $(LIBIDR)*.obj

########################################################################
# Common rules for all Makefiles -- do not edit

emptyrule::

clean: local_clean
realclean: local_realclean
clobber: local_clobber

local_clean::
#	$(RM) core *~ *.o
	-delete/nolog *.obj;*,*.dia;*

local_realclean:: local_clean

local_clobber:: local_realclean
	$(RM) Makefile config.sh

Makefile.SH: Jmakefile
	-@if test -f $(TOP)/.package; then \
		if test -f Makefile.SH; then \
			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
		fi; \
		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
	else touch $@; exit 0; fi

Makefile: Makefile.SH
	/bin/sh Makefile.SH

tags::
	$(CTAGS) -w *.[ch]
	$(CTAGS) -xw *.[ch] > tags

local_clobber::
	$(RM) tags

########################################################################
# Empty rules for directories with no sub-directories -- do not edit

install::
	@echo "install in $(CURRENT) done."

deinstall::
	@echo "deinstall in $(CURRENT) done."

install.man::
	@echo "install.man in $(CURRENT) done."

deinstall.man::
	@echo "deinstall.man in $(CURRENT) done."

Makefiles::

Makefiles.SH::

########################################################################
# Dependencies generated by make depend
# DO NOT DELETE THIS LINE -- make depend relies on it
app_listen.obj : app_listen.c
app_listen.obj : ../../eif_config.h
app_listen.obj : ../../eif_portable.h
app_listen.obj : ../../eif_confmagic.h
app_listen.obj : proto.h
app_listen.obj : ../shared/select.h
app_listen.obj : ../shared/ewbio.h
app_listen.obj : ../shared/stream.h
app_proto.obj : app_proto.c
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../eif_confmagic.h
app_proto.obj : ../../run-time/include/rt_err_msg.h
app_proto.obj : ../shared/request.h
app_proto.obj : ../shared/rqst_const.h
app_proto.obj : ../shared/stack.h
app_proto.obj : ../../run-time/eif_except.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_malloc.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_garcol.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_struct.h
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_plug.h
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_interp.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_struct.h
app_proto.obj : ../shared/rqst_idrs.h
app_proto.obj : ../../idrs/idrs.h
app_proto.obj : ../shared/com.h
app_proto.obj : ../shared/stream.h
app_proto.obj : ../shared/transfer.h
app_proto.obj : ../shared/ewbio.h
app_proto.obj : ../shared/stack.h
#app_proto.obj : ../../idrs/idrf.h
app_proto.obj : ../../idrs/idrs.h
app_proto.obj : ../../run-time/eif_debug.h
app_proto.obj : ../../run-time/eif_except.h
app_proto.obj : server.h
app_proto.obj : ../../run-time/eif_interp.h
app_proto.obj : ../shared/select.h
app_proto.obj : ../../run-time/eif_hector.h
app_proto.obj : ../../run-time/eif_cecil.h
app_proto.obj : ../../run-time/eif_plug.h
app_proto.obj : ../../run-time/eif_garcol.h
app_proto.obj : ../../run-time/eif_bits.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_plug.h
app_proto.obj : ../../run-time/eif_eiffel.h
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../run-time/eif_out.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_file.h
app_proto.obj : ../../run-time/eif_macros.h
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../run-time/eif_malloc.h
app_proto.obj : ../../run-time/eif_garcol.h
app_proto.obj : ../../run-time/eif_except.h
app_proto.obj : ../../run-time/eif_local.h
app_proto.obj : ../../run-time/eif_copy.h
app_proto.obj : ../../eif_portable.h
app_proto.obj : ../../run-time/eif_plug.h
app_proto.obj : ../../run-time/eif_hector.h
app_proto.obj : ../../run-time/eif_size.h
app_proto.obj : ../../eif_config.h
app_proto.obj : ../../run-time/eif_dir.h
app_proto.obj : ../../run-time/eif_macros.h
app_proto.obj : ../../run-time/eif_macros.h
app_server.obj : app_server.c
app_server.obj : ../../eif_config.h
app_server.obj : ../../eif_portable.h
app_server.obj : ../../eif_confmagic.h
app_server.obj : proto.h
app_server.obj : ../shared/ewbio.h
app_server.obj : ../shared/stream.h
app_server.obj : ../shared/transfer.h
app_server.obj : ../shared/eif_logfile.h
app_server.obj : ../shared/rqst_const.h
