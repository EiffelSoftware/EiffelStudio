<?xml version="1.0"?>

<project name="_HELPERS_" default="do_not_call">
	<description>
		description: "helper target"
		author: "Jocelyn Fiat and others"
	</description>

	<inherit>
		<parent location="${_HELPERS_.absdir}${path_separator}_common_.eant" />
	</inherit>

	<target name="made_file_executable" unless="${is_windows}" >
		<argument name="a_filename" />
		<exec executable="chmod 755 ${a_filename}" accept_errors="true" exit_code_variable="no_return_code" />
		<unset name="no_return_code" />
	</target>

	<target name="install__file" >
		<argument name="a_from_dir" />
		<argument name="a_to_dir" />
		<argument name="a_name" />
		<geant target="install__file_as" arguments="$a_from_dir,$a_to_dir,$a_name,$a_name,false" />
	</target>
	<target name="install__exec_file" >
		<argument name="a_from_dir" />
		<argument name="a_to_dir" />
		<argument name="a_name" />
		<geant target="install__file_as" arguments="$a_from_dir,$a_to_dir,$a_name,$a_name,true" />
	</target>

	<target name="install__file_as" >
		<argument name="a_from_dir" />
		<argument name="a_to_dir" />
		<argument name="a_name" />
		<argument name="a_new_name" />
		<argument name="a_is_executable" />

		<available dir="${a_from_dir}" resource="${a_name}" variable="tmp_available"/>
		<geant target="_log" arguments="- Install file [${a_from_dir}${path_separator}${a_name}] to [${a_to_dir}${path_separator}${a_new_name}]" if="${tmp_available}=true"/>
		<geant target="_log" arguments="- File not found [${a_from_dir}${path_separator}${a_name}]" if="${tmp_available}=false"/>
		<copy dir="${a_from_dir}" file="${a_name}" to_file="${a_to_dir}${path_separator}${a_new_name}" if="${tmp_available}=true"/>

			<!-- executable property -->
		<set name="tmp_exec_available" value="$tmp_available" if="$a_is_executable" />
		<geant target="made_file_executable" arguments="${a_new_name}" dir="$a_to_dir" if="${tmp_exec_available}=true" />
		<unset name="tmp_exec_available" />

		<unset name="tmp_available" />
	</target>

	<target name="clean__folder" >
		<argument name="a_folder" />
		<geant target="_log" arguments="Cleaning folder: ${a_folder} ..." />
		<exec executable="rmdir /q/s ${a_folder}" 	accept_errors="true" exit_code_variable="return_code" if="${is_windows}" />
		<exec executable="\rm -rf ${a_folder}" 		accept_errors="true" exit_code_variable="return_code" unless="${is_windows}" />
		<unset name="return_code" />
	</target>

	<target name="clean__compile" >
		<argument name="a_folder" />
		<argument name="a_target" />
		<geant target="_log" arguments="Cleaning compilation ${a_folder}/EIFGENs/$a_target ..." />
		<exec executable="rmdir /q/s ${a_folder}\EIFGENs\${a_target}" 	accept_errors="true" exit_code_variable="return_code" if="${is_windows}" />
		<exec executable="\rm -rf ${a_folder}/EIFGENs/${a_target}" 		accept_errors="true" exit_code_variable="return_code" unless="${is_windows}" />
		<unset name="return_code" />
	</target>

	<target name="copy_full_tree">
		<!-- Tool to copy a full tree without .svn dirs -->
		<!-- Added, as geant copy does not copy empty directories *sigh* -->
		<!-- TODO: update, once it is possile to copy empty directories with geant copy -->
		<argument name="A_source_dir"/>
		<argument name="A_target_dir"/>
		
		<available resource="${A_source_dir}" variable="source_avail" />
		<echo message="${A_source_dir} missing, copy aborted" unless="${source_avail}=true" />
		<exit code="1" unless="${source_avail}=true" />
		<unset name="source_avail" />

		<!-- recreate the directory structure including empty folders -->
		<mkdir directory="${A_target_dir}"/>
		<exec executable="cd ${A_source_dir} ; find . \( -type d \! -name .svn -o \( -name .svn -prune \! -name .svn \) \) -exec 'mkdir' '-p' '${A_target_dir}/{}' ';'" unless="${is_windows}"/>
		<exec executable="xcopy /Y /T /E ${A_source_dir} ${A_target_dir}" if="${is_windows}"/>

		<!-- copy files -->
		<copy to_directory="${A_target_dir}" dir="${A_source_dir}">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>		
	</target>

	<target name="copy_library_to">
		<!-- Copy library '$EIFFEL_SRC/library/$A_lib_name' to '$A_target_dir/library/$A_lib_name' -->
		<argument name="A_lib_name"/>
		<argument name="A_target_dir"/>
		<geant target="copy_full_tree" arguments="${EIFFEL_SRC}${path_separator}library${path_separator}${A_lib_name},${A_target_dir}${path_separator}library${path_separator}${A_lib_name}"/>
	</target>

</project>
