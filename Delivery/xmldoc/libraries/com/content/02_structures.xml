<document output="studio" title="Structures">
	<meta_data/>
	<paragraph>
		<paragraph>
			The 
			<link>
				<url>../reference/Structures/index.xml</url>
				<label>Structures</label>
			</link> 
			cluster includes wrappers for data structures useful when using the COM technology.
		</paragraph>
		<heading>
			<size>2</size>ECOM_ARRAY
		</heading>
		<paragraph>
			ECOM_ARRAY is a multidimensional, resizable array. It is converted to SAFEARRAY at 
			the COM runtime level. Most languages only support SAFEARRAYs of OLE automation types.
		</paragraph>
		<heading>
			<size>2</size>ECOM_EXCEPTION
		</heading>
		<paragraph>
			ECOM_EXCEPTION provides support for triggering and catching exceptions. According to 
			the COM specification, every feature of a COM interface should return a status code of 
			type HRESULT. HRESULT is a 32 bit integer. The COM specification defines possible 
			exception codes and corresponding human-readable descriptions.
		</paragraph>
		<paragraph>
			The status code is mapped by the EiffelCOM runtime to Eiffel exceptions. To raise 
			COM-specific exceptions, the class ECOM_EXCEPTION provides the feature 
			<feature_name>trigger</feature_name>:
		</paragraph>
		<code_block>
			<feature_name>trigger</feature_name> <symbol>(</symbol>code<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> 
      		<comment>-- Raise exception with code `code'.</comment>
      		<comment>-- See class ECOM_EXCEPTION_CODES for possible values.</comment>
		</code_block>
		<paragraph>
			The class also has several features that help analyzing exceptions and error codes 
			received from the COM runtime.
		</paragraph>
		<code_block>
			<feature_name>hresult</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>  
       			<comment>-- Original HRESULT.</comment>
   		<keyword>require</keyword>
       			applicable<symbol>:</symbol> is_developer_exception

	<feature_name>hresult_code</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>  
       			<comment>-- Status code.</comment>
   		<keyword>require</keyword>
       			applicable<symbol>:</symbol> is_developer_exception

	<feature_name>hresult_facility</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
       			<comment>-- Facility code.</comment>
   		<keyword>require</keyword>
       			applicable<symbol>:</symbol> is_developer_exception

	<feature_name>hresult_message</feature_name><symbol>:</symbol> <class_name>STRING</class_name>
       			<comment>-- Error message.</comment>
   		<keyword>require</keyword>
       			applicable<symbol>:</symbol> is_developer_exception 
		</code_block>
		<paragraph>
			Every call to COM should be wrapped into a 
			<code>
				<keyword>rescue</keyword>
			</code> 
			clause as follows:
		</paragraph>
		<code_block>
	<feature_name>some_feature</feature_name> <keyword>is</keyword>
   		<keyword>local</keyword>
      			retried<symbol>:</symbol> <class_name>BOOLEAN</class_name>
      			...
   		<keyword>do</keyword>
        		<keyword>if</keyword> <keyword>not</keyword> retried <keyword>then</keyword>
            			<comment>-- Call to COM.</comment>
        		<keyword>end</keyword>
   		<keyword>rescue</keyword>
        		<keyword>if</keyword> is_developer_exception <keyword>then</keyword>
            			<comment>-- Compare `hresult' to some predefined value</comment>
            			<comment>-- and handle various cases,</comment>
            			<comment>-- or display a dialog box with an error message</comment>
            			<comment>-- `hresult_message'.</comment>
        		<keyword>end</keyword>
		        retried <symbol>:</symbol><symbol>=</symbol> True
		        <keyword>retry</keyword>
		<keyword>end</keyword>
		</code_block>
		<heading>
			<size>2</size>ECOM_STRUCTURE
		</heading>
		<paragraph>
			ECOM_STRUCTURE is a deferred class which inherits from WEL_STRUCTURE. 
			All wrappers of COM structures inherit from ECOM_STRUCTURE.
		</paragraph>
		<heading>
			<size>2</size>ECOM_VARIANT
		</heading>
		<paragraph>
			ECOM_VARIANT is a wrapper of the VARIANT structure. VARIANT is the Visual Basic equivalent to 
			Eiffel's <class_name>ANY</class_name>. In Visual Basic all variable types conform to VARIANT. 
			Since the semantics and runtime architecture of Visual Basic are different from those of Eiffel, 
			there is no simple way to map VARIANT to ANY. Instead, EiffelCOM provides an Eiffel wrapper around 
			the VARIANT structure.
		</paragraph>
		<paragraph>
			This wrapper exposes the feature
		</paragraph>
		<code_block>
	<feature_name>variable_type</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
        	<comment>-- Variable type. See class ECOM_VAR_TYPE for possible values. </comment>
		</code_block>
		<paragraph> 
			which specifies the actual type of the variant. The class has multiple features for typed access 
			and setting of variables. 
		</paragraph>
		<heading>
			<size>2</size>ECOM_VARIANT_ACCESS
		</heading>
		<paragraph>
			<class_name>ECOM_VARIANT_ACCESS</class_name> provides the feature:
		</paragraph>
		<code_block>
			  <feature_name>missing</feature_name><symbol>:</symbol> <class_name>ECOM_VARIANT</class_name>
					 <comment>-- Value representing the default value of a COM optional argument.</comment>
					 <comment>-- Equivalent to an omitted VB argument, or C++ vtMissing, or .NET System.Reflection.Missing.</comment>
		</code_block>
		<paragraph>
			Many COM Automation servers have routines that take arguments with default values. This is very common, 
			for example, in Microsoft Office applications such as Excel and Word. In Visual Basic, such arguments 
			are optional and, when omitted, the server uses the default value. In languages that cannot omit 
			arguments, a special VARIANT value representing the omitted argument must be passed. EiffelCOM 
			applications can pass missing for this purpose.
		</paragraph>
		<paragraph>
			For example, the following adds a new workbook to Excel. The default argument tells Excel to decide 
			for itself how many worksheets to put in the new workbook:
		</paragraph>
		<code_block>
			  <keyword>class</keyword>
					  <class_name>MY_EXCEL_APPLICATION</class_name>

			  <keyword>inherit</keyword>
					  <class_name>APPLICATION_PROXY</class_name>

					  <class_name>ECOM_VARIANT_ACCESS</class_name>

			  <keyword>feature</keyword>

					  <feature_name>add_workbook</feature_name> <keyword>is</keyword>
							  <keyword>local</keyword>
									  <local_variable>workbook</local_variable>: <class_name>WORKBOOK_PROXY</class_name>
							  <keyword>do</keyword>
									  <local_variable>workbook</local_variable> <symbol>:=</symbol> <feature_name>workbooks</feature_name><symbol>.</symbol><feature_name>add</feature_name> <symbol>(</symbol><feature_name>missing</feature_name><symbol>,</symbol> <number>0</number><symbol>)</symbol>
							  <keyword>end</keyword>
		</code_block>
	</paragraph>
</document>
