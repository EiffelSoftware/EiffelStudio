		local
			setup: INTEGER
		do
			if filename = Void or else filename.is_empty then
				bad_file ("Bad file " + filename)
				dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_INCOMPLETE, {TFTP_PACKET}.error, "Illegal file name in read request")
				terminate
			else
				setup := setup_file_reader
				if setup /= ERR_NO_ERROR then
					if setup /= ERR_NOT_DEFINED then
						send_packet (remote_address, remote_port, {TFTP_PACKET}.error,setup, "Could not open file.", rec)
					end
					dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_INCOMPLETE, {TFTP_PACKET}.error, fetch_error_message (setup, "Could not open file for read request"))
					terminate
 				else
					in_buffer := read_data(512)
					if in_buffer = Void then
						send_packet (remote_address, remote_port, {TFTP_PACKET}.error, Utility.ERR_NOT_DEFINED, "Could not read file " + filename, rec)
						dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_INCOMPLETE, {TFTP_PACKET}.error, "Could not open file for read request")
						terminate
					else
						dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_PROCESSING,{TFTP_PACKET}.rrq,filename)
					from
						done := False
					until
						done or else state = state_complete
					loop
						send_packet (remote_address, remote_port, Utility.DATA_PACKET, blockNumber,inBuffer,rec)
						-- Wait for response ack
						-- TODO Utility.receive (rec, ackPacket);
						-- TODO in_block_number = fetch_block_number (ackPacket.getData())
						-- TODO in_opcode = fetch_opcode (ackPacket.getData())
						if in_opcode = ERR_PACKET then
							iface.log_message (remote_address, 1, fetch_error_message (ackPacket.getData()))
								dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_INCOMPLETE, ERR_PACKET,
								fetch_error_message (ackPacket.getData()))
							terminate
						else
							if in_block_number /= block_number then
								dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_OUTOFORDER,inOpcode, "Received ACK packet #" + inBlockNumber + " instead of #" + blockNumber)
							end
						end
						server.sentData (inBuffer.length);
						if state = state_runt_packet then
							state := state_complete
						else
							-- Got it! Read more data
							rsize := read_available;
							inBuffer := readData(512);
							retransmits := 0;
							if rsize < 512 then
								state := state_runt_packet
							end
							block_number := (block_number + 1) \\ block_number_window
						end
						dispatch_tftp_event (remote_address, remote_port, {TFTP_EVENT}.REQUEST_COMPLETE, {TFTP_PACKET}.rrq, filename)
						terminate
					end
				end
			end
		end
