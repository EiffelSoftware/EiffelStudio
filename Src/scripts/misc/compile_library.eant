<?xml version="1.0"?>

<project name="compile_library" default="help">

	<description>
		description: "Clib library compilation"
		author: "Jocelyn Fiat and others"
	</description>

	<inherit>
		<parent location="${EIFFEL_SRC}/scripts/misc/_common_.eant">
			<redefine target="help"/>
		</parent>
	</inherit>
	
	<target name="help">
		<echo message="usage:"/>
		<echo message=" geant  compile_all" />
		<echo message=" ----" />
		<echo message=" geant  compile_library" />
		<echo message=" geant  compile_c_library" />
		<echo message=" geant  compile_eiffel_framework" />
		<echo message=" geant  compile_gobo_tools" />
	</target>	

	<!--
	**************************************************************************************
	***  C code preparation (compilation ...)                   **************************
	**************************************************************************************
	-->

	<target name="compile_all" depend="init">
		<geant target="compile_c_library" />
		<geant target="compile_library" />
		<geant target="compile_eiffel_framework" />
		<geant target="compile_gobo_tools" />
	</target>

		<!-- C_library -->
	<target name="compile_c_library" depend="init" if="${is_windows}" >

		<echo message="Compiler zlib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/C_library/zlib" if="${is_windows}" 
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compiler libpng" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/C_library/libpng" if="${is_windows}"
			accept_errors="true" exit_code_variable="return_code" />

	</target>

		<!-- library -->
	<target name="compile_library" depend="init">
		<echo message="Compile net clib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/net/Clib" 
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile vision2 clib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/vision2/Clib" 
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile wel clib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/wel/Clib" if="${is_windows}"
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile vision2/gtk clib" />
		<exec executable="finish_freezing -library" dir="${ISE_LIBRARY}/library/vision2/implementation/gtk/Clib" unless="${is_windows}" 
			accept_errors="true" exit_code_variable="return_code" />
	</target>

	<target name="compile_gobo_tools" depend="init" >
		<echo message="Compile Gobo Eiffel tools" />
		<set name="GOBO_LIB" value="${ISE_LIBRARY}/library/gobo" />
		<set name="GOBO_BIN" value="${GOBO_LIB}/spec/$ISE_PLATFORM/bin" />

		<mkdir directory="${GOBO_LIB}/spec" accept_errors="true" exit_code_variable="return_code" />
		<mkdir directory="${GOBO_LIB}/spec/$ISE_PLATFORM" accept_errors="true" exit_code_variable="return_code" />
		<mkdir directory="${GOBO_BIN}" accept_errors="true" exit_code_variable="return_code" />

		<set name="GOBO_COMP_DIR" value="${compile_dir}${path_separator}gobo" />
		<mkdir directory="${GOBO_COMP_DIR}" />

		<!-- geant -->
		<set name="GOBO_EXECNAME" value="geant"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gec -->
		<set name="GOBO_EXECNAME" value="gec"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gelex -->
		<set name="GOBO_EXECNAME" value="gelex"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- geyacc -->
		<set name="GOBO_EXECNAME" value="geyacc"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gelint -->
		<set name="GOBO_EXECNAME" value="gelint"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gepp -->
		<set name="GOBO_EXECNAME" value="gepp"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- getest -->
		<set name="GOBO_EXECNAME" value="getest"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gexace -->
		<set name="GOBO_EXECNAME" value="gexace"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />
		<!-- gexslt -->
		<set name="GOBO_EXECNAME" value="gexslt"/>
		<available resource="${GOBO_BIN}${path_separator}${GOBO_EXECNAME}${exe}" variable="tmp_available"/>
		<geant target="get_bin__gobo_exec" if="$tmp_available=false" reuse_variables="true" />

		<delete directory="${GOBO_COMP_DIR}" />
		<unset name="GOBO_COMP_DIR" />
		<unset name="GOBO_EXECNAME" />
		<unset name="GOBO_BIN" />
		<unset name="GOBO_LIB" />
	</target>

	<target name="get_bin__gobo_exec" >
		<set name="system_dir" value="${GOBO_COMP_DIR}" />
		<set name="system" value="${GOBO_EXECNAME}" />
		<set name="system_target" value="${GOBO_EXECNAME}" />
		<set name="system_ecf" value="${GOBO_LIB}${path_separator}src${path_separator}${system}.ecf" />
		<geant file="ise_eiffel.eant" target="finalize" reuse_variables="true" dir="${misc_dir}"  fork="false"/>
		<echo message="Error occurred during 'finalize_gobo_${system}' (${return_code})" unless="${return_code}=0" />
		<copy file="${system_dir}${path_separator}EIFGENs${path_separator}${system}${path_separator}F_code${path_separator}${system}${exe}" to_file="${GOBO_BIN}${path_separator}${system}${exe}" if="${return_code}=0" />
	</target>

	<target name="compile_eiffel_framework" depend="init" if="${is_windows}" >
		<echo message="Compile Eiffel framework externals lib" />
		<echo message="Compile dotnet IL runtime" />
		<exec executable="nmake /f Makefile" dir="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time" 
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile cli_writer" />
		<exec executable="finish_freezing -library" dir="${EIFFEL_SRC}\framework\cli_writer\Clib"
			accept_errors="true" exit_code_variable="return_code" />

		<echo message="Compile cli_debugger" />
		<exec executable="finish_freezing -library" dir="${EIFFEL_SRC}\framework\cli_debugger\Clib"
			accept_errors="true" exit_code_variable="return_code" />
	</target>

	
</project>
