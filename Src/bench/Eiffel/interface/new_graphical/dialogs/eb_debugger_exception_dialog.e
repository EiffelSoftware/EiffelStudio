indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	EB_DEBUGGER_EXCEPTION_DIALOG

inherit
	EB_DEBUGGER_EXCEPTION_DIALOG_IMP
		redefine
			default_create
		end

	EB_CONSTANTS
		export
			{NONE} all
		undefine
			default_create, copy
		end
		
	EB_FILE_DIALOG_CONSTANTS
		export
			{NONE} all
		undefine
			default_create, copy
		end
		

create
	make, default_create --, make_with_window

feature {NONE} -- Initialization

	make (a_exception_tag, a_exception_message: STRING) is
			-- Create Current with Exception message
		do
			default_create
			set_exception_tag (a_exception_tag)
			set_exception_message (a_exception_message)			
		end

	make_with_window (a_window: EV_DIALOG) is
			-- Create `Current' in `a_window'.
		require
			window_not_void: a_window /= Void
			window_empty: a_window.is_empty
			no_menu_bar: a_window.menu_bar = Void
		do
			window := a_window
			initialize
		ensure
			window_set: window = a_window
			window_not_void: window /= Void
		end

	default_create is
			 -- Create `Current'.
		do
			create window
			initialize
		ensure then
			window_not_void: window /= Void
		end

feature -- Show

	show_modal_to_window (w: EV_WINDOW) is
			-- Show modal to window
		do
			window.show_modal_to_window (w)
		end
		
feature -- Details

	set_exception_tag (t: STRING) is
			-- Set tag and refresh display
		do
			tag := t
			display_exception_tag_and_message
		end

	set_exception_message (t: STRING) is
			-- Set message and refresh display
		do
			message := t
			display_exception_tag_and_message
		end
		
	display_exception_tag_and_message is
		local
			s: STRING
		do
			s := ""
			if tag /= Void then
				s.append_string (tag)
				s.append_string ("%N%N")
			end
			if message /= Void then
				s.append_string (message)				
			end
			message_text.set_text (s)
			message_text.disable_edit
			message_text.set_background_color ((create {EV_STOCK_COLORS}).white)			
		end		

	set_details (d: STRING) is
			-- Add additional details
		do
			details_text.set_text (d)
			details_box.show
		end

feature {NONE} -- Initialization

	user_initialization is
			-- called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			window.set_size (400, 400)
			details_box.hide
			message_text.enable_word_wrapping
			message_text.disable_edit
			message_text.set_background_color ((create {EV_STOCK_COLORS}).white)			
		end

feature {NONE} -- Implementation

	tag, message: STRING

	save_exception_message is
			-- Save exception trace into a file
		local
			sfd: EV_FILE_SAVE_DIALOG
			text_file: PLAIN_TEXT_FILE
			retried: BOOLEAN
		do
			if not retried then
				create sfd
				set_dialog_filters_and_add_all (sfd, <<text_files_filter>>)
				sfd.show_modal_to_window (window)
				if not sfd.file_name.is_empty then
					create text_file.make_open_write (sfd.file_name)
					text_file.put_string (message)
					text_file.close
				end
			end
		rescue
			retried := True
			retry
		end
	
	close_dialog is
			-- Called by `select_actions' of `l_ev_button_2'.
		do
			window.destroy
		end
		
	set_wrapping_mode is
			-- Called by `select_actions' of `l_ev_check_button_1'.
		do
			if wrapping_button.is_selected then
				message_text.enable_word_wrapping
			else
				message_text.disable_word_wrapping				
			end
			message_text.disable_edit
		end	

end -- class EB_DEBUGGER_EXCEPTION_DIALOG

