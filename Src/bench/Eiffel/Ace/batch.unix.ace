--	$Id$	
system
	ec

root

	es: "make"

default
	assertion (require)
	assertion (ensure)
	assertion (check)
	console_application(yes)
	exception_trace (yes)
	dead_code_removal (yes)
	inlining (yes)
	inlining_size ("0")
	override_cluster ("override")

cluster
	override:		"$EIFFEL_SRC/Eiffel/override"

	all base:		"$EIFFEL_SRC/library/base"
		exclude
			"table"; "CVS"; 
		end

	table_eiffel_3:		"$EIFFEL_SRC/library/obsolete/base/table_eiffel3"

	all time:		"$EIFFEL_SRC/library/time"
		exclude
			"CVS"; "french"; "german"; 
		end

	beurk:		"$EIFFEL_SRC/Eiffel/beurk"

	compiler_support:		"$EIFFEL_SRC/Eiffel/support"

	all common:             "$EIFFEL_SRC/Eiffel/common"
         exclude
                 "CVS"; "external"; "compiler_override"; "error"; "types";
         end

	flat_short_b:		"$EIFFEL_SRC/Eiffel/flat_short/bench"

	all gobo:		"$EIFFEL_SRC/library/gobo/library"
		exclude
			"hact"; "se"; "ve"; "base"; "CVS"; "other";
		end

	all documentation:		"$EIFFEL_SRC/Eiffel/case/documentation"
		exclude
			"CVS"
		end

	all lace:		"$EIFFEL_SRC/Eiffel/lace"
		exclude
			"CVS"; 
		end

	all compiler:		"$EIFFEL_SRC/Eiffel/eiffel"
		exclude
			"CVS"; "com_il_generation"; "Clib"; "Core"; "junk"; "kernel"; "windows";
		end

	all compiler_api:		"$EIFFEL_SRC/Eiffel/API"
		exclude
			"CVS"; "structured_text";
		end

	all eiffel_structured_text:	"$EIFFEL_SRC/Eiffel/API/structured_text"
		exclude
			"CVS"; "common"
		end

	all common_structured_text:	"$EIFFEL_SRC/library/editor/text_window/text/structure/structured_text/common"
		exclude
			"CVS"; "text_formatter.e"; "structured_text.e";
		end

	switch:		"$EIFFEL_SRC/Eiffel/switch"

	interface_switch (switch):		"$/interface/batch_only"

	license_switch (switch):		"$/license/no_license"

	communications (switch):		"$/no_communication"

	status (communications):		"$/status"

	debuging_class (communications):		"$/debug"

	interface:		"$EIFFEL_SRC/Eiffel/interface"

	interface_shared (interface):		"$/shared"

	all tty (interface):		"$/tty"

	preference_tool (interface):		"$/graphical/preference_tool"

	profile_tool (interface):		"$/graphical/profile_tool"

	all cli_writer:		"$EIFFEL_SRC/Eiffel/library/cli_writer"
		exclude
			"md_strong_name.e"; "md_public_key.e"
		end

	dotnet_helpers:			"$EIFFEL_SRC/dotnet/helpers"

	dotnet_logger:		"$EIFFEL_SRC/dotnet/helpers/logger/classic"

	all eac_components:		"$EIFFEL_SRC/dotnet/consumer/components"

	all eac_serialization:		"$EIFFEL_SRC/dotnet/consumer/serialization"

	all activation_checker:		"$EIFFEL_SRC/Eiffel/library/activation"
		exclude
			"enterprise"; "free"; "CVS"; 
		end

	all keygen:		"$EIFFEL_SRC/library/keygen"
		exclude
			"eiffel_envision_10"; "windows"; "CVS"; "EIFGEN"; 
		end

	all preferences:	"$EIFFEL_SRC/library/preferences"
		exclude
			"registry_implementation"; "graphical";
		end		

external

	include_path:
		"\$(EIFFEL_SRC)/C/bench",
		"\$(EIFFEL_SRC)/C/platform"

	object:
		"$(EIFFEL_SRC)/C/bench/libcompiler.a",
        "$(EIFFEL_SRC)/C/platform/libplatform.a"

end
