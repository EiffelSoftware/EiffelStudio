indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	NO_DIRECTORY_SPECIFIED_WARNING_DIALOG

inherit
	NO_DIRECTORY_SPECIFIED_WARNING_DIALOG_IMP
	
	EIFFEL_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
	
	BUILD_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	GB_NAMING_UTILITIES
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	EV_STOCK_COLORS
		rename
			implementation as stock_colors_implementation
		export
			{NONE} all
		undefine
			copy, is_equal, default_create
		end
		
	GB_SHARED_OBJECT_HANDLER
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end

feature {NONE} -- Initialization

	user_initialization is
			-- called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		local
			pixmap: EV_PIXMAP
		do
			pixmap := clone ((create {EV_STOCK_PIXMAPS}).warning_pixmap)
			pixmap.set_minimum_size (pixmap.width, pixmap.height)
			pixmap_cell.extend (pixmap)
			set_default_cancel_button (cancel_button)
		end
		
feature -- Access

	cancelled: BOOLEAN
			-- Has `Current' been cancelled?
		
	directory_name: STRING
			-- `Result' is name of directory entered by user, or `Void'
			-- if `cancelled'.

feature {NONE} -- Implementation

	
	text_changed is
			-- Called by `change_actions' of `l_text_field_1'.
		local
			current_text: STRING
		do
			current_text := directory_name_field.text.as_lower
			if valid_class_name (current_text) and not Reserved_words.has (current_text) and not
				Build_reserved_words.has (current_text) and not
				object_handler.string_used_globally_as_object_or_feature_name (current_text) then
				directory_name_field.set_foreground_color (black)
				ok_button.enable_sensitive
			else
				directory_name_field.set_foreground_color (red)
				ok_button.disable_sensitive
			end
		end

--	current_text := name_field.text.as_lower
--			if valid_class_name (current_text) or current_text.is_empty  then
--				object.set_edited_name (current_text)
--				if object_handler.name_in_use (current_text, object) or 
--					(reserved_words.has (current_text)) or
--					(build_reserved_words.has (name_field.text.as_lower)) then
--					name_field.set_foreground_color (red)
--				else
--					name_field.set_foreground_color (black)
--				end

	ok_button_pressed is
			-- Called by `select_actions' of `ok_button'.
		do
			hide
			directory_name := directory_name_field.text.as_lower
		end


	cancel_button_pressed is
			-- Called by `select_actions' of `cancel_button'.
		do
			hide
			cancelled := True
		end

	

end -- class NO_DIRECTORY_SPECIFIED_WARNING_DIALOG

