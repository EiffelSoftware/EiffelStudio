<?xml version="1.0"?>
<document output="envision" title="Compiling Unmanaged Code">
  <meta_data>
    <help>
      <toc>
        <envision_title>Compiling Unmanaged Code</envision_title>
        <envision_pseudo_name>40</envision_pseudo_name>
      </toc>
      <xml>
        <xmlkeyword>
          <index>K</index>
          <term>Building, Unmanaged code</term>
        </xmlkeyword>
        <xmlkeyword>
          <index>K</index>
          <term>Compiling, Unmanaged code</term>
        </xmlkeyword>
        <xmlkeyword>
          <index>K</index>
          <term>Compiling unmanaged code</term>
        </xmlkeyword>
        <xmlkeyword>
          <index>K</index>
          <term>Unmanaged code</term>
        </xmlkeyword>
      </xml>
    </help>
  </meta_data>
  <paragraph>
		EiffelEnvision and the <link><url>../../../../technologies/dotnet/eiffel_dotnet_language/index.xml</url><label>Eiffel for .NET</label></link> language, in some cases, retain a dependency on calls to unmanaged code. For the most part, your EiffelEnvision projects will never need to set the <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unmanaged_code</anchor_name><label>Compile Unmanaged Code</label></link> property to <bold>Yes</bold>. 
		All new <link><url>../eiffelenvision_projects/index.xml</url><label>EiffelEnvision Projects</label></link> based primarily on the .NET framework assemblies will not <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unmanaged_code</anchor_name><label>Compile Unmanaged Code</label></link> by default. For all new <link><url>../eiffelenvision_projects/index.xml</url><label>EiffelEnvision Projects</label></link> based heavily on Eiffel Software's 
		<link><url>../../../../libraries/wel/index.xml</url><label>Windows Eiffel Library</label></link> (WEL) or <link><url>../../../../libraries/vision2/index.xml</url><label>EiffelVision 2</label></link> libraries will <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unamanged_code</anchor_name><label>Compile Unmanaged Code</label></link> by default. The same is true for new <link><url>../eiffelenvision_projects/adding_projects/projects.xml</url><label>Eiffel Class Libraries</label></link> projects.
		
		<tip><bold>Recommended</bold>: Although not required, any projects not using one of the predefined <link><url>../eiffelenvision_projects/configuring/adding_references/precompiled_libraries.xml</url><label>Precompiled Libraries</label></link> options and making heavy use of Eiffel Software's or any third party library sources should choose to <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unmanaged_code</anchor_name><label>Compile Unmanaged Code</label></link>. 
		</tip><warning><bold>Warning</bold>: Projects that do not <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unamanged_code</anchor_name><label>Compile Unmanaged Code</label></link> and execute calls to unmanaged code will result in a runtime <class_name>System.IO.FileNotFoundException</class_name> exception being raised.
		</warning><anchor>why_compile_unamanged_code</anchor><heading><size>2</size><content>Why Compile Unmanaged Code?</content></heading><paragraph>
			Much care has been taken to ensure that updating existing Eiffel code, using Eiffel Software's suite of libraries, from any platform (Windows, Linux, Unix, VMS) to .NET is a swift and trouble free process. Because of this, some Eiffel Software Windows specific libraries retain calls to the underlying Windows API (This dependency may be removed in future revisions). There are also many existing written Eiffel projects having dependencies on existing <bold>C/C++ </bold>code, or projects that are or have been planned to move to <link><url>../../../../technologies/dotnet/index.xml</url><label>Eiffel for .NET</label></link> which require a dependency on legacy C/C++ code. EiffelEnvision may need to compile and link these with the external unmanaged code. For this to function correctly, the machine used to install EiffelEnvision upon must be equipped with a Microsoft Visual C++ 6.0, 7.0 or 7.1 compilers.
			<note><bold>Note</bold>: 
				After a compilation where the unmanaged code is built, a project will also have a lib dll generated. This will always be in the form of lib<italic>AssemblyName</italic>.dll, where <italic>AssemblyName</italic> is the <link><url>../eiffelenvision_projects/configuring/project_configuration/general.xml</url><anchor_name>assembly_name</anchor_name><label>Assembly Name</label></link> property set in the EiffelEnvision <link><url>../eiffelenvision_projects/configuring/project_configuration/general.xml</url><label>General Properties</label></link>.
			</note></paragraph><anchor>compile_unamanged_code_unlikely</anchor><heading><size>2</size><content>The Unlikely Use of Compiling Unmanaged Code</content></heading><paragraph>
			For the most part, EiffelEnvision projects will probably never need to compile any unmanaged code, especially for those projects making use of the precompiled framework libraries. To select a precompiled library, set the relevant properties in the <link><url>../eiffelenvision_projects/configuring/project_configuration/precompiled.xml</url><label>Precompiled Library Properties</label></link>. If a project is making use of a either the EiffelBase, Windows Eiffel Library (WEL) or the EiffelVision 2 precompiled framework libraries, and has no external C/C++ features present in the project code, the option to <link><url>../eiffelenvision_projects/configuring/project_configuration/build.xml</url><anchor_name>compile_unmanaged_code</anchor_name><label>Compile Unmanaged Code</label></link> can be switched off, improving compile times.
		</paragraph><anchor>unamanged_resources</anchor><heading><size>2</size><content>Unmanaged Resources</content></heading><paragraph>
			When migrating existing <link><url>../eiffelenvision_projects/adding_projects/projects.xml</url><label>Windows Eiffel Application Projects</label></link> to .NET it is more than likely the project will have an accompaniment of unmanaged resources, such as <bold>Resource Scripts</bold>, <bold>Bitmaps</bold>, <bold>Icons</bold>, etc. Traditionally in EiffelStudio, these resources must exist in the same location as where the project is compiled. Resource scripts must also have the same name as the system that is compiled. In EiffelEnvision this is not possible. Projects are compiled in a temporary location and are different for each configuration. To remedy this, EiffelEnvision introduces the <bold>resources</bold> folder. This is one of the <link><url>../eiffelenvision_projects/structure/known_folders.xml</url><label>Known Folders</label></link> and is used to store all unmanaged resources. For a more detailed explanation of the resource folder see <link><url>../eiffelenvision_projects/structure/known_folders.xml</url><label>Known Folders</label></link>.
		</paragraph><seealso><bold>See Also:</bold><line_break /><link><url>index.xml</url><label>Compiling EiffelEnvision Projects</label></link><line_break /><link><url>errors.xml</url><label>Compilation Errors</label></link></seealso></paragraph>
</document>