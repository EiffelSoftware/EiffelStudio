<document title="6 The Dynamic Structure: Execution Model">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>60</envision_pseudo_name>
				<envision_title>The Dynamic Structure: Execution Model</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>A system with a certain static structure describes a set of possible executions.  The run-time model governs the structure of the data (
			<code>
				<string>objects</string>
			</code>) created during such executions.
		</paragraph>
		<paragraph>The properties of the run-time model are not just of interest to implementers; they also involve concepts directly relevant to the needs of system modelers and analysts at the most abstract levels.  </paragraph>
		<heading>
			<size>2</size>
			<content>Objects, fields, values and references</content>
		</heading>
		<paragraph>A class was defined as the static description of a a type of run-time data structures.  The data structures described by a ca class are called 
			<bold>instances</bold> of the class, which in turn is called their 
			<bold>generating class</bold> (or just "generator").  An instance of 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> is a data structure representing a bank account; an instance of 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code> is a data structure representing a linked list.
		</paragraph>
		<paragraph>An 
			<bold>object</bold>, as may be created during the execution of a system, is an instance of some class of the system.
		</paragraph>
		<paragraph>Classes and objects belong to different worlds: a class is an element of the software text; an object is a data structure created during execution.  Although is possible to define a class whose instances represent classes (as class 
			<code>
				<class_name>E_CLASS</class_name>
			</code> in the ISE libraries, used to access properties of classes at run time), this does not eliminate the distinction between a static, compile-time notion, class, and a dynamic, run-time notion, object.
		</paragraph>
		<paragraph>An object is either an atomic object (integer, real, boolean, double) or a composite object made of a number of 
			<bold>fields</bold>, represented by adjacent rectangles on the conventional run-time diagrams:
		</paragraph>
		<image>
			<url>tutorial-5.png</url>
		</image>
		<paragraph>Each field is a 
			<bold>value</bold>.  A value can be either an object or an object reference:
		<line_break/>
		<list ordered="false">
			<item> When a field is an object, it will in most cases be an atomic object, as on the figure where the first field from the top is an integer and the third a character.  But a field can also be a composite object, in which case it is called a 
				<bold>subobject</bold>.
			</item>
			<item> A 
				<bold>reference</bold> is either void or uniquely identifies an object, to which it is said to be 
				<bold>attached</bold>.  In the preceding figure the second field from the top is a reference -- attached in this case, as represented by the arrow, to the enclosing object itself.  The bottom field is a void reference.
			</item>
		</list>
		</paragraph>
		<heading>
			<size>2</size>
			<content>Features</content>
		</heading>
		<image>
			<url>tutorial-6.png</url>
		</image>
		<paragraph>A feature, as noted, is an operation available on instances of a class.  A feature can be either an 
			<bold>attribute</bold> or a 
			<bold>routine</bold>.  This classification, which you can follow by starting from the 
			right on the figure above, is based on implementation considerations:
		</paragraph>
		<list ordered="false">
			<item> An attribute is a feature implemented through memory: it describes a field that will be found in all instances of the class.  For example class 
				<code>
					<class_name>ACCOUNT</class_name>
				</code> may have an attribute 
				<code>
					<feature_name>balance</feature_name>
				</code>; then all instances of the class will have a corresponding field containing each account's current balance.
			</item>
			<item> A routine describes a computation applicable to all instances of the class. 
				<code>
					<class_name>ACCOUNT</class_name>
				</code> may have a routine 
				<code>
					<string>withdraw</string>
				</code>.
			</item>
			<item> Routines are further classified into 
				<bold>functions</bold>, which will return a result, and 
				<bold>procedures</bold>, which will not.  Routine 
				<code>
					<string>withdraw</string>
				</code> will be a procedure; an example of function may be 
				<code>
					<string>highest_deposit</string>
				</code>, which returns the highest deposit made so far to the account.
			</item>
		</list>
		<paragraph>If we instead take the viewpoint of the 
			<bold>clients</bold> of a class (the classes relying on its feature), you can see the relevant classification by starting from the 
			left on the figure:
		</paragraph>
		<list ordered="false">
			<item>
				<bold>Commands</bold> have no result, and may modify an object.  They may only be procedures.
			</item>
			<item>
				<bold>Queries</bold> have a result: they return information about an object.  You may implement a query as either an attribute (by reserving space for the corresponding information in each instance of the class, a memory-based solution) or a function (a computation-based solution).  An attribute is only possible for a query without argument, such as 
				<code>
					<feature_name>balance</feature_name>
				</code>; a query with arguments, such as 
				<code>
					<feature_name>balance_on</feature_name> <symbol>(</symbol>
				</code>
				<code>
					<local_variable>d</local_variable><symbol>)</symbol>
				</code>, returning the balance at date 
				<code>
					<local_variable>d</local_variable>
				</code>, can only be a function.
			</item>
		</list>
		<paragraph>From the outside, there is no difference between a query implemented as an attribute and one implemented as a function: to obtain the balance of an account 
			<code>
				<local_variable>a</local_variable>
			</code>, you will always write 
			<code>
				<local_variable>a</local_variable>
			</code>.
			<code>
				<feature_name>balance</feature_name>
			</code>. In the implementation suggested above, 
			<code>
				<local_variable>a</local_variable>
			</code> is an attribute, so that the notation denotes an access to the corresponding object field.  But it is also possible to implement 
			<code>
				<local_variable>a</local_variable>
			</code> as a function, whose algorithm will explore the lists of deposits and withdrawals and compute their accumulated value.  To the clients of the class, and in the official class documentation as produced by the environment tools, the difference is not visible.
		</paragraph>
		<paragraph>This principle of 
			<bold>Uniform Access</bold> is central to Eiffel's goals of extendibility, reusability and maintainability: you can change the implementation without affecting clients; and you can reuse a class without having to know the details of its features' implementations.  Most object-oriented languages force clients to use a different notation for a function call and an attribute access.  This violates Uniform Access and is an impediment to software evolution, turning internal representation changes into interface changes that may disrupt large parts of a system.
		</paragraph>
		<heading>
			<size>2</size>
			<content>A simple class</content>
		</heading>
		<paragraph>The following simple class text illustrates the preceding concepts</paragraph>
		<code_block>
<keyword>indexing</keyword>
    description<symbol>:</symbol> <string>"Simple bank accounts"</string>

<keyword>class</keyword>
	<class_name>ACCOUNT</class_name>

<keyword>feature</keyword> <comment>-- Access</comment>

	<feature_name>balance</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
			<comment>-- Current balance</comment>

	<feature_name>deposit_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword>
			<comment>-- Number of deposits made since opening</comment>
		<keyword>do</keyword>
			<keyword>if</keyword> <feature_name>all_deposits</feature_name> <symbol>/=</symbol> Void <keyword>then</keyword>
				<keyword>Result</keyword> <symbol>:</symbol><symbol>=</symbol> <feature_name>all_deposits</feature_name>.<feature_name>count</feature_name>
			<keyword>end</keyword>
		<keyword>end</keyword>

<keyword>feature</keyword> <comment>-- Element change</comment>

	<feature_name>deposit</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Add `sum' to account.</comment>
		<keyword>do</keyword>
			<keyword>if</keyword> <feature_name>all_deposits</feature_name> <symbol>=</symbol> Void <keyword>then</keyword>
				<keyword>create</keyword> <feature_name>all_deposits</feature_name>
			<keyword>end</keyword>

			<feature_name>all_deposits</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>)</symbol>
			<feature_name>balance</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>balance</feature_name> <symbol>+</symbol> <local_variable>sum</local_variable>
		<keyword>end</keyword>

<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol><comment> -- Implementation</comment>

	<feature_name>all_deposits</feature_name><symbol>:</symbol> <class_name>DEPOSIT_LIST</class_name>
		<comment>-- List of deposits since account's opening.</comment>

<keyword>invariant</keyword>
	consistent_balance<symbol>:</symbol>
		<symbol>(</symbol><feature_name>all_deposits</feature_name> <symbol>/=</symbol> Void<symbol>)</symbol> <keyword>implies</keyword> <symbol>(</symbol><feature_name>balance</feature_name> <symbol>=</symbol> <feature_name>all_deposits</feature_name>.<feature_name>total</feature_name><symbol>)</symbol>
	zero_if_no_deposits<symbol>:</symbol>
		<symbol>(</symbol><feature_name>all_deposits</feature_name> <symbol>=</symbol> Void<symbol>)</symbol> <keyword>implies</keyword> <symbol>(</symbol><feature_name>balance</feature_name> <symbol>=</symbol> 0<symbol>)</symbol>

<keyword>end</keyword><comment> -- class ACCOUNT</comment>
</code_block>
		<paragraph>(The 
			<code>
				<symbol>{</symbol>
			</code>
			<code>
				<class_name>NONE</class_name>
			</code>
			<code>
				<symbol>}</symbol>
			</code> qualifier and the 
			<code>
				<keyword>invariant</keyword>
			</code> clause, used here to make the example closer to a real class, will be explained shortly. 
			<code>
				<class_name>DEPOSIT_LIST</class_name>
			</code> refers to another class, which can be written separately using library classes.)
		</paragraph>
		<paragraph>It's easy to deduce, from a feature's syntactic appearance, the category to which it belongs.  Here:</paragraph>
		<list ordered="false">
			<item> Only 
				<code>
					<feature_name>deposit</feature_name>
				</code> and 
				<code>
					<feature_name>deposit_count</feature_name>
				</code>, which include a 
				<code>
					<keyword>do</keyword>
				</code> ... clause, are routines.
			</item>
			<item>
				<code>
					<feature_name>balance</feature_name>
				</code> and 
				<code>
					<feature_name>all_deposits</feature_name>
				</code>, which are simply declared with a type, are attributes.  Note that even for attributes it is recommended to have a header comment.
			</item>
			<item> Routine 
				<code>
					<feature_name>deposit_count</feature_name>
				</code> is declared as returning a result (of type 
				<code>
					<class_name>INTEGER</class_name>
				</code>); so it is a function.  Routine 
				<code>
					<feature_name>deposit</feature_name>
				</code> has no such result and hence is a procedure.
			</item>
		</list>
		<heading>
			<size>2</size>
			<content>Creating and initializing objects</content>
		</heading>
		<paragraph>Classes, as noted, are a static notion.  Objects appear at run time; they are created explicitly.  Here is the basic instruction to create an object of type 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> and attach it to 
			<code>
				<local_variable>x</local_variable>
			</code>:
		</paragraph>
<code_block>
<keyword>create</keyword> x
</code_block>
		<paragraph>assuming that 
			<code>
				<local_variable>x</local_variable>
			</code> has been declared of type 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>. Such an instruction must be in a routine of some class -- the only place where instructions can appear -- and its effect at run time will be threefold: create a new object of type 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>; initialize its fields to default values; and attach the value of 
			<code>
				<local_variable>x</local_variable>
			</code> to it.  Here the object will have two fields corresponding to the two attributes of the generating class: an integer for 
			<code>
				<feature_name>balance</feature_name>
			</code>, which will be initialized to 0, and a reference for 
			<code>
				<feature_name>all_deposits</feature_name>
			</code>, which will be initialized to a void reference:
		</paragraph>
		<image>
			<url>tutorial-7.png</url>
		</image>
		<paragraph>The language specifies default initialization values for all possible types:</paragraph>
		
		<table>
			<row>
				<cell><paragraph><bold>Type</bold></paragraph></cell>
				<cell>&amp;nbsp;</cell>
				<cell><paragraph><bold>Default value</bold></paragraph></cell>
			</row>
			<row>
				<cell><paragraph><code><class_name>INTEGER</class_name></code>, <code><class_name>REAL</class_name></code>, <code><class_name>DOUBLE</class_name></code> </paragraph></cell>
				<cell>&amp;nbsp;&amp;nbsp;&amp;nbsp;</cell>
				<cell><paragraph>Zero</paragraph></cell>
			</row>
			<row>
				<cell><paragraph><code><class_name>BOOLEAN</class_name></code></paragraph></cell>
				<cell>&amp;nbsp;</cell>
				<cell><paragraph>False</paragraph></cell>
			</row>
			<row>
				<cell><paragraph><code><class_name>CHARACTER</class_name></code></paragraph></cell> 
				<cell>&amp;nbsp;</cell>
				<cell><paragraph>Null</paragraph></cell>
			</row>
			<row>
				<cell><paragraph>Reference types (such as ACCOUNT and <code><class_name>DEPOSIT_LIST</class_name></code>)</paragraph></cell>
				<cell>&amp;nbsp;</cell>
				<cell><paragraph>Void reference</paragraph></cell>
			</row>
			<row>
				<cell><paragraph>Composite expanded types (see next) </paragraph></cell>
				<cell>&amp;nbsp;</cell>
				<cell><paragraph>Same rules, applied recursively to all fields</paragraph></cell>
			</row>
		</table>

		<paragraph>It is possible to override the initialization values by providing -- as in the earlier example of class 
			<code>
				<class_name>HELLO</class_name>
			</code> -- one or more creation procedures.  For example we might change 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> to make sure that every account is created with an initial deposit:
		</paragraph>
		<code_block>
<keyword>indexing</keyword>
	description <symbol>:</symbol> <string>"Simple bank accounts, initialized with a first deposit"</string>

<keyword>class</keyword>
	<class_name>ACCOUNT1</class_name>

<keyword>create</keyword>
	<feature_name>make</feature_name>

<keyword>feature</keyword> <comment>-- Initialization</comment>

	<feature_name>make</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Initialize account with `sum' .</comment>
		<keyword>do</keyword>
			<feature_name>deposit</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>)</symbol>
		<keyword>end</keyword>

	<comment>-- The rest of the class as for ACCOUNT</comment>

<keyword>end</keyword><comment> -- class ACCOUNT1</comment>
</code_block>
		<paragraph>A 
			<code>
				<keyword>create</keyword>
			</code> clause may list zero or more (here just one) procedures of the class.
		</paragraph>
		<info>Note the use of the same keyword, 
			<code>
				<keyword>create</keyword>
			</code>, for both a creation clause, as here, and creation instructions such as 
			<code>
				<keyword>create </keyword>
			</code>
			<code>
				<local_variable>x</local_variable>
			</code>.
		</info>
		<paragraph>In this case the original form of creation instruction, 
			<code>
				<keyword>create </keyword>
			</code>
			<code>
				<local_variable>x</local_variable>
			</code>, is not valid any more for creating an instance of 
			<code>
				<class_name>ACCOUNT1</class_name>
			</code>; you must use the form
		</paragraph>
		<code_block>
<keyword>create</keyword> <feature_name>x</feature_name>.<feature_name>make</feature_name> (2000)</code_block>
		<paragraph>known as a creation call.  Such a creation call will have the same effect as the original form -- creation, initialization, attachment to -- 
			<code>
				<local_variable>x</local_variable>
			</code> followed by the effect of calling the selected creation procedure, which here will call 
			<code>
				<feature_name>deposit</feature_name>
			</code> with the given argument.
		</paragraph>
		<paragraph>Note that in this example all that 
			<code>
				<feature_name>make</feature_name>
			</code> does is to call 
			<code>
				<feature_name>deposit</feature_name>
			</code>. So an alternative to introducing a new procedure 
			<code>
				<feature_name>make</feature_name>
			</code> would have been simply to introduce a creation clause of the form 
			<code>
				<keyword>create</keyword>
			</code> 
			<code>
				<feature_name>deposit</feature_name>
			</code>, elevating 
			<code>
				<feature_name>deposit</feature_name>
			</code> to the status of creation procedure.  Then a creation call would be of the form 
			<code>
				<keyword>create</keyword>
			</code> 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>deposit</feature_name>
			</code> 
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<number>2000</number>
			</code>
			<code>
				<symbol>)</symbol>
			</code>.
		</paragraph>
		<info>Some variants of the basic creation instruction will be reviewed later: instruction with an explicit type; creation expressions.  See 
			<link>
				<url>tutorial-11.xml#28280</url>
				<label>"Creation variants", page 89</label>
			</link>.
		</info>
		<heading>
			<size>2</size>
			<content>Entities</content>
		</heading>
		<paragraph>The example assumed 
			<code>
				<local_variable>x</local_variable>
			</code> declared of type 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> (or 
			<code>
				<class_name>ACCOUNT1</class_name>
			</code>).  Such an 
			<code>
				<local_variable>x</local_variable>
			</code> is an example of 
			<bold>entity</bold>, a notion generalizing the well-known concept of variable.  An entity is a name that appears in a class text to represent possible run-time values (a value being, as defined earlier, an object or a reference).  An entity is one of the following:
		<line_break/>
		<list ordered="false">
			<item> An attribute of the enclosing class, such as 
				<code>
					<feature_name>balance</feature_name>
				</code> and 
				<code>
					<feature_name>all_deposits</feature_name>
				</code>.
			</item>
			<item> A formal argument of a routine, such as 
				<code>
					<local_variable>sum</local_variable>
				</code> for 
				<code>
					<feature_name>deposit</feature_name>
				</code> and 
				<code>
					<feature_name>make</feature_name>
				</code>.
			</item>
			<item> A local entity declared for the internal needs of a routine.  </item>
			<item> The special entity 
				<code>
					<keyword>Result</keyword>
				</code> in a function.
			</item>
		</list>
		</paragraph>
		<paragraph>The third case, local entities, arises when a routine needs some auxiliary values for its computation.  Here is an example of the syntax:</paragraph>
<code_block>
<feature_name>deposit</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
		<comment>-- Add sum to account.</comment>
	<keyword>local</keyword>
		<local_variable>new</local_variable><symbol>:</symbol> <class_name>AMOUNT</class_name>
	<keyword>do</keyword>
		<keyword>create</keyword> <feature_name>new</feature_name>.<feature_name>make</feature_name> <symbol>(</symbol>sum<symbol>)</symbol>
		<feature_name>all_deposits</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><local_variable>new</local_variable><symbol>)</symbol>
		<feature_name>balance</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>balance</feature_name> <symbol>+</symbol> <local_variable>sum</local_variable>
	<keyword>end</keyword>
</code_block>
		<paragraph>This example is a variant of 
			<code>
				<feature_name>deposit</feature_name>
			</code> for which we assume that the elements of a 
			<code>
				<class_name>DEPOSIT_LIST</class_name>
			</code> such as 
			<code>
				<feature_name>all_deposits</feature_name>
			</code> are no longer just integers, but objects, instances of a new class, 
			<code>
				<class_name>AMOUNT</class_name>
			</code>. Such an object will contain an integer value, but possibly other information as well.  So for the purpose of procedure 
			<code>
				<feature_name>deposit</feature_name>
			</code> we create an instance of 
			<code>
				<class_name>AMOUNT</class_name>
			</code> and insert it, using procedure 
			<code>
				<string>extend</string>
			</code>, into the list 
			<code>
				<feature_name>all_deposits</feature_name>
			</code>. The object is identified through the local entity 
			<code>
				<string>new</string>
			</code>, which is only needed within each execution of the routine (as opposed to an attribute, which yields an object field that will remain in existence for as long as the object).
		</paragraph>
		<paragraph>The last case of entity, 
			<code>
				<keyword>Result</keyword>
			</code>, serves to denote, within the body of a function, the final result to be returned by that function.  This was illustrated by the function 
			<code>
				<feature_name>deposit_count</feature_name>
			</code>, which read
		</paragraph>
		<code_block>
<feature_name>deposit_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword>
		<comment>-- Number of deposits made since opening (provisional version)</comment>
	<keyword>do</keyword>
		<keyword>if</keyword> <feature_name>all_deposits</feature_name> <symbol>/=</symbol> Void <keyword>then</keyword>
			<keyword>Result</keyword> <symbol>:</symbol><symbol>=</symbol> <feature_name>all_deposit</feature_name>.<feature_name>count</feature_name>
		<keyword>end</keyword>
	<keyword>end</keyword>
</code_block>
		<paragraph>The value returned by any call will be the value of the expression 
			<code>
				<feature_name>all_deposits</feature_name>
			</code>.
			<code>
				<feature_name>count</feature_name>
			</code>(to be explained in detail shortly) for that call, unless 
			<code>
				<feature_name>all_deposits</feature_name>
			</code> has value 
			<code>
				<keyword>ensure</keyword>
			</code>, denoting a void reference (
			<code>
				<symbol>/</symbol>
			</code> is "not equal").
		</paragraph>
		<paragraph>The default initialization rules seen earlier for attributes (see the table on page 
			<link>
				<url>tutorial-07.xml#25630</url>
				<label>21</label>
			</link>) also serve to initialize local entities and 
			<code>
				<keyword>Result</keyword>
			</code> on routine entry.  So in the last example, if 
			<code>
				<feature_name>all_deposits</feature_name>
			</code> is void (as in the case on initialization with the class as given so far), 
			<code>
				<keyword>Result</keyword>
			</code> keeps its default value of 0, which will be returned as the result of the function.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Calls</content>
		</heading>
		<paragraph>Apart from object creation, the basic computational mechanism, in the object-oriented style of computation represented by Eiffel, is feature call.  In its basic form, it appears as</paragraph>
		<code_block>
<feature_name>target</feature_name>.<feature_name>feature</feature_name> <symbol>(</symbol><local_variable>argument1</local_variable>, ...<symbol>)</symbol>
</code_block>
		<paragraph>where 
			<code>
				<local_variable>target</local_variable>
			</code> is an entity or more generally an expression, 
			<code>
				<keyword>feature</keyword>
			</code> is a feature name, and there may be zero or more 
			<code>
				<local_variable>argument</local_variable>
			</code> expressions.  In the absence of any 
			<code>
				<local_variable>argument</local_variable>
			</code> the part in parentheses should be removed.
		</paragraph>
		<paragraph>We have already seen such calls.  If the 
			<code>
				<keyword>feature</keyword>
			</code> denotes a procedure, the call is an instruction, as in
		</paragraph>
		<code_block>
<feature_name>all_deposits</feature_name>.<feature_name>extend</feature_name><symbol> (</symbol><local_variable>new</local_variable><symbol>)</symbol>
</code_block>
		<paragraph>If 
			<code>
				<keyword>feature</keyword>
			</code> denotes a query (function or attribute), the call is an expression, as in the right-hand side of
		</paragraph>
		<code_block>
<keyword>Result</keyword> <symbol>:=</symbol> <feature_name>all_deposits</feature_name>.<feature_name>count</feature_name>
</code_block>
		<paragraph>Following the principle of Uniform Access (page 
			<link>
				<url>tutorial-07.xml#UNIFORM ACCESS</url>
				<label>19</label>
			</link>), this form is the same for calls to attributes and to functions without arguments.  In thisexample, feature 
			<code>
				<string>count</string>
			</code> from class 
			<code>
				<class_name>DEPOSIT_LIST</class_name>
			</code> may indeed be implemented in either of these two ways: we can keep a 
			<code>
				<string>count</string>
			</code> field in each list, updating it for each insertion and removal; or we can compute 
			<code>
				<string>count</string>
			</code>, whenever requested, by traversing the list and counting the number of items.
		</paragraph>
		<paragraph>In the case of a routine with arguments -- procedure or function -- the routine will be declared, in its class, as</paragraph>
		<code_block>
<feature_name>feature</feature_name> <symbol>(</symbol><local_variable>formal1</local_variable>: <class_name>TYPE1</class_name>; ...<symbol>)</symbol> <keyword>is</keyword>
	<keyword>do</keyword>
	...
	<keyword>end</keyword>
</code_block>
		<paragraph>meaning that, at the time of each call, the value of each formal will be set to the corresponding actual (
			<code>
				<local_variable>formal1</local_variable>
			</code> to 
			<code>
				<local_variable>argument1</local_variable>
			</code> and so on).
		</paragraph>
		<paragraph>In the routine body, it is not permitted to change the value of a formal argument, although it is possible to change the value of an attached object through a procedure call such as 
			<code>
				<local_variable>formal1</local_variable>
			</code>.
			<code>
				<feature_name>some_procedure</feature_name> 
				<symbol>(</symbol>
				...
				<symbol>)</symbol>
			</code>.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Infix and prefix notation</content>
		</heading>
		<paragraph>Basic types such as 
			<code>
				<class_name>INTEGER</class_name>
			</code> are, as noted, full-status citizens of Eiffel's type system, and so are declared as classes (part of the Kernel Library). 
			<code>
				<class_name>INTEGER</class_name>
			</code>, for example, is characterized by the features describing integer operations: plus, minus, times, division, less than, and so on.
		</paragraph>
		<paragraph>With the dot notation seen so far, this would imply that simple arithmetic operations would have to be written with a syntax such as 
			<code>
				<local_variable>i</local_variable>
			</code>.
			<code>
				<feature_name>plus</feature_name><symbol> (</symbol>
			</code>
			<code>
				<local_variable>j</local_variable><symbol>) </symbol>
			</code> instead of the usual 
			<code>
				<local_variable>i</local_variable> <symbol>+</symbol> <local_variable>j</local_variable>
			</code>. This would be awkward.  Infix and prefix features solve the problem, reconciling the object-oriented view of computation with common notational practices of mathematics.  The addition function is declared in class 
			<code>
				<class_name>INTEGER</class_name>
			</code> as
		</paragraph>
		<code_block>
<keyword>infix</keyword> "<feature_name>+</feature_name>" <symbol>(</symbol><local_variable>other</local_variable>: <class_name>INTEGER</class_name><symbol>)</symbol>: <class_name>INTEGER</class_name> <keyword>is</keyword>
	<keyword>do</keyword>
	...
	<keyword>end</keyword>
</code_block>
		<paragraph>Such a feature has all the properties and prerogatives of a normal "identifier" feature, except for the form of the calls, which is infix, as in 
			<code>
				<local_variable>i</local_variable>
			</code>
			<code>
				<symbol> + </symbol>
			</code>
			<code>
				<local_variable>j</local_variable>
			</code>, rather than using dot notation.  An infix feature must be a function, and take exactly one argument.  Similarly, a function can be declared as 
			<code>
				<keyword>prefix</keyword>
			</code>
			<code>
				<string>"-"</string>
			</code>, with no argument, permitting calls of the form 
			<code>
				<number>-3</number>
			</code> rather than 
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<number>3</number>
			</code>
			<code>
				<symbol>)</symbol>
			</code>.
			<code>
				<feature_name>negated</feature_name>
			</code>.
		</paragraph>
		<paragraph>Predefined library classes covering basic types such as 
			<code>
				<class_name>INTEGER</class_name>
			</code>, 
			<code>
				<class_name>CHARACTER</class_name>
			</code>, 
			<code>
				<class_name>BOOLEAN</class_name>
			</code>, 
			<code>
				<class_name>REAL</class_name>
			</code>, 
			<code>
				<class_name>DOUBLE</class_name>
			</code> are known to the Eiffel compiler, so that a call of the form 
			<code>
				<local_variable>j</local_variable> <symbol>+</symbol> <local_variable>i</local_variable>
			</code>, although conceptually equivalent to a routine call, can be processed just as efficiently as the corresponding arithmetic expression in an ordinary programming language.  This brings the best of both worlds: conceptual simplicity, enabling Eiffel developers, when they want to, to think of integers and the like as objects; and efficiency as good as in lower-level approaches.
		</paragraph>
		<paragraph>Infix and prefix features are available to any class, not just the basic types' predefined classes.  For example a graphics class could use the name 
			<code>
				<keyword>infix</keyword> 
				<string>"</string><symbol>|-|</symbol><string>"</string>
			</code> for a function computing the distance between two points, to be used in expressions such as 
			<code>
				<local_variable>point1</local_variable> 
				<symbol>|-| </symbol> 
				<local_variable>point2</local_variable>
			</code>.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Type declaration</content>
		</heading>
		<paragraph>Every entity appearing in an Eiffel text is declared as being of a certain type, using the syntax already encountered in the above examples:</paragraph>
		<code_block>
<feature_name>entity_name</feature_name><symbol>:</symbol> <class_name>TYPE_NAME</class_name>
</code_block>
		<paragraph>This applies to attributes, formal arguments of routines and local entities.  You will also declare the result type for a function, as in the earlier example</paragraph>
		<code_block>
<feature_name>deposit_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword> ...
</code_block>
		<paragraph>Specifying such a function result type also declares, implicitly, the type for 
			<code>
				<keyword>Result</keyword>
			</code> as used in the function's body.
		</paragraph>
		<paragraph>What is a type? With the elements seen so far, every type is a 
			<code>
				<keyword>class</keyword>
			</code>.
			<code>
				<class_name>INTEGER</class_name>
			</code>, used in the declaration of 
			<code>
				<string>deposits_count</string>
			</code>, is, as we have seen, a library class; and the declaration 
			<code>
				<feature_name>all_deposits</feature_name>
			</code>: 
			<code>
				<class_name>DEPOSIT_LIST</class_name>
			</code> assumes the existence of a class 
			<code>
				<class_name>DEPOSIT_LIST</class_name>
			</code>.
		</paragraph>
		<paragraph>Three mechanisms introduced below -- expanded types (page 
			<link>
				<url>tutorial-07.xml#40534</url>
				<label>26</label>
			</link>), genericity (page 
			<link>
				<url>tutorial-08.xml#15572</url>
				<label>36</label>
			</link>) and anchored declarations (page 
			<link>
				<url>tutorial-10.xml#46019</url>
				<label>79</label>
			</link>) -- will generalize the notion of type slightly.  But they do not change the fundamental property that 
			<bold>every type is based on a class</bold>, called the type's 
			<bold>base class</bold>.  In the examples seen so far, each type 
			is a class, serving as its own base class.
		</paragraph>
		<paragraph>An instance of a class 
			<code>
				<class_name>C</class_name>
			</code> is also called "an object of type 
			<code>
				<class_name>C</class_name>
			</code>".
		</paragraph>
		<heading>
			<size>2</size>
			<content>Type categories</content>
		</heading>
		<paragraph>It was noted above that a value is either an object or a reference.  This corresponds to two kinds of type: reference types and expanded types.  </paragraph>
		<paragraph>If a class is declared as just</paragraph>
		<code_block>
<keyword>class</keyword> <class_name>CLASS_NAME</class_name> ...
</code_block>
		<paragraph>it defines a reference type.  The entities declared of that type will denote references.  So in the declaration</paragraph>
		<code_block>
<local_variable>x</local_variable><symbol>:</symbol> <class_name>ACCOUNT</class_name>
</code_block>
		<paragraph>the possible run-time values for 
			<code>
				<local_variable>x</local_variable>
			</code> are references, which will be either void or attached to instances of class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>.
		</paragraph>
		<paragraph>Instead of 
			<code>
				<keyword>class</keyword>
			</code>, however, you may use the double keyword 
			<code>
				<keyword>expanded class</keyword>
			</code>, as in the EiffelBase class definition
		</paragraph>
		<code_block>
<keyword>indexing</keyword>
	description <symbol>:</symbol> <string>"Integer values"</string>

<keyword>expanded</keyword> <keyword>class</keyword>
	<class_name>INTEGER</class_name>

<keyword>feature</keyword> <comment>-- Basic operations</comment>

	<keyword>infix</keyword> "<symbol>+</symbol>" <symbol>(</symbol>other<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword>
		<keyword>do</keyword>
		...
		<keyword>end</keyword>

	<comment>... Other feature declarations ...</comment>

<keyword>end</keyword> <comment>-- class INTEGER</comment>
</code_block>
		<paragraph>In this case the value of an entity declared as 
			<code>
				<local_variable>n</local_variable>
			</code>: 
			<code>
				<class_name>INTEGER</class_name>
			</code> is not a reference to an object, but the object itself -- in this case an atomic object, an integer value.
		</paragraph>
		<paragraph>It is also possible, for some non-expanded class C, to declare an entity as</paragraph>
		<code_block>
<feature_name>x</feature_name><symbol>:</symbol> <keyword>expanded</keyword> 
</code_block>
		<paragraph>so that the values for 
			<code>
				<local_variable>x</local_variable>
			</code> will be objects of type 
			<code>
				<class_name>C</class_name>
			</code>, rather than references to such objects.  This is our first example of a type -- 
			<code>
				<keyword>expanded</keyword>
			</code> 
			<code>
				<class_name>C</class_name>
			</code> -- that is not directly a class, although it is based on a class, 
			<code>
				<class_name>C</class_name>
			</code>. The base type of such a type is 
			<code>
				<class_name>C</class_name>
			</code>.
		</paragraph>
		<paragraph>Note that the value of an entity of an expanded type can never be void; only a reference can.  Extending the earlier terminology, an expanded entity is always 
			<bold>attached to</bold> an object, atomic (as in the case of 
			<code>
				<local_variable>n</local_variable>
			</code>: 
			<code>
				<class_name>INTEGER</class_name>
			</code>) or composite (as in 
			<code>
				<local_variable>x</local_variable>
			</code>: 
			<code>
				<keyword>expanded </keyword>
			</code>
			<code>
				<class_name>ACCOUNT</class_name>
			</code>).
		</paragraph>
		<paragraph>Expanded declarations make it possible to construct composite objects with subobjects, as in the following abbreviated class declaration (indexing clause and routines omitted):</paragraph>
		<code_block>
<keyword>class</keyword> <class_name>CAR</class_name>

<keyword>feature</keyword>

	<feature_name>engine</feature_name><symbol>:</symbol> <keyword>expanded</keyword> <class_name>ENGINE</class_name>

	<feature_name>originating_plant</feature_name><symbol>:</symbol> <class_name>PLANT</class_name>

<keyword>end</keyword> <comment>-- class CAR</comment>
</code_block>
		<paragraph>Here is an illustration of the structure of a typical instance of 
			<code>
				<class_name>CAR</class_name>
			</code>:
		</paragraph>
		<image>
			<url>tutorial-8.png</url>
		</image>
		<paragraph>This example also illustrates that the distinction between expanded and reference types is important not just for system implementation purposes but for high-level system modeling as well.  Consider the example of a class covering the notion of car.  Many cars share the same 
			<code>
				<string>originating_plant</string>
			</code>, but an 
			<code>
				<feature_name>engine</feature_name>
			</code> belongs to just one car.   References represent the modeling relation "knows about"; subobjects, as permitted by expanded types, represent the relation "has part", also known as aggregation.  The key difference is that sharing ispossible in the former case but not in the latter.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Basic operations</content>
		</heading>
		<paragraph>To assign, copy and compare values, you can rely on a number of mechanisms.  Two of them, assignment and equality testing, are language constructs; the others are library features, coming fromthe top-level class 
			<code>
				<class_name>ANY</class_name>
			</code> seen earlier (page 
			<link>
				<url>tutorial-06.xml#82680</url>
				<label>15</label>
			</link>).
		</paragraph>
		<paragraph>Assignment uses the symbol 
			<code>
				<symbol>:</symbol>
			</code>. The assignment instruction
		</paragraph>
		<code_block>
<local_variable>x</local_variable> <symbol>:= </symbol><local_variable>y</local_variable>
</code_block>
		<paragraph>updates the value of 
			<code>
				<local_variable>x</local_variable>
			</code> to be the same as that of 
			<code>
				<local_variable>y</local_variable>
			</code>. This means that:
		</paragraph>
		<image>
			<url>tutorial-9.png</url>
		</image>
		<paragraph> For entities of reference types, the value of 
			<code>
				<local_variable>x</local_variable>
			</code> will be a void reference if the value of 
			<code>
				<local_variable>y</local_variable>
			</code> is void, and otherwise 
			<code>
				<local_variable>x</local_variable>
			</code> will be attached to the same object OBJ2 as 
			<code>
				<local_variable>y</local_variable>
			</code>:
		</paragraph>
		<image>
			<url>tutorial-9.png</url>
		</image>
		<paragraph> For entities of expanded types, the values are objects; the object attached to 
			<code>
				<local_variable>x</local_variable>
			</code> will be overwritten with the contents of the object attached to 
			<code>
				<local_variable>y</local_variable>
			</code>. In the case of atomic objects, as in 
			<code>
				<local_variable>n</local_variable> 
				<symbol>:=</symbol> 
				<number>3</number>
			</code> with the declaration 
			<code>
				<local_variable>n</local_variable>
			</code>: 
			<code>
				<class_name>INTEGER</class_name>
			</code>, this has the expected effect of assigning to 
			<code>
				<local_variable>n</local_variable>
			</code> the integer value 
			<code>
				<number>3</number>
			</code>; in the case of composite objects, this overwrites the fields for 
			<code>
				<local_variable>x</local_variable>
			</code>, one by one, with the corresponding 
			<code>
				<local_variable>y</local_variable>
			</code> fields.
		</paragraph>
		<paragraph>To copy an object, use 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>copy</feature_name>
			</code>
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<local_variable>y</local_variable>
			</code>
			<code>
				<symbol>)</symbol>
			</code> which assumes that both 
			<code>
				<local_variable>x</local_variable>
			</code> and 
			<code>
				<local_variable>y</local_variable>
			</code> are non-void, and copies the contents of 
			<code>
				<local_variable>y</local_variable>
			</code>'s attached object onto those of 
			<code>
				<local_variable>x</local_variable>
			</code>'s.  For expanded entities the effect is the same as that the of the assignment 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<local_variable>y</local_variable>
			</code>.
		</paragraph>
		<paragraph>A variant of the 
			<code>
				<feature_name>copy</feature_name>
			</code> operation is 
			<code>
				<feature_name>clone</feature_name>
			</code>. The expression 
			<code>
				<feature_name>clone</feature_name>
			</code>
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<local_variable>y</local_variable>
			</code>
			<code>
				<symbol>)</symbol>
			</code> produces a newly created object, initialized with a copy of the object attached to 
			<code>
				<local_variable>y</local_variable>
			</code>, or a void value if 
			<code>
				<local_variable>y</local_variable>
			</code> itself is void.  For a reference type (the only interesting case) the returned result for non-void is
			<code>
				<local_variable>y</local_variable>
			</code> a reference to the new object.  This means we may view 
			<code>
				<feature_name>clone</feature_name>
			</code> as a function that performs
		</paragraph>
		<code_block>
<keyword>create</keyword> <keyword>Result</keyword>
<keyword>Result</keyword><symbol>.</symbol><feature_name>copy</feature_name> <symbol>(</symbol><feature_name>y</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>So in the assignment 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<feature_name>clone</feature_name>
			</code>
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<local_variable>y</local_variable>
			</code>
			<code>
				<symbol>)</symbol>
			</code>, assuming both entities of reference types and 
			<code>
				<local_variable>y</local_variable>
			</code> not void, will attach 
			<code>
				<local_variable>x</local_variable>
			</code> to a 
			<bold>new object</bold> identical to 
			<code>
				<local_variable>y</local_variable>
			</code> 's attached object, as opposed to the assignment 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<local_variable>y</local_variable>
			</code> which attaches 
			<code>
				<local_variable>x</local_variable>
			</code> to the 
			<bold>same object</bold> as 
			<code>
				<local_variable>y</local_variable>
			</code>.
		</paragraph>
		<paragraph>To determine whether two values are equal, use the expression 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<local_variable>y</local_variable>
			</code>. For references, this comparison will yield true if the values are either both void or both attached to the same object; this is the case in the last figure in the state after the assignment, but not before. The symbol for 
			not equal is 
			<code>
				<symbol>/=</symbol>
			</code>, as in 
			<code>
				<local_variable>x</local_variable> 
				<symbol>/=</symbol> 
				<local_variable>y</local_variable>
			</code>.
		</paragraph>
		<paragraph>As with assignment, there is also a form that works on objects rather than references: 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>is_equal</feature_name>
			</code> (
			<code>
				<local_variable>y</local_variable>
			</code>) will return true when 
			<code>
				<local_variable>x</local_variable>
			</code> and 
			<code>
				<local_variable>y</local_variable>
			</code> are both non-void and attached to field-by-field identical objects.  This can be true even when 
			<code>
				<local_variable>x</local_variable>
			</code>
			<code>
				<local_variable>y</local_variable>
			</code> is not, for example, in the figure, 
			<code>
				<string>before</string>
			</code> the assignment, if the two objects shown are field-by-field equal.
		</paragraph>
		<paragraph>A more general variant of 
			<code>
				<feature_name>is_equal</feature_name>
			</code> is used under the form 
			<code>
				<feature_name>equal</feature_name>
			</code> (
			<code>
				<local_variable>x</local_variable>
			</code>, 
			<code>
				<local_variable>y</local_variable>
			</code>).  This is always defined, even if 
			<code>
				<local_variable>x</local_variable>
			</code> is void, returning true whenever 
			<code>
				<feature_name>is_equal</feature_name>
			</code> would but also if 
			<code>
				<local_variable>x</local_variable>
			</code> and 
			<code>
				<local_variable>y</local_variable>
			</code> are both void.  (In contrast, 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>is_equal</feature_name>
			</code> (
			<code>
				<local_variable>y</local_variable>
			</code>) is not defined for void 
			<code>
				<local_variable>x</local_variable>
			</code> and would, if evaluated, yield an exception as explained in 
			<link>
				<url>tutorial-09. .xml#10722</url>
				<label>"Exception handling", page 46</label>
			</link> below.)
		</paragraph>
		<paragraph>
			<code>
				<keyword>Void</keyword>
			</code> denotes a void reference.  So you can make 
			<code>
				<local_variable>x</local_variable>
			</code> void through the assignment 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<keyword>Void</keyword>
			</code>, and test whether it is void through 
			<code>
				<keyword>if </keyword>
			</code>
			<code>
				<local_variable>x</local_variable> 
				<symbol>=</symbol> 
				<keyword>Void</keyword>
			</code> 
			<code>
				<keyword>then</keyword>
			</code> ...
		</paragraph>
		<paragraph>Where assignment  
			<code>
				<symbol>:=</symbol>
			</code> and the equality operators 
			<code>
				<symbol>=</symbol>
			</code> 
			and 
			<code>
				<symbol>/=</symbol>
			</code> were language constructres, 
			<code>
				<feature_name>copy</feature_name>
			</code>, 
			<code>
				<feature_name>clone</feature_name>
			</code>, 
			<code>
				<feature_name>is_equal</feature_name>
			</code>, 
			<code>
				<feature_name>equal</feature_name>
			</code> and 
			<code>
				<keyword>ensure</keyword>
			</code> are 
			<bold>library features</bold> coming from class 
			<code>
				<class_name>ANY</class_name>
			</code>. The type of 
			<code>
				<keyword>ensure</keyword>
			</code>, as declared in 
			<code>
				<class_name>ANY</class_name>
			</code>, is 
			<code>
				<class_name>NONE</class_name>
			</code>, the "bottom" type.
		</paragraph>
		<paragraph>Using the redefinition mechanisms to be seen in the discussion of inheritance, a class can redefine 
			<code>
				<feature_name>copy</feature_name>
			</code> and 
			<code>
				<feature_name>is_equal</feature_name>
			</code> to cover specific notions of copy and equality.  The assertions will ensure that the two remain compatible: after 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>copy</feature_name>
			</code> (
			<code>
				<local_variable>y</local_variable>
			</code>), the property 
			<code>
				<local_variable>x</local_variable>
			</code>.
			<code>
				<feature_name>is_equal</feature_name>
			</code> (
			<code>
				<local_variable>y</local_variable>
			</code>) must always be true.  The effect of 
			<code>
				<feature_name>clone</feature_name>
			</code> will automatically follow a redefinition of 
			<code>
				<feature_name>copy</feature_name>
			</code>, and 
			<code>
				<feature_name>equal</feature_name>
			</code> will follow 
			<code>
				<feature_name>is_equal</feature_name>
			</code>.
		</paragraph>
		<paragraph>To guarantee the original, non-redefined semantics you may use the variants 
			<code>
				<feature_name>standard_copy</feature_name>
			</code>, 
			<code>
				<feature_name>standard_clone</feature_name>
			</code>, 
			<code>
				<feature_name>standard_equal</feature_name>
			</code>, all defined in 
			<code>
				<class_name>ANY</class_name>
			</code> as "frozen", that is to say non-redefinable.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Deep operations and persistence</content>
		</heading>
		<paragraph>Feature 
			<code>
				<feature_name>clone</feature_name>
			</code> only duplicates one object.  If some of the object's fields are references to other objects, the references themselves will be copied, not those other objects.
		</paragraph>
		<paragraph>It is useful, in some cases, to duplicate not just one object but an entire object structure.  The expression 
			<code>
				<feature_name>deep_clone</feature_name>
			</code>
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<local_variable>y</local_variable>
			</code>
			<code>
				<symbol>)</symbol>
			</code> achieves this goal: assuming non-void 
			<code>
				<local_variable>y</local_variable>
			</code>, it will produce a duplicate not just of the object attached to 
			<code>
				<local_variable>y</local_variable>
			</code> but of the entire object structure starting at that object.  The mechanism respects all the possible details of that structure, such as cyclic reference chains.  Like the preceding features, 
			<code>
				<feature_name>deep_clone</feature_name>
			</code> comes from class 
			<code>
				<class_name>ANY</class_name>
			</code>.
		</paragraph>
		<paragraph>A related mechanism provides a powerful 
			<bold>persistence</bold> facility.  A call of the form
		</paragraph>
		<code_block>
<feature_name>x</feature_name>.<feature_name>store</feature_name> <symbol>(</symbol>Some_file_or_network_connection<symbol>)</symbol>
</code_block>
		<paragraph>will store a copy of the entire object structure starting at 
			<code>
				<local_variable>x</local_variable>
			</code>, under a suitable representation.  Like 
			<code>
				<feature_name>deep_clone</feature_name>
			</code>, procedure 
			<code>
				<string>store</string>
			</code> will follow all references to the end and maintain the properties of the structure.  The function 
			<code>
				<feature_name>retrieved</feature_name>
			</code> can then be used -- in the same system, or another -- to recreate the structure from the stored version.
		</paragraph>
		<paragraph>As the name suggests, 
			<code>
				<string>Some_file_or_network_connection</string>
			</code> can be an external medium of various possible kinds, not just a file but possibly a database or network.  ISE's EiffelNet client-server library indeed uses the 
			<code>
				<string>store</string>
			</code>
			 - 
			<code>
				<feature_name>retrieved</feature_name>
			</code> mechanism to exchange object structures over a network, between compatible or different machine architectures, for example a Windows client and a Unix server.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Memory management</content>
		</heading>
		<paragraph>Reference reattachments 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<local_variable>y</local_variable>
			</code> of the form illustrated by the figure on page 
			<link>
				<url>tutorial-00.xml#35291</url>
				<label>28</label>
			</link> can cause objects to become unreachable.  This is the case for the object identified as OBJ2 on that figure (the object to which 
			<code>
				<local_variable>x</local_variable>
			</code> was attached before the assignment) if no other reference was attached to it.
		</paragraph>
		<paragraph>In all but toy systems, it is essential to reclaim the memory that has been allocated for such objects; otherwise memory usage could grow forever, as a result of creation instructions 
			<code>
				<keyword>create </keyword>
			</code>
			<code>
				<local_variable>x</local_variable>
			</code> ... and calls to 
			<code>
				<feature_name>clone</feature_name>
			</code> and the like, leading to thrashing and eventually to catastrophic termination.
		</paragraph>
		<paragraph>Tthe Eiffel method suggests that the task of detecting and reclaiming such unused object space should be handled by an automatic mechanism (part of the Eiffel run-time environment), not manually by developers (through calls to procedures such as Pascal's 
			<code>
				<feature_name>dispose</feature_name>
			</code> and C/C++'s 
			<code>
				<feature_name>free</feature_name>
			</code>).  The arguments for this view are:
		</paragraph>
		<paragraph>
			<bold>Simplicity</bold> : handling memory reclamation manually can add enormous complication to the software, especially when -- as is often the case in object-oriented development -- the system manipulates complex run-time data structures with many links and cycles.
		</paragraph>
		<paragraph>
			<bold>Reliability</bold> : memory management errors, such as the incorrect reclamation of an object that is still referenced by a distant part of the structure, are a notorious source of dangerous and hard-to-correct bugs.
		</paragraph>
		<paragraph>ISE Eiffel provides a sophisticated 
			<bold>garbage collector</bold> which efficiently handles the automatic reclamation process, while causing no visible degradation of a system's performance and response time.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Information hiding and the call rule</content>
		</heading>
		<paragraph>The basic form of computation, it has been noted, is a call of the form 
			<code>
				<local_variable>target</local_variable>
			</code>.
			<code>
				<feature_name>feature</feature_name>
			</code>
			<code>
				<symbol> (</symbol>
			</code>...
			<code>
				<symbol>)</symbol>
			</code>. This is only meaningful if 
			<code>
				<keyword>feature</keyword>
			</code> denotes a feature of the generating class of the object to which 
			<code>
				<local_variable>target</local_variable>
			</code> (assumed to be non-void) is attached.  The precise rule is the following:
		</paragraph>
		<note>Feature Call rule A call of the form target.feature (...) appearing in a class C is only valid if feature is a feature of the base class of target 's type, and is available to C.</note>
		<paragraph>The first condition simply expresses that if 
			<code>
				<local_variable>target</local_variable>
			</code> has been declared as 
			<code>
				<local_variable>target</local_variable>
			</code>
			<code>
				<symbol>:</symbol>
			</code> 
			<code>
				<class_name>A</class_name>
			</code> then 
			<code>
				<keyword>feature</keyword>
			</code> must be the name of one of the features of 
			<code>
				<class_name>A</class_name>
			</code>. The second condition reflects Eiffel's application of the principles of information hiding.  A 
			<code>
				<keyword>feature</keyword>
			</code> clause, introducing one or more feature declarations, may appear not only as
		</paragraph>
		<code_block>
<keyword>feature</keyword> <comment>-- Comment identifying the feature category</comment>

	<comment>... Feature declaration ...</comment>

	<comment>... Feature declaration ...</comment>
	
	<comment>...</comment>
</code_block>
		<paragraph>but may also include a list of classes in braces, 
			<code>
				<keyword>feature</keyword>
			</code>
			<code>
				<symbol> {</symbol>
			</code>
			<code>
				<class_name>A</class_name>
			</code>, 
			<code>
				<class_name>B</class_name>
			</code>, ... 
			<code>
				<symbol>}</symbol>
			</code>, as was illustrated for 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>:
		</paragraph>
		<code_block>
<keyword>feature</keyword> <symbol>{</symbol><class_name>NONE</class_name><symbol>}</symbol> <comment>-- Implementation</comment>

	<feature_name>all_deposits</feature_name><symbol>:</symbol> <class_name>DEPOSIT_LIST</class_name>
			<comment>-- List of deposits since account's opening.</comment>
</code_block>
		<paragraph>This form indicates that the features appearing in that clause are only 
			<bold>available</bold> -- in the sense of available for calls, as used in the Feature Call rule -- to the classes listed.  In the example feature 
			<code>
				<feature_name>all_deposits</feature_name>
			</code> is only available to 
			<code>
				<class_name>NONE</class_name>
			</code>. Because of the global inheritance structure (page 
			<link>
				<url>tutorial-06.xml#82680</url>
				<label>15</label>
			</link>) this means it is in fact available to no useful client at all, and is equivalent in practice to 
			<code>
				<keyword>feature</keyword>
			</code>
			<code>
				<symbol> {</symbol>
			</code>
			<code>
				<symbol>}</symbol>
			</code> with an empty class list, although the form listing 
			<code>
				<class_name>NONE</class_name>
			</code> explicitly is more visible and hence preferred.
		</paragraph>
		<paragraph>With this specification a class text including the declaration 
			<code>
				<string>acc</string>
			</code> : 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> and a call of the form
		</paragraph>
		<code_block>
<feature_name>acc</feature_name>.<feature_name>all_deposits</feature_name>
</code_block>
		<paragraph>violates the Feature Call rule and will be rejected by the EiffelStudio compiler.  </paragraph>
		<paragraph>Besides fully exported features (introduced by 
			<code>
				<keyword>feature ...</keyword>
			</code>; without further qualification) and fully secret ones (
			<code>
				<keyword>feature</keyword>
			</code>
			<code>
				<symbol> {</symbol>
			</code>
			<code>
				<symbol>}</symbol>
			</code> or 
			<code>
				<keyword>feature</keyword>
			</code>
			<code>
				<symbol> {</symbol>
			</code>
			<code>
				<class_name>NONE</class_name>
			</code>
			<code>
				<symbol>}</symbol>
			</code>), it is possible to export features selectively to some specified classes, using the specification
		</paragraph>
		<code_block>
<keyword>feature</keyword> <symbol>{</symbol><class_name>A</class_name>, <class_name>B</class_name>,  ...<symbol>}</symbol>
</code_block>
		<paragraph>for arbitrary classes 
			<code>
				<class_name>A</class_name>
			</code>, 
			<code>
				<class_name>B</class_name>
			</code>, ... This enables a group of related classes to provide each other with privileged access, without requiring the introduction of a special module category above the class level (see 
			<link>
				<url>tutorial-06.xml#29888</url>
				<label>"Clusters", page 15</label>
			</link>).
		</paragraph>
		<paragraph>Exporting features selectively to a set of classes 
			<code>
				<class_name>A</class_name>
			</code>, 
			<code>
				<class_name>B</class_name>
			</code>, ... also makes them available to the descendants of these classes.  So a feature clause beginning with just 
			<code>
				<keyword>feature</keyword>
			</code> is equivalent to one starting with 
			<code>
				<keyword>feature</keyword>
			</code>
			<code>
				<symbol> {</symbol>
			</code>
			<code>
				<class_name>ANY</class_name>
			</code>
			<code>
				<symbol>}</symbol>
			</code>.
		</paragraph>
		<paragraph>These rules enable successive feature clauses to specify exports to different clients.  In addition, the recommended style, illustrated in the examples of this chapter, suggests writing separate feature clauses -- regardless of their use for specifying export privileges -- to group features into separate categories.  The standard style rules define a number of fundamental categories and the order in which they should appear; they include: 
			<code>
				<comment>Initialization</comment>
			</code> for creation procedures, 
			<code>
				<comment>Access</comment>
			</code> for general queries, 
			<code>
				<comment>Status report</comment>
			</code> for boolean-valued queries, 
			<code>
				<comment>Status setting</comment>
			</code>, 
			<code>
				<comment>Element change</comment>
			</code>, 
			<code>
				<comment>Implementation</comment>
			</code> (for selectively exported or secret features.  Every feature in the EiffelBase library classes belongs to one of the predefined categories.
		</paragraph>
		<paragraph>The Feature Call rule is the first of the rules that make Eiffel a 
			<bold>statically typed</bold> approach, where the applicability of operations to objects is verified at compile time rather than during execution.  Static typing is one of the principal components of Eiffel's support for reliability in software development.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Execution scenario</content>
		</heading>
		<paragraph>The preceding elements make it possible to understand the overall scheme of an Eiffel system's execution.  </paragraph>
		<paragraph>At any time during the execution of a system, one object is the 
			<bold>current object</bold> of the execution, and one of the routines of the system, the 
			<bold>current routine</bold>, is being executed, with the current object as its target.  (We will see below how the current object and current routine are determined.) The text of a class, in particular its routines, make constant implicit references to the current object.  For example in the instruction
		</paragraph>
		<code_block>
<feature_name>balance</feature_name> <symbol>:=</symbol> <feature_name>balance </feature_name><symbol>+</symbol> <feature_name>sum</feature_name>
</code_block>
		<paragraph>appearing in the body of procedure 
			<code>
				<feature_name>deposit</feature_name>
			</code> of class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>, the name of the attribute 
			<code>
				<feature_name>balance</feature_name>
			</code>, in both occurrences, denotes the 
			<code>
				<feature_name>balance</feature_name>
			</code> field of the current object, assumed to be an instance of 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>. In the same way, the procedure body that we used for the creation procedure 
			<code>
				<feature_name>make</feature_name>
			</code> in the 
			<code>
				<class_name>ACCOUNT1</class_name>
			</code> variant
		</paragraph>
		<code_block>
<feature_name>make</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Initialize account with sum .</comment>
		<keyword>do</keyword>
			<feature_name>deposit</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>)</symbol>
		<keyword>end</keyword>
</code_block>
		<paragraph>contains a call to the procedure 
			<code>
				<feature_name>deposit</feature_name>
			</code>. Contrary to earlier calls written in dot notation as 
			<code>
				<local_variable>target</local_variable>
			</code>.
			<code>
				<keyword>feature</keyword>
			</code> 
			<code>
				<symbol>(</symbol>
			</code>...
			<code>
				<symbol>)</symbol>
			</code>, the call to 
			<code>
				<feature_name>deposit</feature_name>
			</code> has no explicit target; this means its target is the current object, an instance of 
			<code>
				<class_name>ACCOUNT1</class_name>
			</code>. Such a call is said to be 
			<bold>unqualified</bold>; those using dot notations are 
			<bold>qualified</bold> calls.
		</paragraph>
		<paragraph>Although most uses of the current object are implicit, a class may need to name it explicitly.  The predefined expression 
			<code>
				<keyword>Current</keyword>
			</code> is available for that purpose.  A typical use, in a routine 
			<code>
				<feature_name>merge</feature_name>
			</code> 
			<code>
				<symbol>(</symbol>
			</code>
			<code>
				<local_variable>other</local_variable>
			</code> : 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>
			<code>
				<symbol>)</symbol>
			</code> of class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>, would be a test of the form
		</paragraph>
		<code_block>
<keyword>if</keyword> <local_variable>other</local_variable> <symbol>=</symbol> <keyword>Current</keyword> <keyword>then</keyword>
	<feature_name>report_error</feature_name> <symbol>(</symbol><string>"Error: trying to merge an account with itself!"</string><symbol>)</symbol>
<keyword>else</keyword>
	<comment>... Normal processing (merging two different account) ...</comment>
<keyword>end</keyword>
</code_block>
		<paragraph>With these notions it is not hard to define precisely the overall scenario of a system execution by defining which object and routine will, at each instant, be the current object and the current routine:</paragraph>
		<paragraph> Starting a system execution, as we have seen, consists in creating an instance of the root class, the root object, and executing a designated creation procedure, the root procedure, with the root object as its target.  The root object is the initial current object, and the root procedure is the initial current procedure.  </paragraph>
		<paragraph> From then on only two events can change the current object and current procedure: a qualified routine call; and the termination of a routine.  </paragraph>
		<paragraph> In a call of the form 
			<code>
				<local_variable>target</local_variable>
			</code>.
			<code>
				<feature_name>routine</feature_name>
			</code> 
			<code>
				<symbol>(</symbol>
			</code>...
			<code>
				<symbol>)</symbol>
			</code>, 
			<code>
				<local_variable>target</local_variable>
			</code>denotes a certain object TC.  (If not, that is to say, if the value of target is void, attempting to execute the call will trigger an exception, as studied below.) The generating class of TC must, as per the Feature Call rule, contain a routine of name 
			<code>
				<feature_name>routine</feature_name>
			</code>. As the call starts, TC becomes the new current object and 
			<code>
				<feature_name>routine</feature_name>
			</code> becomes the new current routine.
		</paragraph>
		<paragraph> When a routine execution terminates, the target object and routine of the most recent non-terminated call -- which, just before just before the terminated call, were the current object and the current routine -- assume again the role of current object and current routine.  </paragraph>
		<paragraph> The only exception to the last rule is termination of the original root procedure call; in this case the entire execution terminates.  </paragraph>
		<heading>
			<size>2</size>
			<content>Abstraction</content>
		</heading>
		<paragraph>The description of assignments stated that in 
			<code>
				<local_variable>x</local_variable> 
				<symbol>:=</symbol> 
				<local_variable>y</local_variable>
			</code> the target 
			<code>
				<local_variable>x</local_variable>
			</code> must be an entity.  More precisely it must be a 
			<bold>writable</bold> entity.  This notion excludes formal routine arguments: as noted, a routine 
			<code>
				<feature_name>r</feature_name>
			</code>
			<code>
				<symbol> (</symbol>
			</code>
			<code>
				<local_variable>arg</local_variable>
			</code>: 
			<code>
				<class_name>SOME_TYPE</class_name>
			</code>
			<code>
				<symbol>)</symbol>
			</code> may assign to 
			<code>
				<local_variable>arg</local_variable>
			</code> (reattaching it to a different object), although it can change the attached objects through calls of the form 
			<code>
				<local_variable>arg</local_variable>
			</code>.
			<code>
				<feature_name>procedure</feature_name>
			</code> 
			<code>
				<symbol>(</symbol>
			</code>...
			<code>
				<symbol>)</symbol>
			</code>.
		</paragraph>
		<paragraph>Restricting assignment targets to entities precludes assignments of the form 
			<code>
				<local_variable>obj</local_variable>
			</code>.
			<code>
				<feature_name>some_attribute</feature_name>
			</code>: 
			<code>
				<string>some_value</string>
			</code>, since the left-hand side 
			<code>
				<local_variable>obj</local_variable>
			</code>.
			<code>
				<feature_name>some_attribute</feature_name>
			</code> is an expression (a feature call), not an entity: you may no more assign to 
			<code>
				<local_variable>obj</local_variable>
			</code>.
			<code>
				<feature_name>some_attribute</feature_name>
			</code> than to, say, 
			<code>
				<string>b + a</string>
			</code> -- another expression that is also, formally, a feature call.
		</paragraph>
		<paragraph>To obtain the intended effect of such an assignment you may use a procedure call of the form 
			<code>
				<local_variable>obj</local_variable>
			</code>.
			<code>
				<feature_name>set_attribute</feature_name>
			</code> (
			<code>
				<string>some_value</string>
			</code>), where the base class of 
			<code>
				<local_variable>obj</local_variable>
			</code> 's type has defined the procedure
		</paragraph>
		<code_block>
<feature_name>set_attribute</feature_name> <symbol>(</symbol><local_variable>v</local_variable><symbol>:</symbol> <class_name>VALUE_TYPE</class_name>) <keyword>is</keyword>
			<comment>-- Set value of attribute to v.</comment>
		<keyword>do</keyword>
			<feature_name>attribute</feature_name> <symbol>:=</symbol> <local_variable>v</local_variable>
		<keyword>end</keyword>
</code_block>
		<paragraph>This rule is essential to enforcing the method.  Permitting direct assignments to an object's fields -- as in C++ and Java -- would violate all the tenets of information hiding by letting clients circumvent the interface carefully crafted by the author of a supplier class.  It is the responsibility of each class author to define the exact privileges that the class gives to each of its clients, in particular field modification rights.  Building a class is like building a machine: you design the internals, to give yourself the appropriate mechanisms; and you design the control panel, letting users (clients) access the desired subset of these mechanisms, safely and conveniently.  </paragraph>
		<paragraph>The levels of privilege available to the class author include, for any field:</paragraph>
		<list ordered="false">
			<item>Hide the field completely from clients, by exporting the corresponding attribute to 
				<code>
					<class_name>NONE</class_name>
				</code>.
			</item>
			<item>Export it, but in read-only mode, by not exporting any procedure that modifies it.  </item>
			<item>Export it for free read and write by any client, by also exporting a procedure of the 
				<code>
					<feature_name>set_attribute</feature_name>
				</code> kind.
			</item>
			<item>Export it in 
				<bold>restricted-write</bold> mode, by exporting a procedure such as 
				<code>
					<feature_name>deposit</feature_name>
				</code> of class 
				<code>
					<class_name>ACCOUNT</class_name>
				</code>, which adds a specified amount to the 
				<code>
					<feature_name>balance</feature_name>
				</code> field, rather than directly setting the balance.
			</item>
		</list>
		<paragraph>The last case is particularly interesting is that it allows the class designer to set the precise way in which clients will manipulate the class instances, respecting the properties of the class and its integrity.  The exported routines may, through the Design by Contract mechanism reviewed later (
			<link>
				<url>tutorial-09.xml#30455</url>
				<label>8</label>
			</link>), place some further restrictions on the permitted modifications, for example by requiring the withdrawn amount to be positive.
		</paragraph>
		<paragraph>These rules follow directly from the more general goals (reusability, extendibility, reliability) and principles (Uniform Access, information hiding) underlying Eiffel software design.  They reflect a view that each class must denote a well-understood abstraction, defined by a set of exported features chosen by the class designer -- the "control panel".  </paragraph>
		<paragraph>The class documentation (the 
			contract form, see page 
			<link>
				<url>tutorial-09.xml#78482</url>
				<label>44</label>
			</link>) makes this view clear to client authors; no violation of that interface is permitted.  This approach also paves the way for future 
			<bold>generalization</bold> -- the final step of the cluster lifecycle, seen earlier on page 
			<link>
				<url>tutorial-04.xml#10958</url>
				<label>9</label>
			</link> -- of the most promising components, and their inclusion into reusable libraries.
		</paragraph>
	</paragraph></document>
