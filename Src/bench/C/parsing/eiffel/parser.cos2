#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 13 "parser.y"
#include "eiffel_c.h"

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2

#line 37 "parser.y"
typedef union {
	char *node;
	int32  value;
	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
#line 40 "y.tab.c"
#define TE_DOTDOT 257
#define TE_IMPLIES 258
#define TE_OR 259
#define TE_XOR 260
#define TE_AND 261
#define TE_NE 262
#define TE_EQ 263
#define TE_LT 264
#define TE_GT 265
#define TE_LE 266
#define TE_GE 267
#define TE_PLUS 268
#define TE_MINUS 269
#define TE_STAR 270
#define TE_SLASH 271
#define TE_MOD 272
#define TE_DIV 273
#define TE_POWER 274
#define TE_FREE 275
#define TE_NOT 276
#define TE_STRIP 277
#define TE_OLD 278
#define TE_DOT 279
#define TE_LPARAN 280
#define TE_ALIAS 281
#define TE_ALL 282
#define TE_INTEGER 283
#define TE_CHAR 284
#define TE_REAL 285
#define TE_STRING 286
#define TE_ID 287
#define TE_A_BIT 288
#define TE_BANG 289
#define TE_BIT 290
#define TE_SEMICOLON 291
#define TE_COLON 292
#define TE_COMMA 293
#define TE_CREATION 294
#define TE_LARRAY 295
#define TE_RARRAY 296
#define TE_RPARAN 297
#define TE_LCURLY 298
#define TE_RCURLY 299
#define TE_LSQURE 300
#define TE_RSQURE 301
#define TE_CONSTRAIN 302
#define TE_FALSE 303
#define TE_TRUE 304
#define TE_ACCEPT 305
#define TE_ADDRESS 306
#define TE_AS 307
#define TE_ASSIGN 308
#define TE_CHECK 309
#define TE_CLASS 310
#define TE_CURRENT 311
#define TE_DEBUG 312
#define TE_DEFERRED 313
#define TE_DO 314
#define TE_ELSE 315
#define TE_ELSEIF 316
#define TE_END 317
#define TE_ENSURE 318
#define TE_EXPANDED 319
#define TE_EXPORT 320
#define TE_EXTERNAL 321
#define TE_FEATURE 322
#define TE_FROM 323
#define TE_FROZEN 324
#define TE_IF 325
#define TE_INDEXING 326
#define TE_IN_END 327
#define TE_INFIX 328
#define TE_INHERIT 329
#define TE_INSPECT 330
#define TE_INVARIANT 331
#define TE_IS 332
#define TE_LIKE 333
#define TE_LOCAL 334
#define TE_LOOP 335
#define TE_OBSOLETE 336
#define TE_ONCE 337
#define TE_PREFIX 338
#define TE_REDEFINE 339
#define TE_RENAME 340
#define TE_REQUIRE 341
#define TE_RESCUE 342
#define TE_RESULT 343
#define TE_RETRY 344
#define TE_SELECT 345
#define TE_THEN 346
#define TE_UNDEFINE 347
#define TE_UNIQUE 348
#define TE_UNTIL 349
#define TE_VARIANT 350
#define TE_WHEN 351
#define EIF_ERROR2 352
#define EIF_ERROR3 353
#define EIF_ERROR4 354
#define EIF_ERROR5 355
#define EIF_ERROR6 356
#define EIF_ERROR7 357
#define YYERRCODE 256
short yylhs[] = {                                        -1,
  107,    0,   96,    1,  109,    1,    1,  108,  108,  112,
    3,    2,    2,  111,  111,    5,    5,  106,  106,  106,
   14,   14,   74,  113,   74,   16,   16,  114,  116,   15,
   17,   17,   88,  118,   88,  117,  117,  115,  115,  110,
  110,  119,  120,   18,  103,  103,   99,  121,  121,  100,
  100,  100,  101,  102,   97,   98,   19,  105,  105,  104,
  104,  104,   20,  123,   20,   20,  122,  122,   21,   21,
   21,   45,   45,   22,   22,  125,   22,  124,  124,   75,
   23,  127,   23,   23,  126,  126,   24,   25,  129,   25,
  128,  128,   26,   26,  130,   26,   27,   27,  131,   27,
   28,   28,  132,   28,   29,   29,  134,   29,  133,  133,
  136,  137,   76,  135,  135,  138,  138,   30,   30,  139,
   31,   32,   32,   32,   33,   34,   35,   35,  141,   36,
  142,   36,   37,  143,   37,  140,  140,  145,  145,  144,
  144,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   38,  146,   38,  147,   38,   40,  148,   40,  149,
   40,  151,   79,  150,  150,  152,  152,   41,   41,   41,
   42,   42,   42,   42,   42,   42,   42,   42,   43,   43,
   44,  154,   44,  153,  153,   46,  156,   46,  155,  155,
  155,  157,   47,   48,   48,  158,  159,   49,   50,  161,
   50,  160,  160,  162,   51,   94,  163,   94,   52,  164,
   52,  166,  167,   54,  165,  165,  169,  170,  171,   53,
  168,  168,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,  172,  173,  174,   55,   56,   56,   91,  175,
   91,   57,   57,   57,  176,   58,   59,   59,  178,   59,
  177,  177,   60,   61,  179,   61,   62,   62,   63,   63,
   64,  181,   64,  180,  180,   65,  182,   65,   65,   66,
   67,   67,   68,   68,   69,   69,   77,   77,   77,   77,
   77,   78,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,  183,   70,   71,   71,   71,   71,   92,   84,   84,
   84,   84,   84,   84,   84,   82,   81,   83,   93,   85,
   85,   89,   89,   80,   90,   86,   86,  185,   86,  184,
  184,  186,  186,  187,  187,    4,    6,    6,    6,    6,
    6,    6,   87,   87,   87,   87,   87,   87,    7,    7,
    8,    9,   95,   95,   95,   10,   11,   13,   13,   12,
  188,   72,
};
short yylen[] = {                                         2,
    0,   12,    1,    0,    0,    3,    1,    1,    3,    0,
    3,    0,    2,    1,    3,    1,    1,    0,    1,    1,
    0,    2,    0,    0,    2,    1,    2,    0,    0,    5,
    0,    1,    2,    0,    4,    1,    3,    0,    2,    1,
    0,    0,    0,    5,    1,    3,    2,    0,    1,    1,
    1,    1,    2,    2,    1,    1,    3,    0,    2,    1,
    1,    1,    0,    0,    3,    2,    2,    3,    2,    3,
    8,    0,    1,    0,    1,    0,    3,    1,    3,    3,
    0,    0,    3,    2,    2,    3,    2,    1,    0,    2,
    1,    3,    0,    1,    0,    3,    0,    1,    0,    3,
    0,    1,    0,    3,    0,    2,    0,    4,    0,    2,
    0,    0,    6,    1,    3,    0,    1,    0,    2,    0,
    8,    1,    1,    1,    3,    1,    0,    2,    0,    3,
    0,    3,    0,    0,    3,    3,    1,    2,    0,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    0,    3,    0,    4,    0,    0,    3,    0,
    4,    0,    2,    0,    1,    2,    3,    1,    3,    2,
    1,    2,    2,    3,    2,    2,    2,    2,    1,    2,
    2,    0,    4,    1,    3,    0,    0,    4,    0,    1,
    3,    0,    3,    0,    2,    0,    0,    9,    0,    0,
    2,    1,    2,    0,    5,    0,    0,    3,    0,    0,
    3,    0,    0,    7,    0,    2,    0,    0,    0,    7,
    1,    3,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    0,    0,    0,   12,    0,    2,    0,    0,
    3,    0,    4,    2,    0,    5,    0,    2,    0,    4,
    1,    3,    1,    0,    0,    3,    3,    3,    3,    3,
    0,    0,    2,    1,    2,    1,    0,    4,    2,    5,
    0,    1,    1,    1,    0,    3,    1,    1,    1,    1,
    1,    3,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    4,    3,    4,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
    2,    0,    5,    1,    2,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    5,    1,
    1,    3,    3,    2,    2,    0,    2,    0,    4,    1,
    3,    1,    3,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    0,    1,    1,    2,    1,    1,    1,    1,
    0,    4,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,   19,   20,    1,  346,   10,    8,
    0,    0,    0,    0,   13,   40,    0,    0,  364,  365,
  361,  368,  367,  359,  360,  369,   16,   14,   17,  347,
  348,  349,  350,  351,  352,    0,    0,    9,    3,    0,
  362,  366,    0,  187,    0,   15,    0,    0,    0,  192,
  190,    0,   22,    0,    0,    0,    0,  188,   66,    0,
    0,    0,    0,  193,  191,    0,    0,    0,    0,    0,
    0,  264,    0,  195,    0,   67,    0,   73,    0,    0,
  240,    0,   28,   26,    0,    0,  267,    0,  265,  180,
  181,    0,   70,    0,    0,   68,  162,    2,    0,   27,
   33,    0,    0,    0,    0,    0,  184,    0,    0,    0,
    0,    0,  241,    0,   29,   32,   36,    0,    0,    0,
   50,   91,   51,   52,    0,  176,  175,    0,    0,  178,
  177,  172,    0,  183,   78,    0,    0,   84,    0,    0,
    0,    0,    0,  318,    0,  312,    0,    0,  355,  356,
  371,    0,    0,    0,  353,  354,  357,  358,    0,    0,
  284,    0,  320,  319,  321,  285,  283,    0,  325,  163,
    0,   38,    0,   35,   55,   53,   56,   54,    0,  174,
  185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  308,  307,  309,    0,  310,    0,    0,    0,    0,    0,
    0,  334,  166,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  311,    0,    0,   37,   92,   80,   79,   85,
   88,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  326,  330,    0,  327,  337,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  306,  328,  167,   39,    0,    0,   86,    0,    0,   71,
  114,    0,    0,    0,    0,  372,  335,    0,    0,    0,
  340,    0,    0,    0,   49,   45,    0,    0,    0,    0,
  313,  329,    0,  333,    0,  316,  317,  315,    0,  339,
    0,    0,   47,  115,  341,   46,    0,    0,    0,  106,
  109,   44,    0,    0,    0,  119,    0,   57,  108,  110,
    0,   61,   60,  120,   62,   59,    0,    0,    0,    0,
    0,    0,  155,  162,  134,    0,    0,  162,  154,  109,
  124,  129,    0,  131,    0,  123,  122,  113,  156,    0,
  139,  370,  126,    0,  139,    0,    0,  130,    0,    0,
    0,  125,  132,  160,  162,  255,    0,    0,    0,  162,
    0,    0,  233,    0,    0,    0,  253,    0,  139,  146,
  147,  148,  149,  151,  144,  145,  142,  143,  150,    0,
  278,  280,  279,  281,  138,  128,  162,  159,  139,  121,
    0,  272,    0,    0,    0,  245,  139,    0,    0,    0,
    0,    0,    0,    0,  161,  256,    0,    0,  282,  248,
    0,  139,  234,  196,    0,    0,    0,    0,    0,  274,
  273,    0,  251,    0,    0,    0,  139,  217,    0,  213,
    0,  270,    0,  250,  246,  162,    0,  197,    0,  216,
    0,    0,  252,  238,    0,    0,    0,    0,    0,    0,
  221,    0,  207,    0,  276,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  139,  214,    0,    0,  210,
    0,    0,  202,    0,  229,  231,  228,  232,  230,  227,
  226,  222,  219,  208,    0,  235,  139,  198,    0,  203,
  139,  139,  211,  204,  220,    0,  139,  236,  205,
};
short yydgoto[] = {                                       2,
    3,    9,   10,  190,   28,   29,  155,  156,   32,   33,
  157,  363,  158,   49,   84,   85,   87,  274,  318,   55,
   66,   95,  112,  184,  232,  141,  189,  238,  319,  324,
  335,  355,  356,  364,  372,  357,  346,  341,  389,  367,
  159,  107,   74,   78,   79,   45,   51,   64,  390,  479,
  493,  491,  449,  391,  392,  457,  466,  393,  416,  394,
  377,  395,  396,   61,   72,  397,  413,  442,  452,  160,
  291,  161,  471,   69,  135,  330,  398,  399,  113,  162,
  163,  164,  165,  166,  245,  202,  167,  185,  246,  247,
   82,  168,  169,  474,  128,  121,  176,  178,  296,  122,
  123,  124,  297,  336,  328,    7,   13,   12,    4,   17,
   37,   14,   70,   99,  225,  172,  118,  102,  275,  312,
  298,   68,   60,  137,  110,  186,  139,  125,  233,  187,
  236,  279,  325,  321,  282,  331,  339,  283,  338,  368,
  361,  365,  350,  369,  370,  344,  348,  375,  407,  170,
  114,  171,  109,   92,   52,   47,   56,  447,  467,  494,
  480,  517,  486,  507,  450,  435,  461,  472,  459,  485,
  511,  417,  446,  512,   97,  432,  444,  431,  409,   73,
   62,  103,  194,  292,  250,  242,  243,  197,
};
short yysindex[] = {                                   -312,
    0,    0,  -74, -256,    0,    0,    0,    0,    0,    0,
 -252, -242, -250,   86,    0,    0, -256, -190,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  180, -187,    0,    0, -151,
    0,    0,   86,    0, -164,    0, -128, -278, -150,    0,
    0, -194,    0, -242,    0,  -92, -128,    0,    0, -190,
    0,  -71, -190,    0,    0, -242,  -57, -190,  -58,  -44,
   -6,    0,  -71,    0,  -57,    0,   12,    0, -165, -242,
    0,  -14,    0,    0,  -44,   26,    0,    0,    0,    0,
    0, -137,    0,    0,   20,    0,    0,    0,   -6,    0,
    0, -256, -117,    2, -190, -168,    0,  -57, -177, -117,
 -242,  -39,    0, 3165,    0,    0,    0,   22, -278, -278,
    0,    0,    0,    0,   54,    0,    0,   77,  -57,    0,
    0,    0, -137,    0,    0,   64,   68,    0,   -6,    0,
   61, 3165, 3165,    0, 3165,    0, 3165, 3165,    0,    0,
    0,  151,  172, -126,    0,    0,    0,    0, -242, 4175,
    0,  178,    0,    0,    0,    0,    0, 3165,    0,    0,
 3165,    0, -256,    0,    0,    0,    0,    0, -117,    0,
    0, -117, -117, -242,  191,   -6, -117,    0,  121,  196,
    0,    0,    0,  208,    0, 4117, 3165, -256, -256,  194,
 3165,    0,    0, 3165, 3018, 3165, 3040, 3165, 3165, 3165,
 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
 3165, -256,    0, -242,    0,    0,    0,    0,    0,    0,
    0,    0, -117, -242,   54, -117,    0,  187, -256,  226,
 4175,  237,  235,  196,    0,    0,  260,    0,    0, 3062,
 4175, 4156, 3165, 4191, 4206, 3165, 4220, 2219, 2219, 2219,
 2219, 2219, 2219, 1732, 1732,  102,  102,  102,  102,  102,
    0,    0,    0,    0,  217,   54,    0,   54, -117,    0,
    0,  250,  257, -256, 3165,    0,    0, -256, -109, 4175,
    0,   99, 4191, 4220,    0,    0,  258, -117,   54, -256,
    0,    0, 4175,    0,  260,    0,    0,    0, 3062,    0,
  217,  275,    0,    0,    0,    0,  259, -242,  276,    0,
    0,    0, -137,  246,  284,    0, -192,    0,    0,    0,
 -256,    0,    0,    0,    0,    0,  250,  247,  297,  282,
  256, -137,    0,    0,    0,  236, -242,    0,    0,    0,
    0,    0,  316,    0,  285,    0,    0,    0,    0,    0,
    0,    0,    0,  323,    0,  283,  296,    0, 3940,  349,
  316,    0,    0,    0,    0,    0,  325, 3165, -137,    0,
  151,  370,    0, 3165, 3165, -253,    0, -264,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  178,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4135,    0,  365,  338,  380,    0,    0, 3223, 4175, 3165,
 3165, 3165, 3165,  349,    0,    0,  226, -270,    0,    0,
  316,    0,    0,    0,  330, 4175, 4175, 4175, 4175,    0,
    0,  401,    0,  104,  369,  356,    0,    0,  330,    0,
 -256,    0,  316,    0,    0,    0,  339,    0,  -83,    0,
  373,  196,    0,    0, 3165,  344,    0,  438,  439,  443,
    0,  408,    0,  385,    0,  -52, 4175, 3165,  388,  410,
  -83,   39,    2,  -83,  382,    0,    0, 3165, 3484,    0,
  412, 3165,    0,  410,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4175,    0,    0,    0, 3264,    0,
    0,    0,    0,    0,    0,  420,    0,    0,    0,
};
short yyrindex[] = {                                      9,
  119,    0, -250, -123,    0,    0,    0,    0,    0,    0,
    0, 3272,    0,  209,    0,    0, -123,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   65,    0,    0,  265,
    0,    0,  209,    0, -272,    0,  -96,    0,   15,    0,
    0,    0,    0,  123,  254,  -19,    0,    0,    0,    0,
 -227,    0,    0,    0,    0,  131,  150,  336,  422,    0,
  165,    0,  -81,    0,   11,    0,   93,    0, 3287,  131,
    0,    0,    0,    0, -119,  454,    0, 2844,    0,    0,
    0,    0,    0,  111, -130,    0,    0,    0,    7,    0,
    0,    0,    0,  463,    0,    0,    0, 3984,    0,    0,
  230,  -64,    0, 3230,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  353,    0,    0,    0, 4036,    0,
    0,    0,    0,    0,    0,    0,  428,    0,    0, -114,
 -231,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  249,  348, 2660,    0,    0,    0,    0, 2842, 3310,
    0,  447,    0,    0,    0,    0,    0,    0,    0,    0,
 3997,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  329,  -43,   19,    0, -263,  430,  546,
    0,    0,    0,    0,    0,    0,  453,    0,    0, 3124,
 2929,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2842, 3047,    0,    0,    0,    0,    0,
    0,    0,    0,  329,   46,    0, -170,    0,  455,  645,
   66,  457,    0,  546,    0,    0,  744,    0,    0,    0,
 3385, 2735,    0, 2480, 2399,    0, 2224, 1635, 1734, 1833,
 1932, 2031, 2130, 1437, 1536,  942, 1041, 1140, 1239, 1338,
    0,    0,    0,    0,  -40, 1392,    0, -230,    0,    0,
    0,  458,    0,    0,    0,    0,    0,    0,    0,  167,
    0,    0, 2561, 2318,    0,    0, 3445,    0,  437,    0,
    0,    0,  118,    0,  843,    0,    0,    0,    0,    0,
  -40, 2667,    0,    0,    0,    0,  470, 3369, 3392,    0,
    0,    0,    0,  -45,  479,    0, 1620,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  477,  531,    0, 2919,
  335,    0,    0,    0,    0,    0, 1521,    0,    0,    0,
    0,    0,    0,    0, -289,    0,    0,    0,    0,  106,
    0,    0,    0, -134,    0, 2941,  459,    0,    0, 3803,
    0,    0,    0,    0,    0,    0,    0,    0,  482,    0,
    0, 3944,    0,    0,    0,    0,    0, 3481,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3527,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  488,    0,    0,    0, -290,    0,
    0,    0,    0, 3849,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  183, 3573, 3619, 3665, 3711,    0,
    0, 3757,    0,    0,    0,   45,    0,    0,  183,    0,
    0,    0,    0,    0,    0,    0,  431,    0,  463,    0,
  462, 3894,    0,    0,    0,    0,  168, -275, -258, -255,
    0,  440,    0,    0,    0, 2834,  434,    0,  468,    0,
  463,    0,  463,  463,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  184,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  445,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    0,    0,  770,   -4,  745,  465,  -10,  -13, -102,    0,
   -9, -352,  -11,  472,  710,    0,  701,    0,    0,    0,
  733,    0,    0,  616,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  655, -110,    0,  -46,    0,    0,  771,    0,    0,    0,
  333,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  763,    0,    0,    0,    0,  -79,
  529,    0,  362,    0,  657,    0,    0,    0, -333,  478,
  484,  485,  487,    0, -179, -235,    0,   49,  560,  563,
    0,   -3,  497,    0,   -7,  -12,    0,    0,  559,  -98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   -8,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -166,    0,    0,
    0,    0,  522,    0,  542,    0,    0,    0,    0, -210,
    0,    0,    0,    0,  486,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  425,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4495
short yytable[] = {                                      11,
   31,  127,   35,   30,   34,   40,   36,   22,  287,   27,
  349,  136,   11,    1,  359,  200,    8,  225,  406,  248,
  235,   21,  181,   99,  212,  199,  212,  157,   90,   31,
    8,   35,   30,   34,  224,   36,   53,  223,   27,   15,
  422,  408,  272,  423,   21,   59,  414,   67,   16,   21,
   75,  420,  157,   98,  421,   67,   21,   76,   21,   18,
  212,  132,  191,  192,   99,  193,  276,  195,  196,  278,
  225,   96,  440,  425,   99,   19,   20,   26,  443,  108,
  227,   98,  180,  228,  136,   97,  100,  224,  223,   23,
  223,   21,  129,   22,   24,   23,   39,  117,   57,  126,
  463,  131,  138,   23,  302,   43,   58,  175,  177,  154,
   24,   25,  299,   97,  100,  133,  103,  241,    8,   88,
  108,  251,  464,  134,  252,  254,  255,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  130,   48,   12,   12,  102,  116,   44,   39,
  203,   93,  104,  200,  373,  332,  221,  103,   50,   12,
   12,   12,   12,   26,   12,  201,  154,  103,  226,   39,
  290,   48,   95,  293,   94,  230,  294,   39,   54,   12,
   12,  105,  127,  127,   19,   20,   81,  221,  221,  221,
  308,  221,  221,  244,  244,  106,  189,   25,  426,  313,
   21,  306,   94,    8,  189,  303,  433,  127,   81,   63,
  119,   25,  326,   95,   81,  273,   81,  244,  119,  221,
  120,  445,   71,   95,   94,  277,  475,  200,  120,  290,
   94,  347,   12,  307,  281,  263,  458,  221,    5,  488,
  263,   58,   77,   89,    6,   58,   48,  221,  221,  263,
  221,  221,   93,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  412,   19,
   20,   58,   81,  194,   93,  504,   58,   83,   58,  244,
   93,  194,   58,  244,   89,   58,  221,   48,    8,  221,
  221,   86,   58,   31,   89,  314,  513,   48,  411,  221,
  515,  516,   98,  179,  418,  419,  519,  140,   63,  322,
  108,  179,   91,   31,  173,   35,   30,   34,    4,   36,
  174,    4,   21,   31,  101,    8,  281,    4,   31,  108,
   31,   63,   11,   11,   31,   83,   63,   31,  358,  111,
  436,  437,  438,  439,   31,   63,  179,   11,   11,   11,
   11,   11,   11,   19,   20,   11,  470,   83,  342,   41,
  183,  342,   96,   83,  388,   83,  108,   11,   11,   21,
  182,   22,    8,   23,   11,  220,  144,   11,  497,  182,
  501,  470,  182,   11,   96,  477,    5,    5,   24,   25,
   96,  309,  111,  237,  237,  310,  453,   76,  489,  188,
  454,    5,    5,    5,    5,    5,    5,  221,  505,   64,
  343,  182,  509,  343,  221,  221,   41,   41,  135,  135,
   11,    5,    5,  441,   41,  182,  135,   75,    7,  198,
   75,    7,  221,  221,  221,  221,   72,    7,   76,   41,
   72,   26,  135,   72,   41,  469,  462,   41,   76,   75,
  199,   31,   41,   41,  468,   75,  222,   75,  266,  314,
  476,   41,   41,  314,   42,  237,   72,  496,  499,   72,
  469,   72,  231,  221,    5,  200,  495,  498,  500,  468,
   72,  266,  199,  200,  199,  221,  266,  239,   72,   72,
  249,  363,   31,  363,   72,  266,   72,  215,  201,  215,
  201,  221,   31,  280,  284,  221,  322,  322,  322,  322,
  322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
  322,  322,  322,  322,  322,  322,  322,   82,  322,  285,
  286,  322,  322,  322,  322,  322,  322,  322,  288,  322,
  295,  322,  300,  322,  322,  322,   41,  262,  351,  352,
  311,  322,  322,  301,  317,  320,  353,  322,  186,  322,
  322,  322,  322,  322,  322,  322,  322,  323,   41,  322,
  261,  322,  354,  322,   41,  261,   41,  327,  322,  322,
  329,  186,  322,  322,  261,  322,  186,  340,  342,  345,
  322,  322,  322,  186,  322,  186,  343,  322,  322,  322,
  186,  362,  366,  371,  322,  323,  323,  323,  323,  323,
  323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
  323,  323,  323,  323,  323,  323,   41,  323,  374,   65,
  323,  323,  323,  323,  323,  323,  323,  376,  323,  405,
  323,  410,  323,  323,  323,   41,  268,  133,  133,  415,
  323,  323,   65,  428,  429,  133,  323,   65,  323,  323,
  323,  323,  323,  323,  323,  323,   65,   41,  323,  268,
  323,  133,  323,   41,  268,   41,  430,  323,  323,  451,
  448,  323,  323,  268,  323,  455,  456,  473,  465,  323,
  323,  323,  478,  323,  481,  482,  323,  323,  323,  483,
  484,  487,  490,  323,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
  324,  324,  324,  324,  324,  492,  324,  503,  508,  324,
  324,  324,  324,  324,  324,  324,  518,  324,  239,  324,
   34,  324,  324,  324,   77,  363,  101,   77,  344,  324,
  324,  116,  345,  104,  117,  324,  107,  324,  324,  324,
  324,  324,  324,  324,  324,  111,   77,  324,  112,  324,
  271,  324,   77,  249,   77,  254,  324,  324,  206,  242,
  324,  324,  244,  324,  209,  218,   38,   46,  324,  324,
  324,  333,  324,  243,  100,  324,  324,  324,  334,  115,
   80,  234,  324,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  224,  510,   65,  336,  336,
  336,  336,  336,  336,  336,   89,  336,  315,  336,  229,
  336,  336,  336,  152,  152,  502,  400,  304,  336,  336,
  305,  152,  401,  402,  336,  403,  336,  336,  336,  336,
  336,  336,  336,  336,  152,  404,  336,  152,  336,  316,
  336,  360,  337,  460,  424,  336,  336,    0,    0,  336,
  336,    0,  336,    0,    0,    0,    0,  336,  336,  336,
    0,  336,    0,    0,  336,  336,  336,    0,    0,    0,
    0,  336,  286,  286,  286,  286,  286,  286,  286,  286,
  286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
  286,  286,  286,    0,  286,    0,    0,  286,  286,  286,
  286,  286,  286,  286,    0,  286,    0,  286,    0,  286,
  286,  286,    0,    0,    0,    0,    0,  286,  286,    0,
    0,    0,    0,  286,    0,  286,  286,  286,  286,  286,
  286,  286,  286,    0,    0,  286,    0,  286,    0,  286,
    0,    0,    0,    0,  286,  286,    0,    0,  286,  286,
    0,  286,    0,    0,    0,    0,  286,  286,  286,    0,
  286,    0,    0,  286,  286,  286,    0,    0,    0,    0,
  286,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,    0,  331,    0,    0,  331,  331,  331,  331,
  331,  331,  331,    0,  331,    0,  331,    0,  331,  331,
  331,    0,    0,    0,    0,    0,  331,  331,    0,    0,
    0,    0,  331,    0,  331,  331,  331,  331,  331,  331,
  331,  331,    0,    0,  331,    0,  331,    0,  331,    0,
    0,    0,    0,  331,  331,    0,    0,  331,  331,    0,
  331,    0,    0,    0,    0,  331,  331,  331,    0,  331,
    0,    0,  331,  331,  331,    0,    0,    0,    0,  331,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,    0,  332,    0,    0,  332,  332,  332,  332,  332,
  332,  332,    0,  332,    0,  332,    0,  332,  332,  332,
    0,    0,    0,    0,    0,  332,  332,    0,    0,    0,
    0,  332,    0,  332,  332,  332,  332,  332,  332,  332,
  332,    0,    0,  332,    0,  332,    0,  332,    0,    0,
    0,    0,  332,  332,    0,    0,  332,  332,    0,  332,
    0,    0,    0,    0,  332,  332,  332,    0,  332,    0,
    0,  332,  332,  332,    0,    0,    0,    0,  332,  289,
  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
  289,  289,  289,  289,  289,    0,    0,  289,  289,  289,
    0,  289,    0,    0,  289,  289,  289,  289,  289,  289,
  289,    0,  289,    0,  289,    0,  289,  289,  289,    0,
    0,    0,    0,    0,  289,  289,    0,    0,    0,    0,
  289,    0,  289,  289,  289,  289,  289,  289,  289,  289,
    0,    0,  289,    0,  289,    0,  289,    0,    0,    0,
    0,  289,  289,    0,    0,  289,  289,    0,  289,    0,
    0,    0,    0,  289,  289,  289,    0,  289,    0,    0,
  289,  289,  289,    0,    0,    0,    0,  289,  290,  290,
  290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
  290,  290,  290,  290,    0,    0,  290,  290,  290,    0,
  290,    0,    0,  290,  290,  290,  290,  290,  290,  290,
    0,  290,    0,  290,    0,  290,  290,  290,    0,    0,
    0,    0,    0,  290,  290,    0,    0,    0,    0,  290,
    0,  290,  290,  290,  290,  290,  290,  290,  290,    0,
    0,  290,    0,  290,    0,  290,    0,    0,    0,    0,
  290,  290,    0,    0,  290,  290,    0,  290,    0,    0,
    0,    0,  290,  290,  290,    0,  290,    0,    0,  290,
  290,  290,    0,    0,    0,    0,  290,  291,  291,  291,
  291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
  291,  291,  291,    0,    0,  291,  291,  291,    0,  291,
    0,    0,  291,  291,  291,  291,  291,  291,  291,    0,
  291,    0,  291,    0,  291,  291,  291,    0,    0,    0,
    0,    0,  291,  291,    0,    0,    0,    0,  291,    0,
  291,  291,  291,  291,  291,  291,  291,  291,    0,    0,
  291,    0,  291,    0,  291,    0,    0,    0,    0,  291,
  291,    0,    0,  291,  291,    0,  291,    0,    0,    0,
    0,  291,  291,  291,    0,  291,    0,    0,  291,  291,
  291,    0,    0,    0,    0,  291,  292,  292,  292,  292,
  292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
  292,  292,    0,    0,  292,  292,  292,    0,  292,    0,
    0,  292,  292,  292,  292,  292,  292,  292,    0,  292,
    0,  292,    0,  292,  292,  292,    0,    0,    0,    0,
    0,  292,  292,    0,    0,    0,    0,  292,    0,  292,
  292,  292,  292,  292,  292,  292,  292,    0,    0,  292,
    0,  292,    0,  292,    0,    0,    0,    0,  292,  292,
    0,    0,  292,  292,    0,  292,    0,    0,    0,    0,
  292,  292,  292,    0,  292,    0,    0,  292,  292,  292,
    0,    0,    0,    0,  292,  293,  293,  293,  293,  293,
  293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
  293,    0,    0,  293,  293,  293,    0,  293,    0,    0,
  293,  293,  293,  293,  293,  293,  293,    0,  293,    0,
  293,    0,  293,  293,  293,    0,    0,    0,    0,    0,
  293,  293,    0,    0,    0,    0,  293,    0,  293,  293,
  293,  293,  293,  293,  293,  293,    0,    0,  293,    0,
  293,    0,  293,    0,    0,    0,    0,  293,  293,    0,
    0,  293,  293,    0,  293,    0,    0,    0,    0,  293,
  293,  293,   90,  293,    0,    0,  293,  293,  293,   90,
    0,    0,    0,  293,  287,  287,  287,  287,  287,  287,
  287,  287,  287,  287,  287,  287,    0,    0,   90,    0,
    0,    0,  287,  287,  287,    0,  287,    0,    0,  287,
  287,  287,  287,  287,  287,  287,    0,  287,    0,  287,
   90,  287,  287,  287,    0,    0,   90,    0,   90,  287,
  287,    0,    0,    0,    0,  287,    0,  287,  287,  287,
  287,  287,  287,  287,  287,    0,    0,  287,    0,  287,
    0,  287,    0,    0,    0,    0,  287,  287,    0,    0,
  287,  287,    0,  287,    0,    0,    0,    0,  287,  287,
  287,    0,  287,    0,    0,  287,  287,  287,    0,    0,
    0,    0,  287,  288,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  288,    0,    0,   41,    0,    0,
    0,  288,  288,  288,    0,  288,    0,   41,  288,  288,
  288,  288,  288,  288,  288,    0,  288,    0,  288,    0,
  288,  288,  288,   41,   41,    0,    0,    0,  288,  288,
    0,   41,    0,    0,  288,    0,  288,  288,  288,  288,
  288,  288,  288,  288,    0,    0,  288,   41,  288,    0,
  288,    0,    0,    0,    0,  288,  288,    0,    0,  288,
  288,    0,  288,    0,    0,    0,    0,  288,  288,  288,
    0,  288,    0,    0,  288,  288,  288,    0,    0,    0,
    0,  288,  305,  305,  305,  305,  305,  305,  305,  305,
  305,  305,  363,    0,  363,    0,    0,    0,    0,    0,
  305,  305,  305,    0,  305,    0,    0,  305,  305,  305,
  305,  305,  305,  305,    0,  305,    0,  305,    0,  305,
  305,  305,   21,   21,    0,    0,    0,  305,  305,    0,
   21,    0,    0,  305,    0,  305,  305,  305,  305,  305,
  305,  305,  305,   21,    0,  305,   21,  305,    0,  305,
   21,    0,    0,    0,  305,  305,    0,    0,  305,  305,
    0,  305,    0,    0,    0,    0,  305,  305,  305,    0,
  305,    0,    0,  305,  305,  305,    0,    0,    0,    0,
  305,  304,  304,  304,  304,  304,  304,  304,  304,  304,
  304,  216,  217,  218,  219,  220,  144,    0,    0,  304,
  304,  304,    0,  304,    0,    0,  304,  304,  304,  304,
  304,  304,  304,    0,  304,    0,  304,    0,  304,  304,
  304,    0,    0,    0,    0,    0,  304,  304,    0,    0,
    0,    0,  304,    0,  304,  304,  304,  304,  304,  304,
  304,  304,    0,    0,  304,    0,  304,    0,  304,    0,
    0,    0,    0,  304,  304,    0,    0,  304,  304,    0,
  304,    0,    0,    0,    0,  304,  304,  304,    0,  304,
    0,    0,  304,  304,  304,    0,    0,    0,    0,  304,
  303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
    0,    0,    0,    0,    0,    0,    0,    0,  303,  303,
  303,    0,  303,    0,    0,  303,  303,  303,  303,  303,
  303,  303,    0,  303,    0,  303,    0,  303,  303,  303,
    0,    0,    0,    0,    0,  303,  303,    0,    0,    0,
    0,  303,    0,  303,  303,  303,  303,  303,  303,  303,
  303,    0,    0,  303,    0,  303,    0,  303,    0,    0,
    0,    0,  303,  303,    0,    0,  303,  303,    0,  303,
    0,    0,    0,    0,  303,  303,  303,    0,  303,    0,
    0,  303,  303,  303,    0,    0,    0,    0,  303,  301,
  301,  301,  301,  301,  301,  301,  301,  301,  301,    0,
    0,    0,    0,    0,    0,    0,    0,  301,  301,  301,
    0,  301,    0,    0,  301,  301,  301,  301,  301,  301,
  301,    0,  301,    0,  301,    0,  301,  301,  301,    0,
    0,    0,    0,    0,  301,  301,    0,    0,    0,    0,
  301,    0,  301,  301,  301,  301,  301,  301,  301,  301,
    0,    0,  301,    0,  301,    0,  301,    0,    0,    0,
    0,  301,  301,    0,    0,  301,  301,    0,  301,    0,
    0,    0,    0,  301,  301,  301,    0,  301,    0,    0,
  301,  301,  301,    0,    0,    0,    0,  301,  302,  302,
  302,  302,  302,  302,  302,  302,  302,  302,    0,    0,
    0,    0,    0,    0,    0,    0,  302,  302,  302,    0,
  302,    0,    0,  302,  302,  302,  302,  302,  302,  302,
    0,  302,    0,  302,    0,  302,  302,  302,    0,    0,
    0,    0,    0,  302,  302,    0,    0,    0,    0,  302,
    0,  302,  302,  302,  302,  302,  302,  302,  302,    0,
    0,  302,    0,  302,    0,  302,    0,    0,    0,    0,
  302,  302,    0,    0,  302,  302,    0,  302,    0,    0,
    0,    0,  302,  302,  302,    0,  302,    0,    0,  302,
  302,  302,    0,    0,    0,    0,  302,  300,  300,  300,
  300,  300,  300,  300,  300,  300,  300,    0,    0,    0,
    0,    0,    0,    0,    0,  300,  300,  300,    0,  300,
    0,    0,  300,  300,  300,  300,  300,  300,  300,    0,
  300,    0,  300,    0,  300,  300,  300,    0,    0,    0,
    0,    0,  300,  300,    0,    0,    0,    0,  300,    0,
  300,  300,  300,  300,  300,  300,  300,  300,    0,    0,
  300,    0,  300,    0,  300,    0,    0,    0,    0,  300,
  300,    0,    0,  300,  300,    0,  300,    0,    0,    0,
    0,  300,  300,  300,    0,  300,    0,    0,  300,  300,
  300,  294,  294,  294,  294,  300,  214,  215,  216,  217,
  218,  219,  220,  144,    0,    0,    0,    0,    0,  294,
  294,  294,    0,  294,    0,    0,  294,  294,  294,  294,
  294,  294,  294,    0,  294,    0,  294,    0,  294,  294,
  294,    0,    0,    0,    0,    0,  294,  294,    0,    0,
    0,    0,  294,    0,  294,  294,  294,  294,  294,  294,
  294,  294,    0,    0,  294,    0,  294,    0,  294,    0,
    0,    0,    0,  294,  294,    0,    0,  294,  294,    0,
  294,    0,    0,    0,    0,  294,  294,  294,    0,  294,
    0,    0,  294,  294,  294,  295,  295,  295,  295,  294,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  295,  295,  295,    0,  295,    0,    0,
  295,  295,  295,  295,  295,  295,  295,    0,  295,    0,
  295,    0,  295,  295,  295,    0,    0,    0,    0,    0,
  295,  295,    0,    0,    0,    0,  295,    0,  295,  295,
  295,  295,  295,  295,  295,  295,    0,    0,  295,    0,
  295,    0,  295,    0,    0,    0,    0,  295,  295,    0,
    0,  295,  295,    0,  295,    0,  299,  299,  299,  295,
  295,  295,    0,  295,    0,    0,  295,  295,  295,    0,
    0,    0,    0,  295,  299,  299,  299,    0,  299,    0,
    0,  299,  299,  299,  299,  299,  299,  299,    0,  299,
    0,  299,    0,  299,  299,  299,    0,    0,    0,    0,
    0,  299,  299,    0,    0,    0,    0,  299,    0,  299,
  299,  299,  299,  299,  299,  299,  299,    0,    0,  299,
    0,  299,    0,  299,    0,    0,    0,    0,  299,  299,
    0,    0,  299,  299,    0,  299,    0,  296,  296,    0,
  299,  299,  299,    0,  299,    0,    0,  299,  299,  299,
    0,    0,    0,    0,  299,  296,  296,  296,    0,  296,
    0,    0,  296,  296,  296,  296,  296,  296,  296,    0,
  296,    0,  296,    0,  296,  296,  296,    0,    0,    0,
    0,    0,  296,  296,    0,    0,    0,    0,  296,    0,
  296,  296,  296,  296,  296,  296,  296,  296,    0,    0,
  296,    0,  296,    0,  296,    0,    0,    0,    0,  296,
  296,    0,    0,  296,  296,    0,  296,    0,  297,  297,
    0,  296,  296,  296,    0,  296,    0,    0,  296,  296,
  296,    0,    0,    0,    0,  296,  297,  297,  297,    0,
  297,    0,    0,  297,  297,  297,  297,  297,  297,  297,
    0,  297,    0,  297,    0,  297,  297,  297,    0,    0,
    0,    0,    0,  297,  297,    0,    0,    0,    0,  297,
    0,  297,  297,  297,  297,  297,  297,  297,  297,    0,
    0,  297,    0,  297,    0,  297,    0,    0,    0,    0,
  297,  297,    0,    0,  297,  297,    0,  297,    0,    0,
    0,    0,  297,  297,  297,    0,  297,    0,    0,  297,
  297,  297,    0,    0,    0,    0,  297,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,    0,
    0,    0,  336,  336,  336,  336,  336,  336,    0,    0,
  336,    0,    0,  105,  336,    0,    0,  105,  105,    0,
    0,    0,  336,  336,    0,    0,    0,    0,    0,    0,
  336,    0,  336,  336,    0,    0,  336,    0,    0,    0,
  336,    0,    0,  105,    0,    0,    0,    0,  105,    0,
  105,    0,  298,  336,  105,    0,  336,  105,  105,    0,
    0,  336,  336,    0,  105,    0,    0,    0,  336,  336,
  298,  298,  298,    0,  298,  336,    0,  298,  298,  298,
  298,  298,  298,  298,    0,  298,    0,  298,    0,  298,
  298,  298,    0,    0,    0,    0,    0,  298,  298,    0,
    0,    0,    0,  298,    0,  298,  298,  298,  298,  298,
  298,  298,  298,    0,    0,  298,    0,  298,    0,  298,
    0,    0,    0,    0,  298,  298,    0,    0,  298,  298,
    0,  298,    0,    0,    0,    0,  298,  298,  298,    0,
  298,    0,    0,  298,  298,  298,    0,    0,    0,    0,
  298,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,   41,
   41,    0,  336,    0,    0,    0,   41,   41,   41,   41,
    0,   41,    0,    0,   41,   41,   41,   41,   41,   41,
   32,    0,    0,    0,    0,    0,   41,  269,    0,    0,
    0,    0,    0,    0,   41,   41,    0,    0,    0,    0,
    0,    0,   41,    0,   41,   41,    0,    0,   41,    0,
  269,    0,   41,    0,    0,  269,    0,    0,    0,    0,
    0,   32,    0,    0,  269,   41,    0,    0,   41,    0,
    0,   32,  336,   41,   41,    0,  153,  153,    0,    0,
   41,   41,    0,  153,  153,  153,  153,   41,  153,    0,
    0,  153,  153,  153,  153,  153,  153,    0,  158,  158,
    0,    0,    0,  153,    0,  158,  158,  158,  158,  170,
  158,  153,  153,  158,  158,  158,  158,  158,  158,  153,
    0,  153,  153,    0,    0,  158,    0,    0,    0,  153,
    0,  170,  170,  158,  158,  170,    0,    0,    0,  170,
    0,  158,  153,    0,    0,  153,    0,  158,    0,    0,
    0,  153,  170,    0,    0,  170,    0,    0,    0,    0,
  170,    0,    0,    0,  153,    0,    0,  170,  170,    0,
    0,    0,  158,  158,    0,  142,  143,    0,    0,    0,
    0,    0,  144,  145,  146,  147,  158,  148,    0,    0,
  149,   21,  150,   22,    8,   23,    0,  142,  143,    0,
    0,    0,  151,    0,  144,  145,  146,  147,    0,  148,
   24,   25,  149,   21,  150,   22,    8,   23,  152,  142,
  143,    0,  253,   42,  151,    0,  144,  145,  146,  147,
    0,  148,   24,   25,  149,   21,  150,   22,    8,   23,
  152,    0,    0,    0,    0,    0,  151,    0,    0,    0,
  153,    0,    0,   30,   24,   25,    0,  289,   30,    0,
   42,    0,  152,   26,   42,    0,    0,   30,    0,    0,
    0,    0,  153,    0,   42,  256,    0,    0,    0,    0,
    0,  338,  338,    0,    0,   26,    0,    0,  338,  338,
  338,  338,    0,  338,  153,    0,  338,  338,  338,  338,
  338,  338,    0,    0,    0,    0,    0,   26,  338,    0,
    0,    0,    0,    0,    0,    0,  338,  338,    0,  338,
    0,    0,  142,  143,  338,    0,    0,    0,    0,  144,
  145,  146,  147,    0,  148,    0,    0,  149,   21,  150,
   22,    8,   23,    0,    0,    0,    0,    0,    0,  151,
    0,    0,    0,    0,    0,    0,  338,   24,   25,    0,
    0,    0,    0,    0,    0,  152,    0,    0,    0,  338,
  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,  144,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   26,  204,  205,  206,  207,  208,  209,  210,  211,  212,
  213,  214,  215,  216,  217,  218,  219,  220,  144,   41,
   41,    0,  164,  164,    0,    0,  164,    0,    0,    0,
  164,    0,    0,    0,   41,   41,   41,   41,   41,   41,
    0,    0,    0,  164,    0,    0,  164,    0,  434,    0,
    0,  164,    0,   69,   41,   41,    0,   69,  164,  164,
   69,    6,    0,    0,    6,  168,  168,  168,    0,  168,
    6,    0,  168,  168,  168,  168,  168,  168,    0,    0,
  168,    0,    0,    0,  168,    0,   74,    0,   69,  514,
    0,    0,  168,  168,    0,    0,    0,   69,    0,    0,
  168,    0,  168,  168,    0,   74,  168,   41,    0,    0,
  168,   74,    0,   74,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  168,    0,    0,  168,    0,    0,    0,
    0,  168,  168,    0,    0,   41,    0,    0,  168,  168,
  169,  169,  169,    0,  169,  168,    0,  169,  169,  169,
  169,  169,  169,    0,    0,  169,    0,    0,  118,  169,
    0,    0,  118,    0,    0,   41,    0,  169,  169,    0,
   41,    0,   41,    0,    0,  169,   41,  169,  169,   41,
    0,  169,    0,    0,    0,  169,   41,    0,  118,    0,
    0,    0,    0,  118,    0,  118,    0,    0,  169,  118,
    0,  169,  118,  118,   43,    0,  169,  169,    0,  118,
    0,   43,    0,  169,  169,   43,   43,    0,    0,    0,
  169,  204,  205,  206,  207,  208,  209,  210,  211,  212,
  213,  214,  215,  216,  217,  218,  219,  220,  144,  336,
    0,   43,    0,    0,    0,    0,   43,  336,   43,  336,
    0,  336,   43,    0,    0,   43,   43,    0,    0,    0,
    0,    0,   43,    0,    0,    0,    0,    0,    0,  336,
    0,  336,  336,    0,    0,  336,  336,  336,  336,    0,
    0,    0,    0,  336,    0,  336,  277,    0,    0,    0,
  336,  336,    0,  277,    0,  277,    0,  277,  506,    0,
    0,    0,  336,  336,  336,    0,    0,    0,    0,  336,
  336,  336,    0,    0,    0,  277,    0,  277,  277,    0,
    0,  277,  277,  277,  277,    0,    0,    0,    0,  277,
    0,  277,  260,    0,    0,    0,  277,  277,    0,  260,
    0,  260,    0,  260,    0,    0,    0,    0,  277,  277,
  277,    0,    0,    0,    0,  277,  277,  277,    0,    0,
    0,  260,    0,  260,  260,    0,    0,  260,  260,  260,
  260,    0,    0,    0,    0,  260,    0,  260,  258,    0,
    0,    0,  260,  260,    0,  258,    0,  258,    0,  258,
    0,    0,    0,    0,  260,  260,  260,    0,    0,    0,
    0,  260,  260,  260,    0,    0,    0,  258,    0,  258,
  258,    0,    0,  258,  258,  258,  258,    0,    0,    0,
    0,  258,    0,  258,  259,    0,    0,    0,  258,  258,
    0,  259,    0,  259,    0,  259,    0,    0,    0,    0,
  258,  258,  258,    0,    0,    0,    0,  258,  258,  258,
    0,    0,    0,  259,    0,  259,  259,    0,    0,  259,
  259,  259,  259,    0,    0,    0,    0,  259,    0,  259,
  257,    0,    0,    0,  259,  259,    0,  257,    0,  257,
    0,  257,    0,    0,    0,    0,  259,  259,  259,    0,
    0,    0,    0,  259,  259,  259,    0,    0,    0,  257,
    0,  257,  257,    0,    0,  257,  257,  257,  257,    0,
    0,    0,    0,  257,    0,  257,  275,    0,    0,    0,
  257,  257,    0,  275,    0,  275,    0,  275,    0,    0,
    0,    0,  257,  257,  257,    0,    0,    0,    0,  257,
  257,  257,    0,    0,    0,  275,    0,  275,  275,    0,
    0,  275,  275,  275,  275,    0,    0,    0,    0,  275,
    0,  275,  141,    0,    0,    0,  275,  275,    0,  141,
    0,  141,    0,    0,    0,    0,    0,    0,  275,  275,
  275,    0,    0,    0,    0,  275,  275,  275,    0,    0,
    0,  141,    0,  141,  141,    0,    0,  137,  137,  137,
  137,    0,    0,    0,    0,  141,    0,  141,  140,    0,
    0,    0,  141,  137,    0,  140,    0,  140,    0,    0,
    0,    0,    0,    0,  137,  141,  141,    0,    0,    0,
    0,  137,  137,  137,    0,    0,    0,  140,    0,  140,
  140,    0,    0,  136,  136,  136,  136,    0,    0,    0,
    0,  140,    0,  140,    0,    0,    0,    0,  140,  136,
  336,    0,  336,    0,  336,    0,    0,    0,    0,    0,
  136,  140,  140,    0,    0,    0,    0,  136,  136,  136,
    0,    0,  336,    0,  336,  336,    0,    0,  336,  336,
  336,  336,    0,    0,    0,    0,  336,    0,  336,  378,
    0,    0,    0,  336,  336,    0,    8,    0,  379,    0,
  247,    0,  247,    0,  247,  336,  336,  336,    0,    0,
    0,    0,  336,  336,  336,    0,    0,    0,  380,    0,
  381,  382,  247,    0,  247,  247,    0,    0,    0,    0,
  247,    0,  383,    0,  384,    0,  247,    0,  247,  385,
  171,    0,  171,  247,  171,    0,  171,    0,    0,    0,
  171,    0,  386,  387,  171,    0,  247,  247,    0,    0,
    0,    0,    0,    0,    0,    0,  171,  171,    0,    0,
  171,    0,    0,    0,  171,  171,    0,  171,    0,  165,
  165,  171,    0,  165,  171,  171,    0,  165,    0,    0,
  171,  171,  173,    0,  173,    0,  173,    0,  173,    0,
  165,    0,  173,  165,    0,    0,  173,    0,  165,    0,
    0,    0,    0,    0,    0,  165,  165,    0,  173,  173,
    0,    0,  173,    0,    0,    0,  173,  173,    0,  173,
    0,    0,    0,  173,    0,    0,  173,  173,    0,    0,
    0,    0,  173,  173,  204,  205,  206,  207,  208,  209,
  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
  220,  144,  204,  205,  206,  207,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,  144,
    0,    0,    0,  240,  205,  206,  207,  208,  209,  210,
  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
  144,  427,  204,  205,  206,  207,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,  144,
  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
  216,  217,  218,  219,  220,  144,  207,  208,  209,  210,
  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
  144,  208,  209,  210,  211,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  144,
};
short yycheck[] = {                                       4,
   14,  104,   14,   14,   14,   18,   14,  286,  244,   14,
  344,  110,   17,  326,  348,  280,  287,  293,  371,  199,
  187,  294,  133,  287,  315,  279,  317,  317,   75,   43,
  287,   43,   43,   43,  293,   43,   48,  293,   43,  292,
  305,  375,  222,  308,  317,   54,  380,   60,  291,  322,
   63,  305,  342,  317,  308,   68,  329,   66,  331,  310,
  351,  108,  142,  143,  328,  145,  233,  147,  148,  236,
  346,   80,  343,  407,  338,  268,  269,  356,  431,   92,
  179,  345,  129,  182,  183,  317,  317,  346,  168,  317,
  346,  284,  105,  286,  322,  288,  287,  102,  293,  104,
  453,  106,  111,  331,  284,  293,  301,  119,  120,  114,
  303,  304,  279,  345,  345,  293,  287,  197,  287,   71,
  133,  201,  456,  301,  204,  205,  206,  207,  208,  209,
  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
  220,  221,  311,  336,  268,  269,  317,   99,  300,  287,
  159,  317,  290,  280,  365,  348,  160,  328,  287,  283,
  284,  285,  286,  356,  288,  292,  171,  338,  173,  287,
  250,  336,  287,  253,  340,  184,  256,  287,  329,  303,
  304,  319,  317,  318,  268,  269,  317,  191,  192,  193,
  289,  195,  196,  198,  199,  333,  293,  317,  409,  298,
  284,  311,  317,  287,  301,  285,  417,  342,  339,  302,
  328,  331,  323,  328,  345,  224,  347,  222,  328,  223,
  338,  432,  294,  338,  339,  234,  462,  280,  338,  309,
  345,  342,  356,  343,  239,  317,  447,  241,  313,  292,
  322,  287,  300,  287,  319,  291,  287,  251,  252,  331,
  254,  255,  317,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  379,  268,
  269,  317,  331,  293,  339,  486,  322,  322,  324,  284,
  345,  301,  328,  288,  328,  331,  290,  328,  287,  293,
  294,  298,  338,  287,  338,  300,  507,  338,  378,  303,
  511,  512,  317,  293,  384,  385,  517,  347,  294,  318,
  323,  301,  301,  327,  293,  327,  327,  327,  310,  327,
  299,  313,  284,  317,  299,  287,  331,  319,  322,  342,
  324,  317,  268,  269,  328,  317,  322,  331,  347,  320,
  420,  421,  422,  423,  338,  331,  293,  283,  284,  285,
  286,  287,  288,  268,  269,  291,  459,  339,  293,  283,
  293,  296,  317,  345,  369,  347,  379,  303,  304,  284,
  307,  286,  287,  288,  310,  274,  275,  313,  481,  287,
  483,  484,  290,  319,  339,  465,  268,  269,  303,  304,
  345,  293,  287,  349,  350,  297,  293,  287,  478,  339,
  297,  283,  284,  285,  286,  287,  288,  411,  488,  287,
  293,  319,  492,  296,  418,  419,  294,  287,  313,  314,
  356,  303,  304,  428,  294,  333,  321,  317,  310,  279,
  320,  313,  436,  437,  438,  439,  287,  319,  328,  317,
  291,  356,  337,  294,  322,  459,  451,  317,  338,  339,
  279,  287,  322,  331,  459,  345,  279,  347,  294,  293,
  465,  331,  283,  297,  285,  345,  317,  481,  482,  320,
  484,  322,  282,  477,  356,  280,  481,  482,  483,  484,
  331,  317,  315,  316,  317,  489,  322,  280,  339,  340,
  297,  283,  328,  285,  345,  331,  347,  315,  315,  317,
  317,  505,  338,  317,  279,  509,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  298,  280,  293,
  296,  283,  284,  285,  286,  287,  288,  289,  279,  291,
  324,  293,  293,  295,  296,  297,  317,  294,  313,  314,
  293,  303,  304,  297,  280,  297,  321,  309,  294,  311,
  312,  313,  314,  315,  316,  317,  318,  292,  339,  321,
  317,  323,  337,  325,  345,  322,  347,  332,  330,  331,
  297,  317,  334,  335,  331,  337,  322,  341,  292,  334,
  342,  343,  344,  329,  346,  331,  315,  349,  350,  351,
  336,  286,  318,  281,  356,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  298,  280,  346,  294,
  283,  284,  285,  286,  287,  288,  289,  342,  291,  291,
  293,  317,  295,  296,  297,  317,  294,  313,  314,  280,
  303,  304,  317,  289,  317,  321,  309,  322,  311,  312,
  313,  314,  315,  316,  317,  318,  331,  339,  321,  317,
  323,  337,  325,  345,  322,  347,  297,  330,  331,  279,
  351,  334,  335,  331,  337,  317,  331,  315,  350,  342,
  343,  344,  349,  346,  257,  257,  349,  350,  351,  257,
  293,  317,  315,  356,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  316,  280,  346,  317,  283,
  284,  285,  286,  287,  288,  289,  317,  291,  317,  293,
  287,  295,  296,  297,  317,  283,  317,  320,  296,  303,
  304,  297,  296,  317,  297,  309,  287,  311,  312,  313,
  314,  315,  316,  317,  318,  287,  339,  321,  292,  323,
  289,  325,  345,  286,  347,  317,  330,  331,  317,  349,
  334,  335,  349,  337,  317,  346,   17,   43,  342,  343,
  344,  327,  346,  349,   85,  349,  350,  351,  327,   99,
   68,  186,  356,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  171,  494,   57,  283,  284,
  285,  286,  287,  288,  289,   73,  291,  309,  293,  183,
  295,  296,  297,  313,  314,  484,  369,  288,  303,  304,
  288,  321,  369,  369,  309,  369,  311,  312,  313,  314,
  315,  316,  317,  318,  334,  369,  321,  337,  323,  311,
  325,  350,  331,  449,  389,  330,  331,   -1,   -1,  334,
  335,   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,
   -1,  346,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,
   -1,  356,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,
  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,
   -1,   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,
   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,
  346,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,   -1,
  356,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  346,
   -1,   -1,  349,  350,  351,   -1,   -1,   -1,   -1,  356,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,
  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,
   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  346,   -1,
   -1,  349,  350,  351,   -1,   -1,   -1,   -1,  356,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,  278,
   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,  288,
  289,   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,
   -1,   -1,   -1,  342,  343,  344,   -1,  346,   -1,   -1,
  349,  350,  351,   -1,   -1,   -1,   -1,  356,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,
  350,  351,   -1,   -1,   -1,   -1,  356,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,  289,   -1,
  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,   -1,
  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,
  351,   -1,   -1,   -1,   -1,  356,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,   -1,   -1,  276,  277,  278,   -1,  280,   -1,
   -1,  283,  284,  285,  286,  287,  288,  289,   -1,  291,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,   -1,  321,
   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,  335,   -1,  337,   -1,   -1,   -1,   -1,
  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,  351,
   -1,   -1,   -1,   -1,  356,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   -1,   -1,  276,  277,  278,   -1,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,  289,   -1,  291,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,   -1,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,  314,  315,  316,  317,  318,   -1,   -1,  321,   -1,
  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,  335,   -1,  337,   -1,   -1,   -1,   -1,  342,
  343,  344,  291,  346,   -1,   -1,  349,  350,  351,  298,
   -1,   -1,   -1,  356,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,   -1,   -1,  317,   -1,
   -1,   -1,  276,  277,  278,   -1,  280,   -1,   -1,  283,
  284,  285,  286,  287,  288,  289,   -1,  291,   -1,  293,
  339,  295,  296,  297,   -1,   -1,  345,   -1,  347,  303,
  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,  321,   -1,  323,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,  335,   -1,  337,   -1,   -1,   -1,   -1,  342,  343,
  344,   -1,  346,   -1,   -1,  349,  350,  351,   -1,   -1,
   -1,   -1,  356,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,   -1,   -1,  287,   -1,   -1,
   -1,  276,  277,  278,   -1,  280,   -1,  297,  283,  284,
  285,  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,
  295,  296,  297,  313,  314,   -1,   -1,   -1,  303,  304,
   -1,  321,   -1,   -1,  309,   -1,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,   -1,  321,  337,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
  335,   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,
   -1,  346,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,
   -1,  356,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  276,  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,
  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,
  296,  297,  313,  314,   -1,   -1,   -1,  303,  304,   -1,
  321,   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,
  316,  317,  318,  334,   -1,  321,  337,  323,   -1,  325,
  341,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,
   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,
  346,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,   -1,
  356,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  270,  271,  272,  273,  274,  275,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  346,
   -1,   -1,  349,  350,  351,   -1,   -1,   -1,   -1,  356,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,
  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,
  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,
   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  346,   -1,
   -1,  349,  350,  351,   -1,   -1,   -1,   -1,  356,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,
   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,  288,
  289,   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,
  309,   -1,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,
   -1,   -1,   -1,  342,  343,  344,   -1,  346,   -1,   -1,
  349,  350,  351,   -1,   -1,   -1,   -1,  356,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,
  350,  351,   -1,   -1,   -1,   -1,  356,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,  289,   -1,
  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,   -1,
  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,
  351,  258,  259,  260,  261,  356,  268,  269,  270,  271,
  272,  273,  274,  275,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,  346,
   -1,   -1,  349,  350,  351,  258,  259,  260,  261,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  276,  277,  278,   -1,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,  289,   -1,  291,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,   -1,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,  314,  315,  316,  317,  318,   -1,   -1,  321,   -1,
  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,  335,   -1,  337,   -1,  258,  259,  260,  342,
  343,  344,   -1,  346,   -1,   -1,  349,  350,  351,   -1,
   -1,   -1,   -1,  356,  276,  277,  278,   -1,  280,   -1,
   -1,  283,  284,  285,  286,  287,  288,  289,   -1,  291,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,   -1,  321,
   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,  335,   -1,  337,   -1,  258,  259,   -1,
  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,  351,
   -1,   -1,   -1,   -1,  356,  276,  277,  278,   -1,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,  289,   -1,
  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,   -1,
  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,  335,   -1,  337,   -1,  258,  259,
   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,
  351,   -1,   -1,   -1,   -1,  356,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,  346,   -1,   -1,  349,
  350,  351,   -1,   -1,   -1,   -1,  356,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,
  291,   -1,   -1,  287,  295,   -1,   -1,  291,  292,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
  311,   -1,  313,  314,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,  317,   -1,   -1,   -1,   -1,  322,   -1,
  324,   -1,  258,  334,  328,   -1,  337,  331,  332,   -1,
   -1,  342,  343,   -1,  338,   -1,   -1,   -1,  349,  350,
  276,  277,  278,   -1,  280,  356,   -1,  283,  284,  285,
  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,
   -1,   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,
   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,
  346,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,   -1,
  356,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  268,
  269,   -1,  279,   -1,   -1,   -1,  275,  276,  277,  278,
   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,  288,
  287,   -1,   -1,   -1,   -1,   -1,  295,  294,   -1,   -1,
   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,  311,   -1,  313,  314,   -1,   -1,  317,   -1,
  317,   -1,  321,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  328,   -1,   -1,  331,  334,   -1,   -1,  337,   -1,
   -1,  338,  349,  342,  343,   -1,  268,  269,   -1,   -1,
  349,  350,   -1,  275,  276,  277,  278,  356,  280,   -1,
   -1,  283,  284,  285,  286,  287,  288,   -1,  268,  269,
   -1,   -1,   -1,  295,   -1,  275,  276,  277,  278,  291,
  280,  303,  304,  283,  284,  285,  286,  287,  288,  311,
   -1,  313,  314,   -1,   -1,  295,   -1,   -1,   -1,  321,
   -1,  313,  314,  303,  304,  317,   -1,   -1,   -1,  321,
   -1,  311,  334,   -1,   -1,  337,   -1,  317,   -1,   -1,
   -1,  343,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  342,   -1,   -1,   -1,  356,   -1,   -1,  349,  350,   -1,
   -1,   -1,  342,  343,   -1,  268,  269,   -1,   -1,   -1,
   -1,   -1,  275,  276,  277,  278,  356,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,   -1,  268,  269,   -1,
   -1,   -1,  295,   -1,  275,  276,  277,  278,   -1,  280,
  303,  304,  283,  284,  285,  286,  287,  288,  311,  268,
  269,   -1,  315,  287,  295,   -1,  275,  276,  277,  278,
   -1,  280,  303,  304,  283,  284,  285,  286,  287,  288,
  311,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  343,   -1,   -1,  317,  303,  304,   -1,  306,  322,   -1,
  324,   -1,  311,  356,  328,   -1,   -1,  331,   -1,   -1,
   -1,   -1,  343,   -1,  338,  346,   -1,   -1,   -1,   -1,
   -1,  268,  269,   -1,   -1,  356,   -1,   -1,  275,  276,
  277,  278,   -1,  280,  343,   -1,  283,  284,  285,  286,
  287,  288,   -1,   -1,   -1,   -1,   -1,  356,  295,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,  306,
   -1,   -1,  268,  269,  311,   -1,   -1,   -1,   -1,  275,
  276,  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,
  286,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,  311,   -1,   -1,   -1,  356,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  268,
  269,   -1,  313,  314,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,  334,   -1,   -1,  337,   -1,  346,   -1,
   -1,  342,   -1,  287,  303,  304,   -1,  291,  349,  350,
  294,  310,   -1,   -1,  313,  276,  277,  278,   -1,  280,
  319,   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,
  291,   -1,   -1,   -1,  295,   -1,  320,   -1,  322,  346,
   -1,   -1,  303,  304,   -1,   -1,   -1,  331,   -1,   -1,
  311,   -1,  313,  314,   -1,  339,  317,  356,   -1,   -1,
  321,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  342,  343,   -1,   -1,  287,   -1,   -1,  349,  350,
  276,  277,  278,   -1,  280,  356,   -1,  283,  284,  285,
  286,  287,  288,   -1,   -1,  291,   -1,   -1,  287,  295,
   -1,   -1,  291,   -1,   -1,  317,   -1,  303,  304,   -1,
  322,   -1,  324,   -1,   -1,  311,  328,  313,  314,  331,
   -1,  317,   -1,   -1,   -1,  321,  338,   -1,  317,   -1,
   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,  334,  328,
   -1,  337,  331,  332,  280,   -1,  342,  343,   -1,  338,
   -1,  287,   -1,  349,  350,  291,  292,   -1,   -1,   -1,
  356,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  279,
   -1,  317,   -1,   -1,   -1,   -1,  322,  287,  324,  289,
   -1,  291,  328,   -1,   -1,  331,  332,   -1,   -1,   -1,
   -1,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
   -1,   -1,   -1,  323,   -1,  325,  280,   -1,   -1,   -1,
  330,  331,   -1,  287,   -1,  289,   -1,  291,  335,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,   -1,   -1,  349,
  350,  351,   -1,   -1,   -1,  309,   -1,  311,  312,   -1,
   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,  323,
   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,  287,
   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,  342,  343,
  344,   -1,   -1,   -1,   -1,  349,  350,  351,   -1,   -1,
   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,  317,
  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,   -1,
   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,  291,
   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,   -1,
   -1,  349,  350,  351,   -1,   -1,   -1,  309,   -1,  311,
  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,
   -1,  323,   -1,  325,  280,   -1,   -1,   -1,  330,  331,
   -1,  287,   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,
  342,  343,  344,   -1,   -1,   -1,   -1,  349,  350,  351,
   -1,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,
  316,  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,
  280,   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,
   -1,  291,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,
   -1,   -1,   -1,  349,  350,  351,   -1,   -1,   -1,  309,
   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
   -1,   -1,   -1,  323,   -1,  325,  280,   -1,   -1,   -1,
  330,  331,   -1,  287,   -1,  289,   -1,  291,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,   -1,   -1,  349,
  350,  351,   -1,   -1,   -1,  309,   -1,  311,  312,   -1,
   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,  323,
   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,  287,
   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  342,  343,
  344,   -1,   -1,   -1,   -1,  349,  350,  351,   -1,   -1,
   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,  317,
  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,   -1,
   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,   -1,
   -1,  349,  350,  351,   -1,   -1,   -1,  309,   -1,  311,
  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,
   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
  287,   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,   -1,
  342,  343,  344,   -1,   -1,   -1,   -1,  349,  350,  351,
   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,
  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,
   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,
  287,   -1,  289,   -1,  291,  342,  343,  344,   -1,   -1,
   -1,   -1,  349,  350,  351,   -1,   -1,   -1,  309,   -1,
  311,  312,  309,   -1,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,  323,   -1,  325,   -1,  323,   -1,  325,  330,
  287,   -1,  289,  330,  291,   -1,  293,   -1,   -1,   -1,
  297,   -1,  343,  344,  301,   -1,  343,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,  314,   -1,   -1,
  317,   -1,   -1,   -1,  321,  322,   -1,  324,   -1,  313,
  314,  328,   -1,  317,  331,  332,   -1,  321,   -1,   -1,
  337,  338,  287,   -1,  289,   -1,  291,   -1,  293,   -1,
  334,   -1,  297,  337,   -1,   -1,  301,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,  349,  350,   -1,  313,  314,
   -1,   -1,  317,   -1,   -1,   -1,  321,  322,   -1,  324,
   -1,   -1,   -1,  328,   -1,   -1,  331,  332,   -1,   -1,
   -1,   -1,  337,  338,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
   -1,   -1,   -1,  297,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  297,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,
};
#define YYFINAL 2
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 357
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"TE_DOTDOT","TE_IMPLIES","TE_OR",
"TE_XOR","TE_AND","TE_NE","TE_EQ","TE_LT","TE_GT","TE_LE","TE_GE","TE_PLUS",
"TE_MINUS","TE_STAR","TE_SLASH","TE_MOD","TE_DIV","TE_POWER","TE_FREE","TE_NOT",
"TE_STRIP","TE_OLD","TE_DOT","TE_LPARAN","TE_ALIAS","TE_ALL","TE_INTEGER",
"TE_CHAR","TE_REAL","TE_STRING","TE_ID","TE_A_BIT","TE_BANG","TE_BIT",
"TE_SEMICOLON","TE_COLON","TE_COMMA","TE_CREATION","TE_LARRAY","TE_RARRAY",
"TE_RPARAN","TE_LCURLY","TE_RCURLY","TE_LSQURE","TE_RSQURE","TE_CONSTRAIN",
"TE_FALSE","TE_TRUE","TE_ACCEPT","TE_ADDRESS","TE_AS","TE_ASSIGN","TE_CHECK",
"TE_CLASS","TE_CURRENT","TE_DEBUG","TE_DEFERRED","TE_DO","TE_ELSE","TE_ELSEIF",
"TE_END","TE_ENSURE","TE_EXPANDED","TE_EXPORT","TE_EXTERNAL","TE_FEATURE",
"TE_FROM","TE_FROZEN","TE_IF","TE_INDEXING","TE_IN_END","TE_INFIX","TE_INHERIT",
"TE_INSPECT","TE_INVARIANT","TE_IS","TE_LIKE","TE_LOCAL","TE_LOOP",
"TE_OBSOLETE","TE_ONCE","TE_PREFIX","TE_REDEFINE","TE_RENAME","TE_REQUIRE",
"TE_RESCUE","TE_RESULT","TE_RETRY","TE_SELECT","TE_THEN","TE_UNDEFINE",
"TE_UNIQUE","TE_UNTIL","TE_VARIANT","TE_WHEN","EIF_ERROR2","EIF_ERROR3",
"EIF_ERROR4","EIF_ERROR5","EIF_ERROR6","EIF_ERROR7",
};
char *yyrule[] = {
"$accept : Class_declaration",
"$$1 :",
"Class_declaration : Indexing Header_mark $$1 TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
"Pushing_id : TE_ID",
"Indexing :",
"$$2 :",
"Indexing : TE_INDEXING $$2 Index_list",
"Indexing : TE_INDEXING",
"Index_list : Index_clause",
"Index_list : Index_list ASemi Index_clause",
"$$3 :",
"Index_clause : Index $$3 Index_terms",
"Index :",
"Index : Identifier TE_COLON",
"Index_terms : Index_value",
"Index_terms : Index_terms TE_COMMA Index_value",
"Index_value : Identifier",
"Index_value : Manifest_constant",
"Header_mark :",
"Header_mark : TE_DEFERRED",
"Header_mark : TE_EXPANDED",
"Obsolete :",
"Obsolete : TE_OBSOLETE Manifest_string",
"Features :",
"$$4 :",
"Features : $$4 Feature_clause_list",
"Feature_clause_list : Feature_clause",
"Feature_clause_list : Feature_clause_list Feature_clause",
"$$5 :",
"$$6 :",
"Feature_clause : TE_FEATURE $$5 Clients $$6 Feature_declaration_list",
"Clients :",
"Clients : Client_list",
"Client_list : TE_LCURLY TE_RCURLY",
"$$7 :",
"Client_list : TE_LCURLY $$7 Class_list TE_RCURLY",
"Class_list : Identifier",
"Class_list : Class_list TE_COMMA Identifier",
"Feature_declaration_list :",
"Feature_declaration_list : Feature_declaration_list Feature_declaration",
"ASemi : TE_SEMICOLON",
"ASemi :",
"$$8 :",
"$$9 :",
"Feature_declaration : $$8 New_feature_list $$9 Declaration_body ASemi",
"New_feature_list : New_feature",
"New_feature_list : New_feature_list TE_COMMA New_feature",
"New_feature : Feature_name_mark Feature_name",
"Feature_name_mark :",
"Feature_name_mark : TE_FROZEN",
"Feature_name : Pushing_id",
"Feature_name : Infix",
"Feature_name : Prefix",
"Infix : TE_INFIX Infix_operator",
"Prefix : TE_PREFIX Prefix_operator",
"Infix_operator : Manifest_string",
"Prefix_operator : Manifest_string",
"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
"Constant_or_routine :",
"Constant_or_routine : TE_IS Feature_value",
"Feature_value : Manifest_constant",
"Feature_value : TE_UNIQUE",
"Feature_value : Routine",
"Inheritance :",
"$$10 :",
"Inheritance : TE_INHERIT $$10 Parent_list",
"Inheritance : TE_INHERIT ASemi",
"Parent_list : Parent ASemi",
"Parent_list : Parent_list Parent ASemi",
"Parent : Pushing_id Actual_generics",
"Parent : Pushing_id Actual_generics TE_END",
"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
"Actual_generics :",
"Actual_generics : Existing_generics",
"Rename :",
"Rename : TE_RENAME",
"$$11 :",
"Rename : TE_RENAME $$11 Rename_list",
"Rename_list : Rename_pair",
"Rename_list : Rename_list TE_COMMA Rename_pair",
"Rename_pair : Feature_name TE_AS Feature_name",
"New_exports :",
"$$12 :",
"New_exports : TE_EXPORT $$12 New_export_list",
"New_exports : TE_EXPORT ASemi",
"New_export_list : New_export_item ASemi",
"New_export_list : New_export_list New_export_item ASemi",
"New_export_item : Client_list Feature_set",
"Feature_set : TE_ALL",
"$$13 :",
"Feature_set : $$13 Feature_list",
"Feature_list : Feature_name",
"Feature_list : Feature_list TE_COMMA Feature_name",
"Undefine :",
"Undefine : TE_UNDEFINE",
"$$14 :",
"Undefine : TE_UNDEFINE $$14 Feature_list",
"Redefine :",
"Redefine : TE_REDEFINE",
"$$15 :",
"Redefine : TE_REDEFINE $$15 Feature_list",
"Select :",
"Select : TE_SELECT",
"$$16 :",
"Select : TE_SELECT $$16 Feature_list",
"Formal_arguments :",
"Formal_arguments : TE_LPARAN TE_RPARAN",
"$$17 :",
"Formal_arguments : TE_LPARAN $$17 Entity_declaration_list TE_RPARAN",
"Entity_declaration_list :",
"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
"$$18 :",
"$$19 :",
"Entity_declaration_group : $$18 Identifier_list $$19 TE_COLON Type ASemi",
"Identifier_list : Identifier",
"Identifier_list : Identifier_list TE_COMMA Identifier",
"Strip_identifier_list :",
"Strip_identifier_list : Identifier_list",
"Type_mark :",
"Type_mark : TE_COLON Type",
"$$20 :",
"Routine : Obsolete $$20 Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
"Routine_body : Internal",
"Routine_body : External",
"Routine_body : TE_DEFERRED",
"External : TE_EXTERNAL External_language External_name",
"External_language : Non_empty_string",
"External_name :",
"External_name : TE_ALIAS Non_empty_string",
"$$21 :",
"Internal : TE_DO $$21 Compound",
"$$22 :",
"Internal : TE_ONCE $$22 Compound",
"Local_declarations :",
"$$23 :",
"Local_declarations : TE_LOCAL $$23 Entity_declaration_list",
"Compound : Instructionl Instruction1 Opt_Semi",
"Compound : Opt_Semi",
"Opt_Semi : Opt_Semi TE_SEMICOLON",
"Opt_Semi :",
"Instructionl : Instructionl Instruction1 Opt_Semi",
"Instructionl : Opt_Semi",
"Instruction1 : Creation",
"Instruction1 : Call",
"Instruction1 : Assignment",
"Instruction1 : Reverse_assignment",
"Instruction1 : Conditional",
"Instruction1 : Multi_branch",
"Instruction1 : Loop",
"Instruction1 : Debug",
"Instruction1 : Check",
"Instruction1 : Retry",
"Precondition :",
"$$24 :",
"Precondition : TE_REQUIRE $$24 Assertion",
"$$25 :",
"Precondition : TE_REQUIRE TE_ELSE $$25 Assertion",
"Postcondition :",
"$$26 :",
"Postcondition : TE_ENSURE $$26 Assertion",
"$$27 :",
"Postcondition : TE_ENSURE TE_THEN $$27 Assertion",
"$$28 :",
"Assertion : $$28 Assertion_list",
"Assertion_list :",
"Assertion_list : Assertion_list_non_empty",
"Assertion_list_non_empty : Assertion_clause ASemi",
"Assertion_list_non_empty : Assertion_list_non_empty Assertion_clause ASemi",
"Assertion_clause : Expression",
"Assertion_clause : Identifier TE_COLON Expression",
"Assertion_clause : Identifier TE_COLON",
"Type : Pushing_id",
"Type : Pushing_id Existing_generics",
"Type : TE_EXPANDED Pushing_id",
"Type : TE_EXPANDED Pushing_id Existing_generics",
"Type : TE_BIT Integer_constant",
"Type : TE_BIT Identifier",
"Type : TE_LIKE Identifier",
"Type : TE_LIKE TE_CURRENT",
"Class_type : Pushing_id",
"Class_type : Pushing_id Existing_generics",
"Existing_generics : TE_LSQURE TE_RSQURE",
"$$29 :",
"Existing_generics : TE_LSQURE $$29 Type_list TE_RSQURE",
"Type_list : Type",
"Type_list : Type_list TE_COMMA Type",
"Formal_generics :",
"$$30 :",
"Formal_generics : TE_LSQURE $$30 Formal_generic_list TE_RSQURE",
"Formal_generic_list :",
"Formal_generic_list : Formal_generic",
"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
"$$31 :",
"Formal_generic : TE_ID $$31 Constraint",
"Constraint :",
"Constraint : TE_CONSTRAIN Class_type",
"$$32 :",
"$$33 :",
"Conditional : TE_IF Expression TE_THEN $$32 Compound $$33 Elsif Else_part TE_END",
"Elsif :",
"$$34 :",
"Elsif : $$34 Elsif_list",
"Elsif_list : Elsif_part",
"Elsif_list : Elsif_list Elsif_part",
"$$35 :",
"Elsif_part : TE_ELSEIF Expression TE_THEN $$35 Compound",
"Inspect_default :",
"$$36 :",
"Inspect_default : TE_ELSE $$36 Compound",
"Else_part :",
"$$37 :",
"Else_part : TE_ELSE $$37 Compound",
"$$38 :",
"$$39 :",
"Multi_branch : TE_INSPECT Expression $$38 When_part_list $$39 Inspect_default TE_END",
"When_part_list :",
"When_part_list : When_part When_part_list",
"$$40 :",
"$$41 :",
"$$42 :",
"When_part : TE_WHEN $$40 Choices $$41 TE_THEN $$42 Compound",
"Choices : Choice",
"Choices : Choices TE_COMMA Choice",
"Choice : Integer_constant",
"Choice : Character_constant",
"Choice : Identifier",
"Choice : Integer_constant TE_DOTDOT Integer_constant",
"Choice : Integer_constant TE_DOTDOT Identifier",
"Choice : Identifier TE_DOTDOT Integer_constant",
"Choice : Identifier TE_DOTDOT Identifier",
"Choice : Character_constant TE_DOTDOT Character_constant",
"Choice : Identifier TE_DOTDOT Character_constant",
"Choice : Character_constant TE_DOTDOT Identifier",
"$$43 :",
"$$44 :",
"$$45 :",
"Loop : TE_FROM $$43 Compound $$44 Invariant Variant TE_UNTIL Expression TE_LOOP $$45 Compound TE_END",
"Invariant :",
"Invariant : TE_INVARIANT Assertion",
"Class_invariant :",
"$$46 :",
"Class_invariant : TE_INVARIANT $$46 Assertion",
"Variant :",
"Variant : TE_VARIANT Identifier TE_COLON Expression",
"Variant : TE_VARIANT Expression",
"$$47 :",
"Debug : TE_DEBUG Debug_keys $$47 Compound TE_END",
"Debug_keys :",
"Debug_keys : TE_LPARAN TE_RPARAN",
"$$48 :",
"Debug_keys : TE_LPARAN $$48 Debug_key_list TE_RPARAN",
"Debug_key_list : Non_empty_string",
"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
"Retry : TE_RETRY",
"Rescue :",
"$$49 :",
"Rescue : TE_RESCUE $$49 Compound",
"Assignment : Identifier TE_ASSIGN Expression",
"Assignment : TE_RESULT TE_ASSIGN Expression",
"Reverse_assignment : Identifier TE_ACCEPT Expression",
"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
"Creators :",
"$$50 :",
"Creators : $$50 Creation_clause_list",
"Creation_clause_list : Creation_clause",
"Creation_clause_list : Creation_clause_list Creation_clause",
"Creation_clause : TE_CREATION",
"$$51 :",
"Creation_clause : TE_CREATION Clients $$51 Feature_list",
"Creation_clause : TE_CREATION Client_list",
"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
"Creation_type :",
"Creation_type : Type",
"Creation_target : Identifier",
"Creation_target : TE_RESULT",
"Creation_call :",
"Creation_call : TE_DOT Identifier Parameters",
"Call : A_feature",
"Call : Call_on_result",
"Call : Call_on_feature",
"Call : Call_on_current",
"Call : Call_on_expression",
"Check : TE_CHECK Assertion TE_END",
"Expression : Expression_constant",
"Expression : Manifest_array",
"Expression : Feature_call",
"Expression : TE_LPARAN Expression TE_RPARAN",
"Expression : Expression TE_PLUS Expression",
"Expression : Expression TE_MINUS Expression",
"Expression : Expression TE_STAR Expression",
"Expression : Expression TE_SLASH Expression",
"Expression : Expression TE_MOD Expression",
"Expression : Expression TE_DIV Expression",
"Expression : Expression TE_POWER Expression",
"Expression : Expression TE_AND Expression",
"Expression : Expression TE_AND TE_THEN Expression",
"Expression : Expression TE_OR Expression",
"Expression : Expression TE_OR TE_ELSE Expression",
"Expression : Expression TE_IMPLIES Expression",
"Expression : Expression TE_XOR Expression",
"Expression : Expression TE_GE Expression",
"Expression : Expression TE_GT Expression",
"Expression : Expression TE_LE Expression",
"Expression : Expression TE_LT Expression",
"Expression : Expression TE_EQ Expression",
"Expression : Expression TE_NE Expression",
"Expression : Expression Free_operator Expression",
"Expression : TE_MINUS Expression",
"Expression : TE_PLUS Expression",
"Expression : TE_NOT Expression",
"Expression : TE_OLD Expression",
"Expression : Free_operator Expression",
"$$52 :",
"Expression : TE_STRIP $$52 TE_LPARAN Strip_identifier_list TE_RPARAN",
"Actual_parameter : Expression",
"Actual_parameter : TE_ADDRESS Feature_name",
"Actual_parameter : TE_ADDRESS TE_CURRENT",
"Actual_parameter : TE_ADDRESS TE_RESULT",
"Free_operator : TE_FREE",
"Feature_call : Call_on_current",
"Feature_call : Call_on_result",
"Feature_call : Call_on_feature",
"Feature_call : TE_CURRENT",
"Feature_call : TE_RESULT",
"Feature_call : A_feature",
"Feature_call : Call_on_expression",
"Call_on_current : TE_CURRENT TE_DOT Remote_call",
"Call_on_result : TE_RESULT TE_DOT Remote_call",
"Call_on_feature : A_feature TE_DOT Remote_call",
"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
"Remote_call : Call_on_feature_access",
"Remote_call : Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
"A_feature : Identifier Parameters",
"Feature_access : Identifier Parameters",
"Parameters :",
"Parameters : TE_LPARAN TE_RPARAN",
"$$53 :",
"Parameters : TE_LPARAN $$53 Parameter_list TE_RPARAN",
"Parameter_list : Actual_parameter",
"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
"Expression_list : Expression",
"Expression_list : Expression_list TE_COMMA Expression",
"Manifest_expression_list :",
"Manifest_expression_list : Expression_list",
"Identifier : TE_ID",
"Manifest_constant : Boolean_constant",
"Manifest_constant : Character_constant",
"Manifest_constant : Integer_constant",
"Manifest_constant : Real_constant",
"Manifest_constant : Bit_constant",
"Manifest_constant : Manifest_string",
"Expression_constant : Boolean_constant",
"Expression_constant : Character_constant",
"Expression_constant : TE_INTEGER",
"Expression_constant : TE_REAL",
"Expression_constant : Bit_constant",
"Expression_constant : Manifest_string",
"Boolean_constant : TE_FALSE",
"Boolean_constant : TE_TRUE",
"Character_constant : TE_CHAR",
"Integer_constant : Sign TE_INTEGER",
"Sign :",
"Sign : TE_PLUS",
"Sign : TE_MINUS",
"Real_constant : Sign TE_REAL",
"Bit_constant : TE_A_BIT",
"Manifest_string : TE_STRING",
"Manifest_string : EIF_ERROR6",
"Non_empty_string : TE_STRING",
"$$54 :",
"Manifest_array : TE_LARRAY $$54 Manifest_expression_list TE_RARRAY",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 1337 "parser.y"
char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap()
{
	return 1;
}
#line 1779 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 185 "parser.y"
{click_list_init();}
break;
case 2:
#line 187 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yyvsp[-7].value),deferred,expanded,yyvsp[-11].node,yyvsp[-6].node,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,click_list_new(),
start_position);
		}
break;
case 3:
#line 196 "parser.y"
{
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		}
break;
case 4:
#line 207 "parser.y"
{yyval.node = NULL;}
break;
case 5:
#line 208 "parser.y"
{list_init();}
break;
case 6:
#line 209 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 7:
#line 211 "parser.y"
{yyval.node = NULL;}
break;
case 8:
#line 215 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 9:
#line 217 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 10:
#line 220 "parser.y"
{list_init();}
break;
case 11:
#line 221 "parser.y"
{yyval.node = create_node2(INDEX_AS,yyvsp[-2].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 12:
#line 225 "parser.y"
{yyval.node = NULL;}
break;
case 13:
#line 227 "parser.y"
{yyval.node = yyvsp[-1].node;}
break;
case 14:
#line 231 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 15:
#line 233 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 16:
#line 237 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 17:
#line 239 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 18:
#line 247 "parser.y"
{deferred = FALSE; expanded = FALSE;}
break;
case 19:
#line 249 "parser.y"
{deferred = TRUE; expanded = FALSE;}
break;
case 20:
#line 251 "parser.y"
{expanded = TRUE; deferred = FALSE;}
break;
case 21:
#line 260 "parser.y"
{yyval.node = NULL;}
break;
case 22:
#line 262 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 23:
#line 271 "parser.y"
{yyval.node = NULL;}
break;
case 24:
#line 272 "parser.y"
{list_init();}
break;
case 25:
#line 273 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 26:
#line 278 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 27:
#line 280 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 28:
#line 284 "parser.y"
{yyval.value = start_position;}
break;
case 29:
#line 284 "parser.y"
{list_init();}
break;
case 30:
#line 285 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_fclause_as(yyvsp[-2].node,yyval.node,yyvsp[-3].value);
		}
break;
case 31:
#line 293 "parser.y"
{yyval.node = NULL;}
break;
case 32:
#line 295 "parser.y"
{yyval.node = create_node1(CLIENT_AS,yyvsp[0].node);}
break;
case 33:
#line 299 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							}
break;
case 34:
#line 303 "parser.y"
{list_init();}
break;
case 35:
#line 304 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 36:
#line 308 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 37:
#line 312 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 39:
#line 319 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 42:
#line 326 "parser.y"
{list_init();}
break;
case 43:
#line 326 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 44:
#line 327 "parser.y"
{
		yyval.node = create_feature_as(yyvsp[-2].node,yyvsp[-1].node,click_list_start(yyvsp[-3].value),start_position);
		click_list_set (yyval.node, yyvsp[-3].value);
		}
break;
case 45:
#line 335 "parser.y"
{
		yyval.value = yyvsp[0].value;
		list_push(click_list_elem(yyval.value));
		}
break;
case 46:
#line 340 "parser.y"
{
		yyval.value = yyvsp[-2].value;
		list_push(click_list_elem(yyvsp[0].value));
		}
break;
case 47:
#line 348 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 48:
#line 354 "parser.y"
{
		is_frozen = FALSE;
		}
break;
case 49:
#line 358 "parser.y"
{
		is_frozen = TRUE;
		}
break;
case 50:
#line 365 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 51:
#line 370 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 52:
#line 374 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 53:
#line 381 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 54:
#line 390 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 55:
#line 398 "parser.y"
{
		extern int is_infix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		}
break;
case 56:
#line 411 "parser.y"
{
		extern int is_prefix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		}
break;
case 57:
#line 423 "parser.y"
{yyval.node = create_node3(BODY_AS,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yyvsp[-2].node == NULL) && (yyvsp[-1].node == NULL) && (yyvsp[0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yyvsp[0].cr_node.cr_type == CR_CONSTANT) && ((yyvsp[-2].node != NULL) || (yyvsp[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yyvsp[-2].node != NULL) && ((yyvsp[0].cr_node.cr_type != CR_ROUTINE) || (yyvsp[0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	}
break;
case 58:
#line 443 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;}
break;
case 59:
#line 445 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].cr_node.cr_node;yyval.cr_node.cr_type = yyvsp[0].cr_node.cr_type;}
break;
case 60:
#line 449 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yyvsp[0].node));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 61:
#line 451 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 62:
#line 453 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].node;yyval.cr_node.cr_type = CR_ROUTINE;}
break;
case 63:
#line 462 "parser.y"
{yyval.node = NULL;}
break;
case 64:
#line 463 "parser.y"
{list_init();}
break;
case 65:
#line 464 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 66:
#line 468 "parser.y"
{ yyval.node = NULL;}
break;
case 67:
#line 473 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 68:
#line 475 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 69:
#line 480 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-1].value);
		}
break;
case 70:
#line 486 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-2].value),yyvsp[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-2].value);
		}
break;
case 71:
#line 493 "parser.y"
{
		inherit_context = (yyvsp[-5].node==NULL)&&(yyvsp[-4].node==NULL)&&(yyvsp[-3].node==NULL)&&(yyvsp[-2].node==NULL)&&(yyvsp[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-7].value),yyvsp[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);
		click_list_set (rn_ast, yyvsp[-7].value);
		}
break;
case 72:
#line 502 "parser.y"
{yyval.node = NULL;}
break;
case 73:
#line 504 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 74:
#line 508 "parser.y"
{yyval.node = NULL;}
break;
case 75:
#line 510 "parser.y"
{yyval.node = NULL;}
break;
case 76:
#line 511 "parser.y"
{list_init();}
break;
case 77:
#line 512 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 78:
#line 517 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 79:
#line 519 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 80:
#line 524 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yyvsp[-2].value),click_list_elem(yyvsp[0].value));
		click_list_set (click_list_elem(yyvsp[0].value), yyvsp[-2].value);
		}
break;
case 81:
#line 531 "parser.y"
{yyval.node = NULL;}
break;
case 82:
#line 532 "parser.y"
{list_init();}
break;
case 83:
#line 533 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 84:
#line 535 "parser.y"
{yyval.node = NULL;}
break;
case 85:
#line 540 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 86:
#line 542 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 87:
#line 546 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yyvsp[-1].node);
case 87:
# line 543 "parser.y"
{list_push(yypvt[-1].node);} break;
case 88:
# line 547 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yypvt[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yypvt[-0].node);
		} break;
case 89:
# line 554 "parser.y"
{yyval.node = create_node(ALL_AS);} break;
case 90:
# line 555 "parser.y"
{list_init();} break;
case 91:
# line 556 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 92:
# line 561 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 93:
# line 563 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 94:
# line 567 "parser.y"
{yyval.node = NULL;} break;
case 95:
# line 569 "parser.y"
{yyval.node = NULL;} break;
case 96:
# line 570 "parser.y"
{list_init();} break;
case 97:
# line 571 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 98:
# line 575 "parser.y"
{yyval.node = NULL;} break;
case 99:
# line 577 "parser.y"
{yyval.node = NULL;} break;
case 100:
# line 578 "parser.y"
{list_init();} break;
case 101:
# line 579 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 102:
# line 583 "parser.y"
{yyval.node = NULL;} break;
case 103:
# line 585 "parser.y"
{yyval.node = NULL;} break;
case 104:
# line 586 "parser.y"
{list_init();} break;
case 105:
# line 587 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 106:
# line 595 "parser.y"
{yyval.node = NULL;} break;
case 107:
# line 597 "parser.y"
{yyerror((char *)0);} break;
case 108:
# line 598 "parser.y"
{list_init();} break;
case 109:
# line 599 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 111:
# line 604 "parser.y"
{list_push(yypvt[-0].node);} break;
case 112:
# line 607 "parser.y"
{list_init();} break;
case 113:
# line 607 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 114:
# line 608 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yypvt[-3].node,yypvt[-1].node);} break;
case 115:
# line 612 "parser.y"
{list_push(yypvt[-0].node);} break;
case 116:
# line 614 "parser.y"
{list_push(yypvt[-0].node);} break;
case 119:
# line 622 "parser.y"
{yyval.node = NULL;} break;
case 120:
# line 624 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 121:
# line 629 "parser.y"
{yyval.node = create_node6(ROUTINE_AS,yypvt[-6].node,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 122:
# line 633 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 123:
# line 635 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 124:
# line 637 "parser.y"
{yyval.node = create_node(DEFERRED_AS);} break;
case 125:
# line 641 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 126:
# line 645 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yypvt[-0].node);} break;
case 127:
# line 649 "parser.y"
{yyval.node = NULL;} break;
case 128:
# line 651 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 129:
# line 654 "parser.y"
{list_init();} break;
case 130:
# line 655 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 131:
# line 656 "parser.y"
{list_init();} break;
case 132:
# line 657 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 133:
# line 663 "parser.y"
{yyval.node = NULL;} break;
case 134:
# line 664 "parser.y"
{list_init();} break;
case 135:
# line 665 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 136:
# line 669 "parser.y"
{list_push(yypvt[-1].node);} break;
case 140:
# line 676 "parser.y"
{list_push(yypvt[-1].node);} break;
case 142:
# line 681 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 143:
# line 683 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 144:
# line 685 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 145:
# line 687 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 146:
# line 689 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 147:
# line 691 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 148:
# line 693 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 149:
# line 695 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 150:
# line 697 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 151:
# line 699 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 152:
# line 703 "parser.y"
{yyval.node = NULL;} break;
case 153:
# line 704 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 154:
# line 705 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 155:
# line 709 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 156:
# line 710 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 157:
# line 717 "parser.y"
{yyval.node = NULL;} break;
case 158:
# line 718 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 159:
# line 719 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 160:
# line 723 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 161:
# line 724 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 162:
# line 731 "parser.y"
{list_init();} break;
case 163:
# line 732 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 166:
# line 739 "parser.y"
{list_push(yypvt[-1].node);} break;
case 167:
# line 741 "parser.y"
{list_push(yypvt[-1].node);} break;
case 168:
# line 745 "parser.y"
{
									push_pos();
									push_pos();
									yyval.node = create_node2(TAGGED_AS,NULL,yypvt[-0].node);
									npop_pos(2);
								} break;
case 169:
# line 751 "parser.y"
{push_pos();} break;
case 170:
# line 752 "parser.y"
{
									push_pos();
									yyval.node = create_node2(TAGGED_AS,yypvt[-3].node,yypvt[-0].node);
									npop_pos(2);
								} break;
case 171:
# line 758 "parser.y"
{ yyval.node = NULL;} break;
case 172:
# line 768 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 173:
# line 773 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 174:
# line 778 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 175:
# line 783 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 176:
# line 788 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yypvt[-0].node);
		} break;
case 177:
# line 792 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yypvt[-0].node);
		} break;
case 178:
# line 796 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yypvt[-0].node);
		} break;
case 179:
# line 800 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		} break;
case 180:
# line 807 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
        click_list_set (yyval.node, yypvt[-0].value);
        } break;
case 181:
# line 812 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
        click_list_set (yyval.node, yypvt[-1].value);
        } break;
case 182:
# line 820 "parser.y"
{yyval.node = NULL;} break;
case 183:
# line 821 "parser.y"
{list_init();} break;
case 184:
# line 822 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 185:
# line 829 "parser.y"
{list_push(yypvt[-0].node);} break;
case 186:
# line 831 "parser.y"
{list_push(yypvt[-0].node);} break;
case 187:
# line 839 "parser.y"
{
		yyval.node = NULL;
		} break;
case 188:
# line 842 "parser.y"
{list_init();} break;
case 189:
# line 843 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 191:
# line 851 "parser.y"
{list_push(yypvt[-0].node);} break;
case 192:
# line 853 "parser.y"
{list_push(yypvt[-0].node);} break;
case 193:
# line 857 "parser.y"
{strcpy(generic_name, token_str);} break;
case 194:
# line 858 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yypvt[-0].node);} break;
case 195:
# line 862 "parser.y"
{yyval.node = NULL;} break;
case 196:
# line 864 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 197:
# line 871 "parser.y"
{list_init();} break;
case 198:
# line 871 "parser.y"
{yyval.node =
list_new(CONSTRUCT_LIST_AS);} break;
case 199:
# line 873 "parser.y"
{yyval.node = create_node4(IF_AS,yypvt[-7].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 200:
# line 877 "parser.y"
{yyval.node = NULL;} break;
case 201:
# line 878 "parser.y"
{list_init();} break;
case 202:
# line 879 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 203:
# line 883 "parser.y"
{list_push(yypvt[-0].node);} break;
case 204:
# line 885 "parser.y"
{list_push(yypvt[-0].node);} break;
case 205:
# line 888 "parser.y"
{list_init();} break;
case 206:
# line 889 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 207:
# line 893 "parser.y"
{yyval.node = NULL;} break;
case 208:
# line 894 "parser.y"
{list_init();} break;
case 209:
# line 895 "parser.y"
{yyval.node = inspect_else();} break;
case 210:
# line 899 "parser.y"
{yyval.node = NULL;} break;
case 211:
# line 900 "parser.y"
{list_init();} break;
case 212:
# line 901 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 213:
# line 905 "parser.y"
{list_init();} break;
case 214:
# line 905 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 215:
# line 907 "parser.y"
{yyval.node = create_node3(INSPECT_AS,yypvt[-5].node,yypvt[-2].node,yypvt[-1].node);} break;
case 217:
# line 920 "parser.y"
{list_push(yypvt[-1].node);} break;
case 218:
# line 923 "parser.y"
{list_init();} break;
case 219:
# line 923 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 220:
# line 923 "parser.y"
{list_init();} break;
case 221:
# line 924 "parser.y"
{yyval.node = create_node2(CASE_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 222:
# line 928 "parser.y"
{list_push(yypvt[-0].node);} break;
case 223:
# line 930 "parser.y"
{list_push(yypvt[-0].node);} break;
case 224:
# line 934 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 225:
# line 936 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 226:
# line 938 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 227:
# line 940 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 228:
# line 942 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 229:
# line 944 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 230:
# line 946 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 231:
# line 948 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 232:
# line 950 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 233:
# line 952 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 234:
# line 955 "parser.y"
{list_init();} break;
case 235:
# line 955 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 236:
# line 955 "parser.y"
{list_init();} break;
case 237:
# line 956 "parser.y"
{yyval.node = create_node5(LOOP_AS,yypvt[-8].node,yypvt[-7].node,yypvt[-6].node,yypvt[-4].node,list_new(CONSTRUCT_LIST_AS));} break;
case 238:
# line 960 "parser.y"
{yyval.node = NULL;} break;
case 239:
# line 962 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 240:
# line 966 "parser.y"
{yyval.node = NULL;} break;
case 241:
# line 967 "parser.y"
{id_level = INVARIANT_LEVEL;} break;
case 242:
# line 968 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yypvt[-0].node);
		} break;
case 243:
# line 976 "parser.y"
{yyval.node = NULL;} break;
case 244:
# line 978 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 245:
# line 980 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yypvt[-0].node);} break;
case 246:
# line 983 "parser.y"
{list_init();} break;
case 247:
# line 984 "parser.y"
{yyval.node = create_node2(DEBUG_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 248:
# line 988 "parser.y"
{yyval.node = NULL;} break;
case 249:
# line 990 "parser.y"
{yyval.node = NULL;} break;
case 250:
# line 991 "parser.y"
{list_init();} break;
case 251:
# line 992 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 252:
# line 996 "parser.y"
{list_push(yypvt[-0].node);} break;
case 253:
# line 998 "parser.y"
{list_push(yypvt[-0].node);} break;
case 254:
# line 1002 "parser.y"
{yyval.node = create_node(RETRY_AS);} break;
case 255:
# line 1006 "parser.y"
{yyval.node = NULL;} break;
case 256:
# line 1007 "parser.y"
{list_init();} break;
case 257:
# line 1008 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 258:
# line 1012 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 259:
# line 1014 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 260:
# line 1018 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 261:
# line 1020 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 262:
# line 1024 "parser.y"
{yyval.node = NULL;} break;
case 263:
# line 1025 "parser.y"
{list_init();} break;
case 264:
# line 1026 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 265:
# line 1030 "parser.y"
{list_push(yypvt[-0].node);} break;
case 266:
# line 1032 "parser.y"
{list_push(yypvt[-0].node);} break;
case 267:
# line 1036 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);} break;
case 268:
# line 1037 "parser.y"
{list_init();} break;
case 269:
# line 1038 "parser.y"
{yyval.node = create_node2(CREATE_AS,yypvt[-2].node,list_new(CONSTRUCT_LIST_AS));} break;
case 270:
# line 1040 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);								} break;
case 271:
# line 1046 "parser.y"
{yyval.node = create_node3(CREATION_AS,yypvt[-3].node,yypvt[-1].node,yypvt[-0].node);} break;
case 272:
# line 1050 "parser.y"
{yyval.node = NULL;} break;
case 273:
# line 1052 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 274:
# line 1056 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yypvt[-0].node,NULL);} break;
case 275:
# line 1058 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 276:
# line 1062 "parser.y"
{yyval.node = NULL;} break;
case 277:
# line 1064 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 278:
# line 1072 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 279:
# line 1074 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 280:
# line 1076 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 281:
# line 1078 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 282:
# line 1080 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 283:
# line 1084 "parser.y"
{yyval.node = create_node1(CHECK_AS,yypvt[-1].node);} break;
case 284:
# line 1092 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 285:
# line 1094 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 286:
# line 1096 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yypvt[-0].node);} break;
case 287:
# line 1098 "parser.y"
{yyval.node = create_node1(PARAN_AS, yypvt[-1].node);} break;
case 288:
# line 1100 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 289:
# line 1102 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 290:
# line 1104 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 291:
# line 1106 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 292:
# line 1108 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 293:
# line 1110 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 294:
# line 1112 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 295:
# line 1114 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 296:
# line 1116 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 297:
# line 1118 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 298:
# line 1120 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 299:
# line 1122 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 300:
# line 1124 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 301:
# line 1126 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 302:
# line 1128 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 303:
# line 1130 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 304:
# line 1132 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 305:
# line 1134 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 306:
# line 1136 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 307:
# line 1138 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].node);} break;
case 308:
# line 1141 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yypvt[-0].node);} break;
case 309:
# line 1143 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yypvt[-0].node);} break;
case 310:
# line 1145 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yypvt[-0].node);} break;
case 311:
# line 1147 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yypvt[-0].node);} break;
case 312:
# line 1149 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 313:
# line 1150 "parser.y"
{yyerrok;list_init();} break;
case 314:
# line 1151 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 315:
# line 1155 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 316:
# line 1157 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yypvt[-0].value));
								} break;
case 317:
# line 1162 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);} break;
case 318:
# line 1164 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);} break;
case 319:
# line 1168 "parser.y"
{yyval.node = create_id(token_str);} break;
case 320:
# line 1176 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 321:
# line 1178 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 322:
# line 1180 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 323:
# line 1182 "parser.y"
{yyval.node = create_node(CURRENT_AS);} break;
case 324:
# line 1184 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 325:
# line 1186 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 326:
# line 1188 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 327:
# line 1192 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yypvt[-0].node);} break;
case 328:
# line 1196 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 329:
# line 1200 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 330:
# line 1204 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 331:
# line 1208 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 332:
# line 1210 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 333:
# line 1214 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 334:
# line 1216 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 335:
# line 1220 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yypvt[-1].node,yypvt[-0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							}
						} break;
case 336:
# line 1235 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 337:
# line 1239 "parser.y"
{yyval.node = NULL;} break;
case 338:
# line 1241 "parser.y"
{yyval.node = NULL;} break;
case 339:
# line 1242 "parser.y"
{list_init();} break;
case 340:
# line 1243 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 341:
# line 1247 "parser.y"
{list_push(yypvt[-0].node);} break;
case 342:
# line 1249 "parser.y"
{list_push(yypvt[-0].node);} break;
case 343:
# line 1253 "parser.y"
{list_push(yypvt[-0].node);} break;
case 344:
# line 1255 "parser.y"
{list_push(yypvt[-0].node);} break;
case 347:
# line 1267 "parser.y"
{
				yyval.node = create_id(token_str);
				} break;
case 348:
# line 1273 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 349:
# line 1275 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 350:
# line 1277 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 351:
# line 1279 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 352:
# line 1281 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 353:
# line 1283 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 354:
# line 1287 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 355:
# line 1289 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 356:
# line 1291 "parser.y"
{yyval.node = create_int(token_str,0);} break;
case 357:
# line 1293 "parser.y"
{yyval.node = create_real(token_str,0);} break;
case 358:
# line 1295 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 359:
# line 1297 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 360:
# line 1301 "parser.y"
{yyval.node = create_bool(0);} break;
case 361:
# line 1303 "parser.y"
{yyval.node = create_bool(1);} break;
case 362:
# line 1307 "parser.y"
{yyval.node = create_char(token_str);} break;
case 363:
# line 1311 "parser.y"
{yyval.node = create_int(token_str,yypvt[-1].value);} break;
case 364:
# line 1315 "parser.y"
{yyval.value = 0;} break;
case 365:
# line 1317 "parser.y"
{yyval.value = 0;} break;
case 366:
# line 1319 "parser.y"
{yyval.value = 1;} break;
case 367:
# line 1323 "parser.y"
{yyval.node = create_real(token_str,yypvt[-1].value);} break;
case 368:
# line 1327 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));} break;
case 369:
# line 1331 "parser.y"
{yyval.node = create_string(token_str);} break;
case 370:
# line 1333 "parser.y"
{yyval.node = create_string(token_str);} break;
case 371:
# line 1337 "parser.y"
{yyval.node = create_string(token_str);} break;
case 372:
# line 1340 "parser.y"
{list_init();} break;
case 373:
# line 1341 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));} break;
	}
	goto yystack;		/* reset registers in driver code */
}
