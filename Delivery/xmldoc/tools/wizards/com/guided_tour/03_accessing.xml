<document title="Accessing a COM component" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>EiffelCOM</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour, Accessing a COM component</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>
		<link/>The third tutorial describes how to access a COM component and build reusable library.
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>
				<link/> Launch the wizard
			</item>
			<item>
				<link/> Choose 
				<italic>Create a new project from a COM definition</italic> and click 
				<italic>Next</italic>
			</item>
			<item>
				<link/> Click 
				<italic>Next</italic> again
			</item>
			<item>
				<link/> Click the top 
				<italic>Browse</italic> button and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\string_manipulator.idl</italic>where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL50 directory. You could also choose to open the type library (.tlb) that was generated by the wizard when 
				<link>
					<url>01_new_from_com.xml</url>
					<label>Creating a new COM component</label>
				</link> in the destination folder of that first project.
			</item>
			<item>
				<link/> Click the bottom 
				<italic>Browse</italic> button and select the directory where you want to create the project (later referenced as destination folder). Choose 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\client\generated</italic>where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL50 directory.
			</item>
			<item>
				<link/> Click 
				<italic>Next</italic>
			</item>
			<item>
				<link/> Click 
				<italic>Finish</italic>
			</item>
			<item>
				<link/> Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>At the and of the generation the wizard precompiles the generated code and opens EiffelStudio on the precompilation project. Note: a precompilation project is read-only, you need to start another EiffelStudio to reuse the generated classes. The interesting classes are all related to the coclass proxy 
		<code>
			<class_name>STRING_MANIPULATOR_PROXY</class_name>
		</code>. The proxy is the Eiffel class that gives access to the component. Each feature on the proxy calls the corresponding interface function on the component. You can use the EiffelStudio opened by the wizard to browse through the generated classes and study the class hierarchy.
		<heading>
			<size>2</size> Implementing a client
		</heading>
		<link/> To implement a client of the StringManipulator component open a new EiffelStudio. Create the project in 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\client</italic>using the ace file found in that directory. Freeze and run the project. You are now accessing the previously built component and calling functions on its interfaces!. The class 
		<code>
			<class_name>MY_STRING_MANIPULATOR</class_name>
		</code> inherits from the generated 
		<code>
			<class_name>STRING_MANIPULATOR_PROXY</class_name>
		</code> and redefines the feature 
		<italic>replace_substring_user_precondition</italic>.The generated interfaces include contracts for each exposed function. You can redefine the 
		<italic>user_precondition</italic> features to implement your own preconditions.
		<heading>
			<size>2</size> Contracts
		</heading>
		<link/> Contracts can be broken directly on the proxy in which case you will get a standard contract violation or in the server. If contracts are broken on the server then the exception will be forwarded by the EiffelCOM runtime to the client. The feature replace_substring_user_precondition in 
		<code>
			<class_name>MY_STRING_MANIPULATOR</class_name>
		</code> includes the followingcommented line:
<code_block>
<comment>-- Result := True</comment>
</code_block>
		<link/> Un-comment this lineby removing the preceding ` 
		<code>
			<comment>--</comment>
		</code> ' and comment out the rest of the feature. Now the contract of the 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_replace_substring</anchor_name>
				<label>replace_substring</label>
			</link>
		</code> feature is wrong and erroneous calls can be made. Quick melt the changes and run the client. Enter some invalid numbers in the fields used to call this feature. After you click Replace you will see an error message box warning you that a precondition was violated on the server side. This is how you can use contracts `over the wire'. The preconditions was violated in the server, this exception was caught by the EiffelCOM runtime and sent back to the client.
		</paragraph>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>01_new_from_com.xml</url>
				<label>Creating a new COM component</label>
			</link>
			<line_break/>
			<link>
				<url>02_new_from_eiffel.xml</url>
				<label>Creating a new component from an Eiffel Project</label>
			</link>
		</seealso>
	</paragraph>
</document>
