
# line 6 "lace_y.y"
#include "lace_c.h"
#undef NULL
#define NULL (char *) 0

# line 11 "lace_y.y"
typedef union
#ifdef __cplusplus
	YYSTYPE
#endif
 {
	char *node;
	int  value;
} YYSTYPE;
# define LAC_ADAPT 257
# define LAC_ALL 258
# define LAC_AS 259
# define LAC_ASSERTION 260
# define LAC_C 261
# define LAC_CHECK 262
# define LAC_CLUSTER 263
# define LAC_COLUMN 264
# define LAC_COMMA 265
# define LAC_COMMENT 266
# define LAC_CREATION 267
# define LAC_DEBUG 268
# define LAC_DEFAULT 269
# define LAC_END 270
# define LAC_ENSURE 271
# define LAC_EXCLUDE 272
# define LAC_EXECUTABLE 273
# define LAC_EXPORT 274
# define LAC_EXTERNAL 275
# define LAC_GENERATE 276
# define LAC_IDENTIFIER 277
# define LAC_IGNORE 278
# define LAC_INCLUDE 279
# define LAC_INCLUDE_PATH 280
# define LAC_INVARIANT 281
# define LAC_LEFT_PARAM 282
# define LAC_LOOP 283
# define LAC_MAKE 284
# define LAC_MULTITHREADED 285
# define LAC_NO 286
# define LAC_OBJECT 287
# define LAC_OPTIMIZE 288
# define LAC_OPTION 289
# define LAC_PRECOMPILED 290
# define LAC_RENAME 291
# define LAC_REQUIRE 292
# define LAC_RIGHT_PARAM 293
# define LAC_ROOT 294
# define LAC_SEMICOLON 295
# define LAC_STRING 296
# define LAC_SYSTEM 297
# define LAC_TRACE 298
# define LAC_USE 299
# define LAC_VISIBLE 300
# define LAC_YES 301
# define LAC_WHITE 302
# define LAC_ERROR2 303
# define LAC_ERROR3 304
# define LAC_ERROR4 305
# define LAC_ERROR6 306
# define LAC_ERROR7 307

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

/* #include <values.h> */

#ifdef __cplusplus

#ifndef xxerror
	void xxerror(const char *);
#endif

#ifndef xxlex
#ifdef __EXTERN_C__
	extern "C" { int xxlex(void); }
#else
	int xxlex(void);
#endif
#endif
	int xxparse(void);

#endif
#define xxclearin xxchar = -1
#define xxerrok xxerrflag = 0
extern int xxchar;
extern int xxerrflag;
YYSTYPE xxlval;
YYSTYPE xxval;
typedef int xxtabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int xx_xxs[YYMAXDEPTH], *xxs = xx_xxs;
YYSTYPE xx_xxv[YYMAXDEPTH], *xxv = xx_xxv;
#else	/* user does initial allocation */
int *xxs;
YYSTYPE *xxv;
#endif
static int xxmaxdepth = YYMAXDEPTH;
# define YYERRCODE 256

# line 485 "lace_y.y"


xxwrap()
{
    return 1;
}
xxtabelem xxexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 12,
	277, 28,
	296, 28,
	-2, 27,
-1, 21,
	277, 32,
	296, 32,
	-2, 31,
-1, 136,
	275, 18,
	276, 18,
	295, 18,
	-2, 24,
-1, 143,
	295, 129,
	-2, 132,
	};
# define YYNPROD 151
# define YYLAST 294
xxtabelem xxact[]={

    99,    40,   151,   155,   104,   108,     6,   159,     7,    41,
   144,   170,   131,   101,   116,   110,    40,   150,    15,    15,
    86,    15,    73,   102,    41,   103,    44,    59,    98,    42,
    80,    38,     7,    15,   100,    52,   137,    16,    16,    43,
    16,    44,    84,    97,    42,    10,    15,   123,   106,    81,
   129,    92,    16,    82,    43,    67,    83,    61,   133,    88,
    47,    12,    54,   130,    34,    16,   184,    21,   162,   196,
   172,   121,    75,     8,    18,   177,   198,   199,   180,   160,
   171,   157,   165,   148,   119,   117,   111,    64,    25,   181,
   158,    29,   193,   192,   191,    91,   167,   153,   139,   142,
    14,    39,   126,    19,   114,     3,    23,    60,    79,    78,
    69,    57,    37,   138,    17,    32,   122,   190,   185,    45,
   124,   113,    76,    51,   135,    77,    55,   194,    58,   186,
   125,   109,    36,    26,   166,   146,    68,    49,   152,    50,
    65,    30,    72,    48,    31,    74,    22,    62,    85,    56,
    35,    27,    45,    13,    96,    90,   161,   105,   183,   176,
   141,   107,   149,   132,    53,    33,   112,    95,    94,    85,
    93,   164,    89,    66,    71,    70,    28,    20,    11,    58,
     5,   120,    87,    24,    63,   115,    46,     9,     4,     2,
     1,     0,     0,     0,     0,     0,     0,     0,   118,     0,
     0,     0,    45,    72,     0,     0,     0,     0,     0,    85,
     0,   127,   136,     0,     0,   140,     0,   143,     0,     0,
     0,   128,     0,     0,    85,     0,   134,     0,   154,     0,
     0,     0,     0,     0,     0,   145,   147,    45,     0,   168,
   115,   169,   156,     0,     0,     0,   127,   163,     0,     0,
   140,   174,   143,     0,     0,   178,   173,     0,   179,   175,
     0,     0,     0,     0,   154,     0,     0,     0,     0,   182,
     0,     0,     0,   168,   188,     0,     0,   187,     0,   189,
   195,     0,     0,     0,     0,   197,     0,     0,     0,     0,
     0,     0,   200,   201 };
xxtabelem xxpact[]={

  -291,-10000000,-10000000,  -197,  -249,  -218,-10000000,  -256,-10000000,  -195,
  -256,  -205,-10000000,  -256,-10000000,-10000000,-10000000,  -175,-10000000,-10000000,
  -166,-10000000,  -256,-10000000,  -211,-10000000,  -259,  -222,  -195,-10000000,
  -256,  -260,-10000000,  -214,-10000000,  -256,  -268,-10000000,  -225,  -225,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -177,  -256,  -234,  -256,
  -273,-10000000,  -256,  -198,-10000000,  -231,  -275,-10000000,  -223,  -259,
  -240,  -258,-10000000,-10000000,  -256,  -245,  -295,-10000000,  -280,-10000000,
-10000000,-10000000,  -178,  -256,-10000000,-10000000,  -231,  -281,-10000000,  -179,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -256,  -180,  -256,-10000000,
-10000000,  -199,-10000000,  -246,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -244,
  -256,  -228,-10000000,  -283,-10000000,  -224,  -231,-10000000,-10000000,  -256,
  -257,-10000000,  -256,-10000000,  -256,  -285,-10000000,  -225,-10000000,-10000000,
-10000000,  -231,  -181,  -284,-10000000,  -256,  -267,-10000000,  -184,-10000000,
  -169,  -288,-10000000,  -191,  -244,  -182,  -256,-10000000,  -256,  -282,
-10000000,-10000000,  -185,-10000000,-10000000,-10000000,  -200,  -256,  -256,  -256,
-10000000,  -192,  -256,-10000000,-10000000,  -256,  -187,-10000000,  -170,-10000000,
-10000000,  -256,-10000000,-10000000,-10000000,-10000000,  -208,-10000000,-10000000,-10000000,
  -256,  -256,-10000000,  -240,-10000000,  -256,  -256,-10000000,-10000000,  -201,
  -256,  -189,-10000000,-10000000,  -188,-10000000,-10000000,  -189,  -256,  -256,
-10000000,-10000000 };
xxtabelem xxpgo[]={

     0,   190,   189,   188,   187,   186,   184,   183,   111,   182,
   180,   178,   177,    97,   176,   110,   175,   174,    96,   114,
   173,   112,   102,   171,    93,   107,   170,   168,   167,   165,
   109,   108,   164,   104,   163,   162,   161,   160,    99,   159,
   158,    95,    98,    92,   105,   101,   156,   155,   153,   151,
   150,   149,   146,   144,   141,   139,   138,   137,   136,   135,
   134,   133,   132,   131,   130,   129,   127,   126,   125,   124,
   122,   121,   120,   118,    94,   117,   116,   113 };
xxtabelem xxr1[]={

     0,     1,     1,     2,    48,     3,    49,     4,     5,     5,
     6,     6,     7,    50,     7,    51,    51,     8,     8,     8,
     8,     9,     9,    44,    10,    10,    11,    11,    52,    11,
    12,    12,    54,    12,    53,    53,    55,    55,    56,    56,
    13,    14,    57,    14,    58,    58,    15,    15,    15,    16,
    59,    17,    60,    60,    18,    19,    61,    19,    20,    63,
    20,    62,    62,    21,    21,    21,    47,    47,    45,    45,
    45,    45,    45,    45,    64,    64,    22,    22,    23,    65,
    23,    66,    66,    24,    24,    25,    25,    26,    26,    26,
    27,    27,    27,    28,    28,    28,    28,    28,    29,    67,
    29,    68,    68,    30,    69,    30,    31,    31,    31,    31,
    31,    31,    32,    70,    32,    71,    71,    33,    33,    34,
    34,    35,    35,    36,    72,    36,    37,    37,    38,    38,
    38,    38,    46,    46,    39,    73,    39,    40,    75,    40,
    74,    74,    41,    76,    41,    77,    77,    42,    42,    43,
    43 };
xxtabelem xxr2[]={

     0,     3,     5,    15,     1,     7,     1,    11,     1,     7,
     1,     5,     1,     1,     7,     3,     7,     1,     9,    11,
    13,     1,     7,    15,     1,     5,     1,     3,     1,     7,
     1,     3,     1,     7,     3,     7,     3,     7,     3,     7,
     3,     1,     1,     7,     3,     7,     1,     3,     3,     7,
     1,    11,     3,     7,     7,     1,     1,     7,     1,     1,
     7,     3,     7,     1,     7,     5,     1,     5,     3,     3,
     3,     3,     3,     3,     3,     7,     1,     7,     1,     1,
     9,     3,     7,     1,     3,     1,     7,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
     7,     3,     7,     1,     1,     9,     3,     3,     3,     3,
     3,     3,     1,     1,     7,     3,     7,     1,     9,     1,
     7,     3,     3,     1,     1,     7,     3,     7,     1,     3,
     5,    13,     1,     5,     1,     1,     7,     1,     1,     7,
     3,     7,     1,     1,     7,     3,     7,     1,     7,     3,
     3 };
xxtabelem xxchk[]={

-10000000,    -1,    -2,   -44,    -3,   -10,   297,   299,   270,    -4,
   294,   -11,   279,   -48,   -43,   277,   296,   -19,   269,   -43,
   -12,   272,   -52,   -43,    -7,   263,   -61,   -49,   -14,   257,
   -54,   -53,   -43,   -29,   275,   -50,   -62,   -21,   290,   -45,
   260,   268,   288,   298,   285,   -43,    -5,   282,   -19,   -57,
   -55,   -43,   295,   -32,   276,   -67,   -51,    -8,   -43,   295,
   -25,   282,   -25,    -6,   264,   -43,   -20,   289,   -58,   -15,
   -16,   -17,   -43,   295,   -43,   270,   -70,   -68,   -30,   -31,
   261,   280,   284,   287,   273,   -43,   295,    -9,   282,   -21,
   -47,   -41,   291,   -26,   -27,   -28,   -43,   301,   286,   258,
   292,   271,   281,   283,   262,   -43,   293,   -36,   300,   -63,
   295,   264,   -43,   -71,   -33,   -31,   295,   264,    -8,   264,
   -43,   270,   -76,   293,   -72,   -64,   -22,   -45,   -15,   278,
   291,   295,   -34,   282,   -30,   -69,   -43,   293,   -77,   -42,
   -43,   -37,   -38,   -43,   295,   -25,   -59,   -33,   264,   -35,
   301,   286,   -56,   -13,   -43,   270,   -44,   265,   259,   295,
   270,   -46,   259,   -22,   -23,   264,   -60,   -18,   -43,   -43,
   293,   265,   270,   -42,   -43,   -38,   -39,   267,   -43,   -43,
   265,   259,   -13,   -40,   274,   -73,   -65,   -18,   -43,   -41,
   -75,   -74,   -24,   -43,   -66,   -24,   270,   -74,   265,   265,
   -24,   -24 };
xxtabelem xxdef[]={

    24,    -2,     1,     0,     0,    26,     4,     0,     2,    55,
     0,    30,    -2,     0,    25,   149,   150,    12,    56,     6,
    41,    -2,     0,     5,    98,    13,    63,     8,    55,    42,
     0,    29,    34,   112,    99,    17,    57,    61,    85,    85,
    68,    69,    70,    71,    72,    73,    10,     0,    58,    46,
    33,    36,     0,     0,   113,   103,    14,    15,    21,    63,
    66,     0,    65,     7,     0,     0,   123,    59,    43,    44,
    47,    48,     0,     0,    35,     3,   117,   100,   101,     0,
   106,   107,   108,   109,   110,   111,    17,     0,     0,    62,
    64,     0,   143,     0,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    11,     9,    23,   124,    76,
    46,     0,    37,   114,   115,   119,   103,   104,    16,     0,
     0,    67,   147,    86,   128,    60,    74,    85,    45,    49,
    50,   117,     0,     0,   102,     0,    -2,    22,   144,   145,
     0,   125,   126,    -2,    76,    78,     0,   116,     0,     0,
   121,   122,   105,    38,    40,    19,     0,   147,     0,   128,
   130,   134,     0,    75,    77,     0,    51,    52,     0,   118,
   120,     0,    20,   146,   148,   127,   137,   135,   133,    79,
     0,     0,    39,   142,   138,    83,    83,    53,    54,     0,
    83,   136,   140,    84,    80,    81,   131,   139,    83,    83,
   141,    82 };
typedef struct
#ifdef __cplusplus
	xxtoktype
#endif
{ char *t_name; int t_val; } xxtoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

xxtoktype xxtoks[] =
{
	"LAC_ADAPT",	257,
	"LAC_ALL",	258,
	"LAC_AS",	259,
	"LAC_ASSERTION",	260,
	"LAC_C",	261,
	"LAC_CHECK",	262,
	"LAC_CLUSTER",	263,
	"LAC_COLUMN",	264,
	"LAC_COMMA",	265,
	"LAC_COMMENT",	266,
	"LAC_CREATION",	267,
	"LAC_DEBUG",	268,
	"LAC_DEFAULT",	269,
	"LAC_END",	270,
	"LAC_ENSURE",	271,
	"LAC_EXCLUDE",	272,
	"LAC_EXECUTABLE",	273,
	"LAC_EXPORT",	274,
	"LAC_EXTERNAL",	275,
	"LAC_GENERATE",	276,
	"LAC_IDENTIFIER",	277,
	"LAC_IGNORE",	278,
	"LAC_INCLUDE",	279,
	"LAC_INCLUDE_PATH",	280,
	"LAC_INVARIANT",	281,
	"LAC_LEFT_PARAM",	282,
	"LAC_LOOP",	283,
	"LAC_MAKE",	284,
	"LAC_MULTITHREADED",	285,
	"LAC_NO",	286,
	"LAC_OBJECT",	287,
	"LAC_OPTIMIZE",	288,
	"LAC_OPTION",	289,
	"LAC_PRECOMPILED",	290,
	"LAC_RENAME",	291,
	"LAC_REQUIRE",	292,
	"LAC_RIGHT_PARAM",	293,
	"LAC_ROOT",	294,
	"LAC_SEMICOLON",	295,
	"LAC_STRING",	296,
	"LAC_SYSTEM",	297,
	"LAC_TRACE",	298,
	"LAC_USE",	299,
	"LAC_VISIBLE",	300,
	"LAC_YES",	301,
	"LAC_WHITE",	302,
	"LAC_ERROR2",	303,
	"LAC_ERROR3",	304,
	"LAC_ERROR4",	305,
	"LAC_ERROR6",	306,
	"LAC_ERROR7",	307,
	"-unknown-",	-1	/* ends search */
};

char * xxreds[] =
{
	"-no such reduction-",
	"Ace_or_Properties : Ace",
	"Ace_or_Properties : Cluster_properties LAC_END",
	"Ace : System Root Defaults Clusters Externals Generation LAC_END",
	"System : LAC_SYSTEM",
	"System : LAC_SYSTEM Name",
	"Root : LAC_ROOT Name",
	"Root : LAC_ROOT Name Cluster_mark Creation_procedure",
	"Cluster_mark : /* empty */",
	"Cluster_mark : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
	"Creation_procedure : /* empty */",
	"Creation_procedure : LAC_COLUMN Name",
	"Clusters : /* empty */",
	"Clusters : LAC_CLUSTER",
	"Clusters : LAC_CLUSTER Cluster_clause_list",
	"Cluster_clause_list : Cluster_clause",
	"Cluster_clause_list : Cluster_clause_list LAC_SEMICOLON Cluster_clause",
	"Cluster_clause : /* empty */",
	"Cluster_clause : Name Parent_tag LAC_COLUMN Name",
	"Cluster_clause : Name Parent_tag LAC_COLUMN Name LAC_END",
	"Cluster_clause : Name Parent_tag LAC_COLUMN Name Cluster_properties LAC_END",
	"Parent_tag : /* empty */",
	"Parent_tag : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
	"Cluster_properties : Use Include Exclude Name_adapt Defaults Options Visible",
	"Use : /* empty */",
	"Use : LAC_USE Name",
	"Include : /* empty */",
	"Include : LAC_INCLUDE",
	"Include : LAC_INCLUDE",
	"Include : LAC_INCLUDE Include_file_list",
	"Exclude : /* empty */",
	"Exclude : LAC_EXCLUDE",
	"Exclude : LAC_EXCLUDE",
	"Exclude : LAC_EXCLUDE Exclude_file_list",
	"Include_file_list : Name",
	"Include_file_list : Include_file_list LAC_SEMICOLON Name",
	"Exclude_file_list : Name",
	"Exclude_file_list : Exclude_file_list LAC_SEMICOLON Name",
	"File_list : File_clause",
	"File_list : File_list LAC_COMMA File_clause",
	"File_clause : Name",
	"Name_adapt : /* empty */",
	"Name_adapt : LAC_ADAPT",
	"Name_adapt : LAC_ADAPT Cluster_adapt_list",
	"Cluster_adapt_list : Cluster_adapt_clause",
	"Cluster_adapt_list : Cluster_adapt_list LAC_SEMICOLON Cluster_adapt_clause",
	"Cluster_adapt_clause : /* empty */",
	"Cluster_adapt_clause : Cluster_ignore",
	"Cluster_adapt_clause : Cluster_rename_clause",
	"Cluster_ignore : Name LAC_COLUMN LAC_IGNORE",
	"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME",
	"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME Class_rename_list",
	"Class_rename_list : Class_rename_pair",
	"Class_rename_list : Class_rename_list LAC_COMMA Class_rename_pair",
	"Class_rename_pair : Name LAC_AS Name",
	"Defaults : /* empty */",
	"Defaults : LAC_DEFAULT",
	"Defaults : LAC_DEFAULT D_option_clause_list",
	"Options : /* empty */",
	"Options : LAC_OPTION",
	"Options : LAC_OPTION O_option_clause_list",
	"D_option_clause_list : D_option_clause",
	"D_option_clause_list : D_option_clause_list LAC_SEMICOLON D_option_clause",
	"D_option_clause : /* empty */",
	"D_option_clause : LAC_PRECOMPILED Option_mark Precompiled_adaptation",
	"D_option_clause : Option_name Option_mark",
	"Precompiled_adaptation : /* empty */",
	"Precompiled_adaptation : External_rename LAC_END",
	"Option_name : LAC_ASSERTION",
	"Option_name : LAC_DEBUG",
	"Option_name : LAC_OPTIMIZE",
	"Option_name : LAC_TRACE",
	"Option_name : LAC_MULTITHREADED",
	"Option_name : Name",
	"O_option_clause_list : O_option_clause",
	"O_option_clause_list : O_option_clause_list LAC_SEMICOLON O_option_clause",
	"O_option_clause : /* empty */",
	"O_option_clause : Option_name Option_mark Target_list",
	"Target_list : /* empty */",
	"Target_list : LAC_COLUMN Name",
	"Target_list : LAC_COLUMN Name Class_name_list",
	"Class_name_list : Name_star",
	"Class_name_list : Class_name_list LAC_COMMA Name_star",
	"Name_star : /* empty */",
	"Name_star : Name",
	"Option_mark : /* empty */",
	"Option_mark : LAC_LEFT_PARAM Option_value LAC_RIGHT_PARAM",
	"Option_value : Standard_value",
	"Option_value : Class_value",
	"Option_value : Name",
	"Standard_value : LAC_YES",
	"Standard_value : LAC_NO",
	"Standard_value : LAC_ALL",
	"Class_value : LAC_REQUIRE",
	"Class_value : LAC_ENSURE",
	"Class_value : LAC_INVARIANT",
	"Class_value : LAC_LOOP",
	"Class_value : LAC_CHECK",
	"Externals : /* empty */",
	"Externals : LAC_EXTERNAL",
	"Externals : LAC_EXTERNAL Language_contrib_list",
	"Language_contrib_list : Language_contrib",
	"Language_contrib_list : Language_contrib_list LAC_SEMICOLON Language_contrib",
	"Language_contrib : /* empty */",
	"Language_contrib : Language_name LAC_COLUMN",
	"Language_contrib : Language_name LAC_COLUMN File_list",
	"Language_name : LAC_C",
	"Language_name : LAC_INCLUDE_PATH",
	"Language_name : LAC_MAKE",
	"Language_name : LAC_OBJECT",
	"Language_name : LAC_EXECUTABLE",
	"Language_name : Name",
	"Generation : /* empty */",
	"Generation : LAC_GENERATE",
	"Generation : LAC_GENERATE Language_gen_list",
	"Language_gen_list : Language_generation",
	"Language_gen_list : Language_gen_list LAC_SEMICOLON Language_generation",
	"Language_generation : /* empty */",
	"Language_generation : Language_name Generate_option LAC_COLUMN Name",
	"Generate_option : /* empty */",
	"Generate_option : LAC_LEFT_PARAM Generate_option_value LAC_RIGHT_PARAM",
	"Generate_option_value : LAC_YES",
	"Generate_option_value : LAC_NO",
	"Visible : /* empty */",
	"Visible : LAC_VISIBLE",
	"Visible : LAC_VISIBLE Class_visi_list",
	"Class_visi_list : Class_visibility",
	"Class_visi_list : Class_visi_list LAC_SEMICOLON Class_visibility",
	"Class_visibility : /* empty */",
	"Class_visibility : Name",
	"Class_visibility : Name LAC_END",
	"Class_visibility : Name External_name Creation_restriction Export_restriction External_rename LAC_END",
	"External_name : /* empty */",
	"External_name : LAC_AS Name",
	"Creation_restriction : /* empty */",
	"Creation_restriction : LAC_CREATION",
	"Creation_restriction : LAC_CREATION Feature_name_list",
	"Export_restriction : /* empty */",
	"Export_restriction : LAC_EXPORT",
	"Export_restriction : LAC_EXPORT Feature_name_list",
	"Feature_name_list : Name_star",
	"Feature_name_list : Feature_name_list LAC_COMMA Name_star",
	"External_rename : /* empty */",
	"External_rename : LAC_RENAME",
	"External_rename : LAC_RENAME External_rename_list",
	"External_rename_list : ExternaL_rename_pair",
	"External_rename_list : External_rename_list LAC_COMMA ExternaL_rename_pair",
	"ExternaL_rename_pair : /* empty */",
	"ExternaL_rename_pair : Name LAC_AS Name",
	"Name : LAC_IDENTIFIER",
	"Name : LAC_STRING",
};
#endif /* YYDEBUG */
/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident	"@(#)yaccpar	6.12	93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto xxerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( xxchar >= 0 || ( xxr2[ xxtmp ] >> 1 ) != 1 )\
	{\
		xxerror( "syntax error - cannot backup" );\
		goto xxerrlab;\
	}\
	xxchar = newtoken;\
	xxstate = *xxps;\
	xxlval = newvalue;\
	goto xxnewstate;\
}
#define YYRECOVERING()	(!!xxerrflag)
#define YYNEW(type)	malloc(sizeof(type) * xxnewmax)
#define YYCOPY(to, from, type) \
	(type *) memcpy(to, (char *) from, xxnewmax * sizeof(type))
#define YYENLARGE( from, type) \
	(type *) realloc((char *) from, xxnewmax * sizeof(type))
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int xxdebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-10000000)

/*
** global variables used by the parser
*/
YYSTYPE *xxpv;			/* top of value stack */
int *xxps;			/* top of state stack */

int xxstate;			/* current state */
int xxtmp;			/* extra var (lasts between blocks) */

int xxnerrs;			/* number of errors */
int xxerrflag;			/* error recovery flag */
int xxchar;			/* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()		xxcvtok(xxlex())
/*
** xxcvtok - return a token if i is a wchar_t value that exceeds 255.
**	If i<255, i itself is the token.  If i>255 but the neither 
**	of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int xxcvtok(int i)
#else
int xxcvtok(i) int i;
#endif
{
	int first = 0;
	int last = YYNMBCHARS - 1;
	int mid;
	wchar_t j;

	if(i&0x60000000){/*Must convert to a token. */
		if( xxmbchars[last].character < i ){
			return i;/*Giving up*/
		}
		while ((last>=first)&&(first>=0)) {/*Binary search loop*/
			mid = (first+last)/2;
			j = xxmbchars[mid].character;
			if( j==i ){/*Found*/ 
				return xxmbchars[mid].tvalue;
			}else if( j<i ){
				first = mid + 1;
			}else{
				last = mid -1;
			}
		}
		/*No entry in the table.*/
		return i;/* Giving up.*/
	}else{/* i is already a token. */
		return i;
	}
}
#else/*!YYNMBCHARS*/
#define YYLEX()		xxlex()
#endif/*!YYNMBCHARS*/

/*
** xxparse - return 0 if worked, 1 if syntax error not recovered from
*/
#if defined(__STDC__) || defined(__cplusplus)
int xxparse(void)
#else
int xxparse()
#endif
{
	register YYSTYPE *xxpvt;	/* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
	hacks to please C++ and lint - goto's inside switch should never be
	executed; xxpvt is set to 0 to avoid "used before set" warning.
*/
	static int __yaccpar_lint_hack__ = 0;
	switch (__yaccpar_lint_hack__)
	{
		case 1: goto xxerrlab;
		case 2: goto xxnewstate;
	}
	xxpvt = 0;
#endif

	/*
	** Initialize externals - xxparse may be called more than once
	*/
	xxpv = &xxv[-1];
	xxps = &xxs[-1];
	xxstate = 0;
	xxtmp = 0;
	xxnerrs = 0;
	xxerrflag = 0;
	xxchar = -1;

#if YYMAXDEPTH <= 0
	if (xxmaxdepth <= 0)
	{
		if ((xxmaxdepth = YYEXPAND(0)) <= 0)
		{
			xxerror("yacc initialization error");
			YYABORT;
		}
	}
#endif

	{
		register YYSTYPE *xx_pv;	/* top of value stack */
		register int *xx_ps;		/* top of state stack */
		register int xx_state;		/* current state */
		register int  xx_n;		/* internal state number info */
	goto xxstack;	/* moved from 6 lines above to here to please C++ */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	xxnewstate:
		xx_pv = xxpv;
		xx_ps = xxps;
		xx_state = xxstate;
		goto xx_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	xxstack:
		xx_pv = xxpv;
		xx_ps = xxps;
		xx_state = xxstate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	xx_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( xxdebug )
		{
			register int xx_i;

			printf( "State %d, token ", xx_state );
			if ( xxchar == 0 )
				printf( "end-of-file\n" );
			else if ( xxchar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( xx_i = 0; xxtoks[xx_i].t_val >= 0;
					xx_i++ )
				{
					if ( xxtoks[xx_i].t_val == xxchar )
						break;
				}
				printf( "%s\n", xxtoks[xx_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++xx_ps >= &xxs[ xxmaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int xxps_index = (xx_ps - xxs);
			int xxpv_index = (xx_pv - xxv);
			int xxpvt_index = (xxpvt - xxv);
			int xxnewmax;
#ifdef YYEXPAND
			xxnewmax = YYEXPAND(xxmaxdepth);
#else
			xxnewmax = 2 * xxmaxdepth;	/* double table size */
			if (xxmaxdepth == YYMAXDEPTH)	/* first time growth */
			{
				char *newxxs = (char *)YYNEW(int);
				char *newxxv = (char *)YYNEW(YYSTYPE);
				if (newxxs != 0 && newxxv != 0)
				{
					xxs = YYCOPY(newxxs, xxs, int);
					xxv = YYCOPY(newxxv, xxv, YYSTYPE);
				}
				else
					xxnewmax = 0;	/* failed */
			}
			else				/* not first time */
			{
				xxs = YYENLARGE(xxs, int);
				xxv = YYENLARGE(xxv, YYSTYPE);
				if (xxs == 0 || xxv == 0)
					xxnewmax = 0;	/* failed */
			}
#endif
			if (xxnewmax <= xxmaxdepth)	/* tables not expanded */
			{
				xxerror( "yacc stack overflow" );
				YYABORT;
			}
			xxmaxdepth = xxnewmax;

			xx_ps = xxs + xxps_index;
			xx_pv = xxv + xxpv_index;
			xxpvt = xxv + xxpvt_index;
		}
		*xx_ps = xx_state;
		*++xx_pv = xxval;

		/*
		** we have a new state - find out what to do
		*/
	xx_newstate:
		if ( ( xx_n = xxpact[ xx_state ] ) <= YYFLAG )
			goto xxdefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		xxtmp = xxchar < 0;
#endif
		if ( ( xxchar < 0 ) && ( ( xxchar = YYLEX() ) < 0 ) )
			xxchar = 0;		/* reached EOF */
#if YYDEBUG
		if ( xxdebug && xxtmp )
		{
			register int xx_i;

			printf( "Received token " );
			if ( xxchar == 0 )
				printf( "end-of-file\n" );
			else if ( xxchar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( xx_i = 0; xxtoks[xx_i].t_val >= 0;
					xx_i++ )
				{
					if ( xxtoks[xx_i].t_val == xxchar )
						break;
				}
				printf( "%s\n", xxtoks[xx_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( xx_n += xxchar ) < 0 ) || ( xx_n >= YYLAST ) )
			goto xxdefault;
		if ( xxchk[ xx_n = xxact[ xx_n ] ] == xxchar )	/*valid shift*/
		{
			xxchar = -1;
			xxval = xxlval;
			xx_state = xx_n;
			if ( xxerrflag > 0 )
				xxerrflag--;
			goto xx_stack;
		}

	xxdefault:
		if ( ( xx_n = xxdef[ xx_state ] ) == -2 )
		{
#if YYDEBUG
			xxtmp = xxchar < 0;
#endif
			if ( ( xxchar < 0 ) && ( ( xxchar = YYLEX() ) < 0 ) )
				xxchar = 0;		/* reached EOF */
#if YYDEBUG
			if ( xxdebug && xxtmp )
			{
				register int xx_i;

				printf( "Received token " );
				if ( xxchar == 0 )
					printf( "end-of-file\n" );
				else if ( xxchar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( xx_i = 0;
						xxtoks[xx_i].t_val >= 0;
						xx_i++ )
					{
						if ( xxtoks[xx_i].t_val
							== xxchar )
						{
							break;
						}
					}
					printf( "%s\n", xxtoks[xx_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *xxxi = xxexca;

				while ( ( *xxxi != -1 ) ||
					( xxxi[1] != xx_state ) )
				{
					xxxi += 2;
				}
				while ( ( *(xxxi += 2) >= 0 ) &&
					( *xxxi != xxchar ) )
					;
				if ( ( xx_n = xxxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( xx_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( xxerrflag )
			{
			case 0:		/* new error */
				xxerror( "syntax error" );
				goto skip_init;
			xxerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				xx_pv = xxpv;
				xx_ps = xxps;
				xx_state = xxstate;
			skip_init:
				xxnerrs++;
				/* FALLTHRU */
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				xxerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( xx_ps >= xxs )
				{
					xx_n = xxpact[ *xx_ps ] + YYERRCODE;
					if ( xx_n >= 0 && xx_n < YYLAST &&
						xxchk[xxact[xx_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						xx_state = xxact[ xx_n ];
						goto xx_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( xxdebug )
						printf( _POP_, *xx_ps,
							xx_ps[-1] );
#	undef _POP_
#endif
					xx_ps--;
					xx_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( xxdebug )
				{
					register int xx_i;

					printf( "Error recovery discards " );
					if ( xxchar == 0 )
						printf( "token end-of-file\n" );
					else if ( xxchar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( xx_i = 0;
							xxtoks[xx_i].t_val >= 0;
							xx_i++ )
						{
							if ( xxtoks[xx_i].t_val
								== xxchar )
							{
								break;
							}
						}
						printf( "token %s\n",
							xxtoks[xx_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( xxchar == 0 )	/* reached EOF. quit */
					YYABORT;
				xxchar = -1;
				goto xx_newstate;
			}
		}/* end if ( xx_n == 0 ) */
		/*
		** reduction by production xx_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( xxdebug )
			printf( "Reduce by (%d) \"%s\"\n",
				xx_n, xxreds[ xx_n ] );
#endif
		xxtmp = xx_n;			/* value to switch over */
		xxpvt = xx_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using xx_state here as temporary
		** register variable, but why not, if it works...
		** If xxr2[ xx_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto xx_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int xx_len = xxr2[ xx_n ];

			if ( !( xx_len & 01 ) )
			{
				xx_len >>= 1;
				xxval = ( xx_pv -= xx_len )[1];	/* $$ = $1 */
				xx_state = xxpgo[ xx_n = xxr1[ xx_n ] ] +
					*( xx_ps -= xx_len ) + 1;
				if ( xx_state >= YYLAST ||
					xxchk[ xx_state =
					xxact[ xx_state ] ] != -xx_n )
				{
					xx_state = xxact[ xxpgo[ xx_n ] ];
				}
				goto xx_stack;
			}
			xx_len >>= 1;
			xxval = ( xx_pv -= xx_len )[1];	/* $$ = $1 */
			xx_state = xxpgo[ xx_n = xxr1[ xx_n ] ] +
				*( xx_ps -= xx_len ) + 1;
			if ( xx_state >= YYLAST ||
				xxchk[ xx_state = xxact[ xx_state ] ] != -xx_n )
			{
				xx_state = xxact[ xxpgo[ xx_n ] ];
			}
		}
					/* save until reenter driver code */
		xxstate = xx_state;
		xxps = xx_ps;
		xxpv = xx_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( xxtmp )
	{
		
case 1:
# line 88 "lace_y.y"
{rn_ast = xxpvt[-0].node;} break;
case 2:
# line 90 "lace_y.y"
{rn_ast = xxpvt[-1].node;} break;
case 3:
# line 94 "lace_y.y"
{
							xxval.node = create_node7 (ACE_SD,xxpvt[-6].node,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node,click_list_new());
							} break;
case 4:
# line 99 "lace_y.y"
{click_list_init();} break;
case 5:
# line 100 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 6:
# line 103 "lace_y.y"
{xxval.value = click_list_push ();} break;
case 7:
# line 105 "lace_y.y"
{
							xxval.node = create_node3 (ROOT_SD,xxpvt[-3].node,xxpvt[-1].node,xxpvt[-0].node);
							click_list_set (xxval.node, xxpvt[-2].value);
							} break;
case 8:
# line 112 "lace_y.y"
{xxval.node = NULL;} break;
case 9:
# line 114 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 10:
# line 118 "lace_y.y"
{xxval.node = NULL;} break;
case 11:
# line 120 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 12:
# line 124 "lace_y.y"
{xxval.node = NULL;} break;
case 13:
# line 125 "lace_y.y"
{list_init();} break;
case 14:
# line 126 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 15:
# line 130 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 16:
# line 132 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 17:
# line 136 "lace_y.y"
{xxval.node = NULL;} break;
case 18:
# line 139 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxpvt[-3].node,xxpvt[-0].node,NULL,xxpvt[-2].node);} break;
case 19:
# line 141 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxpvt[-4].node,xxpvt[-1].node,NULL,xxpvt[-3].node);} break;
case 20:
# line 143 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxpvt[-5].node,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-4].node);} break;
case 21:
# line 147 "lace_y.y"
{xxval.node = NULL;} break;
case 22:
# line 149 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 23:
# line 153 "lace_y.y"
{xxval.node = create_node7 (CLUST_PROP_SD,xxpvt[-6].node,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-0].node);} break;
case 24:
# line 157 "lace_y.y"
{xxval.node = NULL;} break;
case 25:
# line 159 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 26:
# line 163 "lace_y.y"
{xxval.node = NULL;} break;
case 27:
# line 164 "lace_y.y"
{xxval.node = NULL;} break;
case 28:
# line 165 "lace_y.y"
{list_init();} break;
case 29:
# line 166 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 30:
# line 170 "lace_y.y"
{xxval.node = NULL;} break;
case 31:
# line 171 "lace_y.y"
{xxval.node = NULL;} break;
case 32:
# line 172 "lace_y.y"
{list_init();} break;
case 33:
# line 173 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 34:
# line 177 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxpvt[-0].node));} break;
case 35:
# line 179 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxpvt[-0].node));} break;
case 36:
# line 183 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxpvt[-0].node));} break;
case 37:
# line 185 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxpvt[-0].node));} break;
case 38:
# line 189 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 39:
# line 191 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 40:
# line 195 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 41:
# line 199 "lace_y.y"
{xxval.node = NULL;} break;
case 42:
# line 200 "lace_y.y"
{list_init();} break;
case 43:
# line 201 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 44:
# line 205 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 45:
# line 207 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 46:
# line 211 "lace_y.y"
{xxval.node = NULL;} break;
case 47:
# line 213 "lace_y.y"
{xxval.node = create_node1 (CLUST_IGN_SD,xxpvt[-0].node);} break;
case 48:
# line 215 "lace_y.y"
{xxval.node = create_node2 (CLUST_REN_SD,xxpvt[-0].node,list_new(CONSTRUCT_LIST_SD));} break;
case 49:
# line 219 "lace_y.y"
{xxval.node = xxpvt[-2].node;} break;
case 50:
# line 222 "lace_y.y"
{list_init();} break;
case 51:
# line 223 "lace_y.y"
{xxval.node = xxpvt[-4].node;} break;
case 52:
# line 227 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 53:
# line 229 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 54:
# line 233 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxpvt[-2].node,xxpvt[-0].node);} break;
case 55:
# line 237 "lace_y.y"
{xxval.node = NULL;} break;
case 56:
# line 238 "lace_y.y"
{list_init();} break;
case 57:
# line 239 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 58:
# line 243 "lace_y.y"
{xxval.node = NULL;} break;
case 59:
# line 244 "lace_y.y"
{list_init();} break;
case 60:
# line 245 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 61:
# line 249 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 62:
# line 251 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 63:
# line 255 "lace_y.y"
{xxval.node = NULL;} break;
case 64:
# line 257 "lace_y.y"
{xxval.node = create_node3(D_PRECOMPILED_SD,create_node(PRECOMPILED_SD),xxpvt[-1].node,xxpvt[-0].node);} break;
case 65:
# line 259 "lace_y.y"
{xxval.node = create_node2 (D_OPTION_SD,xxpvt[-1].node,xxpvt[-0].node);} break;
case 66:
# line 263 "lace_y.y"
{xxval.node = NULL;} break;
case 67:
# line 265 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 68:
# line 269 "lace_y.y"
{xxval.node = create_node(ASSERTION_SD);} break;
case 69:
# line 271 "lace_y.y"
{xxval.node = create_node(DEBUG_SD);} break;
case 70:
# line 273 "lace_y.y"
{xxval.node = create_node(OPTIMIZE_SD);} break;
case 71:
# line 275 "lace_y.y"
{xxval.node = create_node(TRACE_SD);} break;
case 72:
# line 277 "lace_y.y"
{xxval.node = create_node(MULTITHREADED_SD);} break;
case 73:
# line 279 "lace_y.y"
{xxval.node = create_node1(FREE_OPTION_SD,xxpvt[-0].node);} break;
case 74:
# line 283 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 75:
# line 285 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 76:
# line 289 "lace_y.y"
{xxval.node = NULL;} break;
case 77:
# line 291 "lace_y.y"
{xxval.node = create_node3 (O_OPTION_SD,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-0].node);} break;
case 78:
# line 295 "lace_y.y"
{xxval.node = NULL;} break;
case 79:
# line 297 "lace_y.y"
{list_init(); list_push (xxpvt[-0].node);} break;
case 80:
# line 299 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 81:
# line 303 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 82:
# line 305 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 83:
# line 309 "lace_y.y"
{xxval.node = NULL;} break;
case 84:
# line 311 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 85:
# line 315 "lace_y.y"
{xxval.node = NULL;} break;
case 86:
# line 317 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 87:
# line 321 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 88:
# line 323 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 89:
# line 325 "lace_y.y"
{xxval.node = create_node1 (NAME_SD,xxpvt[-0].node);} break;
case 90:
# line 329 "lace_y.y"
{xxval.node = create_node1(YES_SD,lace_id("yes"));} break;
case 91:
# line 331 "lace_y.y"
{xxval.node = create_node1(NO_SD,lace_id("no"));} break;
case 92:
# line 333 "lace_y.y"
{xxval.node = create_node1(ALL_SD,lace_id("all"));} break;
case 93:
# line 337 "lace_y.y"
{xxval.node = create_node1(REQUIRE_SD,lace_id("require"));} break;
case 94:
# line 339 "lace_y.y"
{xxval.node = create_node1(ENSURE_SD,lace_id("ensure"));} break;
case 95:
# line 341 "lace_y.y"
{xxval.node = create_node1(INVARIANT_SD,lace_id("invariant"));} break;
case 96:
# line 343 "lace_y.y"
{xxval.node = create_node1(LOOP_SD,lace_id("loop"));} break;
case 97:
# line 345 "lace_y.y"
{xxval.node = create_node1(CHECK_SD,lace_id("check"));} break;
case 98:
# line 349 "lace_y.y"
{xxval.node = NULL;} break;
case 99:
# line 350 "lace_y.y"
{list_init();} break;
case 100:
# line 351 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 101:
# line 355 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 102:
# line 357 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 103:
# line 361 "lace_y.y"
{xxval.node = NULL;} break;
case 104:
# line 362 "lace_y.y"
{list_init();} break;
case 105:
# line 363 "lace_y.y"
{xxval.node = create_node2 (LANG_TRIB_SD,xxpvt[-3].node,list_new(CONSTRUCT_LIST_SD));} break;
case 106:
# line 367 "lace_y.y"
{xxval.node =
		create_node1(C_NAME_SD,lace_id("c"));} break;
case 107:
# line 370 "lace_y.y"
{xxval.node =
		create_node1(INCLUDE_PATH_NAME_SD,lace_id("include_path"));} break;
case 108:
# line 373 "lace_y.y"
{xxval.node =
		create_node1(MAKE_NAME_SD,lace_id("make"));} break;
case 109:
# line 376 "lace_y.y"
{xxval.node =
		create_node1(OBJECT_NAME_SD,lace_id("object"));} break;
case 110:
# line 379 "lace_y.y"
{xxval.node =
		create_node1(EXECUTABLE_NAME_SD,lace_id("executable"));} break;
case 111:
# line 382 "lace_y.y"
{xxval.node = create_node1(LANGUAGE_NAME_SD,xxpvt[-0].node);} break;
case 112:
# line 386 "lace_y.y"
{xxval.node = NULL;} break;
case 113:
# line 387 "lace_y.y"
{list_init();} break;
case 114:
# line 388 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 115:
# line 392 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 116:
# line 394 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 117:
# line 398 "lace_y.y"
{xxval.node = NULL;} break;
case 118:
# line 400 "lace_y.y"
{xxval.node = create_node3 (LANG_GEN_SD,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-0].node);} break;
case 119:
# line 404 "lace_y.y"
{xxval.node = NULL;} break;
case 120:
# line 406 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 121:
# line 410 "lace_y.y"
{xxval.node = create_node (YES_SD);} break;
case 122:
# line 412 "lace_y.y"
{xxval.node = create_node (NO_SD);} break;
case 123:
# line 416 "lace_y.y"
{xxval.node = NULL;} break;
case 124:
# line 417 "lace_y.y"
{list_init();} break;
case 125:
# line 418 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 126:
# line 422 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 127:
# line 424 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 128:
# line 428 "lace_y.y"
{xxval.node = NULL;} break;
case 129:
# line 430 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-0].node,NULL,NULL,NULL,NULL);} break;
case 130:
# line 432 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-1].node,NULL,NULL,NULL,NULL);} break;
case 131:
# line 434 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node);} break;
case 132:
# line 438 "lace_y.y"
{xxval.node = NULL;} break;
case 133:
# line 440 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 134:
# line 444 "lace_y.y"
{xxval.node = NULL;} break;
case 135:
# line 445 "lace_y.y"
{list_init();} break;
case 136:
# line 446 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 137:
# line 450 "lace_y.y"
{xxval.node = NULL;} break;
case 138:
# line 451 "lace_y.y"
{list_init();} break;
case 139:
# line 452 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 140:
# line 456 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 141:
# line 458 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 142:
# line 462 "lace_y.y"
{xxval.node = NULL;} break;
case 143:
# line 463 "lace_y.y"
{list_init();} break;
case 144:
# line 464 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 145:
# line 468 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 146:
# line 470 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 147:
# line 474 "lace_y.y"
{xxval.node = NULL;} break;
case 148:
# line 476 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxpvt[-2].node,xxpvt[-0].node);} break;
case 149:
# line 480 "lace_y.y"
{xxval.node = lace_id (token_str);} break;
case 150:
# line 482 "lace_y.y"
{xxval.node = lace_id (token_str);} break;
	}
	goto xxstack;		/* reset registers in driver code */
}

