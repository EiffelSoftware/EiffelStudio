<?xml version="1.0"?>
<document output="envision" title="Using Environment Variables">
  <meta_data>
    <help>
      <toc>
        <envision_title>Environment Variables</envision_title>
        <envision_pseudo_name>60</envision_pseudo_name>
      </toc>
      <xml>
        <xmlkeyword>
          <index>K</index>
          <term>Using Environment Variables</term>
        </xmlkeyword>
      </xml>
    </help>
  </meta_data>
  <paragraph>
    <paragraph>
			EiffelEnvision permits the use of <bold>Environment Variables</bold> for all project configuration paths. These paths include paths from in all of the project property pages and in the Solution Explorer node property windows.
		</paragraph>
    <anchor>special_variables</anchor>
    <heading>
      <size>2</size>
      <content>Special Variables</content>
    </heading>
    <paragraph>
			EiffelEnvision presets the <bold>ISE_EIFFEL</bold> environment variable to the install path chosen at install-time. This prevents potential conflicts when you have <bold>ISE_EIFFEL</bold> already defined as a system-wide environment variable, as is the case in some EiffelStudio installations. Any other use of any variables must have those variables defined as system or user environment variables prior to launching a Visual Studio .NET session.
		</paragraph>
    <anchor>
    </anchor>
    <heading>
      <size>2</size>
      <content>
      </content>
    </heading>
    <paragraph>
    </paragraph>
    <anchor>using_environment_variables</anchor>
    <heading>
      <size>2</size>
      <content>Using Environment Variables</content>
    </heading>
    <paragraph>
			Environment variables in paths are separated out using the '<italic>$</italic>' (Dollar) symbol. A variable name must only contain alphanumerical and '<italic>_</italic>' (Underscore) characters. 
		</paragraph>
    <paragraph>
			There are three possible ways to use environment variables.
			<list ordered="true"><item>Stand-alone usage requires that the variable name ends next to a non-variable character. For instance "<italic>$ISE_EIFFEL\library</italic>" is valid, "<italic>$ISE_EIFFELlibrary</italic>" is valid but ISE_EIFFELlibrary will be assumed to be the environment variable.</item><item>Encapsulating in parenthesis allows the environment variable to be distinguished between what is a variable name and what is not. Therefore, "<italic>$(ISE_EIFFEL)library</italic>" is valid and will expand <italic>ISE_EIFFEL</italic> and not attempt to expand <italic>ISE_EIFFELlibrary</italic>. Paths containing environment variables in this way may also be used as per the first example in "<italic>$(ISE_EIFFEL)\library</italic>".</item><item>Encapsulated in curly braces (recommended convention) is the same as with parenthesis. "<italic>${ISE_EIFFEL}\library</italic>" will evaluate the same as "<italic>$(ISE_EIFFEL)\library</italic>".</item></list><note><bold>Note</bold>: EiffelEnvision will evaluate all environment variables on an as-needed basis internally and will never expose those expanded paths to the outside world, i.e. the User Interface. This means using the automation interfaces, any paths that use environment variables will return paths as they are written. Clients will have to evaluate those environment variables themselves.
			</note></paragraph>
    <anchor>premoting_portability</anchor>
    <heading>
      <size>2</size>
      <content>Promoting Portability</content>
    </heading>
    <paragraph>
			Environment variables enable portability flexibility, as it is more the case than not that absolute and relative paths do not expand correctly when transferring projects to another developer's machines. Environment variables are just one of the unique qualities of EiffelEnvision.
		</paragraph>
    <anchor>also_see</anchor>
    <heading>
      <size>2</size>
      <content>Related Sections</content>
    </heading>
    <seealso>
      <bold>See Also:</bold>
      <line_break />
      <link>
        <url>index.xml</url>
        <label>Configuring Projects</label>
      </link>
      <line_break />
      <link>
        <url>../structure/index.xml</url>
        <label>Project Structure</label>
      </link>
      <line_break />
      <link>
        <url>../../../eiffel_for_dotnet/index.xml</url>
        <label>Eiffel the Language</label>
      </link>
    </seealso>
  </paragraph>
</document>
