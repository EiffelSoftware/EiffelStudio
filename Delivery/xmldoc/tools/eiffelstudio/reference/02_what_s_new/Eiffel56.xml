<document title="Release notes for EiffelStudio 5.6" output="studio">
	<meta_data>
		<help></help>
	</meta_data>
	<paragraph>
		<heading><size>2</size>Graphical environment</heading>
			<heading><size>3</size>Improvements</heading>
			<list ordered="false">
				<item>New implementation of the diagram tool with enhanced performance and functionalities
					<list ordered="false">
						<item>Support for UML view.</item>
						<item>Physics: auto-arrangement of classes using force directed graph.</item>
						<item>Multiple selection of classes.</item>
						<item>Improved speed/behavior of drawing/scrolling operations especially on large diagram.</item>
					</list>
				</item>
				<item>Added ability to find features performing an assignment to an attribute, or creating an attribute, as well as features using a procedure as creation procedure.</item>
				<item>Feature tree is now showing a different icon for frozen and obsolete features.</item>
				<item>Improved look and feel of applications using the EiffelVision library under Windows XP theme engine.</item>
				<item>Improved keyboard navigation in EiffelStudio windows/dialogs.</item>
				<item>Full support for 64 bits operating systems such as Windows, Linux, Solaris, Irix, VMS,...</item>
				<item>Features tree is also available for classes which are part of the universe, but not yet compiled.</item>
				<item>New EiffelCOM wizard. Click <link><url>../../../../wizards/com/index.xml</url><label>here</label></link> for more details.</item>
				<item>Improved speed of class completion for large system.</item>
			</list>
			<heading><size>3</size>Changes</heading>
			<list ordered="false">
				<item>
					Changed the default C compilation flags on Windows when using Visual Studio as a back-end C compiler. It will now compile C code using the -MT option. 
					It may cause some linking problems if you are using C libraries compiled against the static C library. To solve those issues recompile your C code using the -MT option.
				</item>
			</list>
			<heading><size>3</size>Bug fixes</heading>
			<list ordered="false">
				<item>Fixed infinite loop in finish_freezing which could use all the available memory.</item>
				<item>Fixed some issues with formatting of agent using expressions as target, and display of character and string constants in context tool.</item>
				<item>Fixed issue where tools that have been externally docked were not properly restored when reopening EiffelStudio.</item>
				<item>Fixed issue where one could not remove entries added to the list of external commands.</item>
			</list>
		<heading><size>2</size>Debugger</heading>
			<list ordered="false">
				<item>Click <link><url>../40_debugger/80_version_history/Eiffel56.xml</url><label>here</label></link> for the EiffelStudio's debugger release notes.</item>
			</list>
		<heading><size>2</size>EiffelBuild</heading>
			<list ordered="false">
				<item>Click <link><url>../../../eiffelbuild/version_history/index.xml</url><label>here</label></link> for the EiffelBuild release notes.</item>
			</list>
		<heading><size>2</size>Compiler</heading>
		<list ordered="false">
			<item>Click <link><url>../30_compiler/60_version_history/06_56_release/index.xml</url><label>here</label></link> for the compiler release notes.</item>
		</list>
		<heading><size>2</size>Libraries</heading>
		<heading><size>3</size>CECIL</heading>
		<list ordered="false">
			<item>Due to renaming of EIF_REAL and EIF_DOUBLE into EIF_REAL_32 and EIF_REAL_64, we have also changed the names of some CECIL facilities. Although old names are still valid we may remove their definition in future releases of the compiler. Below is the list of old names and their corresponding new names:
			<table>
				<row><cell><bold>Old name</bold></cell><cell><bold>New name</bold></cell></row>
				<row><cell>EIF_REAL_FUNCTION</cell><cell>EIF_REAL_32_FUNCTION</cell></row>
				<row><cell>EIF_DOUBLE_FUNCTION</cell><cell>EIF_REAL_64_FUNCTION</cell></row>
				<row><cell>eif_real_function</cell><cell>eif_real_32_function</cell></row>
				<row><cell>eif_double_function</cell><cell>eif_real_64_function</cell></row>
				<row><cell>EIF_REAL_TYPE</cell><cell>EIF_REAL_32_TYPE</cell></row>
				<row><cell>EIF_DOUBLE_TYPE</cell><cell>EIF_REAL_64_TYPE</cell></row>
				<row><cell>EIF_FN_FLOAT</cell><cell>EIF_FN_REAL_32</cell></row>
				<row><cell>EIF_FN_DOUBLE</cell><cell>EIF_FN_REAL_64</cell></row>
			</table>
		</item>
		</list>
		<heading><size>3</size>EiffelBase</heading>
		<list ordered="false">
			<item>Added new storable facility entierly written in Eiffel which enables you to exchange data between classic and .NET. Former version built-in in the Eiffel run-time did not apply for .NET. The classes are located in the new <cluster_name>serialization</cluster_name> cluster of EiffelBase.</item>
			<item><class_name>ARRAY</class_name>:
				<list ordered="false">
					<item>Changed signature of <feature_name>subarray</feature_name> to match ELKS specification. It now returns an <class_name>ARRAY [G]</class_name> instead of <code><keyword>like Current</keyword></code>.</item>
					<item>Fixed <feature_name>has</feature_name> to return <code><keyword>True</keyword></code> when searching for <code><keyword>Void</keyword></code> when comparing objects in an array containing a <code><keyword>Void</keyword></code> element.</item>
					<item>Fixed issue on .NET with <feature_name>clone</feature_name>/<feature_name>copy</feature_name> which were not really duplicating the internal of the array, and therefore enabling aliasing of its content by more than one array.</item>
					<item>Fixed a bug in feature <code><feature_name>occurences </feature_name></code> that returned <code><number>0</number></code> when called with <code><keyword>void</keyword></code> argument and <code><feature_name>object_comparision</feature_name></code> is <code><keyword>true</keyword></code>.</item>
					<item>Fixed a bug in feature <code><feature_name>is_equal</feature_name></code> that caused stack overflow when some array item is the array itself and <code><feature_name>object_comparision</feature_name></code> is <code><keyword>true</keyword></code>.</item>
				</list>
			</item>
			<item><class_name>ARRAYED_LIST</class_name>:
				<list ordered="false">
					<item>Removed <feature_name>array_valid_index</feature_name> from <class_name>ARRAYED_LIST</class_name>. Descendants of <class_name>ARRAYED_LIST</class_name> may need to update their inheritance clause. This fixes ability to use <feature_name>put_i_th</feature_name> with indexes that may violate the invariant of <class_name>ARRAYED_LIST</class_name>, for example the code below should trigger a precondition and not violate the invariant of <class_name>ARRAYED_LIST</class_name>:
<code_block>list: <class_name>ARRAYED_LIST</class_name> [<class_name>INTEGER</class_name>]

<keyword>create</keyword> list.<feature_name>make</feature_name> (5)
list.<feature_name>put_i_th</feature_name> (3, 3)</code_block></item>
					<item>Added implementation query <feature_name>new_filled_list</feature_name> in <class_name>ARRAYED_LIST</class_name>. Descendants of <class_name>ARRAYED_LIST</class_name> may need to update their inheritance clause.</item>
				</list>
			</item>
			<item><class_name>HASH_TABLE</class_name>:
				<list ordered="false">
					<item>Added <feature_name>merge</feature_name> to <class_name>HASH_TABLE</class_name>.</item>
					<item>Now <feature_name>remove</feature_name> will reset <feature_name>found_item</feature_name> when an element is removed.</item>
				</list>
			</item>
			<item><class_name>INTERNAL</class_name>:
				<list ordered="false">
					<item>Implemented all the routines in the .NET version.</item>
					<item>Added support for creating <class_name>TUPLE</class_name> types in <feature_name>dynamic_type_from_string</feature_name>.</item>
					<item>Added precondition to <feature_name>set_reference_field</feature_name> to ensure validity of reattachement to attributes.</item>
				</list>
			</item>
			<item><class_name>STRING</class_name>:
				<list ordered="false">
					<item>Changed signature of <feature_name>infix "+"</feature_name> to match ELKS specification. It now returns <code><keyword>like Current</keyword></code> instead of <class_name>STRING</class_name>.</item>
					<item>Added implementation query <feature_name>new_string</feature_name>. Descendants of <class_name>STRING</class_name> may need to update their inheritance clause.</item>
					<item>Fixed a bug in .NET implementation of feature <code><feature_name>replace_substring</feature_name></code> that might produce incorrect result when argument and target of the call is the same object.</item>
					<item>Merged .NET and classic implementation of STRING so that all features of STRING are now properly implemented for both platforms.</item>
					<item>Fixed <feature_name>center_justify</feature_name> that would corrupt memory on classic.</item>
					<item>Changed <feature_name>character_justify</feature_name>, <feature_name>left_justify</feature_name>, <feature_name>right_justify</feature_name> and <feature_name>center_justify</feature_name> so that justification is now done on <feature_name>count</feature_name> instead of <feature_name>capacity</feature_name>. You might expect different results after upgrading, thus check all callers of those routines.</item>
					<item>Added <feature_name>is_case_insenstive_equal</feature_name> to compare two strings regardless of their case.</item>
					<item>Rewrote routines <feature_name>is_integer</feature_name>, <feature_name>is_real</feature_name>, <feature_name>is_double</feature_name>, <feature_name>to_integer</feature_name>, <feature_name>to_real</feature_name> and <feature_name>to_double</feature_name> so that they do not rely on C externals. This could breeak some existing code relying on specific locale to read floating numbers.</item>
				</list>
			</item>
			<item>Changed behavior of <feature_name>item</feature_name> and <feature_name>eval</feature_name> in <class_name>FUNCTION</class_name>. They will not set <feature_name>last_result</feature_name> with their result. If you want to use <feature_name>last_result</feature_name> you should use <feature_name>call</feature_name> instead.</item>
			<item>Added new set of classes <class_name>NATURAL_8</class_name>, <class_name>NATURAL_16</class_name>, <class_name>NATURAL_32</class_name> and <class_name>NATURAL_64</class_name> to perform unsigned integer operations.</item>
			<item>Made implementations of <feature_name>cursor</feature_name> in descendants of <class_name>CURSOR_STRUCTURE</class_name> return a precise <class_name>CURSOR</class_name> type.</item>
			<item>Reduced feature exportation of routines also used as creation procedures of <class_name>CURSOR</class_name> descendants to <class_name>NONE</class_name></item>
			<item>Removed <feature_name>make_sublist</feature_name> from <class_name>TWO_WAY_LIST</class_name> public creation procedures.</item>
			<item>Made <feature_name>file_prunable</feature_name> from <class_name>FILE</class_name> obsolete. Use <feature_name>prunable</feature_name> instead.</item>
			<item>Implemented features <feature_name>collect</feature_name> and <feature_name>full_collect</feature_name> of class <class_name>MEMORY</class_name> for .NET.</item>
			<item>Changed type of feature <feature_name>sign</feature_name> in classes <class_name>INTEGER_8</class_name> and <class_name>INTEGER_16</class_name> to <class_name>INTEGER_8</class_name> and <class_name>INTEGER_16</class_name> respectively.</item>
			<item>Added a subcluster <cluster_name>refactoring</cluster_name> with classes that can be helpful for performing code refactoring.</item>
		</list>
		<heading><size>3</size>EiffelThread</heading>
		<list ordered="false">
			<item>Added feature <code><feature_name>sleep</feature_name></code> to class <code><class_name>THREAD_CONTROL</class_name></code>.</item>
			<item>Provided inheritance link between classes <code><class_name>THREAD</class_name></code> and <code><class_name>THREAD_CONTROL</class_name></code> on all platforms.</item>
		</list>
		<heading><size>3</size>EiffelVision2</heading>
		<list ordered="false">
			<item><link><label>Click here for EiffelVision2 release notes.</label><url>../../../../libraries/vision2/content/0-_revisions/index.xml</url></link></item>
		</list>
		<heading><size>3</size>WEL</heading>
		<list ordered="false">
			<item>Made WEL 64 bits compliant. This required a breaking change in signatures. Some routines were actually using an <class_name>INTEGER</class_name> to represent a <class_name>POINTER</class_name>. On 64 bits platform this is not working as <class_name>INTEGER</class_name> is 32 bits and <class_name>POINTER</class_name> is 64 bits. As a consequence if you are using low level facilities of WEL your code might not compile anymore. Simply replace <class_name>INTEGER</class_name> by <class_name>POINTER</class_name> to make it compile.</item>
		</list>
	</paragraph>
</document>
