<document output="studio" title="Eiffel to Java Interface">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>Introduction
		</heading>
		<paragraph>The Java interface allows you to call Java routines or attributes from your Eiffel code. It uses the Java Native Interface (JNI) provided by the Java Development Kit (JDK) 1.1.8. You can get more information about the JNI at: </paragraph>
		<paragraph>
			<link>
				<url>http://java.sun.com/products/jdk/1.1/docs/guide/jni/index.xml</url>
				<label>http://java.sun.com/products/jdk/1.1/docs/guide/jni/index.html</label>
			</link>
		</paragraph>
		<heading>
			<size>3</size>Requirements
		</heading>
		<list ordered="false">
			<item>JDK 1.1.8 should be correctly set up (download it at 
				<link>
					<url>http://java.sun.com/products/jdk/1.1/index.xml</url>
					<label>http://java.sun.com/products/jdk/1.1/index.html</label>
				</link>)
			</item>
			<item>The environment variable CLASSPATH should defined (check with the JDK documentation on how to do so) and that it contains the Java classes     you want to access.</item>
			<item>The environment variable JDK_HOME should be set to the installation directory of the JDK (e.g. D:\apps\jdk1.1.8).</item>
		</list>
		<heading>
			<size>3</size>Borland users
		</heading>
		<paragraph>On Windows, the JDK includes a set of C libraries which have been    compiled for the Microsoft C compiler. Before being able to use the JDK    from Eiffel you need to perform the following operation:</paragraph>
		<list ordered="true">
			<item>In $JDK_HOME\lib, rename javai.lib into javai.lib.microsoft</item>
			<item>From the DOS command prompt and in the directory $JDK_HOME\lib,     launch the following command
				<line_break/>
				<code_block>
	%ISE_EIFFEL%\bcc55\bin\implib javai.lib..\bin\javai.dll
				</code_block>
			</item>
		</list>
		<heading>
			<size>3</size> Limitations
		</heading>
		<list ordered="false">
			<item>In this version, you can only use one JNI environment.</item>
			<item>Only one thread can interact with the Java Virtual Machine (JVM).</item>
			<item>It is not possible to call Eiffel features from Java program.</item>
			<item>The Eiffel feature `destroy_vm' of `JAVA_VM' calls a C function of the Java NativeInterface that is not fully implemented in jdk     1.1.8.   This function, calledDestroyJavaVM, always returns -1 in jdk     1.1.8. For further information, go on theJNI pages at the address   above.</item>
		</list>
		<heading>
			<size>2</size>Interface classes
		</heading>
		<heading>
			<size>3</size>JNI_ENVIRONMENT
		</heading>
		<paragraph>Holds information about JNI environment. Potentially many JNI environments can exists at once, but more than one was never tested. This class provide the facilities to interact with the JVM:</paragraph>
		<list ordered="false">
			<item>creation of instances of Java Classes</item>
			<item>exceptions mechanism</item>
			<item>destruction of the JVM</item>
		</list>
		<heading>
			<size>3</size>SHARED_JNI_ENVIRONMENT
		</heading>
		<paragraph> Shared JNI environment. Since one JNI is needed per thread we limit Eiffel to having one thread that deals with Java. The class that calls Java routines or attributes must inherit from this class. </paragraph>
		<heading>
			<size>3</size>JAVA_VM
		</heading>
		<paragraph> This class is used to initially load the JVM into the running program. This is the Eiffel representation of the JVM. </paragraph>
		<heading>
			<size>3</size>JAVA_CLASS
		</heading>
		<paragraph> Access to Java classes. Static methods and attributes are accessedvia this class.This is the Eiffel representation of a Java Class. </paragraph>
		<heading>
			<size>3</size>JAVA_OBJECT
		</heading>
		<paragraph> This class gives Eiffel access to Java objects. You can use itdirectly or inherit from to and create a more convienient Eiffelclass that makes the Java object look like an Eiffel object. The Eiffel representation of a Java Object. </paragraph>
		<warning>
			<bold>Warning:</bold> to access the static fields or routines of a Java Class, you have to use the features of a JAVA_CLASS instance!!
		</warning>
		<heading>
			<size>3</size>JAVA_EXTERNALS
		</heading>
		<paragraph> JNI external declarations. Don't use this class directly. </paragraph>
		<heading>
			<size>3</size>JAVA_***_ARRAY
		</heading>
		<paragraph> Access to Java array of "***". "***" can be all the usual types of Java (byte, short, int, float, double, char, boolean) or object if it is an array of Java Object (a String is considered as an object) </paragraph>
		<heading>
			<size>3</size>JAVA_ARGS
		</heading>
		<paragraph> Class representing the arguments that can be passed to a Java method. See below about the signature of the methods </paragraph>
		<heading>
			<size>3</size>JAVA_OBJECT_TABLE
		</heading>
		<paragraph> This class provides a mapping between Java and Eiffel objects  </paragraph>
		<paragraph>
			<bold>Mapping the Eiffel classes and the Java types:</bold>
			<paragraph> The following table describes the mapping of Java primitive types and classes to Eiffel classes.
				<table>
					<row>
						<cell>
							<bold>Java type/class</bold>
						</cell>
						<cell>
							<bold>Eiffel class</bold>
						</cell>
					</row>
					<row>
						<cell>boolean</cell>
						<cell>BOOLEAN</cell>
					</row>
					<row>
						<cell>char, byte</cell>
						<cell>CHARACTER</cell>
					</row>
					<row>
						<cell>short, int</cell>
						<cell>INTEGER</cell>
					</row>
					<row>
						<cell>long</cell>
						<cell>INTEGER_64</cell>
					</row>
					<row>
						<cell>float</cell>
						<cell>REAL</cell>
					</row>
					<row>
						<cell>double</cell>
						<cell>DOUBLE</cell>
					</row>
					<row>
						<cell>String</cell>
						<cell>STRING</cell>
					</row>
					<row>
						<cell>void</cell>
						<cell>Void</cell>
					</row>
				</table>
				<paragraph> The interface does the mapping automatically. For example, if you call a Java method that returns a 'float', by using float_method you will get a REAL. </paragraph>
				<paragraph>
					<bold>The signature of Java methods and attributes:</bold>
				</paragraph>
				<paragraph> When you want to call a Java method or access a field, you need to specify its signature.The Eiffel to Java   interface follows the JNI specifications.The table below summarizes the encoding for the Java type signatures: </paragraph>
				<table>
					<row>
						<cell>
							<bold>Signature</bold>
						</cell>
						<cell>
							<bold>Java Type</bold>
						</cell>
					</row>
					<row>
						<cell>Z</cell>
						<cell>boolean</cell>
					</row>
					<row>
						<cell>B</cell>
						<cell>byte</cell>
					</row>
					<row>
						<cell>C</cell>
						<cell>char</cell>
					</row>
					<row>
						<cell>S</cell>
						<cell>short</cell>
					</row>
					<row>
						<cell>I</cell>
						<cell>int</cell>
					</row>
					<row>
						<cell>J</cell>
						<cell>long</cell>
					</row>
					<row>
						<cell>F</cell>
						<cell>float</cell>
					</row>
					<row>
						<cell>D</cell>
						<cell>double</cell>
					</row>
					<row>
						<cell>V</cell>
						<cell>void</cell>
					</row>
					<row>
						<cell>[type</cell>
						<cell>type []</cell>
					</row>
				</table>
				<paragraph> The signature for a Java class has the following form: </paragraph>
				<code_block>
	L fully-qualified-class;
				</code_block>
				<paragraph> For example, class String:
					<code_block>
	Ljava/lang/String;
					</code_block>
				</paragraph>
				<paragraph> The signature for a method has the following form: </paragraph>
				<code_block> 
	(arguments-types) returned-types 
				</code_block>
				<paragraph> For example, the signature of a method that takes as arguments an integer and a string and return void is:
					<code_block>
	(ILjava/lang/String;)V
					</code_block>
				</paragraph>
			</paragraph>
		</paragraph>
	</paragraph></document>