<document title="Compiling WEL for Unicode - Windows 95/98/Me" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>This documentation is provided for those wishing to compile their application for Windows 95/98/Me with full Unicode support. Windows 95/98/Me uses code pages (ANSI) while Windows NT/2000/XP uses Unicode. To provide Unicode support for your Windows 95/98/Me Microsoft have developed a translation layer, the Microsoft Layer for Unicode (MSLU), which provides a complete set of unicode APIs. </paragraph>
		<paragraph>The following step-by-step tutorial details how to get Unicode support for WEL application using Windows 95/98/Me. </paragraph>
		<heading>
			<size>2</size>1 Download Microsoft Layer for Unicode
		</heading>
		<paragraph>Download the Microsoft Layer for Unicode 
			<link>
				<url>http://www.microsoft.com/downloads/details.aspx?familyid=73ba7bd7-ed06-4f0d-80a4-2a7eeaee17e2&amp;displaylang=en</url>
				<label>here</label>
			</link> This contains the unicows. dll. The other file needed to get MSLU working, unicows. lib, can be found in the Microsoft Platform SDK. 
		</paragraph>
		<heading>
			<size>2</size>2 Compiling Your Application (Without MSLU)
		</heading>
		<paragraph>Compile your application as normal. </paragraph>
		<heading>
			<size>2</size>3 Add MSLU Support
		</heading>
		<paragraph>Copy the unicows. dll and unicows. lib files into your project directory. Note that the Microsoft Layer for Unicode does not automatically load from the $(WINDOWS) or $(WINSYS) directories so do not put the files there. </paragraph>
		<heading>
			<size>2</size>4 Change the Linker Options
		</heading>
		<paragraph>Once MSLU support has been added you must modify the linker file generated by Eiffel:</paragraph>
		<list ordered="false">
			<item> Go to your application's 'EIFGEN\W_code' directory and open the file called ' 
				<italic>SystemName</italic>. lnk, where 
				<italic>'SystemName'</italic> is the name of your system as specified in the .ace file, in your favourite text editor. 
			</item>
			<item> Add the following at the  of the file:
				<line_break/>
				<paragraph>/nodefaultlib:kernel32. lib/nodefaultlib:advapi32. lib /nodefaultlib:user32. lib
					<line_break/> /nodefaultlib:gdi32. lib /nodefaultlib:shell32. lib/nodefaultlib:comdlg32. lib
					<line_break/> /nodefaultlib:version. lib /nodefaultlib:mpr. lib/nodefaultlib:winmm. lib
					<line_break/> /nodefaultlib:winspool. lib /nodefaultlib:vfw32. lib/nodefaultlib:secur32. lib
					<line_break/> /nodefaultlib:oleacc. lib /nodefaultlib:oledlg. lib
				</paragraph>
			</item>
			<item> Then add:
				<paragraph>unicows. lib</paragraph>
			</item>
			<item> Now, replace the line that looks like this:
				<paragraph>USER32. lib WSOCK32. lib ADVAPI32. lib GDI32. lib SHELL32. lib
					<line_break/>COMDLG32. lib UUID. lib OLE32. lib OLEAUT32. lib COMCTL32. lib
					<line_break/>MPR. LIB IMM32. LIB
				</paragraph>
			</item>
			<item> With this:
				<paragraph>KERNEL32. lib ADVAPI32. lib USER32. lib GDI32. lib SHELL32. lib
					<line_break/>COMDLG32. lib VERSION. lib MPR. LIB WINMM. lib WINSPOOL. lib
					<line_break/>VFW32. lib OLEACC. lib OLEDLG. lib WSOCK32. lib UUID. lib OLE32. lib
					<line_break/>OLEAUT32. lib COMCTL32. lib
				</paragraph>
			</item>
		</list>
		<paragraph>A sample linker file can be seen 
			<link>
				<url>./mslu.xml</url>
				<label>here</label>
			</link> with each step mark for your convenience. 
		</paragraph>
		<heading>
			<size>2</size>5 Relink (With MSLU Support)
		</heading>
		<paragraph>Now you must relink your application so that it knows to use the libraries you just changed in the linker file. To do this run 'link 
			<italic>SystemName</italic>. lnk', where 
			<italic>'SystemName'</italic> is the name of your system as specified in the .ace file, from your 'EIFGEN\W_code' directory. Note that if you recompile the application C code a new linker file will be generated and the modified version will be overwritten. 
		</paragraph>
	</paragraph></document>
