WIDGET     : Permanent window
DESCRIPTION: A permanent window is present on the screen throughout 
             an entire application.

CLIENT INTERFACE:
-----------------

class interface
	PERM_WIND

creation 
	make

feature  

	allow_recompute_size
			-- Allow Current bulletin to recompute its size
			-- according to its children.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed

	allow_resize

	circulate_down
			-- Circulate the children of this widget down
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed

	circulate_up
			-- Circulate the children of this widget up
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed

	clean_list
			-- (from SCALABLE)

	context_data: CONTEXT_DATA
			-- Information related to Current command,
			-- provided by the underlying user interface
			-- mechanism
			-- (from COMMAND)

	context_data_useful: BOOLEAN
			-- Should the context data be available
			-- when Current command is invoked as a
			-- callback
			-- (from COMMAND)

	follow_x (a_widget: WIDGET; flag: BOOLEAN)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_widget: a_widget /= void

	follow_y (a_widget: WIDGET; flag: BOOLEAN)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_widget: a_widget /= void

	forbid_recompute_size
			-- Forbid Current bulletin to recompute its size
			-- according to its children.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed

	forbid_resize

	height: INTEGER
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			positive_height: Result >= 0

	height_resizeable (a_widget: WIDGET; flag: BOOLEAN)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_widget: a_widget /= void

	hide
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized
		ensure -- from WIDGET
			shown: (parent /= void and then parent.shown implies not shown) or else (parent = void implies not shown)

	icon_name: STRING

	icon_pixmap: PIXMAP

	is_iconic_state: BOOLEAN

	is_template: BOOLEAN
			-- Is the current command a template, in other words,
			-- should it be cloned before execution?
			-- If true, EiffelVision will clone Current command
			-- whenever it is invoked as a callback
			-- (from COMMAND)

	lower
		require -- from WIDGET
			exists: not destroyed;
			is_realized: realized

	old_height: INTEGER
			-- Old height and width of Current scalable
			-- (from SCALABLE)

	old_width: INTEGER
			-- Old height and width of Current scalable
			-- (from SCALABLE)

	parent_shell: TOP_SHELL

	raise
		require -- from WIDGET
			exists: not destroyed;
			is_realized: realized

	real_x: INTEGER
		require -- from WIDGET
			exists: not destroyed

	real_y: INTEGER
		require -- from WIDGET
			exists: not destroyed

	realize
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			realized: realized

	realized: BOOLEAN
		require -- from WIDGET
			exists: not destroyed
		require else -- from STACKABLE
			exists: not destroyed

	record_resize_policy (a_widget: WIDGET; foll_x, foll_y, width_res, height_res: BOOLEAN)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_height: height > 0;
			valid_width: width > 0

	search_widget (a_widget: WIDGET)
			-- (from SCALABLE)

	set_default_position (flag: BOOLEAN)
			-- Set default position of Current to flag.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed

	set_height (new_h: INTEGER)
		require -- from WIDGET
			exists: not destroyed;
			positive_height: new_height >= 0

	set_icon_name (a_name: STRING)

	set_icon_pixmap (a_pixmap: PIXMAP)

	set_icon_pixmap_by_name (a_pixmap_name: STRING)
			-- Draw a_pixmap_name into the perm_wind icon.
		require
			a_pixmap_name_exist: not (a_pixmap_name = void)

	set_iconic_state (flag: BOOLEAN)

	set_size (new_w, new_h: INTEGER)
		require -- from WIDGET
			exists: not destroyed;
			positive_width: new_width >= 0;
			positive_height: new_height >= 0

	set_title (a_title: STRING)

	set_width (new_w: INTEGER)
		require -- from WIDGET
			exists: not destroyed;
			positive_width: new_width >= 0

	set_x (new_x: INTEGER)
		require -- from WIDGET
			exists: not destroyed

	set_x_y (new_x, new_y: INTEGER)
		require -- from WIDGET
			exists: not destroyed

	set_y (new_y: INTEGER)
		require -- from WIDGET
			exists: not destroyed

	show
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized
		ensure -- from WIDGET
			shown: (parent /= void and then not parent.shown implies shown) or else (parent = void implies shown)

	title: STRING

	top_shell: TOP_SHELL

	unrealize
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			not_realized: not realized

	update_ratios (a_widget: WIDGET)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_widget: a_widget /= void

	widget_coordinates: LINKED_LIST [WIDGET_RATIO]
			-- List of widget ratios for Current scalable
			-- (from SCALABLE)

	width: INTEGER
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			positive_width: Result >= 0

	width_resizeable (a_widget: WIDGET; flag: BOOLEAN)
			-- (from SCALABLE)
		require -- from SCALABLE
			valid_widget: a_widget /= void

	x: INTEGER
		require -- from WIDGET
			exists: not destroyed

	y: INTEGER
		require -- from WIDGET
			exists: not destroyed

feature  -- Color

	foreground_color: COLOR
			-- Foreground color of manager widget
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed
		ensure -- from MANAGER
			valid_result: Result /= void

	set_foreground (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed;
			color_not_void: new_color /= void
		ensure -- from MANAGER
			foreground_color = new_color

	set_foreground_color (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed;
			color_not_void: new_color /= void
		ensure -- from MANAGER
			foreground_color = new_color

feature  -- Color and pixmap

	background_color: COLOR
			-- Background color of Current widget
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			valid_result: Result /= void

	background_pixmap: PIXMAP
			-- Background pixmap of Current widget
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			valid_result: Result /= void and then Result.is_valid

	set_background_color (new_color: COLOR)
			-- Set background color to new_color.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			valid_color: new_color /= void
		ensure -- from WIDGET
			color_set: background_color = new_color

	set_background_pixmap (a_pixmap: PIXMAP)
			-- Set background pixmap to a_pixmap.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			valid_pixmap: a_pixmap /= void
		ensure -- from WIDGET
			pixmap_set: background_pixmap = a_pixmap

feature  -- Configure event

	execute (argument: ANY)
			-- (from SCALABLE)

feature  -- Cursor

	cursor: SCREEN_CURSOR
			-- Cursor of current widget
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed

	set_cursor (a_cursor: SCREEN_CURSOR)
			-- Set cursor of current widget to a_cursor.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			valid_cursor: a_cursor /= void;
			widget_realized: realized

feature  -- Event handling

	grab (a_cursor: SCREEN_CURSOR)
			-- Grab the mouse and the keyboard , i.e.
			-- channel all events to Current widget
			-- regardless of where they occur
			-- If cursor is not void, the pointer
			-- will have a_cursor shape during the grab.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized

	insensitive: BOOLEAN
			-- Is current widget insensitive to
			-- user actions? (If it is, events will
			-- not be dispatched to Current widget or
			-- any of its children)
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed

	propagate_event
			-- Propagate events not handled by Current
			-- widget to direct parent.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized

	set_insensitive
			-- Make Current widget insensitive
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			insensitive: insensitive

	set_no_event_propagation
			-- Do not propagate events to direct
			-- parent.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized

	set_sensitive
			-- Make Current widget sensitive.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			sensitive: not insensitive

	ungrab
			-- Release the mouse and the keyboard
			-- from an earlier grab.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized

feature  -- Geometry

	old_set_height (new_height: INTEGER)
			-- Set height to new_height.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			positive_height: new_height >= 0

	old_set_size (new_width: INTEGER; new_height: INTEGER)
			-- Set width and height to new_width
			-- and new_height.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			positive_width: new_width >= 0;
			positive_height: new_height >= 0

	old_set_width (new_width: INTEGER)
			-- Set width to new_width.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			positive_width: new_width >= 0

feature  -- Hierarchy

	top: TOP
			-- Top shell or base of Current widget
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			valid_result: Result /= void

feature  -- Parent composite

	parent: COMPOSITE
			-- Parent of manager widget
			-- (from MANAGER)
		require -- from STACKABLE
			exists: not destroyed

feature  -- Widget hierarchy

	children: ARRAYED_LIST [WIDGET]
			-- List of children for Current composite
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			valid_result: Result /= void

	children_count: INTEGER
			-- Number of children
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			positive_result: Result >= 0

	descendents: ARRAYED_LIST [WIDGET]
			-- List of descendents for Current composite
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			valid_result: Result /= void

feature  -- Windowing

	destroy
			-- Destroy actual screen object of Current
			-- widget and of all children.
			-- (from WIDGET)

	destroyed: BOOLEAN
			-- Is Current widget destroyed?
			-- (from WIDGET)

	manage
			-- Enable geometry managment.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			managed: parent /= void implies managed

	managed: BOOLEAN
			-- Is Current widget subject to
			-- geometry managment?
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed

	screen: SCREEN
			-- Screen of Current widget
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			valid_result: Result /= void

	set_managed (b: BOOLEAN)
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed

	shown: BOOLEAN
			-- Is current widget visible?
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed;
			widget_realized: realized

	unmanage
			-- Disable geometry managment.
			-- (from WIDGET)
		require -- from WIDGET
			exists: not destroyed
		ensure -- from WIDGET
			not_managed: parent /= void implies not managed

invariant
	-- from MANAGER
	valid_parent: (not destroyed and then parent /= void) implies depth > 0;
	-- from WIDGET
	widget_positive_depth: depth >= 0;

end -- class PERM_WIND

