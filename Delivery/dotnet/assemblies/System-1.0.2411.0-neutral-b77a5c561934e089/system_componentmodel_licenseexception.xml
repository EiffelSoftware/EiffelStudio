<!DOCTYPE type SYSTEM "../type.dtd">
<class>
	<header>
		<modified>False</modified>
		<frozen>False</frozen>
		<expanded>False</expanded>
		<deferred>False</deferred>
		<generic>False</generic>
		<class_eiffel_name>SYSTEM_COMPONENTMODEL_LICENSEEXCEPTION</class_eiffel_name>
		<alias>
			<simple_name>LicenseException</simple_name>
			<namespace>System.ComponentModel</namespace>
			<assembly_name>System</assembly_name>
			<assembly_version>1.0.2411.0</assembly_version>
			<assembly_culture>neutral</assembly_culture>
			<assembly_public_key>b77a5c561934e089</assembly_public_key>
		</alias>
		<inherit>
			<parent>
				<parent_name>SYSTEM_RUNTIME_SERIALIZATION_ISERIALIZABLE</parent_name>
			</parent>
			<parent>
				<parent_name>SYSTEM_SYSTEMEXCEPTION</parent_name>
			</parent>
		</inherit>
		<create_none>False</create_none>
	</header>
	<body>
		<initialization>
			<feature>
				<feature_modified>False</feature_modified>
				<frozen_feature>True</frozen_feature>
				<static>False</static>
				<abstract>False</abstract>
				<method>False</method>
				<field>False</field>
				<creation_routine>True</creation_routine>
				<prefix>False</prefix>
				<infix>False</infix>
				<new_slot>False</new_slot>
				<enum_literal>False</enum_literal>
				<is_literal>False</is_literal>
				<feature_eiffel_name>make_licenseexception</feature_eiffel_name>
				<arguments>
					<argument>
						<argument_eiffel_name>type</argument_eiffel_name>
						<argument_external_name>type</argument_external_name>
						<argument_type>SYSTEM_TYPE</argument_type>
						<argument_type_full_name>System.Type</argument_type_full_name>
					</argument>
				</arguments>
			</feature>
			<feature>
				<feature_modified>False</feature_modified>
				<frozen_feature>True</frozen_feature>
				<static>False</static>
				<abstract>False</abstract>
				<method>False</method>
				<field>False</field>
				<creation_routine>True</creation_routine>
				<prefix>False</prefix>
				<infix>False</infix>
				<new_slot>False</new_slot>
				<enum_literal>False</enum_literal>
				<is_literal>False</is_literal>
				<feature_eiffel_name>make_licenseexception_3</feature_eiffel_name>
				<arguments>
					<argument>
						<argument_eiffel_name>type</argument_eiffel_name>
						<argument_external_name>type</argument_external_name>
						<argument_type>SYSTEM_TYPE</argument_type>
						<argument_type_full_name>System.Type</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>instance</argument_eiffel_name>
						<argument_external_name>instance</argument_external_name>
						<argument_type>ANY</argument_type>
						<argument_type_full_name>System.Object</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>message</argument_eiffel_name>
						<argument_external_name>message</argument_external_name>
						<argument_type>STRING</argument_type>
						<argument_type_full_name>System.String</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>inner_exception</argument_eiffel_name>
						<argument_external_name>innerException</argument_external_name>
						<argument_type>SYSTEM_EXCEPTION</argument_type>
						<argument_type_full_name>System.Exception</argument_type_full_name>
					</argument>
				</arguments>
			</feature>
			<feature>
				<feature_modified>False</feature_modified>
				<frozen_feature>True</frozen_feature>
				<static>False</static>
				<abstract>False</abstract>
				<method>False</method>
				<field>False</field>
				<creation_routine>True</creation_routine>
				<prefix>False</prefix>
				<infix>False</infix>
				<new_slot>False</new_slot>
				<enum_literal>False</enum_literal>
				<is_literal>False</is_literal>
				<feature_eiffel_name>make_licenseexception_1</feature_eiffel_name>
				<arguments>
					<argument>
						<argument_eiffel_name>type</argument_eiffel_name>
						<argument_external_name>type</argument_external_name>
						<argument_type>SYSTEM_TYPE</argument_type>
						<argument_type_full_name>System.Type</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>instance</argument_eiffel_name>
						<argument_external_name>instance</argument_external_name>
						<argument_type>ANY</argument_type>
						<argument_type_full_name>System.Object</argument_type_full_name>
					</argument>
				</arguments>
			</feature>
			<feature>
				<feature_modified>False</feature_modified>
				<frozen_feature>True</frozen_feature>
				<static>False</static>
				<abstract>False</abstract>
				<method>False</method>
				<field>False</field>
				<creation_routine>True</creation_routine>
				<prefix>False</prefix>
				<infix>False</infix>
				<new_slot>False</new_slot>
				<enum_literal>False</enum_literal>
				<is_literal>False</is_literal>
				<feature_eiffel_name>make_licenseexception_2</feature_eiffel_name>
				<arguments>
					<argument>
						<argument_eiffel_name>type</argument_eiffel_name>
						<argument_external_name>type</argument_external_name>
						<argument_type>SYSTEM_TYPE</argument_type>
						<argument_type_full_name>System.Type</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>instance</argument_eiffel_name>
						<argument_external_name>instance</argument_external_name>
						<argument_type>ANY</argument_type>
						<argument_type_full_name>System.Object</argument_type_full_name>
					</argument>
					<argument>
						<argument_eiffel_name>message</argument_eiffel_name>
						<argument_external_name>message</argument_external_name>
						<argument_type>STRING</argument_type>
						<argument_type_full_name>System.String</argument_type_full_name>
					</argument>
				</arguments>
			</feature>
		</initialization>
		<access>
			<feature>
				<feature_modified>False</feature_modified>
				<frozen_feature>True</frozen_feature>
				<static>False</static>
				<abstract>False</abstract>
				<method>True</method>
				<field>False</field>
				<creation_routine>False</creation_routine>
				<prefix>False</prefix>
				<infix>False</infix>
				<new_slot>True</new_slot>
				<enum_literal>False</enum_literal>
				<is_literal>False</is_literal>
				<feature_eiffel_name>get_licensed_type</feature_eiffel_name>
				<feature_external_name>get_LicensedType</feature_external_name>
				<return_type>SYSTEM_TYPE</return_type>
				<return_type_full_name>System.Type</return_type_full_name>
			</feature>
		</access>
		<bit_or_infix>False</bit_or_infix>
	</body>
</class>