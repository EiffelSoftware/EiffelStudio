-- This file has been generated by EWG. Do not edit. Changes will be lost!

class NAV_DIALOG_CREATION_OPTIONS_STRUCT

inherit

	EWG_STRUCT

	NAV_DIALOG_CREATION_OPTIONS_STRUCT_EXTERNAL
		export
			{NONE} all
		end

create

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {NONE} -- Implementation

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	get_version: INTEGER is
		obsolete "Use `version' instead."
			-- Access member `version'
		require
			exists: exists
		do
			Result := get_version_external (item)
		ensure
			result_correct: Result = get_version_external (item)
		end

	version: INTEGER is
			-- Access member `version'
		require
			exists: exists
		do
			Result := get_version_external (item)
		ensure
			result_correct: Result = get_version_external (item)
		end

	set_version (a_value: INTEGER) is
			-- Set member `version'
		require
			exists: exists
		do
			set_version_external (item, a_value)
		ensure
			a_value_set: a_value = version
		end

	get_optionflags: INTEGER is
		obsolete "Use `optionflags' instead."
			-- Access member `optionFlags'
		require
			exists: exists
		do
			Result := get_optionflags_external (item)
		ensure
			result_correct: Result = get_optionflags_external (item)
		end

	optionflags: INTEGER is
			-- Access member `optionFlags'
		require
			exists: exists
		do
			Result := get_optionflags_external (item)
		ensure
			result_correct: Result = get_optionflags_external (item)
		end

	set_optionflags (a_value: INTEGER) is
			-- Set member `optionFlags'
		require
			exists: exists
		do
			set_optionflags_external (item, a_value)
		ensure
			a_value_set: a_value = optionflags
		end

	get_location: POINTER is
		obsolete "Use `location' instead."
			-- Access member `location'
		require
			exists: exists
		do
			Result := get_location_external (item)
		ensure
			result_correct: Result = get_location_external (item)
		end

	location: POINTER is
			-- Access member `location'
		require
			exists: exists
		do
			Result := get_location_external (item)
		ensure
			result_correct: Result = get_location_external (item)
		end

	set_location (a_value: POINTER) is
			-- Set member `location'
		require
			exists: exists
		do
			set_location_external (item, a_value)
		end

	clientname_struct: CFSTRING_STRUCT is
			-- Access member `clientName'
		require
			exists: exists
		do
			create Result.make_shared (get_clientname_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = clientname
		end

	set_clientname_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `clientName'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_clientname_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = clientname
		end

	get_clientname: POINTER is
		obsolete "Use `clientname' instead."
			-- Access member `clientName'
		require
			exists: exists
		do
			Result := get_clientname_external (item)
		ensure
			result_correct: Result = get_clientname_external (item)
		end

	clientname: POINTER is
			-- Access member `clientName'
		require
			exists: exists
		do
			Result := get_clientname_external (item)
		ensure
			result_correct: Result = get_clientname_external (item)
		end

	set_clientname (a_value: POINTER) is
			-- Set member `clientName'
		require
			exists: exists
		do
			set_clientname_external (item, a_value)
		ensure
			a_value_set: a_value = clientname
		end

	windowtitle_struct: CFSTRING_STRUCT is
			-- Access member `windowTitle'
		require
			exists: exists
		do
			create Result.make_shared (get_windowtitle_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = windowtitle
		end

	set_windowtitle_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `windowTitle'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_windowtitle_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = windowtitle
		end

	get_windowtitle: POINTER is
		obsolete "Use `windowtitle' instead."
			-- Access member `windowTitle'
		require
			exists: exists
		do
			Result := get_windowtitle_external (item)
		ensure
			result_correct: Result = get_windowtitle_external (item)
		end

	windowtitle: POINTER is
			-- Access member `windowTitle'
		require
			exists: exists
		do
			Result := get_windowtitle_external (item)
		ensure
			result_correct: Result = get_windowtitle_external (item)
		end

	set_windowtitle (a_value: POINTER) is
			-- Set member `windowTitle'
		require
			exists: exists
		do
			set_windowtitle_external (item, a_value)
		ensure
			a_value_set: a_value = windowtitle
		end

	actionbuttonlabel_struct: CFSTRING_STRUCT is
			-- Access member `actionButtonLabel'
		require
			exists: exists
		do
			create Result.make_shared (get_actionbuttonlabel_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = actionbuttonlabel
		end

	set_actionbuttonlabel_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `actionButtonLabel'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_actionbuttonlabel_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = actionbuttonlabel
		end

	get_actionbuttonlabel: POINTER is
		obsolete "Use `actionbuttonlabel' instead."
			-- Access member `actionButtonLabel'
		require
			exists: exists
		do
			Result := get_actionbuttonlabel_external (item)
		ensure
			result_correct: Result = get_actionbuttonlabel_external (item)
		end

	actionbuttonlabel: POINTER is
			-- Access member `actionButtonLabel'
		require
			exists: exists
		do
			Result := get_actionbuttonlabel_external (item)
		ensure
			result_correct: Result = get_actionbuttonlabel_external (item)
		end

	set_actionbuttonlabel (a_value: POINTER) is
			-- Set member `actionButtonLabel'
		require
			exists: exists
		do
			set_actionbuttonlabel_external (item, a_value)
		ensure
			a_value_set: a_value = actionbuttonlabel
		end

	cancelbuttonlabel_struct: CFSTRING_STRUCT is
			-- Access member `cancelButtonLabel'
		require
			exists: exists
		do
			create Result.make_shared (get_cancelbuttonlabel_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = cancelbuttonlabel
		end

	set_cancelbuttonlabel_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `cancelButtonLabel'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_cancelbuttonlabel_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = cancelbuttonlabel
		end

	get_cancelbuttonlabel: POINTER is
		obsolete "Use `cancelbuttonlabel' instead."
			-- Access member `cancelButtonLabel'
		require
			exists: exists
		do
			Result := get_cancelbuttonlabel_external (item)
		ensure
			result_correct: Result = get_cancelbuttonlabel_external (item)
		end

	cancelbuttonlabel: POINTER is
			-- Access member `cancelButtonLabel'
		require
			exists: exists
		do
			Result := get_cancelbuttonlabel_external (item)
		ensure
			result_correct: Result = get_cancelbuttonlabel_external (item)
		end

	set_cancelbuttonlabel (a_value: POINTER) is
			-- Set member `cancelButtonLabel'
		require
			exists: exists
		do
			set_cancelbuttonlabel_external (item, a_value)
		ensure
			a_value_set: a_value = cancelbuttonlabel
		end

	savefilename_struct: CFSTRING_STRUCT is
			-- Access member `saveFileName'
		require
			exists: exists
		do
			create Result.make_shared (get_savefilename_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = savefilename
		end

	set_savefilename_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `saveFileName'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_savefilename_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = savefilename
		end

	get_savefilename: POINTER is
		obsolete "Use `savefilename' instead."
			-- Access member `saveFileName'
		require
			exists: exists
		do
			Result := get_savefilename_external (item)
		ensure
			result_correct: Result = get_savefilename_external (item)
		end

	savefilename: POINTER is
			-- Access member `saveFileName'
		require
			exists: exists
		do
			Result := get_savefilename_external (item)
		ensure
			result_correct: Result = get_savefilename_external (item)
		end

	set_savefilename (a_value: POINTER) is
			-- Set member `saveFileName'
		require
			exists: exists
		do
			set_savefilename_external (item, a_value)
		ensure
			a_value_set: a_value = savefilename
		end

	message_struct: CFSTRING_STRUCT is
			-- Access member `message'
		require
			exists: exists
		do
			create Result.make_shared (get_message_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = message
		end

	set_message_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `message'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_message_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = message
		end

	get_message: POINTER is
		obsolete "Use `message' instead."
			-- Access member `message'
		require
			exists: exists
		do
			Result := get_message_external (item)
		ensure
			result_correct: Result = get_message_external (item)
		end

	message: POINTER is
			-- Access member `message'
		require
			exists: exists
		do
			Result := get_message_external (item)
		ensure
			result_correct: Result = get_message_external (item)
		end

	set_message (a_value: POINTER) is
			-- Set member `message'
		require
			exists: exists
		do
			set_message_external (item, a_value)
		ensure
			a_value_set: a_value = message
		end

	get_preferencekey: INTEGER is
		obsolete "Use `preferencekey' instead."
			-- Access member `preferenceKey'
		require
			exists: exists
		do
			Result := get_preferencekey_external (item)
		ensure
			result_correct: Result = get_preferencekey_external (item)
		end

	preferencekey: INTEGER is
			-- Access member `preferenceKey'
		require
			exists: exists
		do
			Result := get_preferencekey_external (item)
		ensure
			result_correct: Result = get_preferencekey_external (item)
		end

	set_preferencekey (a_value: INTEGER) is
			-- Set member `preferenceKey'
		require
			exists: exists
		do
			set_preferencekey_external (item, a_value)
		ensure
			a_value_set: a_value = preferencekey
		end

	popupextension_struct: CFARRAY_STRUCT is
			-- Access member `popupExtension'
		require
			exists: exists
		do
			create Result.make_shared (get_popupextension_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = popupextension
		end

	set_popupextension_struct (a_value: CFARRAY_STRUCT) is
			-- Set member `popupExtension'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_popupextension_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = popupextension
		end

	get_popupextension: POINTER is
		obsolete "Use `popupextension' instead."
			-- Access member `popupExtension'
		require
			exists: exists
		do
			Result := get_popupextension_external (item)
		ensure
			result_correct: Result = get_popupextension_external (item)
		end

	popupextension: POINTER is
			-- Access member `popupExtension'
		require
			exists: exists
		do
			Result := get_popupextension_external (item)
		ensure
			result_correct: Result = get_popupextension_external (item)
		end

	set_popupextension (a_value: POINTER) is
			-- Set member `popupExtension'
		require
			exists: exists
		do
			set_popupextension_external (item, a_value)
		ensure
			a_value_set: a_value = popupextension
		end

	get_modality: INTEGER is
		obsolete "Use `modality' instead."
			-- Access member `modality'
		require
			exists: exists
		do
			Result := get_modality_external (item)
		ensure
			result_correct: Result = get_modality_external (item)
		end

	modality: INTEGER is
			-- Access member `modality'
		require
			exists: exists
		do
			Result := get_modality_external (item)
		ensure
			result_correct: Result = get_modality_external (item)
		end

	set_modality (a_value: INTEGER) is
			-- Set member `modality'
		require
			exists: exists
		do
			set_modality_external (item, a_value)
		ensure
			a_value_set: a_value = modality
		end

	parentwindow_struct: OPAQUE_WINDOW_PTR_STRUCT is
			-- Access member `parentWindow'
		require
			exists: exists
		do
			create Result.make_shared (get_parentwindow_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = parentwindow
		end

	set_parentwindow_struct (a_value: OPAQUE_WINDOW_PTR_STRUCT) is
			-- Set member `parentWindow'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_parentwindow_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = parentwindow
		end

	get_parentwindow: POINTER is
		obsolete "Use `parentwindow' instead."
			-- Access member `parentWindow'
		require
			exists: exists
		do
			Result := get_parentwindow_external (item)
		ensure
			result_correct: Result = get_parentwindow_external (item)
		end

	parentwindow: POINTER is
			-- Access member `parentWindow'
		require
			exists: exists
		do
			Result := get_parentwindow_external (item)
		ensure
			result_correct: Result = get_parentwindow_external (item)
		end

	set_parentwindow (a_value: POINTER) is
			-- Set member `parentWindow'
		require
			exists: exists
		do
			set_parentwindow_external (item, a_value)
		ensure
			a_value_set: a_value = parentwindow
		end

	get_reserved: POINTER is
		obsolete "Use `reserved' instead."
			-- Access member `reserved'
		require
			exists: exists
		do
			Result := get_reserved_external (item)
		ensure
			result_correct: Result = get_reserved_external (item)
		end

	reserved: POINTER is
			-- Access member `reserved'
		require
			exists: exists
		do
			Result := get_reserved_external (item)
		ensure
			result_correct: Result = get_reserved_external (item)
		end

end
