<document output="studio" title="EiffelWeb Content Introduction">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>CGI Applications
		</heading>
		<paragraph>The way a CGI application communicates with the Web browser is simple: when the user presses a button on an HTML form, with an associated action (such as 
			<italic>Submit</italic>), the browser starts the application whose path is indicated inside    the HTML form declaration. It sends data corresponding to the HTTP request and to the input form information in the usual file descriptor 
			<italic>In</italic>, stores within environment variables the transaction environment of the request, and waits for the application message, expected in its 
			<italic>Out</italic> canal. The 
			<italic>In</italic> and 
			<italic>    Out </italic>canals are accessible via the class    CGI_IN_AND_OUT.
			<line_break/>
			<line_break/>HTML forms are an easy way to collect user entries in a web page, which are sent by the browser to the CGI application. A simple example of a form is:
			<paragraph>
				<code_block>&lt;form action="/cgi-bin/convert.exe" method="post"&gt; 
					<line_break/>&lt;input type="text" name="Celsius"&gt;
					<line_break/>&lt;input type="submit"&gt;
					<line_break/>&lt;/form &gt;
				</code_block>
			</paragraph>
			<paragraph>When the user presses the submit button, the browser will launch the application located at 
				<italic>/cgi-bin/convert.exe</italic> on the server, will use the HTTP Post protocol, and will store among others the environment variable 
				<italic>Celsius</italic> with the value entered by the user.
			</paragraph>
			<heading>
				<size>2</size>Advantages of using EiffelWeb
			</heading>
			<paragraph>With EiffelWeb, you can:</paragraph>
			<list ordered="false">
				<item>Design object-oriented systems</item>
				<item>Access and use the Eiffel libraries</item>
				<item>Increase maintainability because your code is reusable and readable</item>
				<item>Deal with complexity because you use a language particularly efficient in the Business Modeling.</item>
				<item>Use one/a few big Eiffel Web applications, which allow for an easier maintenance and provide     better code readability and reusability than having a huge number of     scripts.</item>
				<item>Use the 
					<italic>Design by Contract</italic> methodology, thanks to the debugging facilities provided by EiffelWeb.
				</item>
			</list>
		</paragraph>
	</paragraph></document>