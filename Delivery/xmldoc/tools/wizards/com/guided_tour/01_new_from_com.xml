<document title="Creating a new COM component" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>EiffelCOM</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour, Creating a new COM component</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>The first tutorial describes creating a COM component from a COM definition file that is either an IDL file or a Type Library. The tutorial focuses on creating an in-process (DLL) component, called 
		<bold>StringManipulator</bold>. The component exposes one interface 
		<bold>IString</bold> that includes the functions 
		<feature_name>ReplaceSubstring</feature_name> and 
		<feature_name>PruneAll</feature_name> corresponding respectively to the features 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_replace_substring</anchor_name>
				<label>replace_substring</label>
			</link>
		</code> and 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_prune_all</anchor_name>
				<label>prune_all</label>
			</link>
		</code> of the class 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url>
				<label>
					<class_name>STRING</class_name>
				</label>
			</link>
		</code> from the EiffelBase library. <bold>IString</bold> also exposes the property 
		<feature_name>String</feature_name> which represents the manipulated string. The property can be set or read.
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>
				Launch the EiffelCOM Wizard (from the <italic>Start</italic> menu, open <italic>All Programs</italic> then <italic>EiffelStudioXX</italic> followed by <italic>Tools</italic> and click <italic>EiffelCOM Wizard</italic>).
			</item>
			<item>
				In <bold>Project</bold>, in the <bold>Current project</bold> input field, type in <italic>string_manipulator</italic>
				 and press <italic>enter</italic>.
			</item>
			<item>
				In <bold>Project Type</bold>, choose 
				<italic>Create a new COM component</italic>.
			</item>
			<item>
				In <bold>Component Information</bold>, click the browse button (the button with <bold>...</bold>) and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\string_manipulator.idl</italic> where 
				<italic>$ISE_EIFFEL</italic> represents the path to the EiffelStudio installation directory.
			</item>
			<item>
				<link/>Click 
				<bold>Next</bold>.
			</item>
			<item>
				In <bold>Component Type</bold>, choose  
				<italic>In-process (*.dll)</italic>.
			</item>
			<item>
				In <bold>Generation Options</bold>, click the browse button and select the directory where the project should be created (later referenced as <italic>destination folder</italic>). Choose 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated</italic> where 
				<italic>$ISE_EIFFEL</italic> represents the path to the EiffelStudio directory.
			</item>
			<item>
				Select <italic>Compile C code</italic> and <italic>Compile Eiffel code</italic>.
			</item>
			<item>
				Select <italic>Clean destination folder prior to generation</italic>.
			</item>
			<item>
				Click <bold>Generate</bold>.
			</item>
			<item>
				Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>
		<paragraph>
			<link/>At the end of the processing the <bold>EiffelStudio</bold> button will become enabled. Click on it. This will automatically start EiffelStudio with the generated project to help navigate through the created Eiffel classes. You might want to look at the file 
			<italic>generated.txt</italic> in the destination folder, which contains a list of files generated by the wizard. You can also save the processing output by clicking the <bold>Save</bold> button.
		</paragraph>
		<paragraph>The deferred class 
			<class_name>STRING_MANIPULATOR_COCLASS</class_name> represents the component and exposes all its functionality. It inherits from 
			<class_name>ISTRING_INTERFACE</class_name> which corresponds to the 
			<bold>IString</bold> interface and has one heir 
			<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> which implements all the deferred features. The default implementation in the heir is empty.
		</paragraph>
		<heading>
			<size>2</size> Implementing the component
		</heading>
		<link/> To do something more interesting than merely returning an error to the client edit the implementation of the 
		<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> class. There is an implementation of the class in 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\server</italic>\.  Copy this file over to 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated\server\component</italic> and freeze the project. Voila!, you have your first EiffelCOM component up and running.
		<paragraph> </paragraph>
		<tip>
			<bold>Tips</bold>
			<line_break/> To develop an EiffelCOM component you need to set the registry entry MELT_PATH because the system is not launched from the directory containing the byte code (by default EIFGEN\W_code). The EiffelCOM component client launches the server from its current location and causes the server to crash if the MELT_PATH key does not setup properly. To put this value in your registry, create a key under HKEY_CURRENT_USER\SOFTWARE\ISE\Eiffel51 with the same name as the name of your project (e.g. 
			<italic>string_manipulator</italic>) and add the string value named MELT_PATH containing the path to the byte code (.melted file). You will find an example of such entry in the file 
			<italic>melted_path.reg</italic> in $ISE_EIFFEL\wizard\config. Edit this file as needed (replace 
			<italic>string_manipulator</italic> with the name of your system and change the path to point on the correct location using `\\' as directory separator) and then double click on it to enter the information into the registry.
			<line_break/>
			<line_break/>
			<link/>To test the component, you need to register it first. Register an in-process component via the 
			<italic>regsvr32</italic> utility using the following syntax: 
			<italic>regsvr32 system_name.dll</italic> where 
			<italic>system_name</italic> is the name of the dll (e.g. string_manipulator). Register an out-of-process component using the following syntax: 
			<italic>system_name.exe -Regserver</italic> where 
			<italic>system_name</italic> is thename of the component executable file.
			<line_break/>
			<line_break/>
			<link/>To complete this tutorial you need to register the component with the following command (run from a dos console): 
			<italic>regsvr32string_manipulator.dll</italic> and to enter the information in 
			<italic>$ISE_EIFFEL\wizard\config\melted_path.reg</italic>. You have to change the content of this file if you have not installed Eiffel under C:\ and/or have used a different destination directory.
		</tip>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>02_new_from_eiffel.xml</url>
				<label>Creating a new component from an Eiffel Project</label>
			</link>
			<line_break/>
			<link>
				<url>03_accessing.xml</url>
				<label>Accessing a COM component.</label>
			</link>
		</seealso>
	</paragraph></document>
