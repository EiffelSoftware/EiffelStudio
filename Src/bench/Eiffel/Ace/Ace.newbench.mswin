system es4

root
	 EB_KERNEL (new_main): "make"

default
	assertion (require);
	dead_code_removal (yes);
-- RTEA version
	exception_trace (yes);
-- Full optimized version
--	exception_trace (no);
--	array_optimization (yes);
--	inlining_size ("8");
--	inlining (yes);

	--trace(yes)
	--trace ("SERVER");
	--debug ("CACHE_SERVER");
	--debug ("Freeze_set");
	--debug ("SERVER");
	--debug ("DOCUMENT");
	--debug ("DEBUGGER_TRACE");
	--debug ("DRAWING")
	--debug ("PARSE")
	--debug ("FLAT_SHORT");
	--debug ("LOCAL_FEAT_ADAPTATION");
	--debug ("ACTIVITY")
	--debug ("DEBUG_RECV")
	--debug ("PASS3")
	--debug ("CACHE")
	--debug ("DEAD_CODE_REMOVAL")
	--debug ("SPLIT")

cluster

		-- EiffelBase:
	base:				"$EIFFEL_SRC\library\base";
	structures(base):		"$\structures";

	kernel(base):		"$\kernel";
	support(base):		"$\support";
	access(structures):	"$\access";
	cursors(structures):	"$\cursors";
	dispenser(structures):	"$\dispenser";
	list(structures):		"$\list";
	set(structures):		"$\set";
	sort(structures):		"$\sort";
	storage(structures):	"$\storage";
	table(structures):		"$\table_eiffel3";
	traversing(structures):	"$\traversing";
	tree(structures):		"$\tree";


	wel:						"$EIFFEL_SRC\library\wel";
	wel_constants(wel):			"$\consts";
	wel_controls(wel):			"$\controls";
	wel_gdi(wel):				"$\gdi";
	wel_gdi_stocks(wel):		"$\gdistock";
	wel_standard_dialogs(wel):	"$\stddlgs";
	wel_structures(wel):		"$\structs";
	wel_support(wel):			"$\support";
	wel_windows(wel):			"$\windows";
	wel_messages(wel):			"$\messages";

		-- EiffelVision (old)
	old_vision:							"$EIFFEL_SRC\library\vision"
	old_vision_kernel(old_vision):			"$\oui\kernel"
	old_vision_widgets (old_vision):		"$\oui\widgets"
	old_vision_context_data (old_vision):	"$\oui\context_data"

	old_vision_tools (old_vision):			"$\tools"

		-- EiffelVision Toolkit
	old_vision_toolkit (old_vision):				"$\implement\toolkit"
	old_vision_toolkit_kernel (old_vision_toolkit):	"$\kernel"
	old_vision_toolkit_widgets (old_vision_toolkit):"$\widgets"
	old_vision_toolkit_support (old_vision_toolkit):"$\support"

		-- EiffelVision implementation clusters for Ms Windows
	old_vision_imp (old_vision):				"$\implement\mswin"
	old_vision_imp_kernel (old_vision_imp):		"$\kernel"
	old_vision_imp_widgets (old_vision_imp):	"$\widgets"
	old_vision_imp_support (old_vision_imp):	"$\support"
	old_vision_imp_command (old_vision_imp):	"$\commands"

		-- EiffelVision
	vision:		"$EIFFEL_SRC\library\vision2\interface";
	vision_support (vision):						"$\support";
	vision_kernel (vision): 	       				"$\kernel";
	vision_properties (vision):						"$\properties";
	vision_items (vision):							"$\items";
	vision_pnd (vision):							"$\pick_and_drop";
	vision_widgets (vision):        				"$\widgets";
	vision_primitives (vision_widgets):     		"$\primitives";
	vision_containers (vision_widgets):     		"$\containers";
	vision_common_dialog (vision_widgets):			"$\common_dialogs";
	vision_uncommon_widgets (vision_widgets):		"$\uncommon_widgets";

		-- Implementation Interface
	vision_ii:		"$EIFFEL_SRC\library\vision2\implementation\implementation_interface";
	vision_ii_kernel (vision_ii): 	       			"$\kernel";
	vision_ii_support (vision_ii):					"$\support";
	vision_ii_properties (vision_ii):				"$\properties";
	vision_ii_items (vision_ii):					"$\items";
	vision_ii_pnd (vision_ii):						"$\pick_and_drop";
	vision_ii_widgets (vision_ii): 	   				"$\widgets";
	vision_ii_primitives (vision_ii_widgets):    	"$\primitives";
	vision_ii_containers (vision_ii_widgets):    	"$\containers";
	vision_ii_common_dialog (vision_ii_widgets):	"$\common_dialogs";
	vision_ii_uncommon_widgets (vision_ii_widgets):	"$\uncommon_widgets";

		-- Implementation clusters for MS Windows
	vision_imp:		"$EIFFEL_SRC\library\vision2\implementation\mswin";
	vision_imp_kernel (vision_imp): 	       		"$\kernel";
	vision_imp_support (vision_imp):				"$\support";
	vision_imp_properties (vision_imp):				"$\properties";
	vision_imp_items (vision_imp):					"$\items";
	vision_imp_pnd (vision_imp):					"$\pick_and_drop";
	vision_imp_widgets (vision_imp):        		"$\widgets";
	vision_imp_primitives (vision_imp_widgets):     "$\primitives";
	vision_imp_containers (vision_imp_widgets):     "$\containers";
	vision_imp_common_dialog (vision_imp_widgets):	"$\common_dialogs";
	vision_imp_uncommon_widgets (vision_imp_widgets):	"$\uncommon_widgets";

		-- ES4 SPECIFIC CLUSTERS
	liman:				"$EIFFEL_SRC\limand"

	liman_bench(liman):		"$\..\Eiffel\limand\bench"
	liman_bench_graphical(liman):	"$\..\Eiffel\limand\bench_graphical"
	liman_abstract(liman):		"$\abstract"
	liman_graphical(liman):		"$\graphical"

	beurk:			"$EIFFEL_SRC\Eiffel\beurk"
	compiler_support:		"$EIFFEL_SRC\Eiffel\support"
	replication:		"$EIFFEL_SRC\Eiffel\eiffel\replication"

		-- General compilation:
	common:				"$EIFFEL_SRC\common"
	common_parser (common):				"$\parser"
	common_eiffel_parser (common_parser):		"$\parser";

	flat_short (common_parser):			"$\flat_short"
		exclude
				-- This is excluded because we are defining them in EiffelBench in
				-- order to avoid polymorphism calls
			"format_context.e"
			"local_format.e"
		end
	flat_short_b:		"$EIFFEL_SRC\Eiffel\flat_short\bench"

	yacc:				"$EIFFEL_SRC\Eiffel\yacc"
	const:			"$EIFFEL_SRC\Eiffel\const"

		-- Gobo Eiffel Parse Library
	pr_skeleton:		"$EIFFEL_SRC\library\gobo\library\parse\skeleton";
		-- Gobo Eiffel Lexical Library
	lx_skeleton:		"$EIFFEL_SRC\library\gobo\library\lexical\skeleton";
		-- Gobo Eiffel Kernel Library
	kl_kernel:			"$EIFFEL_SRC\library\gobo\library\kernel";
	kl_kernel_spec:		"$EIFFEL_SRC\library\gobo\library\kernel\spec\ise";

		-- Lace compilation:
	env:				"$EIFFEL_SRC\Eiffel\lace\env"
	lace_compile:		"$EIFFEL_SRC\Eiffel\lace\lace_compile"
	lace_shared:		"$EIFFEL_SRC\Eiffel\lace\shared"

		-- Eiffel compilation:
	eiffel_comp:		"$EIFFEL_SRC\Eiffel\eiffel"

	instructions_b(eiffel_comp):		"$\AST\instructions"
	expressions_b(eiffel_comp):		"$\AST\expressions"
	ast_skeleton_b(eiffel_comp):		"$\AST\skeleton"
	ast_clickable_b(eiffel_comp):		"$\AST\clickable"

	byte_code(eiffel_comp):			"$\byte_code"
		--default
			--profile (yes)
		--end
	cecil(eiffel_comp):			"$\cecil"
	compiler(eiffel_comp):			"$\compiler"
	eiffel_const(eiffel_comp):		"$\const"
	generation(eiffel_comp):		"$\generation"
		--default
			--profile (yes)
		--end

	genericity(eiffel_comp):		"$\genericity"

	compiler_ids(eiffel_comp):		"$\ids\compiler"
	routine_ids(eiffel_comp):		"$\ids\routine"
	class_ids(eiffel_comp):			"$\ids\class"
	type_ids(eiffel_comp):			"$\ids\type"
	body_ids(eiffel_comp):			"$\ids\body_id"
	body_indexes(eiffel_comp):		"$\ids\body_index"
	real_body_ids(eiffel_comp):		"$\ids\real_body_id"
	real_body_indexes(eiffel_comp):	"$\ids\real_body_index"
	file_ids(eiffel_comp):			"$\ids\file"
	pattern_ids(eiffel_comp):		"$\ids\pattern"
	feature_as_ids(eiffel_comp): 		"$\ids\feature_as"
	inheritance(eiffel_comp):		"$\inheritance"
	eiffel_interface(eiffel_comp):	"$\interface"

	polymorphism(eiffel_comp):		"$\polymorphism"
		--default
			--profile (yes)
		--end

	server(eiffel_comp): 			"$\server"
		--default
			--profile (yes)
		--end

	eiffel_shared(eiffel_comp):		"$\shared"
	skeleton(eiffel_comp):			"$\skeleton"
	eiffel_structures(eiffel_comp):	"$\structures"
	tables(eiffel_comp): 			"$\tables"
	descriptor(eiffel_comp):		"$\descriptor"

		-- API cluster
	api:				"$EIFFEL_SRC\Eiffel\API"

	api_constants(api):	"$\constants"; 
	api_shared(api):		"$\shared"
	api_ids(api):		"$\ids"
	api_queries(api):		"$\queries"
	api_interface(api):	"$\interface"
	api_common(api):		"$\common"
	output(api):		"$\output"
	evaluated_type(api):	"$\evaluated_type"

		-- Error processing
	error_common(api):	"$\error\common"
	lace_error(api):		"$\error\lace"
	feature_error(api):	"$\error\eiffel\feature"
	parents_error(api):	"$\error\eiffel\parents"
	redefined_error(api):	"$\error\eiffel\redefined"
	unredefined_error(api):	"$\error\eiffel\unredefined"

		-- Resources
	resources(common):		"$\resources"

		-- Profiling
	converter(api):		"$\profiler\converter"
		exclude
			"configuration_loader.e"
		end;
	profiling(api):		"$\profiler\profiling"
	querying(api):		"$\profiler\querying"
	filters(api):		"$\profiler\filters"
	struct_text(api):		"$\structured_text"

		-- AST structures
	lace_AST(api):	"$\AST\lace"

--	instructions(common_parser):	"$\AST\instructions"
--	expressions(common_parser):	"$\AST\expressions"
--	ast_skeleton(common_parser):	"$\AST\skeleton"
--	ast_stonables(common_parser):	"$\AST\clickable"

		-- SWITCH clusters (chose one cluster per directory in switch directory)
	switch:			"$EIFFEL_SRC\Eiffel\switch"
	interface_switch(switch):	"$\interface\new_graphical"
	--dle_switch(switch):	"$\dle\no_dle"
	--license_switch(switch): "$\license\license";  	--unix
	--license_switch(switch): "$\license\no_license";	--win
	time_lock(switch):        	"$\license\time_lock";--win
	encryption:				"$EIFFEL_SRC\library\encryption"

		-- Communications
	communications (switch):		"$\communication"
	status (communications):		"$\status"
	ipc (communications):		"$\ipc"
	debuging_class (communications):	"$\debug"
	debuging_commands (communications):	"$\commands"
	debuging_formatters (communications):	"$\formatters"

		-- INTERFACE CLUSTERS
	interface:			"$EIFFEL_SRC\Eiffel\interface"
	interface_shared(interface):	"$\shared"

		-- tty interace
	tty(interface): 			"$\tty"
		exclude
			"ewb_case_storage.e"
		end

		-- new graphical interface (bench):
--	new_bench_common(interface):	"$\new_graphical\common";
--	new_case_tool(interface):	"$\new_graphical\case_tool";
	new_commands(interface):	"$\new_graphical\commands";
	new_debugg_tool (interface):	"$\new_graphical\debug_tool";
--	new_debugging_tool (interface):	"$\new_graphical\debugging";
	new_drag_and_drop(interface):	"$\new_graphical\dialogs";
--	new_drag_and_drop(interface):	"$\new_graphical\drag_and_drop";
	new_formatters(interface):	"$\new_graphical\formatters";
	new_main(interface):		"$\new_graphical\main";
	new_graphical_shared(interface):"$\new_graphical\shared";
	new_stones(interface):		"$\new_graphical\stones";
	new_text_window(interface):	"$\new_graphical\text_window";
	new_windows(interface):		"$\new_graphical\windows";
	new_preference_tool(interface):	"$\new_graphical\preference_tool";
	new_preference_tool_parameters (new_preference_tool):	"$\parameters";
	new_profile_tool(interface):	"$\new_graphical\profile_tool";
--	new_wizard_common(interface):	"$\new_graphical\wizard\common";
--	new_wizard_bench(interface):	"$\new_graphical\wizard\bench";
	to_be_moved(interface):		"$\new_graphical\to_be_moved";

		-- Case
	case_common(common):		"$\case_storage"
	case_bench:			"$EIFFEL_SRC\Eiffel\case_storage\bench"

external
	include_path:
		"$(EIFFEL_SRC)\library\wel\spec\windows\include",
		"$(EIFFEL_SRC)\C\parsing\shared",
		"$(EIFFEL_SRC)\C\parsing\eiffel",
		"$(EIFFEL_SRC)\C\bench",
		"$(EIFFEL_SRC)\library\encryption\Clib",
		"$(EIFFEL_SRC)\library\gobo\library\kernel\include"

	object:
		"$(EIFFEL_SRC)\library\wel\spec\$(COMPILER)\lib\wel.lib",
		"$(EIFFEL_SRC)\C\ipc\ewb\ewb.lib",
		"$(EIFFEL_SRC)\C\ipc\shared\ipc.lib",
		"$(EIFFEL_SRC)\C\idrs\idr.lib",
		"$(EIFFEL_SRC)\C\parsing\eiffel\eiffel.lib",
		"$(EIFFEL_SRC)\C\parsing\lace\lace.lib",
		"$(EIFFEL_SRC)\C\parsing\shared\parsing.lib",
		"$(EIFFEL_SRC)\C\platform\platform.lib",
		"$(EIFFEL_SRC)\C\bench\special_tables.obj",
		"$(EIFFEL_SRC)\library\encryption\spec\$(COMPILER)\lib\des.lib"

end
