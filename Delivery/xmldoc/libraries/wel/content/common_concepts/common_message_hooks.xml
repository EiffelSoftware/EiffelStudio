<document title="Common message hooks">
	<meta_data>
		<help>
			<toc>
				<envision_location>Class Libraries\WEL\WEL Interface Content\WEL Common Concepts</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>  Each WEL library component implements a set of routines for processing the most common messages that a component  receives. For example, looking at <link><url>../../reference/windows/WEL_FRAME_WINDOW_chart.xml</url><label>WEL_FRAME_WINDOW</label></link>, you will see that  there are many features which begin `on_'. Each of these features enable the user to know when a specific event has    occured, and to perform the appropriate processing as a result of this event.    Most of the time, you will only be interested in a small subset of these, necessary to your program.    For example, below is the code for on_paint:
<code_block>
	<feature_name>on_paint</feature_name> <symbol>(</symbol>paint_dc<symbol>:</symbol> <class_name>WEL_PAINT_DC</class_name>; invalid_rect<symbol>:</symbol> <class_name>WEL_RECT</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>--Draw a centered text</comment>
		<keyword>do</keyword>
		<keyword>end</keyword> 
</code_block>
		</paragraph>
		<paragraph>  An on_paint message corresponds to the Wm_paint message generated by Windows whenever it needs to re-paint a window, and if you look at the feature, you can see that the arguments are a <link><url>../../reference/gdi/WEL_PAINT_DC_chart.xml</url><label>WEL_PAINT_DC</label></link> and a<link><url>../../reference/structs/WEL_RECT_chart.xml</url><label> WEL_RECT</label></link>.  which are relevent to this message. By redefining this feature (and others as required), your code will be able to respond appropriately to windows events.  
			<note>
				<bold>Note</bold>. See 
				<link>
					<url>/libraries/wel/samples/tutorial/step2/index.xml</url>
					<label>step2</label>
				</link> in the 
				<link>
					<url>/libraries/wel/samples/tutorial/index.xml</url>
					<label>tutorial</label>
				</link> for a simple demonstration involving the re-definition of <code><feature_name>on_left_button_down</feature_name></code>.
			</note>
		</paragraph>
		<paragraph>  For different messages received by a control, the arguments will differ (sometimes there are none), but those arguments will always be relevent to the message.  For example, on_menu_command from <link><url>../../reference/windows/WEL_COMPOSITE_WINDOW_chart.xml</url><label>WEL_COMPOSITE_WINDOW</label></link>  has an <code><class_name>INTEGER</class_name></code> as an argument, the value of which is a unique menu identifier.
			<line_break/>
			<note>
				<bold>Note</bold>. Not all windows events have a corresponding `on_' message hook defined in WEL. If you wish to process a Windows message that does not correspond to one of the available features, you will need  to redefine process_message.
				<line_break/>
			</note>
		</paragraph>
	</paragraph></document>
