<document output="studio" title="Using datagram sockets">
	<meta_data/>
	<paragraph>
		<table><border>1</border>
			<row>
				<cell>The example classes discussed in this section appear in the        subdirectory 
					<italic>datagram </italic>of the example directory
				</cell>
			</row>
		</table>
		<paragraph>Using datagram sockets implies a few differences from the preceding    schemes. You create a 
			<link>
				<url>../reference/network/socket/network_datagram_socket_chart.xml</url>
				<label>NETWORK_DATAGRAM_SOCKET</label>
			</link>    or a 
			<link>
				<url>../reference/local/socket/unix_datagram_socket_chart.xml</url>
				<label>UNIX_DATAGRAM_SOCKET</label>
			</link>    as before. You do not need to call 
			<italic>listen</italic>, 
			<italic>accept</italic> or 
			<italic>connect</italic>.    Once you have created your sockets using the 
			<italic>make_client </italic>or 
			<italic>make_server</italic>    creation procedure, you can use the 
			<italic>send </italic>and 
			<italic>received </italic>routines,    specifying the socket to which you want to send, or from which you want    to receive.
		</paragraph>
		<paragraph>The command 
			<italic>send </italic>takes an argument of type 
			<link>
				<url>../reference/abstract/socket/datagram_packet_chart.xml</url>
				<label>DATAGRAM_PACKET</label>
			</link>,    and the query 
			<italic>received </italic>returns a result of this type. 
			<link>
				<url>../reference/abstract/socket/datagram_packet_chart.xml</url>
				<label>DATAGRAM_PACKET</label>
			</link>    is an heir of class 
			<link>
				<url>../reference/abstract/socket/packet_chart.xml</url>
				<label>PACKET</label>
			</link>,    itself an heir of 
			<link>
				<url>../../base/reference/kernel/array_chart.xml</url>
				<label>ARRAY</label>
			</link> [ 
			<link>
				<url>../../base/reference/kernel/classic/character_chart.xml</url>
				<label>CHARACTER</label>
			</link>].    Class 
			<link>
				<url>../reference/abstract/socket/datagram_packet_chart.xml</url>
				<label>DATAGRAM_PACKET</label>
			</link>    makes it possible, through the query 
			<italic>number</italic> and the associated    command 
			<italic>set_number</italic>, to associate a packet number with each    packet. This compensates for lack of guaranteed sequencing of datagram    sockets: the sender can number packets through 
			<italic>set_number</italic>, and    the receiver can check that all packets have been received through 
			<italic>number</italic>,    asking the sender to re-emit missing objects.
		</paragraph>
		<paragraph>The text of this example is similar to what appears below (in a more    general setting involving event-driven computation) for the next    example.</paragraph>
	</paragraph></document>
