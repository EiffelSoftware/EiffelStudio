<document title="Java externals" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>Java externals</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>externals, Java</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>Introduction
		</heading>
		<paragraph>The Java interface allows you to call Java routines or attributes from your Eiffel code. It uses the Java Native Interface (JNI) provided by the Java Development Kit (JDK) 1.1.4. You can get more information about the JNI at:</paragraph>
		<paragraph>
			<link>
				<label>http://java.sun.com/products/jdk/1.1/docs/guide/jni/index.xml</label>
				<url>http://java.sun.com/products/jdk/1.1/docs/guide/jni/index.xml</url>
			</link>
		</paragraph>
		<heading>
			<size>3</size>Requirements
		</heading>
		<list ordered="false">
			<item>JDK 1.1.4 correctly set (download it at 
				<link>
					<url>http://java.sun.com/products/jdk/1.1/index.xml</url>
					<label>http://java.sun.com/products/jdk/1.1/index.xml</label>
				</link>).
			</item>
			<item>The Java classes you want to use must be in the environment variable CLASSPATH.</item>
		</list>
		<heading>
			<size>3</size>Limitations
		</heading>
		<list ordered="false">
			<item>In this version, you can only use one JNI environment.</item>
			<item>Only one thread can interact with the Java Virtual Machine (JVM).</item>
			<item>It is not possible to call Eiffel features from Java programs.</item>
			<item>The Eiffel feature `destroy_vm' of `JAVA_VM' calls a C function of the Java Native Interface that is not fully implemented in jdk 1.1.4. This function, called DestroyJavaVM, always returns -1 in jdk 1.1.4. For further information, go on the JNI pages at the address above.</item>
		</list>
		<heading>
			<size>2</size>Interface classes
		</heading>
		<heading>
			<size>3</size>JNI_ENVIRONMENT
		</heading>
		<paragraph>Holds information about JNI environment. Potentially many JNI environments can coexist, but this was never tested. This class provides the facilities to interact with the JVM:
			<list ordered="false">
				<item>creation of instances of Java Classes </item>
				<item>exception mechanism </item>
				<item>destruction of the JVM </item>
			</list>
		</paragraph>
		<heading>
			<size>3</size>SHARED_JNI_ENVIRONMENT
		</heading>
		<paragraph>Shared JNI environment. Since one JNI is needed per thread we limit  Eiffel to having one thread that deals with Java. The class that calls Java routines or attributes must inherit from this class. </paragraph>
		<heading>
			<size>3</size>JAVA_VM
		</heading>
		<paragraph>Shared JNI environment. Since one JNI is needed per thread we limit  Eiffel to having one thread that deals with Java. The class that calls Java routines or attributes must inherit from this class. </paragraph>
		<heading>
			<size>3</size>JAVA_CLASS
		</heading>
		<paragraph>Access to Java classes. Static methods and attributes are accessed via this class. This is the Eiffel representation of a Java class.</paragraph>
		<heading>
			<size>3</size>JAVA_OBJECT
		</heading>
		<paragraph>This class gives Eiffel access to Java objects. You can use it directly or inherit it to create a more convenient Eiffel class that makes the Java object look like an Eiffel object.
			<note>
				<bold>Note</bold>: to access the static fields or routines of a Java class, you have to use the features of a JAVA_CLASS instance.
			</note>
		</paragraph>
		<heading>
			<size>3</size>JAVA_EXTERNALS
		</heading>
		<paragraph>JNI external declarations. Don't use this class directly.</paragraph>
		<heading>
			<size>3</size>JAVA_***_ARRAY
		</heading>
		<paragraph>Access to Java array of "***". "***" can be all the usual types of Java (byte, short, int, float, double, char, boolean) or object if it is an array of Java objects (a String is considered to be an object).</paragraph>
		<heading>
			<size>3</size>JAVA_ARGS
		</heading>
		<paragraph>Class representing the arguments that can be passed to a Java method. See below for the signature of the methods.</paragraph>
		<heading>
			<size>3</size>JAVA_OBJECT_TABLE
		</heading>
		<paragraph>This class provides a mapping between Java and Eiffel objects.
			<line_break/>
			<bold>Mapping the Eiffel classes and the Java types: </bold>
			<line_break/>The following table describes the mapping of Java primitive types and classes to Eiffel classes.
			<table>
				<row>
					<cell>
						<bold>Java type/class</bold>
					</cell>
					<cell>
						<bold>Eiffel class</bold>
					</cell>
				</row>
				<row>
					<cell>boolean</cell>
					<cell>BOOLEAN</cell>
				</row>
				<row>
					<cell>char, byte</cell>
					<cell>CHARACTER</cell>
				</row>
				<row>
					<cell>short, int, long</cell>
					<cell>INTEGER</cell>
				</row>
				<row>
					<cell>float</cell>
					<cell>REAL</cell>
				</row>
				<row>
					<cell>double</cell>
					<cell>DOUBLE</cell>
				</row>
				<row>
					<cell>String</cell>
					<cell>STRING</cell>
				</row>
				<row>
					<cell>void</cell>
					<cell>NONE</cell>
				</row>
			</table>
			<bold>The signature of Java methods and attributes:</bold>
			<line_break/>When you want to call a Java method or access a field, you need to specify its signature. The Eiffel to Java interface follows the JNI specifications. The table below summarizes the encoding for the Java type signatures:
			<table>
				<row>
					<cell>
						<bold>Signature</bold>
					</cell>
					<cell>
						<bold>Jave Type</bold>
					</cell>
				</row>
				<row>
					<cell>Z</cell>
					<cell>boolean</cell>
				</row>
				<row>
					<cell>B</cell>
					<cell>byte</cell>
				</row>
				<row>
					<cell>C</cell>
					<cell>char</cell>
				</row>
				<row>
					<cell>S</cell>
					<cell>short</cell>
				</row>
				<row>
					<cell>I</cell>
					<cell>int</cell>
				</row>
				<row>
					<cell>J</cell>
					<cell>long</cell>
				</row>
				<row>
					<cell>F</cell>
					<cell>float</cell>
				</row>
				<row>
					<cell>D</cell>
					<cell>double</cell>
				</row>
				<row>
					<cell>V</cell>
					<cell>void</cell>
				</row>
				<row>
					<cell>[type]</cell>
					<cell>[type]</cell>
				</row>
			</table>The signature for a Java class has the following form "Lfully-qualified-class". For example, class String:
			<line_break/>Ljava/lang/String;
			<line_break/>The signature for a method has the following form "(arguments-types) returned-types". For example, the signature of a method that takes as arguments an integer and a string and return void is:
			<line_break/>(ILjava/lang/String;)V
		</paragraph>
		<heading>
			<size>2</size>An example
		</heading>
		<paragraph>Below is the java class:</paragraph>
		<code_block>
class test {
	test () {}
	public int my_integer;
	public static in my_static_integer;
	public void my_method (int arg_int, String arg_string) {
		...
	}
	...
}</code_block>
		<paragraph>And below the corresponding Eiffel class:</paragraph>
<code_block>
<keyword>class</keyword>
	<class_name>EIFFEL_TO_JAVA</class_name>
<keyword>inherit</keyword>
	<class_name>SHARED_JNI_ENVIRONMENT</class_name>

<keyword>create</keyword>
	<feature_name>make</feature_name>
	
<keyword>feature</keyword> -- Creation

	<feature_name>make</feature_name> <keyword>is</keyword>
		<keyword>local</keyword>
			class_test: <class_name>JAVA_CLASS</class_name>
			instance_of_class_test: <class_name>JAVA_OBJECT</class_name>
			fid: <class_name>POINTER</class_name>
			value: <class_name>INTEGER</class_name>
			j_args: <class_name>JAVA_ARGS</class_name>
		<keyword>do</keyword>
				<comment>--| Creation of the Java object</comment>
			class_test := jni.<feature_name>find_class</feature_name> ("test")
			<keyword>create</keyword> instance_of_class_test.<feature_name>create_instance</feature_name> (class_test, "()V", <keyword>Void</keyword>)
			
				<comment>--| Access to a public attribute</comment>
			fid := instance_of_class_test.<feature_name>field_id</feature_name> ("my_integer", "I")
				<comment>-- 'fid' contains the id of the field 'my_integer'</comment>
				
			value := instance_of_class_test.<feature_name>integer_attribute</feature_name> (fid)
				<comment>-- 'value' contains the value of the field referenced-- by 'fid'</comment>
			
			...
	
				<comment>--| Access to a static attribute using directly the JAVA_CLASS</comment>
			fid := class_test.<feature_name>field_id</feature_name> ("my_static_integer", "I")
			value := class_test.<feature_name>integer_attribute</feature_name> (fid)
			
			...
			
				<comment>--| Access to a static attribute using the attribute 'jclass'</comment>
			fid := instance_of_class_test.<feature_name>jclass</feature_name>.<feature_name>field_id</feature_name> ("my_static_integer", "I")
			value := instance_of_class_test.<feature_name>jclass</feature_name>.<feature_name>integer_attribute</feature_name> (fid)
			
			...
			
				<comment>--| Access to the method 'my_method'</comment>
			fid := instance_of_class_test.<feature_name>method_id </feature_name>("my_method", "(ILjava/lang/String;)V")
				<comment>-- Get the id of 'my_method'</comment>
				
			<keyword>create</keyword> j_args.<feature_name>make</feature_name> (2)
			j_args.<feature_name>push_int</feature_name> (2)
			j_args.<feature_name>push_string</feature_name> ("String test")
				-<comment>- Create the set of arguments for 'my_method'</comment>
				
			instance_of_class_test.<feature_name>void_method</feature_name> (fid, j_args)
				<comment>-- Call to the void method referenced by 'fid'</comment>
				
			...	
		<keyword>end</keyword>
		
<feature_name>end</feature_name> <comment>-- class EIFFEL_TO_JAVA</comment></code_block>
	</paragraph>
</document>
