''' $Id: makeSH.man 78389 2004-11-30 00:17:17Z manus $
'''
'''  Copyright (c) 1991-1993, Raphael Manfredi
'''  
'''  You may redistribute only under the terms of the Artistic Licence,
'''  as specified in the README file that comes with the distribution.
'''  You may reuse parts of this distribution only within the terms of
'''  that same Artistic Licence; a copy of which may be found at the root
'''  of the source tree for dist 3.0.
'''
''' $Log$
''' Revision 1.1  2004/11/30 00:17:18  manus
''' Initial revision
'''
''' Revision 3.0  1993/08/18  12:04:27  ram
''' Baseline for dist 3.0 netwide release.
'''
''' 
.TH MAKESH 1 LOCAL
.SH NAME
makeSH \- a .SH script maker
.SH SYNOPSIS
.B makeSH
.I files
.SH DESCRIPTION
.I MakeSH
examines one or more scripts and produces a .SH file that, when run under sh,
will produce the original script.
The .SH script so produced has two sections containing code destined for
the output.
The first section has variable substitutions performed on it (taking values
from config.sh), while the second section does not.
MakeSH does not know which variables you want to have substituted, so it puts
the whole script into the second section.
It's up to you to insert any variable substitutions in the first section
for any values you want from config.sh.
.PP
You should run
.I makeSH
from within your top-level directory and use the relative path to the file
as an argument, so that the "Extracting ..." line printed while running
the produced .SH file later on will give that same path.
.SH AUTHOR
Larry Wall <lwall@netlabs.com>
.SH SEE ALSO
pat(1), metaconfig(1), makedist(1).
.SH BUGS
It could assume that variables from metaconfig's Glossary need to be
initialized in the first section, but I'm too lazy to make it do that.
