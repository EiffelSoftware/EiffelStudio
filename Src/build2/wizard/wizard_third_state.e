indexing
	description	: "Wizard Step."
	author		: "Generated by the Wizard wizard"
	revision	: "1.0.0"

class
	WIZARD_THIRD_STATE

inherit
	WIZARD_INTERMEDIARY_STATE_WINDOW
		redefine
			update_state_information,
			proceed_with_current_info,
			build
		end
		
	GB_SHARED_TOOLS
	
	GB_WIDGET_UTILITIES
	
	GB_SHARED_SYSTEM_STATUS
	
	GB_CONSTANTS

create
	make

feature -- Basic Operation

	build is 
			-- Build entries.
		do
			first_window.set_size (dialog_unit_to_pixels(503), dialog_unit_to_pixels(385))
			create locals_grouped.make_with_text ("Group attribute declarations? e.g. button1, button2: EV_BUTTON")
			if project_settings.grouped_locals then
				locals_grouped.enable_select
			end
			locals_grouped.select_actions.extend (agent update_locals_grouped)
			
			create attributes_local.make_with_text ("Generate attributes as locals?")
			if project_settings.attributes_local then
				attributes_local.enable_select
			end
			attributes_local.select_actions.extend (agent update_attributes_local)
			
			create debugging_information.make_with_text ("Build debugging information in generated features?")
			if project_settings.debugging_output then
				debugging_information.enable_select
			end
			debugging_information.select_actions.extend (agent update_debugging_information)
			
			choice_box.extend (locals_grouped)
			choice_box.extend (attributes_local)
			choice_box.extend (debugging_information)
			set_updatable_entries(<<>>)
		end		

	proceed_with_current_info is
			-- User has clicked next, go to next step.
		do
			Precursor
			proceed_with_new_state(create {WIZARD_FOURTH_STATE}.make(wizard_information))
		end
		
	update_state_information is
			-- Check User Entries
		do
			Precursor
		end

feature {NONE} -- Implementation

	display_state_text is
			-- Set the messages for this state.
		do
			title.set_text ("Code generation")
			subtitle.set_text ("Select generation options.")
			message.set_text ("Please select desired code generation options.")
		end
		
	update_locals_grouped is
			-- Update project_settings based on state of `locals_grouped'.
		do
			if locals_grouped.is_selected then
				project_settings.enable_grouped_locals
			else
				project_settings.disable_grouped_locals
			end
		end
		
	update_attributes_local is
			-- Update project_settings based on state of `attributes_local'.
		do
			if attributes_local.is_selected then
				project_settings.enable_attributes_local
			else
				project_settings.disable_attributes_local
			end
		end
		
	update_debugging_information is
			-- Update project_settings based on state of `debugging_information'.
		do
			if debugging_information.is_selected then
				project_settings.enable_debugging_output
			else
				project_settings.disable_debugging_output
			end
		end
		
		
		
		
	locals_grouped: EV_CHECK_BUTTON
	
	attributes_local: EV_CHECK_BUTTON
	
	debugging_information: EV_CHECK_BUTTON
	
	project_settings: GB_PROJECT_SETTINGS is
			-- 
		do
			Result := system_status.current_project_settings
		end

end -- class WIZARD_THIRD_STATE
