indexing
	description: "Eiffel language compiler library. Help file: "
	Note: "Automatically generated by the EiffelCOM Wizard."

deferred class
	CEIFFEL_COMPILER_COCLASS

inherit
	IEIFFEL_COMPILER_INTERFACE

	ECOM_STUB

feature -- Access

	ieiffel_compiler_events_cookie_generator: ECOM_COOKIE_GENERATOR
			-- IEiffelCompilerEvents cookie generator.

	ieiffel_compiler_events_call_back_interface_table: HASH_TABLE [IEIFFEL_COMPILER_EVENTS_IMPL_PROXY, INTEGER]
			-- IEiffelCompilerEvents table.

feature -- Status Report

	has_ieiffel_compiler_events_call_back (a_cookie: INTEGER): BOOLEAN is
			-- Has call-back?
		do
			if ieiffel_compiler_events_call_back_interface_table /= Void then
				Result := ieiffel_compiler_events_call_back_interface_table.has (a_cookie)
			end
		end

feature -- Basic Operations

	add_ieiffel_compiler_events_call_back (a_call_back: IEIFFEL_COMPILER_EVENTS_IMPL_PROXY): INTEGER is
			-- Add IEiffelCompilerEvents call back.
		require
			non_void_call_back: a_call_back /= Void
		do
			if ieiffel_compiler_events_cookie_generator = Void then
				create ieiffel_compiler_events_cookie_generator
			end
			if ieiffel_compiler_events_call_back_interface_table = Void then
				create ieiffel_compiler_events_call_back_interface_table.make (10)
			end
			Result := ieiffel_compiler_events_cookie_generator.next_key
			check
				no_key: not ieiffel_compiler_events_call_back_interface_table.has (Result)
			end
			ieiffel_compiler_events_call_back_interface_table.force (a_call_back, Result)
		ensure
			non_void_table: ieiffel_compiler_events_call_back_interface_table /= Void
			added: ieiffel_compiler_events_call_back_interface_table.has (Result)
		end

	remove_ieiffel_compiler_events_call_back (a_cookie: INTEGER) is
			-- Remove IEiffelCompilerEvents call back.
		require
			non_void_cookie_generator: ieiffel_compiler_events_cookie_generator /= Void
			non_void_table: ieiffel_compiler_events_call_back_interface_table /= Void
			has: has_ieiffel_compiler_events_call_back (a_cookie)
		do
			ieiffel_compiler_events_cookie_generator.add_key_to_pool  (a_cookie)
			ieiffel_compiler_events_call_back_interface_table.remove (a_cookie)
		ensure
			not_has:  not has_ieiffel_compiler_events_call_back (a_cookie)
			added_to_pool: ieiffel_compiler_events_cookie_generator.available_key_pool.has (a_cookie)
		end

	event_should_continue (a_boolean: BOOLEAN_REF) is
			-- Should compilation continue.
			-- `a_boolean' [in, out].  
		do
			if ieiffel_compiler_events_call_back_interface_table /= Void then
				from
					ieiffel_compiler_events_call_back_interface_table.start
				until
					ieiffel_compiler_events_call_back_interface_table.after
				loop
					ieiffel_compiler_events_call_back_interface_table.item_for_iteration.should_continue (a_boolean)
					ieiffel_compiler_events_call_back_interface_table.forth
				end
			end
		end

	event_output_string (a_string: STRING) is
			-- Output string.
			-- `a_string' [in].  
		do
			if ieiffel_compiler_events_call_back_interface_table /= Void then
				from
					ieiffel_compiler_events_call_back_interface_table.start
				until
					ieiffel_compiler_events_call_back_interface_table.after
				loop
					ieiffel_compiler_events_call_back_interface_table.item_for_iteration.output_string (a_string)
					ieiffel_compiler_events_call_back_interface_table.forth
				end
			end
		end

	event_last_error (error_message: STRING; file_name: STRING; line_number: INTEGER) is
			-- Last error.
			-- `error_message' [in].  
			-- `file_name' [in].  
			-- `line_number' [in].  
		do
			if ieiffel_compiler_events_call_back_interface_table /= Void then
				from
					ieiffel_compiler_events_call_back_interface_table.start
				until
					ieiffel_compiler_events_call_back_interface_table.after
				loop
					ieiffel_compiler_events_call_back_interface_table.item_for_iteration.last_error (error_message, file_name, line_number)
					ieiffel_compiler_events_call_back_interface_table.forth
				end
			end
		end

end -- CEIFFEL_COMPILER_COCLASS

