indexing
	description: "Objects that represent an EV_DIALOG generated by Build."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	GB_CONSTANTS_DIALOG

inherit
	GB_CONSTANTS_DIALOG_IMP
		undefine
			copy
		end
		
	GB_SHARED_OBJECT_HANDLER
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
	
	GB_SHARED_COMMAND_HANDLER
		export
			{NONE} all
		end
	
	GB_SHARED_CONSTANTS
		export
			{NONE} all
		undefine
			default_create
		end
	
	GB_ICONABLE_TOOL
		export
			{NONE} all
		undefine
			default_create, copy
		end
		
	EIFFEL_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	BUILD_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	GB_NAMING_UTILITIES
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end	
		
	EV_STOCK_COLORS
		rename
			implementation as stock_colors_implementation
		export
			{NONE} all
		undefine
			copy, is_equal, default_create
		end
		
	GB_CONSTANTS
		export
			{NONE} all
		undefine
			copy, is_equal, default_create
		end
		
	GB_SHARED_SYSTEM_STATUS
		export
			{NONE} all
		undefine
			default_create
		end

feature {NONE} -- Initialization

	user_initialization is
			-- called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_default_push_button (ok_button)
			set_default_cancel_button (ok_button)
			create string_input
			string_input.change_actions.extend (agent update_add_button)
			create integer_input
			create directory_input
			directory_input.change_actions.extend (agent update_add_button)
			string_item.enable_select
				-- The default selected constants type is STRING.
		end
		
feature -- Access

	sorted_by_name: BOOLEAN
		-- Are items in `constants_list' sorted by name?
		
	sorted_by_type: BOOLEAN
		-- Are items in `constants_list' sorted by type?
		
	sorted_by_value: BOOLEAN
		-- Are items in `constants_list' sorted by value?
		
feature -- Basic operation

	update_for_addition (constant: GB_CONSTANT) is
			-- Update constants displayed in `Current' to reflect
			-- addition of `constant'.
		do
			constants_list.extend (constant.as_multi_column_list_row)
		end
		
	update_for_removal (constant: GB_CONSTANT) is
			-- Update constants displayed in `Current' to reflect 
		require
			constant_not_void: constant /= Void
		local
			removed: BOOLEAN
		do
			from
				constants_list.start
			until
				constants_list.off or removed
			loop
				if constants_list.item.data = constant then
					constants_list.remove
					removed := True
				else
					constants_list.forth	
				end
			end
			Constants.remove_constant (constant)
		end
		
feature {GB_CONSTANTS_HANDLER} -- Implementation

	reset_list is
			-- Ensure `constants_list' is empty.
		do
			constants_list.wipe_out
		ensure
			constants_list_empty: constants_list.is_empty
		end

feature {NONE} -- Implementation

	string_input: EV_TEXT_FIELD
		-- Input field for STRING constants.
		
	integer_input: EV_SPIN_BUTTON
		-- Input field for INTEGER constants.
		
	directory_input: EV_TEXT
		-- Input field for DIRECTORY constants
		
	remove_displayed_input_field is
			-- Ensure that `entry_selection_parent' is empty
		do
			entry_selection_parent.wipe_out
		ensure
			is_empty: entry_selection_parent.is_empty
		end
		
	validate_constant_name is
			-- Called by `change_actions' of `name_field'.
		local
			current_text: STRING
		do
			current_text := name_field.text.as_lower
			if not valid_class_name (current_text) or not object_handler.valid_constant_name (current_text) or
				reserved_words.has (current_text) or Build_reserved_words.has (current_text) or Constants.string_is_constant_name (current_text) then
				name_field.set_foreground_color (red)
				disable_add_button
			else
				name_field.set_foreground_color (black)
				update_add_button
			end
		end
		
	name_field_valid: BOOLEAN is
			-- Are contents of `name_field' valid?
			-- The quick method is to check the color.
		do
			Result := name_field.foreground_color.is_equal (Black)
		end
		
	entry_valid: BOOLEAN is
			-- Is current entry valid?
		require
			one_field_parented: string_input.parent /= Void or integer_input.parent /= Void
				or directory_input.parent /= Void
			-- Only one field parented.
		do
			-- As only one entry field may be parented, we check the
			-- `parent' to determine which one must be validated
			if string_input.parent /= Void then
				Result := not string_input.text.is_empty
			elseif integer_input.parent /= Void then
				Result := True
			elseif directory_input.parent /= Void then
				Result := not directory_input.text.is_empty
			end
		end
		
	update_add_button is
			--
		do
			if entry_valid and name_field_valid then
				add_button.enable_sensitive
			else
				add_button.disable_sensitive
			end
		end
		
	disable_add_button is
			-- Ensure that `add_button' is non sensitive.
		do
			add_button.disable_sensitive
		ensure
			not_sensitive: not add_button.is_sensitive
		end
		

	string_item_selected is
			-- Called by `select_actions' of `string_item'.
		do
			remove_displayed_input_field
			entry_selection_parent.extend (string_input)
			if not display_all_types.is_selected then
				rebuild_for_selected_type (string_item.text)
			end
		end


	integer_item_selected is
			-- Called by `select_actions' of `integer_item'.
		do
			remove_displayed_input_field
			entry_selection_parent.extend (integer_input)	
			if not display_all_types.is_selected then
				rebuild_for_selected_type (integer_item.text)
			end
		end


	directory_item_selected is
			-- Called by `select_actions' of `directory_item'.
		do
			remove_displayed_input_field
			entry_selection_parent.extend (directory_input)
			if not display_all_types.is_selected then
				rebuild_for_selected_type (directory_item.text)
			end
		end
		
		
	add_constant is
			-- Called by `select_actions' of `add_button'.
		local
			add_constant_command: GB_COMMAND_ADD_CONSTANT
		do
				-- As only one entry field may be parented, we check the
				-- `parent' to determine which one must be validated
			if string_input.parent /= Void then
				create add_constant_command.make (create {GB_STRING_CONSTANT}.make_with_name_and_value (name_field.text.as_lower, string_input.text))
				add_constant_command.execute
				string_input.remove_text
			elseif integer_input.parent /= Void then
				create add_constant_command.make (create {GB_INTEGER_CONSTANT}.make_with_name_and_value (name_field.text.as_lower, integer_input.value))
				add_constant_command.execute
			elseif directory_input.parent /= Void then
			
			end
			name_field.remove_text
			
				-- Update system to reflect a change.
			system_status.enable_project_modified
			command_handler.update
		end
	
	remove_selected_constant is
			-- Called by `select_actions' of `remove_button'.
		require else
			items_selected: not constants_list.selected_items.is_empty
		local
			constant: GB_CONSTANT
		do
			constant ?= constants_list.selected_item.data
			check
				data_was_constant: constant /= Void
			end
			constants_list.prune_all (constants_list.selected_item)
			Constants.remove_constant (constant)
			
				-- Update system to reflect a change.
			system_status.enable_project_modified
			command_handler.update
		end
		
	display_all_types_changed is
			-- Called by `select_actions' of `display_all_types'.
		do
			if display_all_types.is_selected then
				rebuild_for_selected_type (all_constant_type)
			else
				rebuild_for_selected_type (type_combo_box.text)
			end
		end
		
	column_clicked (a_column: INTEGER) is
			-- Called by `column_title_click_actions' of `constants_list'.
		do
				-- Reset all sorted values
			sorted_by_type := False
			sorted_by_name := False
			sorted_by_value := False
			
				-- Set sorted by corresponding to `a_column'.
			inspect a_column
			when 1 then
				sorted_by_type := True
			when 2 then
				sorted_by_name := True
			when 3 then
				sorted_by_value := True
			else
			end
		end
		
	cancel_pressed is
			-- Called by `select_actions' of `cancel_button'.
		do
			Command_handler.Show_hide_constants_dialog_command.execute
		end
		
	ok_pressed is
			-- Called by `select_actions' of `ok_button'.
		do
			Command_handler.Show_hide_constants_dialog_command.execute
		end
		
	item_selected_in_list (an_item: EV_MULTI_COLUMN_LIST_ROW) is
			-- Called by `select_actions' of `constants_list'.
		do
			remove_button.enable_sensitive
		end
	
	item_deselected_in_list (an_item: EV_MULTI_COLUMN_LIST_ROW) is
			-- Called by `deselect_actions' of `constants_list'.
		do
			if constants_list.selected_items.is_empty then
				remove_button.disable_sensitive	
			end
		end

	icon: EV_PIXMAP is
			-- Icon displayed in title of `Current'.
		once
			Result := (create {GB_SHARED_PIXMAPS}).Icon_format_onces @ 1
		end
		
	rebuild_for_selected_type (a_type: STRING) is
			-- Rebuild `constants_list' to only show types corresponding to `a_type'.
		require
			type_valid: a_type.is_equal (all_constant_type) or Constants.Supported_types.has (a_type)
		local
			temp_constants: ARRAYED_LIST [GB_CONSTANT]
		do
			constants_list.wipe_out
			temp_constants := Constants.all_constants
			from
				temp_constants.start
			until
				temp_constants.off
			loop
				if a_type.is_equal (All_constant_type) or temp_constants.item.type.is_equal (a_type) then
					constants_list.extend (temp_constants.item.as_multi_column_list_row)
				end
				temp_constants.forth
			end
		end

invariant
	input_fields_not_void: string_input /= Void and integer_input /= Void and directory_input /= Void
	at_least_one_sort_in_place: sorted_by_name or sorted_by_type or sorted_by_value
	-- Only one sort in place

end -- class GB_CONSTANTS_DIALOG

