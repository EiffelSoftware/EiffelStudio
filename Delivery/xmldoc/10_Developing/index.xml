<document output="envision" title="Developing With ENViSioN!">
	<meta_data>
		<help>
			<toc>
				<envision_title>Eiffel ENViSioN!</envision_title>
				<envision_pseudo_name>10</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<table>
			<row>
				<cell>
					<paragraph>  The documentation regarding development in Eiffel ENViSioN! has been divided  into three sections: </paragraph>
					<list ordered="false">
						<item>
							<link>
								<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/index.htm</url>
								<label>Using  ENViSioN! within Visual Studio.Net</label>
							</link>
						</item>
						<item>
							<link>
								<url>/10_Developing/20_Managing_Projects/index.htm</url>
								<label>Managing Projects</label>
							</link>
						</item>
						<item>
							<link>
								<url>/10_Developing/30_Deploying_Projects/deploying_projects.htm</url>
								<label>Deploying  Projects</label>
							</link>
						</item>
					</list>
					<paragraph>  These topics cover the tools available in ENViSioN! for Project development,  but an understanding of Eiffel for .NET is also a prerequisite for successful  development. </paragraph>
					<heading>
						<size>2</size>Using Eiffel with .NET
					</heading>
					<paragraph>  The Eiffel programming language is different in many ways from other  object-oriented languages that you might be accustomed to using in Microsoft  .NET. </paragraph>
					<paragraph>  Eiffel has an underlying object model that is very rich and powerful. It comes  equipped with libraries of classes which have evolved over a period of more  than fifteen years. As an Eiffel for .NET programmer you have access to these  libraries as well as the many rich type libraries provided by the Microsoft  .NET Framework. </paragraph>
					<paragraph>  Eiffel has been around for a very long time (in software terms, that is), and  it uses a somewhat different object model than the inherent .NET model. As a  result, </paragraph>
					<list ordered="false">
						<item>  if you're a C# or Visual Basic .NET programmer, you'll have to look at .NET  types a little differently when using Eiffel for .NET  </item>
						<item>  if you're an Eiffel programmer, you'll be looking at the .NET types  as if they were Eiffel classses, with some minor differences.  </item>
					</list>
					<paragraph>  The
						<help_link>
							<tab_index>0</tab_index>
							<index_moniker>!DefaultAssociativeIndex</index_moniker>
							<keywords>Eiffel Conventions</keywords>Conventions
						</help_link> section of the Eiffel for .NET Language topic will help you understand these differences and how they effect you as a programmer.
						<paragraph>  But, to a large extent, you will find using Eiffel for .NET in Visual Studio  .NET very much like using C# or Visual Basic in Visual Studio.NET.</paragraph>
						<paragraph>  If you have not already done so, it is recommended that you first read 
							<link>
								<url>/20_Language/index.html</url>
								<label>  Eiffel, The Language</label>
							</link> which contains information regarding the Eiffel  language, including a section of pages devoted to the 
							<link>
								<url>/20_Language/10_Eiffel_NET/10_Eiffel_for_NET.htm</url>
								<label>  Eiffel for .Net Language</label>
							</link>.
						</paragraph>
						<seealso>
							<bold>See Also</bold>
							<line_break/>
							<link>
								<url>/20_Language/index.html</url>
								<label>Eiffel, The Language</label>
							</link>
							<line_break/>
							<link>
								<url>/20_Language/10_Eiffel_NET/10_Eiffel_for_NET.htm</url>
								<label>Eiffel for .Net Language</label>
							</link>
							<line_break/>
							<link>
								<url>/technologies/dotnet/samples/index.html</url>
								<label>Samples</label>
							</link>
							<line_break/>
						</seealso>
					</paragraph>
				</cell>
			</row>
		</table>
	</paragraph></document>