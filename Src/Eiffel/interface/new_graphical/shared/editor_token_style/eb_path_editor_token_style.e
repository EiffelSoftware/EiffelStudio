indexing
	description: "Object that represents a style to generate path information for a query lanaguage item"
	legal: "See notice at end of class."
	status: "See notice at end of class."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	EB_PATH_EDITOR_TOKEN_STYLE

inherit
	EB_EDITOR_TOKEN_STYLE

feature -- Status report

	is_text_ready: BOOLEAN
			-- Is `text_internal' ready to be returned?
		do
			Result := item /= Void
		end

	is_parent_included: BOOLEAN
			-- Is parent included?
			-- For example, if True, the output will be group.class.

	is_indirect_parent_included: BOOLEAN
			-- Is indirect parent included?
			-- For example, if True, the output will be target.group.group.class.

	is_target_included: BOOLEAN
			-- Is target item in path included?
			-- Has effect only if `is_parent_included' is True

	is_self_included: BOOLEAN
			-- Is `item' itself included in output?

feature -- Access

	item: QL_ITEM
			-- Query language item whose path is to be displayed

	path_printer: EB_QUERY_LANGUAGE_PRINTER_VISITOR is
			-- Printer
		do
			if path_printer_internal = Void then
				create path_printer_internal.make
				path_printer_internal.set_class_style (class_style)
				path_printer_internal.set_feature_style (feature_style)
			end
			Result := path_printer_internal
		ensure
			result_attached: Result /= Void
		end

feature -- Text

	text: LIST [EDITOR_TOKEN] is
			-- Editor token text generated by `Current' style
		local
			l_printer: like path_printer
		do
			l_printer := path_printer
			l_printer.wipe_out_text
			l_printer.process_path (item, is_self_included, is_parent_included, is_indirect_parent_included, is_target_included)
			Result := l_printer.text
		end

feature -- Setting

	enable_parent is
			-- Enable that parent information is included in output.
		do
			is_parent_included := True
		ensure
			parent_included: is_parent_included
		end

	disable_parent is
			-- Disable parent information in output.
		do
			is_parent_included := False
		ensure
			parent_not_included: not is_parent_included
		end

	enable_indirect_parent is
			-- Enable that indirect_parent information is included in output.
		do
			is_indirect_parent_included := True
		ensure
			indirect_parent_included: is_indirect_parent_included
		end

	disable_indirect_parent is
			-- Disable indirect_parent information in output.
		do
			is_indirect_parent_included := False
		ensure
			indirect_parent_not_included: not is_indirect_parent_included
		end

	enable_target is
			-- Enable that target information is included in output.
		do
			is_target_included := True
		ensure
			target_included: is_target_included
		end

	disable_target is
			-- Disable target information in output.
		do
			is_target_included := False
		ensure
			target_not_included: not is_target_included
		end

	enable_self is
			-- Enable that self information is included in output.
		do
			is_self_included := True
		ensure
			self_included: is_self_included
		end

	disable_self is
			-- Disable self information in output.
		do
			is_self_included := False
		ensure
			self_not_included: not is_self_included
		end

	set_item (a_item: like item) is
			-- Set `item' with `a_item'.
		do
			item := a_item
		ensure
			item_set: item = a_item
		end

feature{NONE} -- Implementation

	class_style: EB_CLASS_EDITOR_TOKEN_STYLE is
			-- Class style
		once
			create Result
			Result.enable_just_name
			Result.enable_curly
		ensure
			result_attached: Result /= Void
		end

	feature_style: EB_FEATURE_EDITOR_TOKEN_STYLE is
			-- Feature style
		once
			create Result
			Result.disable_class
			Result.disable_comment
			Result.disable_return_type
			Result.disable_value_for_constant
			Result.disable_use_overload_name
			Result.disable_argument
		ensure
			result_attached: Result /= Void
		end

	path_printer_internal: like path_printer;
			-- Implementation of `path_printer'

indexing
	copyright:	"Copyright (c) 1984-2006, Eiffel Software"
	license:	"GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options:	"http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful,	but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the	GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
		]"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"

end
