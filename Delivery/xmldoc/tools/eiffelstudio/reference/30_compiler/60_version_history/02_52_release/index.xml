<document output="studio" title="Major changes between  Eiffel Software  Eiffel 5.1 and  Eiffel Software  Eiffel 5.2">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>What's new
		</heading>
		<list ordered="false">
			<item>.NET generation now includes support for the following language         features:
				<list ordered="false">
					<item>Support for multiple inheritance.</item>
					<item>Support for generics.</item>
					<item>Partial implementation of generic conformance </item>
					<item>Support for tuples and agents.</item>
					<item>Support for any existing Eiffel code that does not use C externals.</item>
					<item>Support for compiling Eiffel libraries using C externals that are not related to the Eiffel Software C runtime.</item>
				</list>
				<paragraph>And the following limitations:
					<list ordered="false">
						<item>Eiffel classes cannot inherit from non-Eiffel .NET classes (but they can be clients).</item>
						<item>No support for `expanded' keyword.</item>
					</list>
				</paragraph>
				</item></list>
					<list ordered="false">
						<item>.NET generation now supports assembly signing in enterprise edition.</item>
						<item>.NET generation now supports precompiled libraries.</item>
						<item>Supports for manifest integer constants of different sizes, i.e. you can now assign for example the value `8' to a location of type 
							<code>
								<class_name>INTEGER_8</class_name>
							</code>, 
							<code>
								<class_name>INTEGER_16</class_name>
							</code>, 
							<code>
								<class_name>INTEGER</class_name>
							</code> or 
							<code>
								<class_name>INTEGER_64</class_name>
							</code>, however you can only assign the value `254' to a location of type 
							<code>
								<class_name>INTEGER_16</class_name>
							</code>, 
							<code>
								<class_name>INTEGER</class_name>
							</code> or
							<code>
								<class_name>INTEGER_64</class_name>
							</code>.
						</item>
					</list>

				<heading>
					<size>2</size>Improvements
				</heading>
				<list ordered="false">
					<item>Compiler that is about 20% faster than 5.1.</item>
					<item>Runtime is about 10-20% faster than 5.1</item>
				</list>
				<heading>
					<size>2</size>Changes
				</heading>
				<list ordered="false">
					<item>One cannot create an instance of a basic expanded class (
						<code>
							<class_name>BOOLEAN</class_name>
						</code>, 
						<code>
							<class_name>CHARACTER</class_name>
						</code>, 
						<code>
							<class_name>INTEGER_8</class_name>
						</code>, 
						<code>
							<class_name>INTEGER_16</class_name>
						</code>, 
						<code>
							<class_name>INTEGER</class_name>
						</code>, 
						<code>
							<class_name>INTEGER_64</class_name>
						</code>, 
						<code>
							<class_name>POINTER</class_name>
						</code>, 
						<code>
							<class_name>REAL</class_name>
						</code>, 
						<code>
							<class_name>DOUBLE</class_name>
						</code>), you will now get a 
						<code><compiler_error>VGCC(6)</compiler_error></code> error. Instead directly assign to it, or create an instance of its corresponding _REF class.
					</item>
				</list>
				<heading>
					<size>2</size>Bug fixes
				</heading>
				<list ordered="false">
					<item>Fixed memory corruption issue when trying to access an 
						<code>
							<class_name>INTEGER_64</class_name>
						</code> value.
					</item>
					<item>Fixed a problem with manifest 
						<code>
							<class_name>INTEGER_64</class_name>
						</code> constants whose values were incorrectly interpreted.
					</item>
					<item>          Fixed <code><compiler_error>VAPE</compiler_error></code> errors that were not previously reported in 5.1. Now 
						<code><compiler_error>VAPE</compiler_error></code> errors are checked against call to infix and prefix features.
					</item>
				</list>
	</paragraph></document>
