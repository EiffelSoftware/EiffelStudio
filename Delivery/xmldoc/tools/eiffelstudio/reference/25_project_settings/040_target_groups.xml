<document title="Group Options" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>This is where you can configure the groups of your project. A group is a container for classes and has some additional options associated. There are five types of groups</paragraph>
		<list ordered="false">
			<item>Cluster: represents a directory or directory structure on the disk with class files in it</item>
			<item>Override cluster: similar to cluster but overrides classes in other clusters with the same name, can only appear in an application, never in a library</item>
			<item>Library: a configuration of a library is included, all classes in clusters are accessible</item>
			<item>Precompile: a precompile is similar to a library, but the contents of the library have already been compiled and therefore compilation is a lot faster, there can only be one precompile group</item>
			<item>Assembly: classes in an assembly (.NET code generation mode only)</item>
		</list>
		<paragraph>
			<image>
				<url/>
				<alt_text>Group dialog</alt_text>
			</image>
		</paragraph>
		<heading>
			<size>2</size>Common Group Options
		</heading>
		<list ordered="false">
			<item>Name: name of the group</item>
			<item>Description: an optional description of the group</item>
			<item>Readonly: in a read only group, classes cannot be modified</item>
			<item>Location: directory for clusters, assembly file for assemblies and ecf file for libraries and precompiles</item>
			<item>Profiling: turn on the Eiffel profiler during the application execution (C code generation mode only). The results can be seen at the end of the execution in the profiler window.</item>
			<item>Trace: display on the console all the features that are called during the system execution (C generation mode only).</item>
			<item>.NET Namespace: specify the namespace for this group (.NET code generation mode only)</item>
			<item>Assertions: <link><url>030_target_assertions.xml</url><label>assertion level</label></link> for this group</item>
			<item>Warning: <link><url>060_advanced_warning.xml</url><label>warnings</label></link> for this group</item>
			<item>Debug: <link><url>070_advanced_debug.xml</url><label>debugs</label></link> for this group</item>
		</list>
		<heading>
			<size>3</size>Advanced
		</heading>
		<list ordered="false">
			<item>Condition: group nodes can be <link><url>020_target_general.xml</url><anchor_name>condition</anchor_name><label>conditioned</label></link> to only be used under certain conditions.</item>
			<item>Prefix: name prefix for classes in this group (see
				<link>
					<url>040_target_groups.xml</url>
					<anchor_name>renaming</anchor_name>
					<label>Renaming</label>
				</link>)
			</item>
			<item>Renaming: renamings for classes in this group (see
				<link>
					<url>040_target_groups.xml</url>
					<anchor_name>renaming</anchor_name>
					<label>Renaming</label>
				</link>)
			</item>
			<item>Class options: options specific for certain classes</item>
		</list>
		<heading>
			<size>2</size>(Override) Cluster Options
		</heading>Clusters can be added as a sub clusters of other clusters, just select the parent cluster before adding the cluster.
		<list ordered="false">
			<item>Recursive: should subdirectories automatically be included?.</item>
			<item>File pattern: <link><url>020_target_general.xml</url><anchor_name>file_pattern</anchor_name><label>file pattern</label></link> for this group</item>
			<item>Dependencies: specify which groups are checked for classes if the class can not be found in the group itself</item>
			<item>Type Mapping: <link><url>110_advanced_mapping.xml</url><label>mapping</label></link> of types, e.g. STRING is mapped to STRING_32</item>
			<item>Visible classes: visible classes (see
				<link>
					<url>040_target_groups.xml</url>
					<anchor_name>visible</anchor_name>
					<label>Visible Classes</label>
				</link>)
			</item>
		</list>
		<heading>
			<size>2</size>Override Cluster Options
		</heading>
		<list ordered="false">
			<item>Overrides: which groups are overridden by this override (default to all).</item>
		</list>
		<heading>
			<size>2</size>Library/Precompile Options
		</heading>If a library is not read only, the configuration can be directly edited by clicking on the edit library button.
		<list ordered="false">
			<item>Visible classes: visible classes (see
				<link>
					<url>040_target_groups.xml</url>
					<anchor_name>visible</anchor_name>
					<label>Visible Classes</label>
				</link>)
			</item>
		</list>
		<heading>
			<size>2</size>Resolving Conflicts
		</heading>There are multiple ways to resolve conflicts between different classes with the same name.
		<anchor>renaming</anchor>
		<heading>
			<size>3</size>Renaming
		</heading>
		<paragraph>A class can be renamed with a renaming or a group can have a name prefix which will get added to every class. Outside of this group, the class can then be reached by the renamed name.</paragraph>
		<anchor>dependencies</anchor>
		<heading>
			<size>3</size>Dependencies
		</heading>
		<paragraph>It is possible to specify which other groups will be searched if a class can not be found in the current group.</paragraph>
		<anchor>visible</anchor>
		<heading>
			<size>2</size>Visible classes
		</heading>
		<paragraph>If a feature should be reachable from CECIL and may not be used it must be made visible because otherwise it will be removed by the dead code optimizer. To do this you have to make the class visible. In addition it is also possible to rename a class or a feature. In most cases we make a class completely visible and do not need renaming.</paragraph>
		<paragraph>
			<image>
				<url/>
				<alt_text>Visible dialog</alt_text>
			</image>
		</paragraph>
		<paragraph>To make a class visible, just enter the class name and press
			<italic>Add class</italic>. Optionally it is possible to specify a different name under which it is accessible. After a class has been added, it is possible to restrict the access to certain features only, to do this, enter the name of the feature (and optional a renamed name), select the class they belong to and click on <italic>Add feature</italic>.
		</paragraph>
	</paragraph>
</document>