<document output="studio" title="Eiffel2Java Sample">
	<meta_data/>
	<paragraph>
		<paragraph>This example shows how to create an instance of the Java Virtual Machine and the creation of an object of type 
			<class_name>test</class_name>, a java class reproduced below:
		</paragraph>
		<code_block>
(Java Code)

class test 
{
	test () 
	{
		my_integer = 10;
	}

	public int my_integer;
	public static int my_static_integer;
	public void my_method (int arg_int, String arg_string) 
	{		
		my_static_integer = arg_int;
		my_integer = arg_int;
	}
}
</code_block>
		<paragraph>In order to run properly you need to read 
			<link>
				<url>../index.xml</url>
				<label>the library requirement</label>
			</link>.
		</paragraph>
		<heading>
			<size>3</size>Compiling the example
		</heading>
		<paragraph>Since the example is using the `test.java' class, the first step is to compile the java class using the `javac' command line utility from the JDK. Once it is done, copy the `test.class' either in $ISE_EIFFEL\examples\Eiffel2Java\EIFGENs\classic\W_code or in $ISE_EIFFEL\examples\Eiffel2Java\EIFGENs\classic\F_code depending on your compilation mode (freezing vs. finalizing).</paragraph>
		<heading>
			<size>3</size>Running the example
		</heading>
		<paragraph>One the example is compiled, you can run it and here is the expected output:</paragraph>
		<code_block>$ sample
Creating instance of class `test'
Value of `my_integer' is 10
Value of `my_static_integer' is 0
Calling `my_method' with (2, "String test")
Value of `my_integer' after call to `my_method' is 2</code_block>
		<heading>
			<size>3</size>Code description
		</heading>
		<code_block>(Eiffel Code)
		
<keyword>class</keyword> 
	<class_name>EIFFEL_TO_JAVA</class_name>
<keyword>inherit</keyword>	
	<class_name>SHARED_JNI_ENVIRONMENT</class_name>

<keyword>create</keyword>
	<feature_name>make</feature_name>

<keyword>feature</keyword> -- Creation	
	
	<feature_name>make</feature_name> <keyword>is</keyword>
		<keyword>local</keyword>
			class_test<symbol>:</symbol> <class_name>JAVA_CLASS</class_name>
			instance_of_class_test<symbol>:</symbol> <class_name>JAVA_OBJECT</class_name>	
			fid<symbol>:</symbol> <class_name>POINTER</class_name>
			value<symbol>:</symbol> <class_name>INTEGER</class_name>			
			j_args<symbol>:</symbol> <class_name>JAVA_ARGS</class_name>		
		<keyword>do</keyword>
				<comment>--| Creation of the Java object</comment>
			class_test <symbol>:</symbol><symbol>=</symbol> <feature_name>jni</feature_name>.<feature_name>find_class</feature_name> <symbol>(</symbol>"test"<symbol>)</symbol>
			<keyword>create</keyword> <feature_name>instance_of_class_test</feature_name>.<feature_name>create_instance</feature_name> <symbol>(</symbol>class_test, "<symbol>(</symbol><symbol>)</symbol><class_name>V</class_name>", Void<symbol>)</symbol>
			
				<comment>--| Access to a public attribute</comment>
			fid <symbol>:</symbol><symbol>=</symbol> <feature_name>instance_of_class_test</feature_name>.<feature_name>field_id</feature_name> <symbol>(</symbol>"my_integer", "<class_name>I</class_name>"<symbol>)</symbol>
			
				<comment>-- 'fid' contains the id of the field 'my_integer'</comment>
				<comment>-- 'value' contains the value of the field referenced	</comment>
				<comment>-- by 'fid'</comment>
				
			value <symbol>:</symbol><symbol>=</symbol> <feature_name>instance_of_class_test</feature_name>.<feature_name>integer_attribute</feature_name> <symbol>(</symbol>fid<symbol>)</symbol>
			
				<comment>--| Access to a static attribute using directly the JAVA_CLASS			</comment>
			fid <symbol>:</symbol><symbol>=</symbol> <feature_name>class_test</feature_name>.<feature_name>field_id</feature_name> <symbol>(</symbol>"my_static_integer", "<class_name>I</class_name>"<symbol>)</symbol>			
			value <symbol>:</symbol><symbol>=</symbol> <feature_name>class_test</feature_name>.<feature_name>integer_attribute</feature_name> <symbol>(</symbol>fid<symbol>)</symbol>			<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>.<feature_name></feature_name>				
			
				<comment>--| Access to a static attribute using the attribute 'jclass'			</comment>
			fid <symbol>:</symbol><symbol>=</symbol> <feature_name>instance_of_class_test</feature_name>.<feature_name>jclass</feature_name>.<feature_name>field_id</feature_name> <symbol>(</symbol>"my_static_integer", "<class_name>I</class_name>"<symbol>)</symbol>			
			value <symbol>:</symbol><symbol>=</symbol> <feature_name>instance_of_class_test</feature_name>.<feature_name>jclass</feature_name>.<feature_name>integer_attribute</feature_name> <symbol>(</symbol>fid<symbol>)</symbol>							
			
				<comment>--| Access to the method 'my_method'</comment>
				<comment>-- Get the id of 'my_method'</comment>
			fid <symbol>:</symbol><symbol>=</symbol> <feature_name>instance_of_class_test</feature_name>.<feature_name>method_id</feature_name> <symbol>(</symbol>"my_method", "<symbol>(</symbol>ILjava/lang/String;<symbol>)</symbol><class_name>V</class_name>"<symbol>)</symbol>	

				<comment>-- Create the set of arguments for 'my_method'</comment>		
			<keyword>create</keyword> <feature_name>j_args</feature_name>.<feature_name>make</feature_name><symbol>(</symbol>2<symbol>)</symbol>			
			<feature_name>j_args</feature_name>.<feature_name>push_int</feature_name> <symbol>(</symbol>2<symbol>)</symbol>			
			<feature_name>j_args</feature_name>.<feature_name>push_string</feature_name><symbol>(</symbol>"String test"<symbol>)</symbol>				
			
				<comment>-- Create the set of arguments for 'my_method'</comment>
				<comment>-- Call to the void method referenced by 'fid'</comment>
			<feature_name>instance_of_class_test</feature_name>.<feature_name>void_method</feature_name> <symbol>(</symbol>fid, j_args<symbol>)</symbol>		
		<keyword>end</keyword> <comment>-- make</comment>
		
<keyword>end</keyword> <comment>-- class EIFFEL_TO_JAVA</comment></code_block>
	</paragraph></document>
