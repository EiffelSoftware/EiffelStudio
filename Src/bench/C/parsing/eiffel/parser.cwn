
# line 13 "parser.y"
#include "eiffel_c.h"

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2


# line 37 "parser.y"
typedef union  {
	char *node;
	int32  value;
	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
# define TE_DOTDOT 257
# define TE_IMPLIES 258
# define TE_OR 259
# define TE_XOR 260
# define TE_AND 261
# define TE_NE 262
# define TE_EQ 263
# define TE_LT 264
# define TE_GT 265
# define TE_LE 266
# define TE_GE 267
# define TE_PLUS 268
# define TE_MINUS 269
# define TE_STAR 270
# define TE_SLASH 271
# define TE_MOD 272
# define TE_DIV 273
# define TE_POWER 274
# define TE_FREE 275
# define TE_NOT 276
# define TE_STRIP 277
# define TE_OLD 278
# define TE_DOT 279
# define TE_LPARAN 280
# define TE_ALIAS 281
# define TE_ALL 282
# define TE_INTEGER 283
# define TE_CHAR 284
# define TE_REAL 285
# define TE_STRING 286
# define TE_ID 287
# define TE_A_BIT 288
# define TE_BANG 289
# define TE_BIT 290
# define TE_SEMICOLON 291
# define TE_COLON 292
# define TE_COMMA 293
# define TE_CREATION 294
# define TE_LARRAY 295
# define TE_RARRAY 296
# define TE_RPARAN 297
# define TE_LCURLY 298
# define TE_RCURLY 299
# define TE_LSQURE 300
# define TE_RSQURE 301
# define TE_CONSTRAIN 302
# define TE_FALSE 303
# define TE_TRUE 304
# define TE_ACCEPT 305
# define TE_ADDRESS 306
# define TE_AS 307
# define TE_ASSIGN 308
# define TE_CHECK 309
# define TE_CLASS 310
# define TE_CURRENT 311
# define TE_DEBUG 312
# define TE_DEFERRED 313
# define TE_DO 314
# define TE_ELSE 315
# define TE_ELSEIF 316
# define TE_END 317
# define TE_ENSURE 318
# define TE_EXPANDED 319
# define TE_EXPORT 320
# define TE_EXTERNAL 321
# define TE_FEATURE 322
# define TE_FROM 323
# define TE_FROZEN 324
# define TE_IF 325
# define TE_INDEXING 326
# define TE_IN_END 327
# define TE_INFIX 328
# define TE_INHERIT 329
# define TE_INSPECT 330
# define TE_INVARIANT 331
# define TE_IS 332
# define TE_LIKE 333
# define TE_LOCAL 334
# define TE_LOOP 335
# define TE_OBSOLETE 336
# define TE_ONCE 337
# define TE_PREFIX 338
# define TE_REDEFINE 339
# define TE_RENAME 340
# define TE_REQUIRE 341
# define TE_RESCUE 342
# define TE_RESULT 343
# define TE_RETRY 344
# define TE_SELECT 345
# define TE_THEN 346
# define TE_UNDEFINE 347
# define TE_UNIQUE 348
# define TE_UNTIL 349
# define TE_VARIANT 350
# define TE_WHEN 351
# define EIF_ERROR2 352
# define EIF_ERROR3 353
# define EIF_ERROR4 354
# define EIF_ERROR5 355
# define EIF_ERROR6 356
# define EIF_ERROR7 357
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yylval, yyval;
typedef int yytabelem;
# define YYERRCODE 256

# line 1344 "parser.y"

char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap()
{
	return 1;
}
yytabelem yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 4,
	310, 8,
	313, 8,
	319, 8,
	-2, 6,
-1, 10,
	310, 7,
	313, 7,
	319, 7,
	-2, 41,
-1, 51,
	294, 263,
	-2, 262,
-1, 52,
	287, 65,
	-2, 41,
-1, 57,
	322, 25,
	-2, 24,
-1, 68,
	287, 31,
	328, 31,
	338, 31,
	-2, 267,
-1, 82,
	287, 32,
	328, 32,
	338, 32,
	-2, 270,
-1, 86,
	320, 75,
	339, 75,
	345, 75,
	347, 75,
	-2, 70,
-1, 102,
	287, 77,
	328, 77,
	338, 77,
	-2, 76,
-1, 119,
	298, 83,
	-2, 41,
-1, 157,
	317, 30,
	322, 30,
	331, 30,
	-2, 42,
-1, 166,
	317, 95,
	339, 95,
	345, 95,
	-2, 96,
-1, 201,
	291, 171,
	313, 171,
	314, 171,
	317, 171,
	321, 171,
	334, 171,
	337, 171,
	342, 171,
	349, 171,
	350, 171,
	-2, 169,
-1, 221,
	317, 99,
	345, 99,
	-2, 100,
-1, 270,
	317, 103,
	-2, 104,
-1, 330,
	283, 364,
	285, 364,
	-2, 22,
-1, 366,
	287, 112,
	-2, 135,
-1, 375,
	315, 137,
	316, 137,
	317, 137,
	318, 137,
	331, 137,
	342, 137,
	349, 137,
	350, 137,
	351, 137,
	-2, 141,
-1, 414,
	315, 136,
	316, 136,
	317, 136,
	318, 136,
	331, 136,
	342, 136,
	349, 136,
	350, 136,
	351, 136,
	-2, 140,
-1, 464,
	316, 201,
	-2, 200,
	};
# define YYNPROD 374
# define YYLAST 856
yytabelem yyact[]={

   140,   373,   143,   106,   364,   445,   492,   468,   111,   375,
   122,   329,   155,   151,   149,   150,   154,    29,   447,   473,
   486,    28,   137,   136,    20,    38,   166,   495,   202,   156,
   138,   141,   139,   372,   135,   270,   370,   144,    35,   145,
    38,    14,    37,   341,    14,   221,   100,    28,    48,   148,
   344,   351,   352,    21,   327,    21,   459,    33,    34,   354,
   286,    76,    52,   289,    79,   152,     4,    47,    71,   102,
    16,    26,   137,   136,   268,   353,   130,   306,    71,   156,
   138,   141,   139,    90,   135,    40,    41,   144,    35,   145,
    38,    14,    37,   119,   114,    39,   114,   153,   360,   148,
   443,    35,   520,    38,   115,    37,   115,    33,    34,   307,
    39,   178,   506,   123,   479,   152,    40,    41,   146,   241,
    33,    34,    21,    60,   460,   125,   142,   439,   379,   298,
    36,   200,    35,   175,    38,    14,    37,    31,   147,    91,
     6,    85,   493,   176,   490,    27,     7,   153,   466,   346,
    14,    33,    34,    48,   124,    99,    36,    32,    74,   214,
    39,    15,   227,    31,   173,   336,   203,   284,   126,    62,
   103,    27,   172,    39,   180,    88,   109,    61,    43,    83,
   205,    97,   123,    32,   228,   420,   164,    53,   419,    13,
   168,   418,   163,   437,   417,   331,   324,    13,   462,    25,
   182,   309,   461,   252,    39,   200,   291,   200,   200,   200,
   200,   200,   204,   206,   207,   208,   209,   210,   304,   203,
    68,   261,   303,   266,   482,    25,   310,   260,   158,   296,
   292,   505,   200,   200,   200,   200,   200,   200,   200,   200,
   226,   200,    44,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   230,   160,   162,   347,   323,    19,   410,   200,
   231,   232,   233,   234,   235,   236,   237,   238,   240,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   203,   117,
    17,   200,   200,   200,    40,    41,   200,    14,   131,   258,
   201,   294,   259,   428,    21,   274,    40,    41,    35,    56,
    35,    14,    45,    14,   365,   276,   177,   179,   378,   131,
   409,   203,   200,   425,   316,    14,   280,    14,   281,   394,
    45,   255,    46,   453,   287,   213,   215,   293,   282,   214,
   285,   485,   123,    28,   328,   189,   156,   484,   483,   406,
   225,   408,   405,    78,   301,   219,    87,   224,   129,   356,
   212,   170,    67,   404,    81,   402,   123,    70,   358,    24,
   403,   367,    11,    55,   376,   256,   257,   366,   283,   311,
   253,   211,    96,   401,   407,   381,    66,    58,   380,    22,
   450,   285,   412,   411,   438,   321,   413,   399,   397,   398,
   396,   395,   436,   414,   262,   262,   262,   339,   338,   272,
    92,   516,   335,   123,    50,   416,   448,   423,   510,    82,
   426,   183,   184,   185,   186,   187,   188,   189,   156,    80,
    95,    93,   200,   200,   481,   435,    72,    84,   200,   368,
   200,   200,   200,   200,    94,   467,   290,   105,   449,   457,
   455,   434,    36,   451,   507,   480,   454,   517,   300,    31,
   491,   478,   456,   464,   302,   444,    63,    27,    54,    49,
   470,   121,   104,   474,   251,   128,   127,   475,   262,    32,
   174,   107,   319,   382,   262,   469,   318,   181,   371,   421,
   422,   357,   494,   345,   374,   470,   427,   499,   503,   200,
   496,   320,   476,   355,   429,   430,   431,   432,   508,   362,
   469,   497,   361,   501,   288,   200,   342,   263,   264,   513,
   200,   333,   515,   200,   290,   312,   137,   136,   518,   519,
   317,   313,   229,   156,   138,   141,   139,   325,   135,   299,
   110,   144,    35,   145,    38,    14,    37,   185,   186,   187,
   188,   189,   156,   148,   271,   222,   277,   223,   167,   169,
   488,    33,    34,   120,    69,   400,    59,   137,   136,   152,
   330,   267,   295,   504,   156,   138,   141,   139,   217,   135,
   509,   273,   144,    35,   145,    38,    14,    37,   278,   116,
   308,    98,   512,   157,   148,   108,    65,    23,    18,    10,
     8,   153,    33,    34,   239,     9,     5,     2,   326,   334,
   152,   265,   113,   112,    39,   161,   159,   465,    75,   442,
   192,   191,   193,   190,   199,   198,   197,   195,   196,   194,
   183,   184,   185,   186,   187,   188,   189,   156,   132,   134,
   392,   385,   153,   332,   463,    64,   133,   452,   471,   441,
   415,   384,    57,   387,   386,    39,   369,   393,   424,   391,
   472,   171,   458,   390,   487,   389,   446,   489,   477,   388,
    73,    42,    86,   471,   498,   500,   502,   192,   191,   193,
   190,   199,   198,   197,   195,   196,   194,   183,   184,   185,
   186,   187,   188,   189,   156,    89,   359,   383,   340,   218,
   343,   349,   377,   363,   350,   348,   337,   322,   514,   192,
   191,   193,   190,   199,   198,   197,   195,   196,   194,   183,
   184,   185,   186,   187,   188,   189,   156,   192,   191,   193,
   190,   199,   198,   197,   195,   196,   194,   183,   184,   185,
   186,   187,   188,   189,   156,   192,   191,   193,   190,   199,
   198,   197,   195,   196,   194,   183,   184,   185,   186,   187,
   188,   189,   156,   315,   269,   433,   440,   171,   279,   190,
   199,   198,   197,   195,   196,   194,   183,   184,   185,   186,
   187,   188,   189,   156,   254,   220,   511,   192,   191,   193,
   190,   199,   198,   197,   195,   196,   194,   183,   184,   185,
   186,   187,   188,   189,   156,   165,   275,   118,   297,   191,
   193,   190,   199,   198,   197,   195,   196,   194,   183,   184,
   185,   186,   187,   188,   189,   156,   101,   305,   193,   190,
   199,   198,   197,   195,   196,   194,   183,   184,   185,   186,
   187,   188,   189,   156,   199,   198,   197,   195,   196,   194,
   183,   184,   185,   186,   187,   188,   189,   156,    51,   314,
   216,    77,    30,    12,     3,     1 };
yytabelem yypact[]={

 -1000, -1000,  -260,  -173, -1000, -1000, -1000, -1000,     0,  -149,
   -11, -1000, -1000,   -35, -1000,     7,     0, -1000,  -152, -1000,
  -122, -1000, -1000,   -51, -1000, -1000, -1000, -1000, -1000, -1000,
 -1000, -1000, -1000, -1000, -1000, -1000,    37, -1000, -1000, -1000,
 -1000, -1000,  -288, -1000,  -152, -1000, -1000,  -267,  -261,    12,
 -1000, -1000,   -11, -1000,  -124, -1000, -1000, -1000,   -74,     7,
 -1000, -1000,    12,  -144,  -270,  -258,   -74, -1000,  -119,     7,
   -11,  -125, -1000, -1000,     7,  -178, -1000,  -258, -1000,  -119,
 -1000, -1000, -1000,  -118,   -11, -1000,  -271, -1000,  -131, -1000,
  -125, -1000, -1000, -1000, -1000, -1000,  -232, -1000,     0, -1000,
 -1000,  -227, -1000, -1000,  -165, -1000, -1000,   289, -1000,   -65,
 -1000, -1000, -1000, -1000,  -261,  -261,  -107, -1000,  -321,   -11,
  -232,  -129, -1000,  -125,     7,    28,  -137, -1000,   289,   -11,
   519,    -2, -1000, -1000, -1000,   289,   289,   289,   289,   289,
   289, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
 -1000, -1000,    46,    50,    47, -1000, -1000, -1000,  -232, -1000,
 -1000, -1000, -1000, -1000,     0,  -294, -1000,  -119, -1000,   -53,
 -1000,  -145, -1000,  -165, -1000,  -125, -1000, -1000,    19, -1000,
 -1000,   -11, -1000,   289,   289,   289,   289,   289,   289,   289,
   248,  -196,   289,   289,   289,   289,   289,   289,   289,   289,
   289, -1000, -1000,   -94,   477,    31, -1000, -1000, -1000, -1000,
 -1000,    41,   289,     0,     0,     0, -1000,  -250, -1000, -1000,
  -310, -1000,  -232,  -119,   -11,    23,  -232,  -232, -1000, -1000,
 -1000,   267,   267,    61,    61,    61,    61,    61,   572,   289,
   558,   289,   540,   498,   143,   143,   143,   143,   143,   143,
 -1000,   289, -1000,  -246,    45,     0,   -90,   -63,   519, -1000,
 -1000,    48,    31, -1000, -1000,   -64, -1000,  -232, -1000,  -188,
 -1000,  -232,   -65,   -11, -1000, -1000, -1000,  -232, -1000, -1000,
   572,   558,   519,   -75, -1000,   519,  -234,     0,   -96,   -67,
 -1000, -1000,   289,     0, -1000,    34,  -250, -1000, -1000,  -232,
   -65, -1000,   -65, -1000,  -246, -1000, -1000, -1000, -1000, -1000,
     0,   519,    48, -1000,   -11,   -36,  -101, -1000,   -65, -1000,
 -1000, -1000,  -278,  -165, -1000, -1000, -1000, -1000, -1000,  -102,
  -183, -1000, -1000,     0, -1000, -1000, -1000, -1000,  -298,   -67,
  -284,  -166,   -37,  -262, -1000, -1000, -1000,  -165,  -220, -1000,
 -1000, -1000, -1000, -1000,    18, -1000, -1000, -1000,   -11,  -306,
  -313, -1000, -1000,    27, -1000, -1000, -1000, -1000, -1000,  -189,
 -1000, -1000, -1000, -1000,    30,   -33, -1000, -1000,    18, -1000,
 -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
 -1000, -1000, -1000, -1000,  -165,    47, -1000, -1000, -1000, -1000,
  -114,  -120,   289,   289, -1000,    33, -1000, -1000,    46,   289,
 -1000, -1000, -1000, -1000,   -33,     4, -1000,   289,   289,   289,
   289,   409,   519, -1000, -1000,  -104,  -190,   459,  -243,   519,
   519,   519,   519, -1000,  -333, -1000, -1000, -1000,    18, -1000,
    45,    44, -1000, -1000, -1000, -1000,  -333, -1000,  -275,  -193,
   -95, -1000, -1000,     0, -1000,  -167, -1000,    16,  -331, -1000,
 -1000, -1000,    18,    31, -1000,  -203, -1000,   -69, -1000,    81,
    80,    74,  -329,   289, -1000, -1000, -1000,  -171,  -174, -1000,
 -1000,  -319,    16,    28,    14,    16,   289,   -61,   519,  -205,
 -1000,  -174, -1000,   289, -1000, -1000, -1000, -1000, -1000, -1000,
 -1000, -1000, -1000, -1000,   441,   289, -1000, -1000, -1000,   352,
 -1000, -1000,   519, -1000, -1000, -1000, -1000, -1000,  -215, -1000,
 -1000 };
yytabelem yypgo[]={

     0,   855,   854,   853,   362,   180,   359,    71,   126,     2,
    17,   852,   118,     4,   138,    67,   343,   851,   354,   850,
   849,   848,   357,   816,   797,   347,   796,   795,   775,   754,
   753,   697,   696,   695,   694,   693,   692,   691,   690,   688,
   687,   686,   348,    10,   685,   346,   662,   661,   363,   660,
   659,   658,     6,   657,   656,   655,   653,   652,   650,   649,
   648,   647,   646,   644,   643,   642,   352,   641,   640,   639,
   637,    76,   167,   636,     7,   635,   351,   633,   631,   630,
     3,    16,    15,    14,    13,   629,   292,    28,   628,   340,
   227,   221,   608,     0,    12,   607,   111,     8,   606,   605,
   223,   530,   603,   602,   601,   599,   598,   597,   596,   595,
   590,   589,    70,   588,   587,   586,   585,   583,   581,   579,
   568,   562,   561,   560,   556,   554,   553,   549,   548,   547,
   546,   176,   545,   544,   529,   527,    11,   511,    63,   506,
   504,   502,     1,   499,   493,   484,     9,   483,   481,   478,
   473,   471,   466,   465,   464,   462,   461,   459,   458,   456,
   455,   453,   451,   450,   447,   445,   444,   441,     5,   440,
   439,   435,   424,   408,   407,   406,   401,   400,   392,   384,
   380,   378,   377,   376,   372,   371,   370,   368,   366,   365,
   350 };
yytabelem yyr1[]={

     0,   107,   109,     1,    97,     2,   110,     2,     2,   111,
   111,   113,     4,     3,     3,   114,   114,     6,     6,   108,
   108,   108,    15,    15,    75,   115,    75,    17,    17,   116,
    16,    18,    18,    89,   118,    89,   119,   119,   117,   117,
   112,   112,   120,   121,    19,   104,   104,   100,   122,   122,
   101,   101,   101,   102,   103,    98,    99,    20,   106,   123,
   106,   105,   105,   105,    21,   124,    21,    21,   125,   125,
    22,    22,    22,    46,    46,    23,    23,   126,    23,   127,
   127,    76,    24,   128,    24,    24,   129,   129,    25,    26,
   130,    26,   131,   131,    27,    27,   132,    27,    28,    28,
   133,    28,    29,    29,   134,    29,    30,    30,   135,    30,
   136,   136,   137,   139,    77,   138,   138,   140,   140,    31,
    31,    32,    33,    33,    33,    34,    35,    36,    36,   141,
    37,   143,    37,    38,   144,    38,   142,   142,   146,   146,
   145,   145,    40,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    39,   147,    39,   148,    39,    41,   149,    41,
   150,    41,   151,    80,   152,   152,   153,   153,    42,   154,
    42,    42,    43,    43,    43,    43,    43,    43,    43,    43,
    44,    44,    45,   155,    45,   156,   156,    47,   157,    47,
   158,   158,   158,   159,    48,    49,    49,   160,   161,    50,
    51,   162,    51,   163,   163,   164,    52,    95,   165,    95,
    53,   166,    53,   167,   169,    55,   168,   168,   170,   172,
   173,    54,   171,   171,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,   174,   175,   176,    56,    57,    57,
    92,   177,    92,    58,    58,    58,   178,    59,    60,    60,
   179,    60,   180,   180,    61,    62,   181,    62,    63,    63,
    64,    64,    65,   182,    65,   183,   183,    66,   184,    66,
    66,    67,    68,    68,    69,    69,    70,    70,    78,    78,
    78,    78,    78,    79,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,   185,    71,    72,    72,    72,    72,    93,
    85,    85,    85,    85,    85,    85,    85,    83,    82,    84,
    94,    86,    86,    90,    90,    81,    91,    87,    87,   186,
    87,   187,   187,   188,   188,   189,   189,     5,     7,     7,
     7,     7,     7,     7,    88,    88,    88,    88,    88,    88,
     8,     8,     9,    10,    96,    96,    96,    11,    12,    14,
    14,    13,   190,    73 };
yytabelem yyr2[]={

     0,     1,     1,    27,     3,     1,     1,     7,     3,     3,
     7,     1,     7,     1,     5,     3,     7,     3,     3,     1,
     3,     3,     1,     5,     1,     1,     5,     3,     5,     1,
     9,     1,     3,     5,     1,     9,     3,     7,     0,     5,
     2,     0,     1,     1,    11,     3,     7,     5,     1,     3,
     3,     3,     3,     5,     5,     3,     3,     7,     1,     1,
     7,     3,     3,     3,     1,     1,     7,     5,     5,     7,
     5,     7,    17,     1,     3,     1,     3,     1,     7,     3,
     7,     7,     1,     1,     7,     5,     5,     7,     5,     3,
     1,     5,     3,     7,     1,     3,     1,     7,     1,     3,
     1,     7,     1,     3,     1,     7,     1,     5,     1,     9,
     0,     5,     1,     1,    13,     3,     7,     0,     2,     1,
     5,    15,     3,     3,     3,     7,     3,     1,     5,     1,
     7,     1,     7,     1,     1,     7,     7,     2,     4,     0,
     7,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     1,     7,     1,     9,     1,     1,     7,
     1,     9,     1,     5,     0,     2,     5,     7,     3,     1,
     9,     5,     3,     5,     5,     7,     5,     5,     5,     5,
     3,     5,     5,     1,     9,     3,     7,     1,     1,     9,
     0,     3,     7,     1,     7,     1,     5,     1,     1,    19,
     1,     1,     5,     3,     5,     1,    11,     1,     1,     7,
     1,     1,     7,     1,     1,    15,     0,     5,     1,     1,
     1,    15,     3,     7,     3,     3,     3,     7,     7,     7,
     7,     7,     7,     7,     1,     1,     1,    25,     1,     5,
     1,     1,     7,     1,     9,     5,     1,    11,     1,     5,
     1,     9,     3,     7,     3,     1,     1,     7,     7,     7,
     7,     7,     1,     1,     5,     3,     5,     3,     1,     9,
     5,    11,     1,     3,     3,     3,     1,     7,     3,     3,
     3,     3,     3,     7,     3,     3,     3,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     9,     7,     9,     7,
     7,     7,     7,     7,     7,     7,     7,     7,     5,     5,
     5,     5,     5,     1,    11,     3,     5,     5,     5,     3,
     3,     3,     3,     3,     3,     3,     3,     7,     7,     7,
    11,     3,     3,     7,     7,     5,     5,     1,     5,     1,
     9,     3,     7,     3,     7,     0,     2,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     5,     1,     3,     3,     5,     3,     3,
     3,     3,     1,     9 };
yytabelem yychk[]={

 -1000,    -1,  -107,    -2,   326,  -108,   313,   319,  -110,  -109,
  -111,    -4,    -3,    -5,   287,   310,  -112,   291,  -113,   292,
   -97,   287,    -4,  -114,    -6,    -5,    -7,    -8,    -9,   -10,
   -11,   -12,   -14,   303,   304,   284,   -96,   288,   286,   356,
   268,   269,   -47,   300,   293,   283,   285,   -15,   336,  -157,
    -6,   -21,   329,   -14,  -158,   -48,   287,   -65,  -182,  -124,
  -112,   301,   293,  -159,   -75,  -115,  -183,   -66,   294,  -125,
   -22,   -97,   -48,   -49,   302,   -92,   331,   -17,   -16,   322,
   -66,   -18,   -89,   298,   -22,  -112,   -46,   -45,   300,   -44,
   -97,   317,  -177,   -16,   -18,   -89,  -184,   299,  -118,  -112,
   317,   -23,   340,   301,  -155,   -45,   -80,  -151,  -116,  -131,
  -101,   -97,  -102,  -103,   328,   338,  -119,    -5,   -24,   320,
  -126,  -156,   -43,   -97,   319,   290,   333,  -152,  -153,   -42,
   -71,    -5,   -88,   -73,   -85,   280,   269,   268,   276,   278,
   -93,   277,    -8,    -9,   283,   285,   -12,   -14,   295,   -83,
   -82,   -84,   311,   343,   -81,   -94,   275,  -117,   293,   -98,
   -14,   -99,   -14,   299,   293,   -27,   347,  -128,  -112,  -127,
   -76,  -101,   301,   293,   -45,   -97,   -10,    -5,   -96,    -5,
   311,   -42,  -112,   268,   269,   270,   271,   272,   273,   274,
   261,   259,   258,   260,   267,   265,   266,   264,   263,   262,
   -93,   292,   -87,   280,   -71,    -5,   -71,   -71,   -71,   -71,
   -71,  -185,  -190,   279,   279,   279,   -19,  -120,  -101,    -5,
   -28,   339,  -132,  -129,   -25,   -89,   293,   307,   -43,   -45,
  -112,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   346,
   -71,   315,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,
   -71,  -154,   297,  -186,   297,   280,  -189,  -188,   -71,   -86,
   -90,   -91,    -5,   -86,   -86,  -104,  -100,  -122,   324,   -29,
   345,  -133,  -131,   -25,  -112,   -26,   282,  -130,   -76,  -101,
   -71,   -71,   -71,  -187,   -72,   -71,   306,   279,  -140,  -138,
    -5,   296,   293,   279,   -87,  -121,   293,  -101,   317,  -134,
  -131,  -112,  -131,   297,   293,  -101,   311,   343,   -86,   297,
   293,   -71,   -91,   -90,   -20,   -30,   280,  -100,  -131,   -72,
    -5,  -112,   -31,   292,   297,  -135,  -106,   332,   -43,  -136,
  -123,   297,   -77,  -137,  -105,    -7,   348,   -32,   -15,  -138,
   -39,   341,  -139,   -38,   334,  -147,   315,   292,   -33,   -37,
   -34,   313,   314,   337,   321,  -144,   -80,  -148,   -43,   -41,
   318,  -141,  -143,   -35,   -13,   286,  -136,   -80,  -112,   -62,
   342,  -149,   346,  -142,  -145,  -146,  -142,   -36,   281,   317,
  -181,   -80,  -150,   -40,   -67,   -78,   -63,   -64,   -50,   -55,
   -56,   -59,   -79,   -61,   289,   -81,   -82,   -84,   -83,   -94,
    -5,   343,   325,   330,   323,   312,   309,   344,   311,   280,
   291,   -13,  -142,   -80,  -146,   -68,   -43,   308,   305,   308,
   305,   -71,   -71,  -174,   -60,   280,   -80,   -71,   289,   -71,
   -71,   -71,   -71,   346,  -167,  -142,  -178,   297,  -179,   317,
   297,   -69,    -5,   343,  -160,  -168,   -54,   351,  -175,  -142,
  -180,   -13,   -70,   279,  -142,  -169,  -168,  -170,   -57,   331,
   317,   297,   293,    -5,  -161,   -95,   315,  -171,   -74,   -10,
    -9,    -5,   -58,   350,   -80,   -13,   -87,   -51,  -162,   317,
  -165,  -172,   293,   257,   257,   257,   349,    -5,   -71,   -53,
   315,  -163,   -52,   316,  -142,   346,   -74,   -10,    -5,    -9,
    -5,   -10,    -5,    -9,   -71,   292,   317,  -166,   -52,   -71,
  -173,   335,   -71,  -142,   346,  -142,  -176,  -164,  -142,  -142,
   317 };
yytabelem yydef[]={

     1,    -2,     5,    19,    -2,     2,    20,    21,    13,     0,
    -2,     9,    11,     0,   347,     0,    13,    40,   364,    14,
   187,     4,    10,    12,    15,    17,    18,   348,   349,   350,
   351,   352,   353,   360,   361,   362,     0,   368,   369,   370,
   365,   366,    22,   188,   364,   363,   367,    64,     0,   190,
    16,    -2,    -2,    23,     0,   191,   193,    -2,     0,     0,
    67,   189,     0,   195,   240,     0,   264,   265,    -2,    66,
    41,    73,   192,   194,     0,     0,   241,    26,    27,    31,
   266,   268,    -2,    34,    41,    68,    -2,    74,   183,   196,
   180,     3,   162,    28,    29,    32,     0,    33,     0,    69,
    71,    82,    -2,   182,     0,   181,   242,   164,    38,   269,
    92,    50,    51,    52,     0,     0,     0,    36,    94,    -2,
     0,     0,   185,   172,     0,   364,     0,   163,   165,    41,
   168,   337,   284,   285,   286,     0,     0,     0,     0,     0,
     0,   313,   354,   355,   356,   357,   358,   359,   372,   320,
   321,   322,   323,   324,   325,   326,   319,    -2,     0,    53,
    55,    54,    56,    35,     0,    98,    -2,     0,    85,    78,
    79,     0,   184,     0,   173,   174,   176,   177,     0,   178,
   179,    41,   166,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    -2,   335,   339,     0,   337,   308,   309,   310,   311,
   312,     0,   345,     0,     0,     0,    39,    48,    93,    37,
   102,    -2,     0,    84,    41,    90,     0,     0,   186,   175,
   167,   288,   289,   290,   291,   292,   293,   294,   295,     0,
   297,     0,   299,   300,   301,   302,   303,   304,   305,   306,
   307,     0,   338,     0,   287,   117,     0,   346,   343,   327,
   331,   332,   337,   328,   329,    43,    45,     0,    49,     0,
    -2,     0,    97,    41,    86,    88,    89,     0,    80,    81,
   296,   298,   170,     0,   341,   315,     0,     0,     0,   118,
   115,   373,     0,     0,   336,   106,    48,    47,    72,     0,
   101,    87,    91,   340,     0,   316,   317,   318,   330,   314,
     0,   344,   333,   334,    41,   119,   108,    46,   105,   342,
   116,    44,    58,     0,   107,   110,    57,    59,   120,   112,
    -2,   109,   111,     0,    60,    61,    62,    63,   152,   113,
   133,   153,     0,     0,   134,   162,   155,     0,   157,   122,
   123,   124,   129,   131,     0,   110,   154,   162,    41,   255,
   158,   139,   139,   127,   126,   371,    -2,   156,   114,     0,
   256,   162,   160,   130,     0,    -2,   132,   125,     0,   121,
   139,   159,   162,   139,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   272,   278,   279,   280,   281,   282,
   337,     0,     0,     0,   234,   248,   162,   254,     0,     0,
   138,   128,   257,   161,    -2,     0,   273,     0,     0,     0,
     0,     0,   213,   139,   246,   250,     0,     0,     0,   258,
   260,   259,   261,   197,   216,   235,   139,   249,     0,   283,
     0,   276,   274,   275,   139,   214,   216,   218,   238,     0,
     0,   252,   271,     0,   198,   207,   217,   364,   243,   162,
   247,   251,     0,   337,    -2,     0,   208,   219,   222,   224,
   225,   226,     0,     0,   239,   253,   277,   210,     0,   215,
   139,     0,   364,   364,     0,   364,     0,   337,   245,     0,
   211,   202,   203,     0,   209,   220,   223,   227,   228,   231,
   233,   229,   230,   232,     0,     0,   199,   139,   204,     0,
   139,   236,   244,   212,   205,   221,   139,   139,     0,   206,
   237 };
typedef struct { char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"TE_DOTDOT",	257,
	"TE_IMPLIES",	258,
	"TE_OR",	259,
	"TE_XOR",	260,
	"TE_AND",	261,
	"TE_NE",	262,
	"TE_EQ",	263,
	"TE_LT",	264,
	"TE_GT",	265,
	"TE_LE",	266,
	"TE_GE",	267,
	"TE_PLUS",	268,
	"TE_MINUS",	269,
	"TE_STAR",	270,
	"TE_SLASH",	271,
	"TE_MOD",	272,
	"TE_DIV",	273,
	"TE_POWER",	274,
	"TE_FREE",	275,
	"TE_NOT",	276,
	"TE_STRIP",	277,
	"TE_OLD",	278,
	"TE_DOT",	279,
	"TE_LPARAN",	280,
	"TE_ALIAS",	281,
	"TE_ALL",	282,
	"TE_INTEGER",	283,
	"TE_CHAR",	284,
	"TE_REAL",	285,
	"TE_STRING",	286,
	"TE_ID",	287,
	"TE_A_BIT",	288,
	"TE_BANG",	289,
	"TE_BIT",	290,
	"TE_SEMICOLON",	291,
	"TE_COLON",	292,
	"TE_COMMA",	293,
	"TE_CREATION",	294,
	"TE_LARRAY",	295,
	"TE_RARRAY",	296,
	"TE_RPARAN",	297,
	"TE_LCURLY",	298,
	"TE_RCURLY",	299,
	"TE_LSQURE",	300,
	"TE_RSQURE",	301,
	"TE_CONSTRAIN",	302,
	"TE_FALSE",	303,
	"TE_TRUE",	304,
	"TE_ACCEPT",	305,
	"TE_ADDRESS",	306,
	"TE_AS",	307,
	"TE_ASSIGN",	308,
	"TE_CHECK",	309,
	"TE_CLASS",	310,
	"TE_CURRENT",	311,
	"TE_DEBUG",	312,
	"TE_DEFERRED",	313,
	"TE_DO",	314,
	"TE_ELSE",	315,
	"TE_ELSEIF",	316,
	"TE_END",	317,
	"TE_ENSURE",	318,
	"TE_EXPANDED",	319,
	"TE_EXPORT",	320,
	"TE_EXTERNAL",	321,
	"TE_FEATURE",	322,
	"TE_FROM",	323,
	"TE_FROZEN",	324,
	"TE_IF",	325,
	"TE_INDEXING",	326,
	"TE_IN_END",	327,
	"TE_INFIX",	328,
	"TE_INHERIT",	329,
	"TE_INSPECT",	330,
	"TE_INVARIANT",	331,
	"TE_IS",	332,
	"TE_LIKE",	333,
	"TE_LOCAL",	334,
	"TE_LOOP",	335,
	"TE_OBSOLETE",	336,
	"TE_ONCE",	337,
	"TE_PREFIX",	338,
	"TE_REDEFINE",	339,
	"TE_RENAME",	340,
	"TE_REQUIRE",	341,
	"TE_RESCUE",	342,
	"TE_RESULT",	343,
	"TE_RETRY",	344,
	"TE_SELECT",	345,
	"TE_THEN",	346,
	"TE_UNDEFINE",	347,
	"TE_UNIQUE",	348,
	"TE_UNTIL",	349,
	"TE_VARIANT",	350,
	"TE_WHEN",	351,
	"EIF_ERROR2",	352,
	"EIF_ERROR3",	353,
	"EIF_ERROR4",	354,
	"EIF_ERROR5",	355,
	"EIF_ERROR6",	356,
	"EIF_ERROR7",	357,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"Class_declaration : /* empty */",
	"Class_declaration : Indexing Header_mark",
	"Class_declaration : Indexing Header_mark TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
	"Pushing_id : TE_ID",
	"Indexing : /* empty */",
	"Indexing : TE_INDEXING",
	"Indexing : TE_INDEXING Index_list",
	"Indexing : TE_INDEXING",
	"Index_list : Index_clause",
	"Index_list : Index_list ASemi Index_clause",
	"Index_clause : Index",
	"Index_clause : Index Index_terms",
	"Index : /* empty */",
	"Index : Identifier TE_COLON",
	"Index_terms : Index_value",
	"Index_terms : Index_terms TE_COMMA Index_value",
	"Index_value : Identifier",
	"Index_value : Manifest_constant",
	"Header_mark : /* empty */",
	"Header_mark : TE_DEFERRED",
	"Header_mark : TE_EXPANDED",
	"Obsolete : /* empty */",
	"Obsolete : TE_OBSOLETE Manifest_string",
	"Features : /* empty */",
	"Features : /* empty */",
	"Features : Feature_clause_list",
	"Feature_clause_list : Feature_clause",
	"Feature_clause_list : Feature_clause_list Feature_clause",
	"Feature_clause : TE_FEATURE Clients",
	"Feature_clause : TE_FEATURE Clients Feature_declaration_list",
	"Clients : /* empty */",
	"Clients : Client_list",
	"Client_list : TE_LCURLY TE_RCURLY",
	"Client_list : TE_LCURLY",
	"Client_list : TE_LCURLY Class_list TE_RCURLY",
	"Class_list : Identifier",
	"Class_list : Class_list TE_COMMA Identifier",
	"Feature_declaration_list : /* empty */",
	"Feature_declaration_list : Feature_declaration_list Feature_declaration",
	"ASemi : TE_SEMICOLON",
	"ASemi : /* empty */",
	"Feature_declaration : /* empty */",
	"Feature_declaration : New_feature_list",
	"Feature_declaration : New_feature_list Declaration_body ASemi",
	"New_feature_list : New_feature",
	"New_feature_list : New_feature_list TE_COMMA New_feature",
	"New_feature : Feature_name_mark Feature_name",
	"Feature_name_mark : /* empty */",
	"Feature_name_mark : TE_FROZEN",
	"Feature_name : Pushing_id",
	"Feature_name : Infix",
	"Feature_name : Prefix",
	"Infix : TE_INFIX Infix_operator",
	"Prefix : TE_PREFIX Prefix_operator",
	"Infix_operator : Manifest_string",
	"Prefix_operator : Manifest_string",
	"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
	"Constant_or_routine : /* empty */",
	"Constant_or_routine : TE_IS",
	"Constant_or_routine : TE_IS Feature_value",
	"Feature_value : Manifest_constant",
	"Feature_value : TE_UNIQUE",
	"Feature_value : Routine",
	"Inheritance : /* empty */",
	"Inheritance : TE_INHERIT",
	"Inheritance : TE_INHERIT Parent_list",
	"Inheritance : TE_INHERIT ASemi",
	"Parent_list : Parent ASemi",
	"Parent_list : Parent_list Parent ASemi",
	"Parent : Pushing_id Actual_generics",
	"Parent : Pushing_id Actual_generics TE_END",
	"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
	"Actual_generics : /* empty */",
	"Actual_generics : Existing_generics",
	"Rename : /* empty */",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME Rename_list",
	"Rename_list : Rename_pair",
	"Rename_list : Rename_list TE_COMMA Rename_pair",
	"Rename_pair : Feature_name TE_AS Feature_name",
	"New_exports : /* empty */",
	"New_exports : TE_EXPORT",
	"New_exports : TE_EXPORT New_export_list",
	"New_exports : TE_EXPORT ASemi",
	"New_export_list : New_export_item ASemi",
	"New_export_list : New_export_list New_export_item ASemi",
	"New_export_item : Client_list Feature_set",
	"Feature_set : TE_ALL",
	"Feature_set : /* empty */",
	"Feature_set : Feature_list",
	"Feature_list : Feature_name",
	"Feature_list : Feature_list TE_COMMA Feature_name",
	"Undefine : /* empty */",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE Feature_list",
	"Redefine : /* empty */",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE Feature_list",
	"Select : /* empty */",
	"Select : TE_SELECT",
	"Select : TE_SELECT",
	"Select : TE_SELECT Feature_list",
	"Formal_arguments : /* empty */",
	"Formal_arguments : TE_LPARAN TE_RPARAN",
	"Formal_arguments : TE_LPARAN",
	"Formal_arguments : TE_LPARAN Entity_declaration_list TE_RPARAN",
	"Entity_declaration_list : /* empty */",
	"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
	"Entity_declaration_group : /* empty */",
	"Entity_declaration_group : Identifier_list",
	"Entity_declaration_group : Identifier_list TE_COLON Type ASemi",
	"Identifier_list : Identifier",
	"Identifier_list : Identifier_list TE_COMMA Identifier",
	"Strip_identifier_list : /* empty */",
	"Strip_identifier_list : Identifier_list",
	"Type_mark : /* empty */",
	"Type_mark : TE_COLON Type",
	"Routine : Obsolete Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
	"Routine_body : Internal",
	"Routine_body : External",
	"Routine_body : TE_DEFERRED",
	"External : TE_EXTERNAL External_language External_name",
	"External_language : Non_empty_string",
	"External_name : /* empty */",
	"External_name : TE_ALIAS Non_empty_string",
	"Internal : TE_DO",
	"Internal : TE_DO Compound",
	"Internal : TE_ONCE",
	"Internal : TE_ONCE Compound",
	"Local_declarations : /* empty */",
	"Local_declarations : TE_LOCAL",
	"Local_declarations : TE_LOCAL Entity_declaration_list",
	"Compound : Instructionl Instruction1 Opt_Semi",
	"Compound : Opt_Semi",
	"Opt_Semi : Opt_Semi TE_SEMICOLON",
	"Opt_Semi : /* empty */",
	"Instructionl : Instructionl Instruction1 Opt_Semi",
	"Instructionl : Opt_Semi",
	"Instruction1 : Creation",
	"Instruction1 : Call",
	"Instruction1 : Assignment",
	"Instruction1 : Reverse_assignment",
	"Instruction1 : Conditional",
	"Instruction1 : Multi_branch",
	"Instruction1 : Loop",
	"Instruction1 : Debug",
	"Instruction1 : Check",
	"Instruction1 : Retry",
	"Precondition : /* empty */",
	"Precondition : TE_REQUIRE",
	"Precondition : TE_REQUIRE Assertion",
	"Precondition : TE_REQUIRE TE_ELSE",
	"Precondition : TE_REQUIRE TE_ELSE Assertion",
	"Postcondition : /* empty */",
	"Postcondition : TE_ENSURE",
	"Postcondition : TE_ENSURE Assertion",
	"Postcondition : TE_ENSURE TE_THEN",
	"Postcondition : TE_ENSURE TE_THEN Assertion",
	"Assertion : /* empty */",
	"Assertion : Assertion_list",
	"Assertion_list : /* empty */",
	"Assertion_list : Assertion_list_non_empty",
	"Assertion_list_non_empty : Assertion_clause ASemi",
	"Assertion_list_non_empty : Assertion_list_non_empty Assertion_clause ASemi",
	"Assertion_clause : Expression",
	"Assertion_clause : Identifier TE_COLON",
	"Assertion_clause : Identifier TE_COLON Expression",
	"Assertion_clause : Identifier TE_COLON",
	"Type : Pushing_id",
	"Type : Pushing_id Existing_generics",
	"Type : TE_EXPANDED Pushing_id",
	"Type : TE_EXPANDED Pushing_id Existing_generics",
	"Type : TE_BIT Integer_constant",
	"Type : TE_BIT Identifier",
	"Type : TE_LIKE Identifier",
	"Type : TE_LIKE TE_CURRENT",
	"Class_type : Pushing_id",
	"Class_type : Pushing_id Existing_generics",
	"Existing_generics : TE_LSQURE TE_RSQURE",
	"Existing_generics : TE_LSQURE",
	"Existing_generics : TE_LSQURE Type_list TE_RSQURE",
	"Type_list : Type",
	"Type_list : Type_list TE_COMMA Type",
	"Formal_generics : /* empty */",
	"Formal_generics : TE_LSQURE",
	"Formal_generics : TE_LSQURE Formal_generic_list TE_RSQURE",
	"Formal_generic_list : /* empty */",
	"Formal_generic_list : Formal_generic",
	"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
	"Formal_generic : TE_ID",
	"Formal_generic : TE_ID Constraint",
	"Constraint : /* empty */",
	"Constraint : TE_CONSTRAIN Class_type",
	"Conditional : TE_IF Expression TE_THEN",
	"Conditional : TE_IF Expression TE_THEN Compound",
	"Conditional : TE_IF Expression TE_THEN Compound Elsif Else_part TE_END",
	"Elsif : /* empty */",
	"Elsif : /* empty */",
	"Elsif : Elsif_list",
	"Elsif_list : Elsif_part",
	"Elsif_list : Elsif_list Elsif_part",
	"Elsif_part : TE_ELSEIF Expression TE_THEN",
	"Elsif_part : TE_ELSEIF Expression TE_THEN Compound",
	"Inspect_default : /* empty */",
	"Inspect_default : TE_ELSE",
	"Inspect_default : TE_ELSE Compound",
	"Else_part : /* empty */",
	"Else_part : TE_ELSE",
	"Else_part : TE_ELSE Compound",
	"Multi_branch : TE_INSPECT Expression",
	"Multi_branch : TE_INSPECT Expression When_part_list",
	"Multi_branch : TE_INSPECT Expression When_part_list Inspect_default TE_END",
	"When_part_list : /* empty */",
	"When_part_list : When_part When_part_list",
	"When_part : TE_WHEN",
	"When_part : TE_WHEN Choices",
	"When_part : TE_WHEN Choices TE_THEN",
	"When_part : TE_WHEN Choices TE_THEN Compound",
	"Choices : Choice",
	"Choices : Choices TE_COMMA Choice",
	"Choice : Integer_constant",
	"Choice : Character_constant",
	"Choice : Identifier",
	"Choice : Integer_constant TE_DOTDOT Integer_constant",
	"Choice : Integer_constant TE_DOTDOT Identifier",
	"Choice : Identifier TE_DOTDOT Integer_constant",
	"Choice : Identifier TE_DOTDOT Identifier",
	"Choice : Character_constant TE_DOTDOT Character_constant",
	"Choice : Identifier TE_DOTDOT Character_constant",
	"Choice : Character_constant TE_DOTDOT Identifier",
	"Loop : TE_FROM",
	"Loop : TE_FROM Compound",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP Compound TE_END",
	"Invariant : /* empty */",
	"Invariant : TE_INVARIANT Assertion",
	"Class_invariant : /* empty */",
	"Class_invariant : TE_INVARIANT",
	"Class_invariant : TE_INVARIANT Assertion",
	"Variant : /* empty */",
	"Variant : TE_VARIANT Identifier TE_COLON Expression",
	"Variant : TE_VARIANT Expression",
	"Debug : TE_DEBUG Debug_keys",
	"Debug : TE_DEBUG Debug_keys Compound TE_END",
	"Debug_keys : /* empty */",
	"Debug_keys : TE_LPARAN TE_RPARAN",
	"Debug_keys : TE_LPARAN",
	"Debug_keys : TE_LPARAN Debug_key_list TE_RPARAN",
	"Debug_key_list : Non_empty_string",
	"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
	"Retry : TE_RETRY",
	"Rescue : /* empty */",
	"Rescue : TE_RESCUE",
	"Rescue : TE_RESCUE Compound",
	"Assignment : Identifier TE_ASSIGN Expression",
	"Assignment : TE_RESULT TE_ASSIGN Expression",
	"Reverse_assignment : Identifier TE_ACCEPT Expression",
	"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
	"Creators : /* empty */",
	"Creators : /* empty */",
	"Creators : Creation_clause_list",
	"Creation_clause_list : Creation_clause",
	"Creation_clause_list : Creation_clause_list Creation_clause",
	"Creation_clause : TE_CREATION",
	"Creation_clause : TE_CREATION Clients",
	"Creation_clause : TE_CREATION Clients Feature_list",
	"Creation_clause : TE_CREATION Client_list",
	"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
	"Creation_type : /* empty */",
	"Creation_type : Type",
	"Creation_target : Identifier",
	"Creation_target : TE_RESULT",
	"Creation_call : /* empty */",
	"Creation_call : TE_DOT Identifier Parameters",
	"Call : A_feature",
	"Call : Call_on_result",
	"Call : Call_on_feature",
	"Call : Call_on_current",
	"Call : Call_on_expression",
	"Check : TE_CHECK Assertion TE_END",
	"Expression : Expression_constant",
	"Expression : Manifest_array",
	"Expression : Feature_call",
	"Expression : TE_LPARAN Expression TE_RPARAN",
	"Expression : Expression TE_PLUS Expression",
	"Expression : Expression TE_MINUS Expression",
	"Expression : Expression TE_STAR Expression",
	"Expression : Expression TE_SLASH Expression",
	"Expression : Expression TE_MOD Expression",
	"Expression : Expression TE_DIV Expression",
	"Expression : Expression TE_POWER Expression",
	"Expression : Expression TE_AND Expression",
	"Expression : Expression TE_AND TE_THEN Expression",
	"Expression : Expression TE_OR Expression",
	"Expression : Expression TE_OR TE_ELSE Expression",
	"Expression : Expression TE_IMPLIES Expression",
	"Expression : Expression TE_XOR Expression",
	"Expression : Expression TE_GE Expression",
	"Expression : Expression TE_GT Expression",
	"Expression : Expression TE_LE Expression",
	"Expression : Expression TE_LT Expression",
	"Expression : Expression TE_EQ Expression",
	"Expression : Expression TE_NE Expression",
	"Expression : Expression Free_operator Expression",
	"Expression : TE_MINUS Expression",
	"Expression : TE_PLUS Expression",
	"Expression : TE_NOT Expression",
	"Expression : TE_OLD Expression",
	"Expression : Free_operator Expression",
	"Expression : TE_STRIP",
	"Expression : TE_STRIP TE_LPARAN Strip_identifier_list TE_RPARAN",
	"Actual_parameter : Expression",
	"Actual_parameter : TE_ADDRESS Feature_name",
	"Actual_parameter : TE_ADDRESS TE_CURRENT",
	"Actual_parameter : TE_ADDRESS TE_RESULT",
	"Free_operator : TE_FREE",
	"Feature_call : Call_on_current",
	"Feature_call : Call_on_result",
	"Feature_call : Call_on_feature",
	"Feature_call : TE_CURRENT",
	"Feature_call : TE_RESULT",
	"Feature_call : A_feature",
	"Feature_call : Call_on_expression",
	"Call_on_current : TE_CURRENT TE_DOT Remote_call",
	"Call_on_result : TE_RESULT TE_DOT Remote_call",
	"Call_on_feature : A_feature TE_DOT Remote_call",
	"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
	"Remote_call : Call_on_feature_access",
	"Remote_call : Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
	"A_feature : Identifier Parameters",
	"Feature_access : Identifier Parameters",
	"Parameters : /* empty */",
	"Parameters : TE_LPARAN TE_RPARAN",
	"Parameters : TE_LPARAN",
	"Parameters : TE_LPARAN Parameter_list TE_RPARAN",
	"Parameter_list : Actual_parameter",
	"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
	"Expression_list : Expression",
	"Expression_list : Expression_list TE_COMMA Expression",
	"Manifest_expression_list : /* empty */",
	"Manifest_expression_list : Expression_list",
	"Identifier : TE_ID",
	"Manifest_constant : Boolean_constant",
	"Manifest_constant : Character_constant",
	"Manifest_constant : Integer_constant",
	"Manifest_constant : Real_constant",
	"Manifest_constant : Bit_constant",
	"Manifest_constant : Manifest_string",
	"Expression_constant : Boolean_constant",
	"Expression_constant : Character_constant",
	"Expression_constant : TE_INTEGER",
	"Expression_constant : TE_REAL",
	"Expression_constant : Bit_constant",
	"Expression_constant : Manifest_string",
	"Boolean_constant : TE_FALSE",
	"Boolean_constant : TE_TRUE",
	"Character_constant : TE_CHAR",
	"Integer_constant : Sign TE_INTEGER",
	"Sign : /* empty */",
	"Sign : TE_PLUS",
	"Sign : TE_MINUS",
	"Real_constant : Sign TE_REAL",
	"Bit_constant : TE_A_BIT",
	"Manifest_string : TE_STRING",
	"Manifest_string : EIF_ERROR6",
	"Non_empty_string : TE_STRING",
	"Manifest_array : TE_LARRAY",
	"Manifest_array : TE_LARRAY Manifest_expression_list TE_RARRAY",
};
#endif /* YYDEBUG */
/*
 *	@(#) yaccpar 1.4 88/11/11 
 *
 *	      UNIX is a registered trademark of AT&T
 *		Portions Copyright 1976-1989 AT&T
 *	Portions Copyright 1980-1989 Microsoft Corporation
 *   Portions Copyright 1983-1989 The Santa Cruz Operation, Inc
 *		      All Rights Reserved
 */
#ident	"@(#)yacc:yaccpar	1.10"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-1000)

/*
** global variables used by the parser
*/
YYSTYPE yyv[ YYMAXDEPTH ];	/* value stack */
int yys[ YYMAXDEPTH ];		/* state stack */

YYSTYPE *yypv;			/* top of value stack */
int *yyps;			/* top of state stack */

int yystate;			/* current state */
int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */
int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */



/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
int
yyparse()
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

	goto yystack;
	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ YYMAXDEPTH ] )	/* room on stack? */
		{
			yyerror( "yacc stack overflow" );
			YYABORT;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			printf( "Received token " );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				printf( "Received token " );
				if ( yychar == 0 )
					printf( "end-of-file\n" );
				else if ( yychar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
				yynerrs++;
			skip_init:
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					printf( "Error recovery discards " );
					if ( yychar == 0 )
						printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 185 "parser.y"
{pos_stack_init();} break;
case 2:
# line 186 "parser.y"
{click_list_init();} break;
case 3:
# line 188 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yypvt[-7].value),deferred,expanded,yypvt[-11].node,yypvt[-6].node,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node,click_list_new());
		} break;
case 4:
# line 196 "parser.y"
{
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		} break;
case 5:
# line 207 "parser.y"
{yyval.node = NULL;} break;
case 6:
# line 208 "parser.y"
{list_init();} break;
case 7:
# line 209 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 8:
# line 211 "parser.y"
{yyval.node = NULL;} break;
case 9:
# line 215 "parser.y"
{list_push(yypvt[-0].node);} break;
case 10:
# line 217 "parser.y"
{list_push(yypvt[-0].node);} break;
case 11:
# line 220 "parser.y"
{list_init();} break;
case 12:
# line 221 "parser.y"
{yyval.node = create_node2(INDEX_AS,yypvt[-2].node,list_new(CONSTRUCT_LIST_AS));} break;
case 13:
# line 225 "parser.y"
{yyval.node = NULL;} break;
case 14:
# line 227 "parser.y"
{yyval.node = yypvt[-1].node;} break;
case 15:
# line 231 "parser.y"
{list_push(yypvt[-0].node);} break;
case 16:
# line 233 "parser.y"
{list_push(yypvt[-0].node);} break;
case 17:
# line 237 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 18:
# line 239 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 19:
# line 247 "parser.y"
{deferred = FALSE; expanded = FALSE;} break;
case 20:
# line 249 "parser.y"
{deferred = TRUE; expanded = FALSE;} break;
case 21:
# line 251 "parser.y"
{expanded = TRUE; deferred = FALSE;} break;
case 22:
# line 260 "parser.y"
{yyval.node = NULL;} break;
case 23:
# line 262 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 24:
# line 271 "parser.y"
{yyval.node = NULL;} break;
case 25:
# line 272 "parser.y"
{list_init();} break;
case 26:
# line 273 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 27:
# line 278 "parser.y"
{list_push(yypvt[-0].node);} break;
case 28:
# line 280 "parser.y"
{list_push(yypvt[-0].node);} break;
case 29:
# line 284 "parser.y"
{push_pos(); list_init();} break;
case 30:
# line 285 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_node2(FEATURE_CLAUSE_AS,yypvt[-2].node,yyval.node);
		pop_pos();
		} break;
case 31:
# line 294 "parser.y"
{yyval.node = NULL;} break;
case 32:
# line 296 "parser.y"
{yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);} break;
case 33:
# line 300 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							} break;
case 34:
# line 304 "parser.y"
{list_init();} break;
case 35:
# line 305 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 36:
# line 309 "parser.y"
{
							list_push(yypvt[-0].node);
							} break;
case 37:
# line 313 "parser.y"
{
							list_push(yypvt[-0].node);
							} break;
case 39:
# line 320 "parser.y"
{list_push(yypvt[-0].node);} break;
case 42:
# line 327 "parser.y"
{list_init();} break;
case 43:
# line 327 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 44:
# line 328 "parser.y"
{
		yyval.node = create_feature_as(yypvt[-2].node,yypvt[-1].node,click_list_start(yypvt[-3].value),start_position);
		click_list_set (yyval.node, yypvt[-3].value);
		} break;
case 45:
# line 336 "parser.y"
{
		yyval.value = yypvt[-0].value;
		list_push(click_list_elem(yyval.value));
		} break;
case 46:
# line 341 "parser.y"
{
		yyval.value = yypvt[-2].value;
		list_push(click_list_elem(yypvt[-0].value));
		} break;
case 47:
# line 349 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 48:
# line 355 "parser.y"
{
		is_frozen = FALSE;
		} break;
case 49:
# line 359 "parser.y"
{
		is_frozen = TRUE;
		} break;
case 50:
# line 366 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 51:
# line 371 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 52:
# line 375 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 53:
# line 382 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 54:
# line 391 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 55:
# line 399 "parser.y"
{
		extern int is_infix();

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		} break;
case 56:
# line 412 "parser.y"
{
		extern int is_prefix();

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		} break;
case 57:
# line 424 "parser.y"
{yyval.node = create_node3(BODY_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yypvt[-2].node == NULL) && (yypvt[-1].node == NULL) && (yypvt[-0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yypvt[-0].cr_node.cr_type == CR_CONSTANT) && ((yypvt[-2].node != NULL) || (yypvt[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yypvt[-2].node != NULL) && ((yypvt[-0].cr_node.cr_type != CR_ROUTINE) || (yypvt[-0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	} break;
case 58:
# line 444 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;} break;
case 59:
# line 445 "parser.y"
{push_pos();} break;
case 60:
# line 446 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].cr_node.cr_node;yyval.cr_node.cr_type = yypvt[-0].cr_node.cr_type; pop_pos();} break;
case 61:
# line 450 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yypvt[-0].node));yyval.cr_node.cr_type = CR_CONSTANT;} break;
case 62:
# line 452 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;} break;
case 63:
# line 454 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].node;yyval.cr_node.cr_type = CR_ROUTINE;} break;
case 64:
# line 463 "parser.y"
{yyval.node = NULL;} break;
case 65:
# line 464 "parser.y"
{list_init();} break;
case 66:
# line 465 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 67:
# line 469 "parser.y"
{ yyval.node = NULL;} break;
case 68:
# line 474 "parser.y"
{list_push(yypvt[-1].node);} break;
case 69:
# line 476 "parser.y"
{list_push(yypvt[-1].node);} break;
case 70:
# line 481 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-1].value),yypvt[-0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-1].value);
		} break;
case 71:
# line 487 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-2].value),yypvt[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-2].value);
		} break;
case 72:
# line 494 "parser.y"
{
		inherit_context = (yypvt[-5].node==NULL)&&(yypvt[-4].node==NULL)&&(yypvt[-3].node==NULL)&&(yypvt[-2].node==NULL)&&(yypvt[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-7].value),yypvt[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);
		click_list_set (rn_ast, yypvt[-7].value);
		} break;
case 73:
# line 503 "parser.y"
{yyval.node = NULL;} break;
case 74:
# line 505 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 75:
# line 509 "parser.y"
{yyval.node = NULL;} break;
case 76:
# line 511 "parser.y"
{yyval.node = NULL;} break;
case 77:
# line 512 "parser.y"
{list_init();} break;
case 78:
# line 513 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 79:
# line 518 "parser.y"
{list_push(yypvt[-0].node);} break;
case 80:
# line 520 "parser.y"
{list_push(yypvt[-0].node);} break;
case 81:
# line 525 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yypvt[-2].value),click_list_elem(yypvt[-0].value));
		click_list_set (click_list_elem(yypvt[-0].value), yypvt[-2].value);
		} break;
case 82:
# line 532 "parser.y"
{yyval.node = NULL;} break;
case 83:
# line 533 "parser.y"
{list_init();} break;
case 84:
# line 534 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 85:
# line 536 "parser.y"
{yyval.node = NULL;} break;
case 86:
# line 541 "parser.y"
{list_push(yypvt[-1].node);} break;
case 87:
# line 543 "parser.y"
{list_push(yypvt[-1].node);} break;
case 88:
# line 547 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yypvt[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yypvt[-0].node);
		} break;
case 89:
# line 554 "parser.y"
{yyval.node = create_node(ALL_AS);} break;
case 90:
# line 555 "parser.y"
{list_init();} break;
case 91:
# line 556 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 92:
# line 561 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 93:
# line 563 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 94:
# line 567 "parser.y"
{yyval.node = NULL;} break;
case 95:
# line 569 "parser.y"
{yyval.node = NULL;} break;
case 96:
# line 570 "parser.y"
{list_init();} break;
case 97:
# line 571 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 98:
# line 575 "parser.y"
{yyval.node = NULL;} break;
case 99:
# line 577 "parser.y"
{yyval.node = NULL;} break;
case 100:
# line 578 "parser.y"
{list_init();} break;
case 101:
# line 579 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 102:
# line 583 "parser.y"
{yyval.node = NULL;} break;
case 103:
# line 585 "parser.y"
{yyval.node = NULL;} break;
case 104:
# line 586 "parser.y"
{list_init();} break;
case 105:
# line 587 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 106:
# line 595 "parser.y"
{yyval.node = NULL;} break;
case 107:
# line 597 "parser.y"
{yyerror((char *)0);} break;
case 108:
# line 598 "parser.y"
{list_init();} break;
case 109:
# line 599 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 111:
# line 604 "parser.y"
{list_push(yypvt[-0].node);} break;
case 112:
# line 607 "parser.y"
{list_init();} break;
case 113:
# line 607 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 114:
# line 608 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yypvt[-3].node,yypvt[-1].node);} break;
case 115:
# line 612 "parser.y"
{list_push(yypvt[-0].node);} break;
case 116:
# line 614 "parser.y"
{list_push(yypvt[-0].node);} break;
case 119:
# line 622 "parser.y"
{yyval.node = NULL;} break;
case 120:
# line 624 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 121:
# line 629 "parser.y"
{yyval.node = create_node6(ROUTINE_AS,yypvt[-6].node,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 122:
# line 633 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 123:
# line 635 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 124:
# line 637 "parser.y"
{yyval.node = create_node(DEFERRED_AS);} break;
case 125:
# line 641 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 126:
# line 645 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yypvt[-0].node);} break;
case 127:
# line 649 "parser.y"
{yyval.node = NULL;} break;
case 128:
# line 651 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 129:
# line 654 "parser.y"
{list_init();} break;
case 130:
# line 655 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 131:
# line 656 "parser.y"
{list_init();} break;
case 132:
# line 657 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 133:
# line 663 "parser.y"
{yyval.node = NULL;} break;
case 134:
# line 664 "parser.y"
{list_init();} break;
case 135:
# line 665 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 136:
# line 669 "parser.y"
{list_push(yypvt[-1].node);} break;
case 140:
# line 676 "parser.y"
{list_push(yypvt[-1].node);} break;
case 142:
# line 681 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 143:
# line 683 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 144:
# line 685 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 145:
# line 687 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 146:
# line 689 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 147:
# line 691 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 148:
# line 693 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 149:
# line 695 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 150:
# line 697 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 151:
# line 699 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 152:
# line 703 "parser.y"
{yyval.node = NULL;} break;
case 153:
# line 704 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 154:
# line 705 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 155:
# line 709 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 156:
# line 710 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 157:
# line 717 "parser.y"
{yyval.node = NULL;} break;
case 158:
# line 718 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 159:
# line 719 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 160:
# line 723 "parser.y"
{push_pos(); id_level = ASSERT_LEVEL;} break;
case 161:
# line 724 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yypvt[-0].node);
									pop_pos();
								} break;
case 162:
# line 731 "parser.y"
{list_init();} break;
case 163:
# line 732 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 166:
# line 739 "parser.y"
{list_push(yypvt[-1].node);} break;
case 167:
# line 741 "parser.y"
{list_push(yypvt[-1].node);} break;
case 168:
# line 745 "parser.y"
{
									push_pos();
									push_pos();
									yyval.node = create_node2(TAGGED_AS,NULL,yypvt[-0].node);
									npop_pos(2);
								} break;
case 169:
# line 751 "parser.y"
{push_pos();} break;
case 170:
# line 752 "parser.y"
{
									push_pos();
									yyval.node = create_node2(TAGGED_AS,yypvt[-3].node,yypvt[-0].node);
									npop_pos(2);
								} break;
case 171:
# line 758 "parser.y"
{ yyval.node = NULL;} break;
case 172:
# line 768 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 173:
# line 773 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 174:
# line 778 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 175:
# line 783 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 176:
# line 788 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yypvt[-0].node);
		} break;
case 177:
# line 792 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yypvt[-0].node);
		} break;
case 178:
# line 796 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yypvt[-0].node);
		} break;
case 179:
# line 800 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		} break;
case 180:
# line 807 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
        click_list_set (yyval.node, yypvt[-0].value);
        } break;
case 181:
# line 812 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
        click_list_set (yyval.node, yypvt[-1].value);
        } break;
case 182:
# line 820 "parser.y"
{yyval.node = NULL;} break;
case 183:
# line 821 "parser.y"
{list_init();} break;
case 184:
# line 822 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 185:
# line 829 "parser.y"
{list_push(yypvt[-0].node);} break;
case 186:
# line 831 "parser.y"
{list_push(yypvt[-0].node);} break;
case 187:
# line 839 "parser.y"
{
		yyval.node = NULL;
		} break;
case 188:
# line 842 "parser.y"
{list_init();} break;
case 189:
# line 843 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 191:
# line 851 "parser.y"
{list_push(yypvt[-0].node);} break;
case 192:
# line 853 "parser.y"
{list_push(yypvt[-0].node);} break;
case 193:
# line 857 "parser.y"
{strcpy(generic_name, token_str);} break;
case 194:
# line 858 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yypvt[-0].node);} break;
case 195:
# line 862 "parser.y"
{yyval.node = NULL;} break;
case 196:
# line 864 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 197:
# line 871 "parser.y"
{list_init();} break;
case 198:
# line 871 "parser.y"
{yyval.node =
list_new(CONSTRUCT_LIST_AS);} break;
case 199:
# line 873 "parser.y"
{yyval.node = create_node4(IF_AS,yypvt[-7].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 200:
# line 877 "parser.y"
{yyval.node = NULL;} break;
case 201:
# line 878 "parser.y"
{list_init();} break;
case 202:
# line 879 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 203:
# line 883 "parser.y"
{list_push(yypvt[-0].node);} break;
case 204:
# line 885 "parser.y"
{list_push(yypvt[-0].node);} break;
case 205:
# line 888 "parser.y"
{list_init();} break;
case 206:
# line 889 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 207:
# line 893 "parser.y"
{yyval.node = NULL;} break;
case 208:
# line 894 "parser.y"
{list_init();} break;
case 209:
# line 895 "parser.y"
{yyval.node = inspect_else();} break;
case 210:
# line 899 "parser.y"
{yyval.node = NULL;} break;
case 211:
# line 900 "parser.y"
{list_init();} break;
case 212:
# line 901 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 213:
# line 905 "parser.y"
{list_init();} break;
case 214:
# line 905 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 215:
# line 907 "parser.y"
{yyval.node = create_node3(INSPECT_AS,yypvt[-5].node,yypvt[-2].node,yypvt[-1].node);} break;
case 217:
# line 920 "parser.y"
{list_push(yypvt[-1].node);} break;
case 218:
# line 923 "parser.y"
{list_init();} break;
case 219:
# line 923 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 220:
# line 923 "parser.y"
{list_init();} break;
case 221:
# line 924 "parser.y"
{yyval.node = create_node2(CASE_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 222:
# line 928 "parser.y"
{list_push(yypvt[-0].node);} break;
case 223:
# line 930 "parser.y"
{list_push(yypvt[-0].node);} break;
case 224:
# line 934 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 225:
# line 936 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 226:
# line 938 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 227:
# line 940 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 228:
# line 942 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 229:
# line 944 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 230:
# line 946 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 231:
# line 948 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 232:
# line 950 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 233:
# line 952 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 234:
# line 955 "parser.y"
{list_init();} break;
case 235:
# line 955 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 236:
# line 955 "parser.y"
{list_init();} break;
case 237:
# line 956 "parser.y"
{yyval.node = create_node5(LOOP_AS,yypvt[-8].node,yypvt[-7].node,yypvt[-6].node,yypvt[-4].node,list_new(CONSTRUCT_LIST_AS));} break;
case 238:
# line 960 "parser.y"
{yyval.node = NULL;} break;
case 239:
# line 962 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 240:
# line 966 "parser.y"
{yyval.node = NULL;} break;
case 241:
# line 967 "parser.y"
{id_level = INVARIANT_LEVEL;} break;
case 242:
# line 968 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yypvt[-0].node);
		} break;
case 243:
# line 976 "parser.y"
{yyval.node = NULL;} break;
case 244:
# line 978 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 245:
# line 980 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yypvt[-0].node);} break;
case 246:
# line 983 "parser.y"
{list_init();} break;
case 247:
# line 984 "parser.y"
{yyval.node = create_node2(DEBUG_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 248:
# line 988 "parser.y"
{yyval.node = NULL;} break;
case 249:
# line 990 "parser.y"
{yyval.node = NULL;} break;
case 250:
# line 991 "parser.y"
{list_init();} break;
case 251:
# line 992 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 252:
# line 996 "parser.y"
{list_push(yypvt[-0].node);} break;
case 253:
# line 998 "parser.y"
{list_push(yypvt[-0].node);} break;
case 254:
# line 1002 "parser.y"
{yyval.node = create_node(RETRY_AS);} break;
case 255:
# line 1006 "parser.y"
{yyval.node = NULL;} break;
case 256:
# line 1007 "parser.y"
{list_init();} break;
case 257:
# line 1008 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 258:
# line 1012 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 259:
# line 1014 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 260:
# line 1018 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 261:
# line 1020 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 262:
# line 1024 "parser.y"
{yyval.node = NULL;} break;
case 263:
# line 1025 "parser.y"
{list_init();} break;
case 264:
# line 1026 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 265:
# line 1030 "parser.y"
{list_push(yypvt[-0].node);} break;
case 266:
# line 1032 "parser.y"
{list_push(yypvt[-0].node);} break;
case 267:
# line 1036 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);} break;
case 268:
# line 1037 "parser.y"
{list_init();} break;
case 269:
# line 1038 "parser.y"
{yyval.node = create_node2(CREATE_AS,yypvt[-2].node,list_new(CONSTRUCT_LIST_AS));} break;
case 270:
# line 1040 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);								} break;
case 271:
# line 1046 "parser.y"
{yyval.node = create_node3(CREATION_AS,yypvt[-3].node,yypvt[-1].node,yypvt[-0].node);} break;
case 272:
# line 1050 "parser.y"
{yyval.node = NULL;} break;
case 273:
# line 1052 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 274:
# line 1056 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yypvt[-0].node,NULL);} break;
case 275:
# line 1058 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 276:
# line 1062 "parser.y"
{yyval.node = NULL;} break;
case 277:
# line 1064 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 278:
# line 1072 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 279:
# line 1074 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 280:
# line 1076 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 281:
# line 1078 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 282:
# line 1080 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 283:
# line 1084 "parser.y"
{yyval.node = create_node1(CHECK_AS,yypvt[-1].node);} break;
case 284:
# line 1092 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 285:
# line 1094 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 286:
# line 1096 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yypvt[-0].node);} break;
case 287:
# line 1098 "parser.y"
{yyval.node = create_node1(PARAN_AS, yypvt[-1].node);} break;
case 288:
# line 1100 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 289:
# line 1102 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 290:
# line 1104 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 291:
# line 1106 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 292:
# line 1108 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 293:
# line 1110 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 294:
# line 1112 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 295:
# line 1114 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 296:
# line 1116 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 297:
# line 1118 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 298:
# line 1120 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 299:
# line 1122 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 300:
# line 1124 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 301:
# line 1126 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 302:
# line 1128 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 303:
# line 1130 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 304:
# line 1132 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 305:
# line 1134 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 306:
# line 1136 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 307:
# line 1138 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].node);} break;
case 308:
# line 1141 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yypvt[-0].node);} break;
case 309:
# line 1143 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yypvt[-0].node);} break;
case 310:
# line 1145 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yypvt[-0].node);} break;
case 311:
# line 1147 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yypvt[-0].node);} break;
case 312:
# line 1149 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 313:
# line 1150 "parser.y"
{yyerrok;list_init();} break;
case 314:
# line 1151 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 315:
# line 1155 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 316:
# line 1157 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yypvt[-0].value));
								} break;
case 317:
# line 1162 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);} break;
case 318:
# line 1164 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);} break;
case 319:
# line 1168 "parser.y"
{yyval.node = create_id(token_str);} break;
case 320:
# line 1176 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 321:
# line 1178 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 322:
# line 1180 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 323:
# line 1182 "parser.y"
{yyval.node = create_node(CURRENT_AS);} break;
case 324:
# line 1184 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 325:
# line 1186 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 326:
# line 1188 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 327:
# line 1192 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yypvt[-0].node);} break;
case 328:
# line 1196 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 329:
# line 1200 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 330:
# line 1204 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 331:
# line 1208 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 332:
# line 1210 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 333:
# line 1214 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 334:
# line 1216 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 335:
# line 1220 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yypvt[-1].node,yypvt[-0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							}
						} break;
case 336:
# line 1235 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 337:
# line 1239 "parser.y"
{yyval.node = NULL;} break;
case 338:
# line 1241 "parser.y"
{yyval.node = NULL;} break;
case 339:
# line 1242 "parser.y"
{list_init();} break;
case 340:
# line 1243 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 341:
# line 1247 "parser.y"
{list_push(yypvt[-0].node);} break;
case 342:
# line 1249 "parser.y"
{list_push(yypvt[-0].node);} break;
case 343:
# line 1253 "parser.y"
{list_push(yypvt[-0].node);} break;
case 344:
# line 1255 "parser.y"
{list_push(yypvt[-0].node);} break;
case 347:
# line 1267 "parser.y"
{
				yyval.node = create_id(token_str);
				} break;
case 348:
# line 1273 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 349:
# line 1275 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 350:
# line 1277 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 351:
# line 1279 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 352:
# line 1281 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 353:
# line 1283 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 354:
# line 1287 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 355:
# line 1289 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 356:
# line 1291 "parser.y"
{yyval.node = create_int(token_str,0);} break;
case 357:
# line 1293 "parser.y"
{yyval.node = create_real(token_str,0);} break;
case 358:
# line 1295 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 359:
# line 1297 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 360:
# line 1301 "parser.y"
{yyval.node = create_bool(0);} break;
case 361:
# line 1303 "parser.y"
{yyval.node = create_bool(1);} break;
case 362:
# line 1307 "parser.y"
{yyval.node = create_char(token_str);} break;
case 363:
# line 1311 "parser.y"
{yyval.node = create_int(token_str,yypvt[-1].value);} break;
case 364:
# line 1315 "parser.y"
{yyval.value = 0;} break;
case 365:
# line 1317 "parser.y"
{yyval.value = 0;} break;
case 366:
# line 1319 "parser.y"
{yyval.value = 1;} break;
case 367:
# line 1323 "parser.y"
{yyval.node = create_real(token_str,yypvt[-1].value);} break;
case 368:
# line 1327 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));} break;
case 369:
# line 1331 "parser.y"
{yyval.node = create_string(token_str);} break;
case 370:
# line 1333 "parser.y"
{yyval.node = create_string(token_str);} break;
case 371:
# line 1337 "parser.y"
{yyval.node = create_string(token_str);} break;
case 372:
# line 1340 "parser.y"
{list_init();} break;
case 373:
# line 1341 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));} break;
	}
	goto yystack;		/* reset registers in driver code */
}
