<document title="5 A LOOK AT THE PROJECT DIRECTORY" output="studio">
	<meta_data></meta_data>
	<paragraph>
		<paragraph>
			<link>
				<url>tour-help.xml</url>
				<label>Help reading this manual</label>
			</link>
		</paragraph>
		<paragraph>Before we proceed with the facilities of the environment, let's take a look at the way EiffelStudio organizes project files.</paragraph>
		<paragraph>With EiffelStudio, you build projects. Most projects yield an executable system, although you can also build a project just to define a library for use by such systems.</paragraph>
		<paragraph>Every session is relative to a project; you can start a new project from within EiffelStudio by going to the 
			<code>
				<keyword>File</keyword>
			</code> 
			<code>
				<symbol>--&gt;</symbol>
			</code> 
			<code>
				<keyword>New Project</keyword>
			</code> menu, but please 
			<bold>don't select that menu entry now</bold> as we have many more things to do with our current project first.
		</paragraph>
		<paragraph>Every project has a 
			<bold>project directory</bold> which will contain the files generated and managed by EiffelStudio. The project directory may also host some of the source files containing your Eiffel classes, the ECF (eiffel configurationl file), and external software written in other languages, but that is not required; the source files and ecf may reside anywhere. Some users, in fact, like to put nothing else than the EiffelStudio-generated files in the project directory; this separates user-managed and system-managed files, and can facilitate configuration management, backups and porting.
		</paragraph>
		<paragraph>In this simple Tour, things have been set up so that all the files of interest, source texts as well as generated ones, will appear in the project directory 
			<code>
				<string>YOURDIR</string>
			</code> (either 
			<code>
				<keyword>$ISE_EIFFEL\examples\studio\tour</keyword>
			</code> or the copy that you have made). Go to that project directory using the Windows explorer or a 
			<code>
				<keyword>cd</keyword>
			</code> command, and look at its contents (using 
			<code>
				<keyword>ls</keyword>
			</code> on Unix/Linux):
		</paragraph>
		<div>
			<image_link>
				<url>index-7.png</url>
				<target>screenshots</target>
				<image>
					<url>index-7.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The contents of this 
			<code>
				<string>YOURDIR</string>
			</code> directory include the following:
		</paragraph>
		<list ordered="false">
			<item>First you see a number of files with the extension 
				<span>.</span>
				<code>
					<keyword>e</keyword>
				</code>, for "Eiffel": 
				<code>
					<keyword>heir.e</keyword>
				</code>, 
				<code>
					<keyword>invalid.e</keyword>
				</code> and others. These are the Eiffel source files, each containing one class. The recommended convention is to store a class of name 
				<code>
					<string>CLASS_NAME</string>
				</code> into a file of name 
				<code>
					<string>class_name</string>
				</code>
				<code>
					<keyword>.e</keyword>
				</code>, where 
				<code>
					<string>class_name</string>
				</code> is the lower-case version of 
				<code>
					<string>CLASS_NAME</string>
				</code> ; here, file 
				<code>
					<keyword>heir.e</keyword>
				</code> contains the class 
				<code>
					<keyword>HEIR</keyword>
				</code> and so on. As you may remember, Eiffel is case-insensitive, but the standard convention for class names is to write them in all upper case. Calling the file 
				<code>
					<string>class_name</string>
				</code>
				<code>
					<keyword>.e</keyword>
				</code> is only a recommendation, not an obligation; but you 
				<span>are</span> required to store one class per file. This keeps things simple and facilitates project and configuration management.
			</item>
			<item>You also notice a file with an 
				<code>
					<keyword>ecf</keyword>
				</code> extension. This is the configuration file that specifies this project. As you remember, the ECF file for this example was available as part of the delivery; we used it to compile the project. In most practical cases, however, you won't need to build an ECF; if you use the "
				<code>
					<keyword>Create project</keyword>
				</code>" option of EiffelStudio (remember the first screen 
				<link>
					<label>here</label>
					<url>index.xml</url><anchor_name>PROJECT START SCREEN</anchor_name>
				</link> ), EiffelStudio will build the ECF for you; if you change the Project Settings during a session, EiffelStudio will update the ECF. ECF are written in a xml notation.
			</item> 
			<item>Finally you will notice a subdirectory called 
				<code>
					<keyword>EIFGENs</keyword>
				</code>, for " 
				<code>
					<keyword>EIF</keyword>
				</code>fel 
				<code>
					<keyword>GEN</keyword>
				</code>eration<keyword>s</keyword>".
				<code>
					<keyword>EIFGENs</keyword>
				</code> is created and maintained by the compiler to store information about your project, including generated code for execution. EiffelStudio manages your project in such a way that 
				<code>
					<keyword>EIFGENs</keyword>
				</code> can always be re-generated if need be; this means in particular that if things go wrong for any reason and you want to make a fresh start you can always delete this directory and recompile your system.
				 This also means that you should not add any files into this directory, or modify any of its files, since a later compilation is free to change or regenerate whatever it chooses in 
				<code>
					<keyword>EIFGENs</keyword>
				</code>.
			</item>
		</list>
		<paragraph>Later on, we will see that EiffelStudio may generate three more subdirectories of the project directory: 
			<code>
				<keyword>Diagrams</keyword>
			</code>, if you produce graphical system diagrams; 
			<code>
				<keyword>Documentation</keyword>
			</code>, if you request system documentation, for example HTML; and 
			<code>
				<keyword>Metrics</keyword>
			</code>, if you perform measurements on your system. Other than these directories, 
			<code>
				<keyword>EIFGENs</keyword>
			</code>
			 EiffelStudio will not touch anything in the project directory, so you may safely add and change whatever files and subdirectories you like.
		</paragraph>
		<paragraph>You seldom need to look into 
			<code>
				<keyword>EIFGENs</keyword>
			</code>, although you should know that it's there. Right now if you check the contents of the project directory 
			<code>
				<string>YOURDIR</string>
			</code> (using the Windows Explorer on Windows, the 
			<code>
				<keyword>ls</keyword>
			</code> command on Unix, or some equivalent mechanism), you will see that 
			<code>
				<keyword>EIFGENs</keyword>
			</code> has been created, itself with a subdirectory called <keyword>classic</keyword> which is the name of the target and which has some subdirectories, including 
			<code>
				<keyword>W_Code</keyword>
			</code> which contains the generated code (
			<code>
				<keyword>W</keyword>
			</code> for "Workbench" -- we'll see the reason later). Feel free to browse through it if you like, but don't change anything.
		</paragraph>
		<paragraph>By the way, we are now done with any platform-specific instructions. Everything in the rest of this Tour, other than the graphical look-and-feel, will work the same across all EiffelStudio platforms.</paragraph>
<paragraph>
			<link>
				<url>index-05.xml</url>
				<label>&lt;&lt; Previous</label>
			</link> 
			<link>
				<url>index-07.xml</url>
				<label>Next &gt;&gt;</label>
			</link>
		</paragraph>
	</paragraph></document>
