system
	"ec"

root
	EB_KERNEL: make

default
	assertion (check)
	assertion (require)
	assertion (ensure)
	arguments ("-from_bench")
	disabled_debug (yes)
	disabled_debug ("activity")
	disabled_debug ("actual_replication")
	disabled_debug ("anchored_features")
	disabled_debug ("assertion")
	disabled_debug ("assertions")
	disabled_debug ("byte_code")
	disabled_debug ("c_debugger")
	disabled_debug ("cache")
	disabled_debug ("cache_compiler")
	disabled_debug ("cache_research")
	disabled_debug ("cache_server")
	disabled_debug ("cache_stat")
	disabled_debug ("cecil")
	disabled_debug ("check_expanded")
	disabled_debug ("class_of_id")
	disabled_debug ("comments")
	disabled_debug ("count")
	disabled_debug ("dead_code")
	disabled_debug ("dead_code_removal")
	disabled_debug ("debbugger_hook")
	disabled_debug ("debug_recv")
	disabled_debug ("debugger")
	disabled_debug ("debugger_hook")
	disabled_debug ("debugger_interface")
	disabled_debug ("debugger_trace")
	disabled_debug ("display_exception_trace")
	disabled_debug ("dle topo")
	disabled_debug ("dlg_dispatcher")
	disabled_debug ("document")
	disabled_debug ("documentation")
	disabled_debug ("dollar")
	disabled_debug ("editor")
	disabled_debug ("filters")
	disabled_debug ("flat_short")
	disabled_debug ("flush_file")
	disabled_debug ("formal_generic")
	disabled_debug ("gelex")
	disabled_debug ("genericity")
	disabled_debug ("geyacc")
	disabled_debug ("has_calls")
	disabled_debug ("hector")
	disabled_debug ("liman")
	disabled_debug ("local_feat_adaptation")
	disabled_debug ("once")
	disabled_debug ("optimization")
	disabled_debug ("options")
	disabled_debug ("parse")
	disabled_debug ("profile_convert")
	disabled_debug ("remove_class")
	disabled_debug ("replication")
	disabled_debug ("sep_debug")
	disabled_debug ("server")
	disabled_debug ("show_prof_query")
	disabled_debug ("skeleton")
	disabled_debug ("trace_table")
	disabled_debug ("transfer")
	disabled_debug ("type_check")
	disabled_debug ("verbose")
	disabled_debug ("vision2_windows")
	disabled_debug ("vision2_windows_gdi")
	disabled_debug ("wel")
	disabled_debug ("wel_gdi_count")
	disabled_debug ("wel_gdi_references")
	disabled_debug ("win_dispatcher")
	line_generation (no)
	profile (no)
	trace (no)
	check_vape (yes)
	console_application (yes)
	array_optimization (no)
	dead_code_removal (yes)
	exception_trace (yes)
	inlining (no)

cluster
	all base:		"$EIFFEL_SRC\library\base"
		exclude
			"table"; "desc"; "CVS"; 
		end

	all wel:		"$EIFFEL_SRC\library\wel"
		exclude
			"CVS"; 
		end

	all vision2:		"$EIFFEL_SRC\library\vision2"
		exclude
			"gtk"; "EIFGEN"; "tmp"; "temp"; "release"; "obsolete"; "CVS"; 
		end

	all net:		"$EIFFEL_SRC\library\net"
		exclude
			"CVS"; 
		end

	liman:		"$EIFFEL_SRC\Eiffel\limand"

	liman_bench (liman):		"$\bench"

	liman_bench_graphical (liman):		"$\bench_graphical"

	liman_abstract (liman):		"$\abstract"

	liman_graphical (liman):		"$\graphical"

	beurk:		"$EIFFEL_SRC\Eiffel\beurk"

	all compiler_support:		"$EIFFEL_SRC\Eiffel\support"

	common:		"$EIFFEL_SRC\Eiffel\common"

	common_parser (common):		"$\parser"

	common_eiffel_parser (common_parser):		"$\parser"

	old_resources (common):		"$\resources"

	flat_short (common_parser):		"$\flat_short"
		exclude
			"format_context.e"; "local_format.e"; 
		end

	flat_short_b:		"$EIFFEL_SRC\Eiffel\flat_short\bench"

	yacc:		"$EIFFEL_SRC\Eiffel\yacc"

	const:		"$EIFFEL_SRC\Eiffel\const"

	xml:		"$EIFFEL_SRC\library\exml"

	xml_main (xml):		"$\main"

	xml_tree_parser (xml_main):		"$\tree_parser"

	xml_spec (xml):		"$\compiler_specific\ise"

	observer:		"$EIFFEL_SRC\library\patterns\observer"

	all gobo:		"$EIFFEL_SRC\library\gobo\library"
		exclude
			"hact"; "se"; "ve"; "base"; "CVS"; 
		end

	all documentation:		"$EIFFEL_SRC\Eiffel\case"
		exclude
			"CVS"; 
		end

	all lace:		"$EIFFEL_SRC\Eiffel\lace"
		exclude
			"CVS"; 
		end

	all compiler:		"$EIFFEL_SRC\Eiffel\eiffel"
		exclude
			"CVS"; "unix"; "Clib"; "Core"; "junk"; "kernel"; 
		end

	all compiler_api:		"$EIFFEL_SRC\Eiffel\API"
		exclude
			"CVS"; 
		end

	all helpers:		"$EIFFEL_SRC\library\helpers"
		exclude
			"CVS"; 
		end

	all preferences:		"$EIFFEL_SRC\library\preferences"
		exclude
			"CVS"; "xml_implementation"; 
		end

	encryption:		"$EIFFEL_SRC\library\encryption"

	switch:		"$EIFFEL_SRC\Eiffel\switch"

	interface_switch (switch):		"$\interface\new_graphical"

	time_lock (switch):		"$\license\time_lock"

	communications (switch):		"$\communication"

	status (communications):		"$\status"

	ipc (communications):		"$\ipc"

	debuging_class (communications):		"$\debug"

	debuging_formatters (communications):		"$\formatters"

	io_watcher (communications):		"$\spec\mswin"

	all interface:		"$EIFFEL_SRC\Eiffel\interface"
		exclude
			"CVS"; "graphical"; "gtk"; "Not_in_System"; "tty"; "new_tty"; "xml_implementation"; "preferences"; 
		end

	tty:		"$EIFFEL_SRC\Eiffel\interface\tty"
		exclude
			"output_window.e"; "tty_resources.e"; "eb_diagram_html_generator.e"; 
		end

	new_tty:		"$EIFFEL_SRC\Eiffel\interface\new_tty"

	all cli_writer:		"$EIFFEL_SRC\Eiffel\library\cli_writer"

	all xml_deserializer:		"$EIFFEL_SRC\Eiffel\library\xml_deserializer"

	all eac_components:		"$EIFFEL_SRC\dotnet\consumer\components"

	eac_documentation:	"$EIFFEL_SRC\dotnet\eac_browser\src\deserialization\assembly_informations"

external

	include_path:
		"$(EIFFEL_SRC)\library\encryption\Clib",
		"$(EIFFEL_SRC)\library\exml\compiler_specific\ise\clib",
		"$(EIFFEL_SRC)\library\gobo\library\kernel\include",
		"$(EIFFEL_SRC)\library\wel\spec\windows\include",
		"$(EIFFEL_SRC)\library\vision2\spec\include",
		"$(EIFFEL_SRC)\C\bench",
		"$(EIFFEL_SRC)\C\platform",
		"$(EIFFEL_SRC)\C_library\expat\xmlparse",
		"$(EIFFEL_SRC)\C_library\zlib",
		"$(EIFFEL_SRC)\Eiffel\interface\new_graphical\help\Clib",
		"$(EIFFEL_SRC)\Eiffel\library\cli_writer\Clib"

	object:
		"$(EIFFEL_SRC)\library\wel\spec\$(ISE_C_COMPILER)\lib\wel.lib",
		"$(EIFFEL_SRC)\library\vision2\spec\$(ISE_C_COMPILER)\lib\vision2.lib",
		"$(EIFFEL_SRC)\library\vision2\spec\$(ISE_C_COMPILER)\lib\zlib.lib",
		"$(EIFFEL_SRC)\library\vision2\spec\$(ISE_C_COMPILER)\lib\libpng.lib",
		"$(EIFFEL_SRC)\C_library\expat\lib\xmlparse.lib",
		"$(EIFFEL_SRC)\C\minilzo\minilzo.obj",
		"$(EIFFEL_SRC)\C\ipc\ewb\ewb.lib",
		"$(EIFFEL_SRC)\C\ipc\shared\ipc.lib",
		"$(EIFFEL_SRC)\C\idrs\idr.lib",
		"$(EIFFEL_SRC)\C\bench\compiler.lib",
		"$(EIFFEL_SRC)\C\platform\platform.lib",
		"$(EIFFEL_SRC)\library\encryption\spec\$(ISE_C_COMPILER)\lib\des.lib",
		"$(EIFFEL_SRC)\library\exml\compiler_specific\ise\clib\$(ISE_C_COMPILER)\exml.lib",
		"$(EIFFEL_SRC)\Eiffel\interface\new_graphical\help\Clib\htmlhelp.lib",
		"$(EIFFEL_SRC)\library\net\spec\$(ISE_C_COMPILER)\lib\net.lib",
		"$(EIFFEL_SRC)\Eiffel\library\cli_writer\spec\msc\lib\cli_writer.lib",
		"corguids.lib"

end
