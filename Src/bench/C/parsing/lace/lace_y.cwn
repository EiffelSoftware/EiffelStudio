#ifndef lint
static char xxsccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 6 "lace_y.y"
#include "lace_c.h"
#undef NULL
#define NULL (char *) 0
#line 11 "lace_y.y"
typedef union {
	char *node;
	int  value;
} YYSTYPE;
#line 15 "y.tab.c"
#define LAC_ADAPT 257
#define LAC_ALL 258
#define LAC_AS 259
#define LAC_ASSERTION 260
#define LAC_C 261
#define LAC_CHECK 262
#define LAC_CLUSTER 263
#define LAC_COLUMN 264
#define LAC_COMMA 265
#define LAC_COMMENT 266
#define LAC_CREATION 267
#define LAC_DEBUG 268
#define LAC_DEFAULT 269
#define LAC_END 270
#define LAC_ENSURE 271
#define LAC_EXCLUDE 272
#define LAC_EXECUTABLE 273
#define LAC_EXPORT 274
#define LAC_EXTERNAL 275
#define LAC_GENERATE 276
#define LAC_IDENTIFIER 277
#define LAC_IGNORE 278
#define LAC_INCLUDE 279
#define LAC_INCLUDE_PATH 280
#define LAC_INVARIANT 281
#define LAC_LEFT_PARAM 282
#define LAC_LOOP 283
#define LAC_MAKE 284
#define LAC_NO 285
#define LAC_OBJECT 286
#define LAC_OPTIMIZE 287
#define LAC_OPTION 288
#define LAC_PRECOMPILED 289
#define LAC_RENAME 290
#define LAC_REQUIRE 291
#define LAC_RIGHT_PARAM 292
#define LAC_ROOT 293
#define LAC_SEMICOLON 294
#define LAC_STRING 295
#define LAC_SYSTEM 296
#define LAC_TRACE 297
#define LAC_USE 298
#define LAC_VISIBLE 299
#define LAC_YES 300
#define LAC_WHITE 301
#define LAC_ERROR2 302
#define LAC_ERROR3 303
#define LAC_ERROR4 304
#define LAC_ERROR6 305
#define LAC_ERROR7 306
#define YYERRCODE 256
short xxlhs[] = {                                        -1,
    0,    0,    1,   47,    2,   48,    3,    4,    4,    5,
    5,    6,   50,    6,   49,   49,    7,    7,    7,    7,
    8,    8,   43,    9,    9,   10,   10,   52,   10,   11,
   11,   54,   11,   51,   51,   53,   53,   55,   55,   12,
   13,   57,   13,   56,   56,   14,   14,   14,   15,   59,
   16,   58,   58,   17,   18,   61,   18,   19,   63,   19,
   60,   60,   20,   20,   20,   46,   46,   44,   44,   44,
   44,   44,   62,   62,   21,   21,   22,   65,   22,   64,
   64,   23,   23,   24,   24,   25,   25,   25,   26,   26,
   26,   27,   27,   27,   27,   27,   28,   67,   28,   66,
   66,   29,   68,   29,   30,   30,   30,   30,   30,   30,
   31,   70,   31,   69,   69,   32,   32,   33,   33,   34,
   34,   35,   71,   35,   36,   36,   37,   37,   37,   37,
   45,   45,   38,   73,   38,   39,   74,   39,   72,   72,
   40,   76,   40,   75,   75,   41,   41,   42,   42,
};
short xxlen[] = {                                         2,
    1,    2,    7,    0,    3,    0,    5,    0,    3,    0,
    2,    0,    0,    3,    1,    3,    0,    4,    5,    6,
    0,    3,    7,    0,    2,    0,    1,    0,    3,    0,
    1,    0,    3,    1,    3,    1,    3,    1,    3,    1,
    0,    0,    3,    1,    3,    0,    1,    1,    3,    0,
    5,    1,    3,    3,    0,    0,    3,    0,    0,    3,
    1,    3,    0,    3,    2,    0,    2,    1,    1,    1,
    1,    1,    1,    3,    0,    3,    0,    0,    4,    1,
    3,    0,    1,    0,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    3,    1,
    3,    0,    0,    4,    1,    1,    1,    1,    1,    1,
    0,    0,    3,    1,    3,    0,    4,    0,    3,    1,
    1,    0,    0,    3,    1,    3,    0,    1,    2,    6,
    0,    2,    0,    0,    3,    0,    0,    3,    1,    3,
    0,    0,    3,    1,    3,    0,    3,    1,    1,
};
short xxdefred[] = {                                      0,
    4,    0,    0,    1,    0,    0,    0,    0,  148,  149,
   25,    0,    0,    0,    0,    2,    5,    6,   56,    0,
    0,    0,    0,    0,    0,   13,    0,   34,    0,    0,
   42,    0,    0,    0,   68,   69,   70,    0,   71,   61,
   72,    0,    0,    0,   98,    0,    0,   36,    0,    0,
    0,    0,    0,    7,    0,    0,   65,    0,   15,    0,
    0,    0,  112,    0,   35,    0,   44,   47,   48,    0,
    0,   59,    0,    9,   11,   91,   96,   93,   94,   95,
   90,   92,   89,    0,   86,   87,   88,  142,    0,   64,
   62,    0,    0,    0,  105,  109,  106,  107,  108,  100,
    0,  110,    0,    0,    3,   37,    0,    0,    0,  123,
   23,   85,    0,   67,    0,    0,   16,  103,    0,    0,
  114,    0,   49,   50,   45,   73,    0,    0,    0,  144,
    0,    0,   22,    0,    0,  101,    0,    0,    0,    0,
    0,    0,    0,  125,    0,    0,    0,   19,    0,   38,
   40,    0,  121,  120,    0,    0,  115,   52,    0,    0,
    0,   76,   74,    0,    0,  129,    0,  147,  145,   20,
    0,  119,  117,    0,    0,   78,  126,  132,  134,    0,
   39,   54,   53,    0,    0,  137,    0,   80,   83,    0,
  139,    0,    0,    0,    0,    0,    0,  130,   81,  140,
};
short xxdgoto[] = {                                       3,
    4,    5,   13,   34,   54,   27,   59,   93,    6,   15,
   23,  150,   32,   67,   68,   69,  158,   20,   73,   40,
  126,  162,  191,   56,   84,   85,   86,   46,  100,  101,
   64,  121,  138,  155,  111,  143,  144,  180,  187,   89,
  130,  189,    7,   42,  167,   90,    8,   24,   61,   44,
   29,   21,   49,   30,  152,   71,   50,  160,  140,   43,
   25,  128,  109,  190,  184,  103,   62,  135,  122,  104,
  129,  192,  185,  193,  132,  113,
};
short xxsindex[] = {                                   -105,
    0, -179,    0,    0, -280, -257, -218, -179,    0,    0,
    0, -179, -194,    0, -206,    0,    0,    0,    0, -139,
 -179,    0, -175, -151, -100,    0,  -95,    0, -137, -179,
    0, -194, -179, -103,    0,    0,    0, -107,    0,    0,
    0, -107, -111, -179,    0,  -92, -179,    0, -104, -179,
  -87,  -81, -179,    0, -251,  -94,    0, -100,    0,  -79,
  -78,  -32,    0,  -52,    0, -179,    0,    0,    0,  -45,
  -70,    0,  -67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -53,    0,    0,    0,    0,  -23,    0,
    0, -179,   -5, -179,    0,    0,    0,    0,    0,    0,
    6,    0,  -21,  -32,    0,    0,  -96, -179,  -89,    0,
    0,    0, -179,    0,  -12, -179,    0,    0,  -32,    4,
    0,  -10,    0,    0,    0,    0, -107,   11, -179,    0,
   33,   35,    0, -207, -179,    0, -153,   43,  -32, -179,
   45,  -89,   23,    0, -144, -179, -179,    0,   48,    0,
    0,   54,    0,    0,   29, -179,    0,    0,   61,   57,
 -179,    0,    0, -179, -179,    0,   56,    0,    0,    0,
 -179,    0,    0, -179, -179,    0,    0,    0,    0,   50,
    0,    0,    0, -179, -179,    0,  -94,    0,    0,   60,
    0,   62, -179,   58, -179, -179,   62,    0,    0,    0,
};
short xxrindex[] = {                                   -176,
    0,    0,    0,    0,    0, -121,    0,    0,    0,    0,
    0,    0,   36, -200, -253,    0,    0,    0,    0,   38,
    0, -149,  -35,   19,  -71,    0, -258,    0, -114,    0,
    0, -249,    0,   28,    0,    0,    0, -261,    0,    0,
    0,  -63,  -33,   -1,    0,   59,    0,    0, -135, -169,
 -262,    0,    0,    0,    0,  -61,    0,  -71,    0,   66,
   40,  -50,    0,    0,    0,    0,    0,    0,    0,    0,
  -20,    0,   63,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   -1,    0,    0,    0,    0,    0,    0,
    0,    0, -197, -128,    0,    0,    0, -169, -216,    0,
    0,    0, -160,    0,    0,    0,    0,    0,  -50,    6,
    0,   64,    0,    0,    0,    0, -223, -202,  -84,    0,
    0,   65,    0, -214,    0,    0,    0,    0, -128,    0,
 -129, -216,   67,    0,   -9,    0, -160,    0,    0,    0,
    0,    2,    0,    0,    0,    0,    0,    0,    0,  -48,
    0,    0,    0,  -84,    0,    0,  -14,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -265,
    0,    0,    0, -181,   -3,    0,   68,    0,    0, -118,
    0,  -13, -161,    0, -181,   -3, -203,    0,    0,    0,
};
short xxgindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,  232,    0,    0,    0,
    0,  160,    0,  224,    0,    0,  161,  307,    0,  282,
  199,    0,  106,  -41,    0,    0,    0,    0,  223,  -80,
    0,  204,    0,    0,    0,    0,  180,    0,    0,  158,
  200,   -2,  212, -106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  155,    0,    0,    0,    0,
};
#define YYTABLESIZE 348
short xxtable[] = {                                      11,
   57,   84,  127,   30,  136,   17,   76,   58,   84,   18,
   77,   97,   12,   84,   84,   30,   30,   97,   28,   78,
   55,   14,   41,  120,  136,    9,   84,   48,   84,   79,
   52,   80,   84,   81,   30,  127,   58,   84,   55,   82,
   84,   60,   24,   10,   65,   30,   84,   70,   83,   55,
   75,   16,   87,   75,   24,   41,   27,   24,  120,  102,
   18,   18,  148,  106,   24,   22,  138,   60,   27,   27,
   84,   27,   99,   24,   19,   84,   28,   75,   99,   18,
   24,   31,   75,   82,   24,  141,  138,   27,   82,  115,
    2,   60,   24,   24,   28,   24,   60,    9,   27,   46,
   46,  102,   24,   82,  146,   70,   41,   31,   82,  146,
  131,   24,   82,  134,  165,   10,  102,   82,   46,   31,
   31,   33,   24,   26,   46,  166,  145,   32,   82,   46,
   33,  153,  151,   33,   33,   26,  102,  159,   31,   41,
   77,  116,   29,  168,  131,   32,  154,   26,   26,   31,
   26,   79,   33,  173,   29,   29,   47,   29,  176,   35,
   53,  145,  178,   33,   77,  116,   26,   36,  151,   77,
   35,  182,  159,   29,   55,   79,    9,   26,   36,   45,
   79,  123,   58,   63,   29,  127,   37,    9,   38,   66,
    1,   63,    2,  124,   10,   88,   39,   37,   63,   84,
   72,   66,   92,   63,   63,   10,   84,   39,   66,  127,
   74,   84,   84,   66,   66,   94,   63,  105,  107,  102,
   51,   51,   63,  108,   84,  102,   66,   63,   95,   57,
   84,  110,   66,   41,   41,   84,   57,   66,  112,   51,
   96,   57,   57,  102,    9,   51,  114,   97,   43,   43,
   51,   98,   41,   99,   57,  133,  135,  131,  116,  133,
  135,   82,   10,   41,  131,   57,   82,   43,   17,  118,
   82,  104,  119,   17,   17,  133,  135,  104,   43,  133,
  131,    8,    8,  139,  128,  137,   82,    8,    8,  188,
   10,  146,   17,    8,    8,  104,   10,   10,   55,  147,
  199,  200,   10,   10,  142,   55,  156,   12,  161,   14,
   55,   55,   12,   12,   14,   14,  164,  170,  171,  174,
  172,  175,  179,  186,  195,  117,  196,  198,  111,   21,
  181,  125,  122,  113,  143,  183,  124,  141,   51,   91,
  163,  136,  157,  177,  194,  149,  169,  197,
};
short xxcheck[] = {                                       2,
   42,  263,  109,  257,  270,    8,  258,  270,  270,   12,
  262,  270,  293,  275,  276,  269,  270,  276,   21,  271,
  270,  279,   25,  104,  290,  277,  288,   30,  290,  281,
   33,  283,  294,  285,  288,  142,  299,  299,  288,  291,
  264,   44,  257,  295,   47,  299,  270,   50,  300,  299,
   53,  270,   55,  270,  269,   58,  257,  272,  139,   62,
  275,  276,  270,   66,  279,  272,  270,  270,  269,  270,
  294,  272,  270,  288,  269,  299,  277,  294,  276,  294,
  257,  257,  299,  265,  299,  127,  290,  288,  270,   92,
  298,   94,  269,  270,  295,  272,  299,  277,  299,  269,
  270,  104,  279,  265,  265,  108,  109,  257,  270,  270,
  113,  288,  294,  116,  259,  295,  119,  299,  288,  269,
  270,  257,  299,  263,  294,  270,  129,  277,  290,  299,
  282,  285,  135,  269,  270,  257,  139,  140,  288,  142,
  270,  270,  257,  146,  147,  295,  300,  269,  270,  299,
  272,  270,  288,  156,  269,  270,  294,  272,  161,  260,
  264,  164,  165,  299,  294,  294,  288,  268,  171,  299,
  260,  174,  175,  288,  282,  294,  277,  299,  268,  275,
  299,  278,  294,  276,  299,  270,  287,  277,  289,  294,
  296,  263,  298,  290,  295,  290,  297,  287,  270,  263,
  288,  263,  282,  275,  276,  295,  270,  297,  270,  294,
  292,  275,  276,  275,  276,  294,  288,  270,  264,  270,
  269,  270,  294,  294,  288,  276,  288,  299,  261,  263,
  294,  299,  294,  269,  270,  299,  270,  299,  292,  288,
  273,  275,  276,  294,  277,  294,  270,  280,  269,  270,
  299,  284,  288,  286,  288,  270,  270,  267,  264,  274,
  274,  265,  295,  299,  274,  299,  270,  288,  270,  264,
  274,  270,  294,  275,  276,  290,  290,  276,  299,  292,
  290,  263,  264,  294,  294,  282,  290,  269,  270,  184,
  263,  259,  294,  275,  276,  294,  269,  270,  263,  265,
  195,  196,  275,  276,  294,  270,  264,  270,  264,  270,
  275,  276,  275,  276,  275,  276,  294,  270,  265,  259,
  292,  265,  267,  274,  265,   94,  265,  270,  270,  264,
  171,  108,  270,  270,  270,  175,  270,  270,   32,   58,
  142,  119,  139,  164,  187,  134,  147,  193,
};
#define YYFINAL 3
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 306
#if YYDEBUG
char *xxname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"LAC_ADAPT","LAC_ALL","LAC_AS",
"LAC_ASSERTION","LAC_C","LAC_CHECK","LAC_CLUSTER","LAC_COLUMN","LAC_COMMA",
"LAC_COMMENT","LAC_CREATION","LAC_DEBUG","LAC_DEFAULT","LAC_END","LAC_ENSURE",
"LAC_EXCLUDE","LAC_EXECUTABLE","LAC_EXPORT","LAC_EXTERNAL","LAC_GENERATE",
"LAC_IDENTIFIER","LAC_IGNORE","LAC_INCLUDE","LAC_INCLUDE_PATH","LAC_INVARIANT",
"LAC_LEFT_PARAM","LAC_LOOP","LAC_MAKE","LAC_NO","LAC_OBJECT","LAC_OPTIMIZE",
"LAC_OPTION","LAC_PRECOMPILED","LAC_RENAME","LAC_REQUIRE","LAC_RIGHT_PARAM",
"LAC_ROOT","LAC_SEMICOLON","LAC_STRING","LAC_SYSTEM","LAC_TRACE","LAC_USE",
"LAC_VISIBLE","LAC_YES","LAC_WHITE","LAC_ERROR2","LAC_ERROR3","LAC_ERROR4",
"LAC_ERROR6","LAC_ERROR7",
};
char *xxrule[] = {
"$accept : Ace_or_Properties",
"Ace_or_Properties : Ace",
"Ace_or_Properties : Cluster_properties LAC_END",
"Ace : System Root Defaults Clusters Externals Generation LAC_END",
"$$1 :",
"System : LAC_SYSTEM $$1 Name",
"$$2 :",
"Root : LAC_ROOT Name $$2 Cluster_mark Creation_procedure",
"Cluster_mark :",
"Cluster_mark : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
"Creation_procedure :",
"Creation_procedure : LAC_COLUMN Name",
"Clusters :",
"$$3 :",
"Clusters : LAC_CLUSTER $$3 Cluster_clause_list",
"Cluster_clause_list : Cluster_clause",
"Cluster_clause_list : Cluster_clause_list LAC_SEMICOLON Cluster_clause",
"Cluster_clause :",
"Cluster_clause : Name Parent_tag LAC_COLUMN Name",
"Cluster_clause : Name Parent_tag LAC_COLUMN Name LAC_END",
"Cluster_clause : Name Parent_tag LAC_COLUMN Name Cluster_properties LAC_END",
"Parent_tag :",
"Parent_tag : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
"Cluster_properties : Use Include Exclude Name_adapt Defaults Options Visible",
"Use :",
"Use : LAC_USE Name",
"Include :",
"Include : LAC_INCLUDE",
"$$4 :",
"Include : LAC_INCLUDE $$4 Include_file_list",
"Exclude :",
"Exclude : LAC_EXCLUDE",
"$$5 :",
"Exclude : LAC_EXCLUDE $$5 Exclude_file_list",
"Include_file_list : Name",
"Include_file_list : Include_file_list LAC_SEMICOLON Name",
"Exclude_file_list : Name",
"Exclude_file_list : Exclude_file_list LAC_SEMICOLON Name",
"File_list : File_clause",
"File_list : File_list LAC_COMMA File_clause",
"File_clause : Name",
"Name_adapt :",
"$$6 :",
"Name_adapt : LAC_ADAPT $$6 Cluster_adapt_list",
"Cluster_adapt_list : Cluster_adapt_clause",
"Cluster_adapt_list : Cluster_adapt_list LAC_SEMICOLON Cluster_adapt_clause",
"Cluster_adapt_clause :",
"Cluster_adapt_clause : Cluster_ignore",
"Cluster_adapt_clause : Cluster_rename_clause",
"Cluster_ignore : Name LAC_COLUMN LAC_IGNORE",
"$$7 :",
"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME $$7 Class_rename_list",
"Class_rename_list : Class_rename_pair",
"Class_rename_list : Class_rename_list LAC_COMMA Class_rename_pair",
"Class_rename_pair : Name LAC_AS Name",
"Defaults :",
"$$8 :",
"Defaults : LAC_DEFAULT $$8 D_option_clause_list",
"Options :",
"$$9 :",
"Options : LAC_OPTION $$9 O_option_clause_list",
"D_option_clause_list : D_option_clause",
"D_option_clause_list : D_option_clause_list LAC_SEMICOLON D_option_clause",
"D_option_clause :",
"D_option_clause : LAC_PRECOMPILED Option_mark Precompiled_adaptation",
"D_option_clause : Option_name Option_mark",
"Precompiled_adaptation :",
"Precompiled_adaptation : External_rename LAC_END",
"Option_name : LAC_ASSERTION",
"Option_name : LAC_DEBUG",
"Option_name : LAC_OPTIMIZE",
"Option_name : LAC_TRACE",
"Option_name : Name",
"O_option_clause_list : O_option_clause",
"O_option_clause_list : O_option_clause_list LAC_SEMICOLON O_option_clause",
"O_option_clause :",
"O_option_clause : Option_name Option_mark Target_list",
"Target_list :",
"$$10 :",
"Target_list : LAC_COLUMN Name $$10 Class_name_list",
"Class_name_list : Name_star",
"Class_name_list : Class_name_list LAC_COMMA Name_star",
"Name_star :",
"Name_star : Name",
"Option_mark :",
"Option_mark : LAC_LEFT_PARAM Option_value LAC_RIGHT_PARAM",
"Option_value : Standard_value",
"Option_value : Class_value",
"Option_value : Name",
"Standard_value : LAC_YES",
"Standard_value : LAC_NO",
"Standard_value : LAC_ALL",
"Class_value : LAC_REQUIRE",
"Class_value : LAC_ENSURE",
"Class_value : LAC_INVARIANT",
"Class_value : LAC_LOOP",
"Class_value : LAC_CHECK",
"Externals :",
"$$11 :",
"Externals : LAC_EXTERNAL $$11 Language_contrib_list",
"Language_contrib_list : Language_contrib",
"Language_contrib_list : Language_contrib_list LAC_SEMICOLON Language_contrib",
"Language_contrib :",
"$$12 :",
"Language_contrib : Language_name LAC_COLUMN $$12 File_list",
"Language_name : LAC_C",
"Language_name : LAC_INCLUDE_PATH",
"Language_name : LAC_MAKE",
"Language_name : LAC_OBJECT",
"Language_name : LAC_EXECUTABLE",
"Language_name : Name",
"Generation :",
"$$13 :",
"Generation : LAC_GENERATE $$13 Language_gen_list",
"Language_gen_list : Language_generation",
"Language_gen_list : Language_gen_list LAC_SEMICOLON Language_generation",
"Language_generation :",
"Language_generation : Language_name Generate_option LAC_COLUMN Name",
"Generate_option :",
"Generate_option : LAC_LEFT_PARAM Generate_option_value LAC_RIGHT_PARAM",
"Generate_option_value : LAC_YES",
"Generate_option_value : LAC_NO",
"Visible :",
"$$14 :",
"Visible : LAC_VISIBLE $$14 Class_visi_list",
"Class_visi_list : Class_visibility",
"Class_visi_list : Class_visi_list LAC_SEMICOLON Class_visibility",
"Class_visibility :",
"Class_visibility : Name",
"Class_visibility : Name LAC_END",
"Class_visibility : Name External_name Creation_restriction Export_restriction External_rename LAC_END",
"External_name :",
"External_name : LAC_AS Name",
"Creation_restriction :",
"$$15 :",
"Creation_restriction : LAC_CREATION $$15 Feature_name_list",
"Export_restriction :",
"$$16 :",
"Export_restriction : LAC_EXPORT $$16 Feature_name_list",
"Feature_name_list : Name_star",
"Feature_name_list : Feature_name_list LAC_COMMA Name_star",
"External_rename :",
"$$17 :",
"External_rename : LAC_RENAME $$17 External_rename_list",
"External_rename_list : ExternaL_rename_pair",
"External_rename_list : External_rename_list LAC_COMMA ExternaL_rename_pair",
"ExternaL_rename_pair :",
"ExternaL_rename_pair : Name LAC_AS Name",
"Name : LAC_IDENTIFIER",
"Name : LAC_STRING",
};
#endif
#define xxclearin (xxchar=(-1))
#define xxerrok (xxerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int xxdebug;
int xxnerrs;
int xxerrflag;
int xxchar;
short *xxssp;
YYSTYPE *xxvsp;
YYSTYPE xxval;
YYSTYPE xxlval;
short xxss[YYSTACKSIZE];
YYSTYPE xxvs[YYSTACKSIZE];
#define xxstacksize YYSTACKSIZE
#line 483 "lace_y.y"

xxwrap()
{
    return 1;
}
#line 470 "y.tab.c"
#define YYABORT goto xxabort
#define YYACCEPT goto xxaccept
#define YYERROR goto xxerrlab
int
xxparse()
{
    register int xxm, xxn, xxstate;
#if YYDEBUG
    register char *xxs;
    extern char *getenv();

    if (xxs = getenv("YYDEBUG"))
    {
        xxn = *xxs;
        if (xxn >= '0' && xxn <= '9')
            xxdebug = xxn - '0';
    }
#endif

    xxnerrs = 0;
    xxerrflag = 0;
    xxchar = (-1);

    xxssp = xxss;
    xxvsp = xxvs;
    *xxssp = xxstate = 0;

xxloop:
    if (xxn = xxdefred[xxstate]) goto xxreduce;
    if (xxchar < 0)
    {
        if ((xxchar = xxlex()) < 0) xxchar = 0;
#if YYDEBUG
        if (xxdebug)
        {
            xxs = 0;
            if (xxchar <= YYMAXTOKEN) xxs = xxname[xxchar];
            if (!xxs) xxs = "illegal-symbol";
            printf("xxdebug: state %d, reading %d (%s)\n", xxstate,
                    xxchar, xxs);
        }
#endif
    }
    if ((xxn = xxsindex[xxstate]) && (xxn += xxchar) >= 0 &&
            xxn <= YYTABLESIZE && xxcheck[xxn] == xxchar)
    {
#if YYDEBUG
        if (xxdebug)
            printf("xxdebug: state %d, shifting to state %d\n",
                    xxstate, xxtable[xxn]);
#endif
        if (xxssp >= xxss + xxstacksize - 1)
        {
            goto xxoverflow;
        }
        *++xxssp = xxstate = xxtable[xxn];
        *++xxvsp = xxlval;
        xxchar = (-1);
        if (xxerrflag > 0)  --xxerrflag;
        goto xxloop;
    }
    if ((xxn = xxrindex[xxstate]) && (xxn += xxchar) >= 0 &&
            xxn <= YYTABLESIZE && xxcheck[xxn] == xxchar)
    {
        xxn = xxtable[xxn];
        goto xxreduce;
    }
    if (xxerrflag) goto xxinrecovery;
#ifdef lint
    goto xxnewerror;
#endif
xxnewerror:
    xxerror("syntax error");
#ifdef lint
    goto xxerrlab;
#endif
xxerrlab:
    ++xxnerrs;
xxinrecovery:
    if (xxerrflag < 3)
    {
        xxerrflag = 3;
        for (;;)
        {
            if ((xxn = xxsindex[*xxssp]) && (xxn += YYERRCODE) >= 0 &&
                    xxn <= YYTABLESIZE && xxcheck[xxn] == YYERRCODE)
            {
#if YYDEBUG
                if (xxdebug)
                    printf("xxdebug: state %d, error recovery shifting\
 to state %d\n", *xxssp, xxtable[xxn]);
#endif
                if (xxssp >= xxss + xxstacksize - 1)
                {
                    goto xxoverflow;
                }
                *++xxssp = xxstate = xxtable[xxn];
                *++xxvsp = xxlval;
                goto xxloop;
            }
            else
            {
#if YYDEBUG
                if (xxdebug)
                    printf("xxdebug: error recovery discarding state %d\n",
                            *xxssp);
#endif
                if (xxssp <= xxss) goto xxabort;
                --xxssp;
                --xxvsp;
            }
        }
    }
    else
    {
        if (xxchar == 0) goto xxabort;
#if YYDEBUG
        if (xxdebug)
        {
            xxs = 0;
            if (xxchar <= YYMAXTOKEN) xxs = xxname[xxchar];
            if (!xxs) xxs = "illegal-symbol";
            printf("xxdebug: state %d, error recovery discards token %d (%s)\n",
                    xxstate, xxchar, xxs);
        }
#endif
        xxchar = (-1);
        goto xxloop;
    }
xxreduce:
#if YYDEBUG
    if (xxdebug)
        printf("xxdebug: state %d, reducing by rule %d (%s)\n",
                xxstate, xxn, xxrule[xxn]);
#endif
    xxm = xxlen[xxn];
    xxval = xxvsp[1-xxm];
    switch (xxn)
    {
case 1:
#line 87 "lace_y.y"
{rn_ast = xxvsp[0].node;}
break;
case 2:
#line 89 "lace_y.y"
{rn_ast = xxvsp[-1].node;}
break;
case 3:
#line 93 "lace_y.y"
{
							xxval.node = create_node7 (ACE_SD,xxvsp[-6].node,xxvsp[-5].node,xxvsp[-4].node,xxvsp[-3].node,xxvsp[-2].node,xxvsp[-1].node,click_list_new());
							}
break;
case 4:
#line 98 "lace_y.y"
{click_list_init();}
break;
case 5:
#line 99 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 6:
#line 102 "lace_y.y"
{xxval.value = click_list_push ();}
break;
case 7:
#line 104 "lace_y.y"
{
							xxval.node = create_node3 (ROOT_SD,xxvsp[-3].node,xxvsp[-1].node,xxvsp[0].node);
							click_list_set (xxval.node, xxvsp[-2].value);
							}
break;
case 8:
#line 111 "lace_y.y"
{xxval.node = NULL;}
break;
case 9:
#line 113 "lace_y.y"
{xxval.node = xxvsp[-1].node;}
break;
case 10:
#line 117 "lace_y.y"
{xxval.node = NULL;}
break;
case 11:
#line 119 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 12:
#line 123 "lace_y.y"
{xxval.node = NULL;}
break;
case 13:
#line 124 "lace_y.y"
{list_init();}
break;
case 14:
#line 125 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 15:
#line 129 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 16:
#line 131 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 17:
#line 135 "lace_y.y"
{xxval.node = NULL;}
break;
case 18:
#line 138 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxvsp[-3].node,xxvsp[0].node,NULL,xxvsp[-2].node);}
break;
case 19:
#line 140 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxvsp[-4].node,xxvsp[-1].node,NULL,xxvsp[-3].node);}
break;
case 20:
#line 142 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxvsp[-5].node,xxvsp[-2].node,xxvsp[-1].node,xxvsp[-4].node);}
break;
case 21:
#line 146 "lace_y.y"
{xxval.node = NULL;}
break;
case 22:
#line 148 "lace_y.y"
{xxval.node = xxvsp[-1].node;}
break;
case 23:
#line 152 "lace_y.y"
{xxval.node = create_node7 (CLUST_PROP_SD,xxvsp[-6].node,xxvsp[-5].node,xxvsp[-4].node,xxvsp[-3].node,xxvsp[-2].node,xxvsp[-1].node,xxvsp[0].node);}
break;
case 24:
#line 156 "lace_y.y"
{xxval.node = NULL;}
break;
case 25:
#line 158 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 26:
#line 162 "lace_y.y"
{xxval.node = NULL;}
break;
case 27:
#line 163 "lace_y.y"
{xxval.node = NULL;}
break;
case 28:
#line 164 "lace_y.y"
{list_init();}
break;
case 29:
#line 165 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 30:
#line 169 "lace_y.y"
{xxval.node = NULL;}
break;
case 31:
#line 170 "lace_y.y"
{xxval.node = NULL;}
break;
case 32:
#line 171 "lace_y.y"
{list_init();}
break;
case 33:
#line 172 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 34:
#line 176 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxvsp[0].node));}
break;
case 35:
#line 178 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxvsp[0].node));}
break;
case 36:
#line 182 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxvsp[0].node));}
break;
case 37:
#line 184 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxvsp[0].node));}
break;
case 38:
#line 188 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 39:
#line 190 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 40:
#line 194 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 41:
#line 198 "lace_y.y"
{xxval.node = NULL;}
break;
case 42:
#line 199 "lace_y.y"
{list_init();}
break;
case 43:
#line 200 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 44:
#line 204 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 45:
#line 206 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 46:
#line 210 "lace_y.y"
{xxval.node = NULL;}
break;
case 47:
#line 212 "lace_y.y"
{xxval.node = create_node1 (CLUST_IGN_SD,xxvsp[0].node);}
break;
case 48:
#line 214 "lace_y.y"
{xxval.node = create_node2 (CLUST_REN_SD,xxvsp[0].node,list_new(CONSTRUCT_LIST_SD));}
break;
case 49:
#line 218 "lace_y.y"
{xxval.node = xxvsp[-2].node;}
break;
case 50:
#line 221 "lace_y.y"
{list_init();}
break;
case 51:
#line 222 "lace_y.y"
{xxval.node = xxvsp[-4].node;}
break;
case 52:
#line 226 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 53:
#line 228 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 54:
#line 232 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxvsp[-2].node,xxvsp[0].node);}
break;
case 55:
#line 236 "lace_y.y"
{xxval.node = NULL;}
break;
case 56:
#line 237 "lace_y.y"
{list_init();}
break;
case 57:
#line 238 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 58:
#line 242 "lace_y.y"
{xxval.node = NULL;}
break;
case 59:
#line 243 "lace_y.y"
{list_init();}
break;
case 60:
#line 244 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 61:
#line 248 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 62:
#line 250 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 63:
#line 254 "lace_y.y"
{xxval.node = NULL;}
break;
case 64:
#line 256 "lace_y.y"
{xxval.node = create_node3(D_PRECOMPILED_SD,create_node(PRECOMPILED_SD),xxvsp[-1].node,xxvsp[0].node);}
break;
case 65:
#line 258 "lace_y.y"
{xxval.node = create_node2 (D_OPTION_SD,xxvsp[-1].node,xxvsp[0].node);}
break;
case 66:
#line 262 "lace_y.y"
{xxval.node = NULL;}
break;
case 67:
#line 264 "lace_y.y"
{xxval.node = xxvsp[-1].node;}
break;
case 68:
#line 268 "lace_y.y"
{xxval.node = create_node(ASSERTION_SD);}
break;
case 69:
#line 270 "lace_y.y"
{xxval.node = create_node(DEBUG_SD);}
break;
case 70:
#line 272 "lace_y.y"
{xxval.node = create_node(OPTIMIZE_SD);}
break;
case 71:
#line 274 "lace_y.y"
{xxval.node = create_node(TRACE_SD);}
break;
case 72:
#line 276 "lace_y.y"
{xxval.node = create_node1(FREE_OPTION_SD,xxvsp[0].node);}
break;
case 73:
#line 280 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 74:
#line 282 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 75:
#line 286 "lace_y.y"
{xxval.node = NULL;}
break;
case 76:
#line 288 "lace_y.y"
{xxval.node = create_node3 (O_OPTION_SD,xxvsp[-2].node,xxvsp[-1].node,xxvsp[0].node);}
break;
case 77:
#line 292 "lace_y.y"
{xxval.node = NULL;}
break;
case 78:
#line 294 "lace_y.y"
{list_init(); list_push (xxvsp[0].node);}
break;
case 79:
#line 296 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 80:
#line 300 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 81:
#line 302 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 82:
#line 306 "lace_y.y"
{xxval.node = NULL;}
break;
case 83:
#line 308 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 84:
#line 312 "lace_y.y"
{xxval.node = NULL;}
break;
case 85:
#line 314 "lace_y.y"
{xxval.node = xxvsp[-1].node;}
break;
case 86:
#line 318 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 87:
#line 320 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 88:
#line 322 "lace_y.y"
{xxval.node = create_node1 (NAME_SD,xxvsp[0].node);}
break;
case 89:
#line 326 "lace_y.y"
{xxval.node = create_node1(YES_SD,lace_id("yes"));}
break;
case 90:
#line 328 "lace_y.y"
{xxval.node = create_node1(NO_SD,lace_id("no"));}
break;
case 91:
#line 330 "lace_y.y"
{xxval.node = create_node1(ALL_SD,lace_id("all"));}
break;
case 92:
#line 334 "lace_y.y"
{xxval.node = create_node1(REQUIRE_SD,lace_id("require"));}
break;
case 93:
#line 336 "lace_y.y"
{xxval.node = create_node1(ENSURE_SD,lace_id("ensure"));}
break;
case 94:
#line 338 "lace_y.y"
{xxval.node = create_node1(INVARIANT_SD,lace_id("invariant"));}
break;
case 95:
#line 340 "lace_y.y"
{xxval.node = create_node1(LOOP_SD,lace_id("loop"));}
break;
case 96:
#line 342 "lace_y.y"
{xxval.node = create_node1(CHECK_SD,lace_id("check"));}
break;
case 97:
#line 346 "lace_y.y"
{xxval.node = NULL;}
break;
case 98:
#line 347 "lace_y.y"
{list_init();}
break;
case 99:
#line 348 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 100:
#line 352 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 101:
#line 354 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 102:
#line 358 "lace_y.y"
{xxval.node = NULL;}
break;
case 103:
#line 359 "lace_y.y"
{list_init();}
break;
case 104:
#line 360 "lace_y.y"
{xxval.node = create_node2 (LANG_TRIB_SD,xxvsp[-3].node,list_new(CONSTRUCT_LIST_SD));}
break;
case 105:
#line 364 "lace_y.y"
{xxval.node =
		create_node1(C_NAME_SD,lace_id("c"));}
break;
case 106:
#line 367 "lace_y.y"
{xxval.node =
		create_node1(INCLUDE_PATH_NAME_SD,lace_id("include_path"));}
break;
case 107:
#line 370 "lace_y.y"
{xxval.node =
		create_node1(MAKE_NAME_SD,lace_id("make"));}
break;
case 108:
#line 373 "lace_y.y"
{xxval.node =
		create_node1(OBJECT_NAME_SD,lace_id("object"));}
break;
case 109:
#line 376 "lace_y.y"
{xxval.node =
		create_node1(EXECUTABLE_NAME_SD,lace_id("executable"));}
break;
case 110:
#line 379 "lace_y.y"
{xxval.node = create_node1(LANGUAGE_NAME_SD,xxvsp[0].node);}
break;
case 111:
#line 383 "lace_y.y"
{xxval.node = NULL;}
break;
case 112:
#line 384 "lace_y.y"
{list_init();}
break;
case 113:
#line 385 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 114:
#line 389 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 115:
#line 391 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 116:
#line 395 "lace_y.y"
{xxval.node = NULL;}
break;
case 117:
#line 397 "lace_y.y"
{xxval.node = create_node3 (LANG_GEN_SD,xxvsp[-3].node,xxvsp[-2].node,xxvsp[0].node);}
break;
case 118:
#line 401 "lace_y.y"
{xxval.node = NULL;}
break;
case 119:
#line 403 "lace_y.y"
{xxval.node = xxvsp[-1].node;}
break;
case 120:
#line 407 "lace_y.y"
{xxval.node = create_node (YES_SD);}
break;
case 121:
#line 409 "lace_y.y"
{xxval.node = create_node (NO_SD);}
break;
case 122:
#line 413 "lace_y.y"
{xxval.node = NULL;}
break;
case 123:
#line 414 "lace_y.y"
{list_init();}
break;
case 124:
#line 415 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 125:
#line 419 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 126:
#line 421 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 127:
#line 425 "lace_y.y"
{xxval.node = NULL;}
break;
case 128:
#line 427 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxvsp[0].node,NULL,NULL,NULL,NULL);}
break;
case 129:
#line 429 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxvsp[-1].node,NULL,NULL,NULL,NULL);}
break;
case 130:
#line 431 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxvsp[-5].node,xxvsp[-4].node,xxvsp[-3].node,xxvsp[-2].node,xxvsp[-1].node);}
break;
case 131:
#line 435 "lace_y.y"
{xxval.node = NULL;}
break;
case 132:
#line 437 "lace_y.y"
{xxval.node = xxvsp[0].node;}
break;
case 133:
#line 441 "lace_y.y"
{xxval.node = NULL;}
break;
case 134:
#line 442 "lace_y.y"
{list_init();}
break;
case 135:
#line 443 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 136:
#line 447 "lace_y.y"
{xxval.node = NULL;}
break;
case 137:
#line 448 "lace_y.y"
{list_init();}
break;
case 138:
#line 449 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 139:
#line 453 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 140:
#line 455 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 141:
#line 459 "lace_y.y"
{xxval.node = NULL;}
break;
case 142:
#line 460 "lace_y.y"
{list_init();}
break;
case 143:
#line 461 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 144:
#line 465 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 145:
#line 467 "lace_y.y"
{list_push(xxvsp[0].node);}
break;
case 146:
#line 471 "lace_y.y"
{xxval.node = NULL;}
break;
case 147:
#line 473 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxvsp[-2].node,xxvsp[0].node);}
break;
case 148:
#line 477 "lace_y.y"
{xxval.node = lace_id (token_str);}
break;
case 149:
#line 479 "lace_y.y"
{xxval.node = lace_id (token_str);}
break;
#line 1216 "y.tab.c"
    }
    xxssp -= xxm;
    xxstate = *xxssp;
    xxvsp -= xxm;
    xxm = xxlhs[xxn];
    if (xxstate == 0 && xxm == 0)
    {
#if YYDEBUG
        if (xxdebug)
            printf("xxdebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        xxstate = YYFINAL;
        *++xxssp = YYFINAL;
        *++xxvsp = xxval;
        if (xxchar < 0)
        {
            if ((xxchar = xxlex()) < 0) xxchar = 0;
#if YYDEBUG
            if (xxdebug)
            {
                xxs = 0;
                if (xxchar <= YYMAXTOKEN) xxs = xxname[xxchar];
                if (!xxs) xxs = "illegal-symbol";
                printf("xxdebug: state %d, reading %d (%s)\n",
                        YYFINAL, xxchar, xxs);
            }
#endif
        }
        if (xxchar == 0) goto xxaccept;
        goto xxloop;
    }
    if ((xxn = xxgindex[xxm]) && (xxn += xxstate) >= 0 &&
            xxn <= YYTABLESIZE && xxcheck[xxn] == xxstate)
        xxstate = xxtable[xxn];
    else
        xxstate = xxdgoto[xxm];
#if YYDEBUG
    if (xxdebug)
        printf("xxdebug: after reduction, shifting from state %d \
to state %d\n", *xxssp, xxstate);
#endif
    if (xxssp >= xxss + xxstacksize - 1)
    {
        goto xxoverflow;
    }
    *++xxssp = xxstate;
    *++xxvsp = xxval;
    goto xxloop;
xxoverflow:
    xxerror("yacc stack overflow");
xxabort:
    return (1);
xxaccept:
    return (0);
}
