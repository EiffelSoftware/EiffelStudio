<document title="Common Scenarios">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>
			<content>ASP.NET</content>
		</heading>

		Probably the most common use of the CodeDom technology is via Internet Information Services (IIS) and ASP.NET. 
		The installation of the ASP.NET Enabler will configure the machine so ASP.NET pages can be written in Eiffel. 
		Consult the <link><url>../enabler/installation</url><label>ASP.NET Enabler documentation</label></link> for 
		details on how to write ASP.NET Eiffel pages.

		<heading>
			<size>2</size>
			<content>WSDL</content>
		</heading>

		Another use of the CodeDom technology is via the WSDL utility. This utility is part of the .NET Framework SDK and 
		is a common line application that can be used to automatically generate stub source code for any Web Service 
		described by a Web Service Description Language (WSDL) file. It is possible to tell the utility which CodeDom 
		Provider to use via the command line as follows:
		
		<code_block>
Wsdl /language:"EiffelSoftware.CodeDom.CodeDomProvider, EiffelSoftware.CodeDom, Version=2.0.1.1402, Culture=neutral, PublicKeyToken=def26f296efef469" http://api.google.com/GoogleSearch.wsdl</code_block>

		<note>
			<bold>Note:</bold> The vesion number used above might differ depending on the version of the Eiffel CodeDom Provider dll 
			installed on your system.
		</note>

		<note>
			<bold>Note:</bold> This will generate a file with the extension <bold>.es</bold> which contains multiple
			 Eiffel class definitions. Compiling this file will require using the CodeDom compiler (programmatically via the 
			 CodeDom <code><indexing_tag>ICodeCompiler</indexing_tag></code> interface) or using the 
			<link><url>../tools/esplitter.xml</url><label>eSplitter</label></link> tool to generate standard Eiffel source
			 files (<bold>.e</bold> files) that can then be compiled by the standard Eiffel compiler.
		</note>

	</paragraph>
</document>
