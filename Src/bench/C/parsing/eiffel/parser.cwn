
# line 13 "parser.y"
#include "eiffel_c.h"
#include <stdio.h>

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2
#define SET_POS(x) yacc_position = x->start_position; yacc_line_number = x->line_number

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];
int fclause_pos;

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2


# line 40 "parser.y"
typedef union
#ifdef __cplusplus
	YYSTYPE
#endif
 {
	char *node;

	int32 value;

	struct location *loc;

	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
# define TE_DOTDOT 257
# define TE_IMPLIES 258
# define TE_OR 259
# define TE_XOR 260
# define TE_AND 261
# define TE_NE 262
# define TE_EQ 263
# define TE_LT 264
# define TE_GT 265
# define TE_LE 266
# define TE_GE 267
# define TE_PLUS 268
# define TE_MINUS 269
# define TE_STAR 270
# define TE_SLASH 271
# define TE_MOD 272
# define TE_DIV 273
# define TE_POWER 274
# define TE_FREE 275
# define TE_NOT 276
# define TE_STRIP 277
# define TE_OLD 278
# define TE_DOT 279
# define TE_LPARAN 280
# define TE_ALIAS 281
# define TE_ALL 282
# define TE_INTEGER 283
# define TE_CHAR 284
# define TE_REAL 285
# define TE_STRING 286
# define TE_ID 287
# define TE_A_BIT 288
# define TE_BANG 289
# define TE_BIT 290
# define TE_SEMICOLON 291
# define TE_COLON 292
# define TE_COMMA 293
# define TE_CREATION 294
# define TE_LARRAY 295
# define TE_RARRAY 296
# define TE_RPARAN 297
# define TE_LCURLY 298
# define TE_RCURLY 299
# define TE_LSQURE 300
# define TE_RSQURE 301
# define TE_CONSTRAIN 302
# define TE_FALSE 303
# define TE_TRUE 304
# define TE_ACCEPT 305
# define TE_ADDRESS 306
# define TE_AS 307
# define TE_ASSIGN 308
# define TE_CHECK 309
# define TE_CLASS 310
# define TE_CURRENT 311
# define TE_DEBUG 312
# define TE_DEFERRED 313
# define TE_DO 314
# define TE_ELSE 315
# define TE_ELSEIF 316
# define TE_END 317
# define TE_ENSURE 318
# define TE_EXPANDED 319
# define TE_EXPORT 320
# define TE_EXTERNAL 321
# define TE_FEATURE 322
# define TE_FROM 323
# define TE_FROZEN 324
# define TE_IF 325
# define TE_INDEXING 326
# define TE_IN_END 327
# define TE_INFIX 328
# define TE_INHERIT 329
# define TE_INSPECT 330
# define TE_INVARIANT 331
# define TE_IS 332
# define TE_LIKE 333
# define TE_LOCAL 334
# define TE_LOOP 335
# define TE_OBSOLETE 336
# define TE_ONCE 337
# define TE_PRECURSOR 338
# define TE_PREFIX 339
# define TE_REDEFINE 340
# define TE_RENAME 341
# define TE_REQUIRE 342
# define TE_RESCUE 343
# define TE_RESULT 344
# define TE_RETRY 345
# define TE_SELECT 346
# define TE_SEPARATE 347
# define TE_THEN 348
# define TE_UNDEFINE 349
# define TE_UNIQUE 350
# define TE_UNTIL 351
# define TE_VARIANT 352
# define TE_WHEN 353
# define EIF_ERROR2 354
# define EIF_ERROR3 355
# define EIF_ERROR4 356
# define EIF_ERROR5 357
# define EIF_ERROR6 358
# define EIF_ERROR7 359

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

/* #include <values.h> */

#ifdef __cplusplus

#ifndef yyerror
	void yyerror(const char *);
#endif

#ifndef yylex
#ifdef __EXTERN_C__
	extern "C" { int yylex(void); }
#else
	int yylex(void);
#endif
#endif
	int yyparse(void);

#endif
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
YYSTYPE yylval;
YYSTYPE yyval;
typedef int yytabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int yy_yys[YYMAXDEPTH], *yys = yy_yys;
YYSTYPE yy_yyv[YYMAXDEPTH], *yyv = yy_yyv;
#else	/* user does initial allocation */
int *yys;
YYSTYPE *yyv;
#endif
static int yymaxdepth = YYMAXDEPTH;
# define YYERRCODE 256

# line 1401 "parser.y"

char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char separate;					/* Boolean mark for separate class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap(void)
{
	return 1;
}
yytabelem yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 3,
	310, 7,
	313, 7,
	319, 7,
	347, 7,
	-2, 5,
-1, 10,
	310, 6,
	313, 6,
	319, 6,
	347, 6,
	-2, 13,
-1, 52,
	294, 271,
	-2, 270,
-1, 53,
	287, 66,
	-2, 42,
-1, 58,
	322, 26,
	-2, 25,
-1, 69,
	287, 33,
	328, 33,
	339, 33,
	-2, 275,
-1, 83,
	287, 34,
	328, 34,
	339, 34,
	-2, 278,
-1, 87,
	320, 76,
	340, 76,
	346, 76,
	349, 76,
	-2, 71,
-1, 102,
	287, 78,
	328, 78,
	339, 78,
	-2, 77,
-1, 107,
	313, 167,
	314, 167,
	317, 167,
	321, 167,
	334, 167,
	337, 167,
	343, 167,
	351, 167,
	352, 167,
	-2, 392,
-1, 120,
	298, 84,
	-2, 42,
-1, 130,
	313, 168,
	314, 168,
	317, 168,
	321, 168,
	334, 168,
	337, 168,
	343, 168,
	351, 168,
	352, 168,
	-2, 392,
-1, 141,
	317, 96,
	340, 96,
	346, 96,
	-2, 97,
-1, 190,
	317, 32,
	322, 32,
	331, 32,
	-2, 44,
-1, 194,
	317, 100,
	346, 100,
	-2, 101,
-1, 246,
	317, 104,
	-2, 105,
-1, 353,
	283, 382,
	285, 382,
	-2, 23,
-1, 391,
	287, 113,
	-2, 138,
-1, 400,
	315, 140,
	316, 140,
	317, 140,
	318, 140,
	331, 140,
	343, 140,
	351, 140,
	352, 140,
	353, 140,
	-2, 144,
-1, 410,
	312, 253,
	323, 240,
	325, 201,
	330, 218,
	-2, 293,
-1, 444,
	315, 139,
	316, 139,
	317, 139,
	318, 139,
	331, 139,
	343, 139,
	351, 139,
	352, 139,
	353, 139,
	-2, 143,
-1, 500,
	316, 206,
	-2, 205,
	};
# define YYNPROD 393
# define YYLAST 964
yytabelem yyact[]={

   169,   527,   172,   504,   225,   482,   112,   400,   185,   186,
   398,    28,   106,   404,   123,   184,   180,   178,   179,   183,
    27,   131,    19,   355,    48,   311,   166,   165,   484,    25,
   509,    37,   159,   187,   167,   170,   168,   521,   164,    39,
    40,   173,    34,   174,    37,    14,    36,    27,   154,   141,
   175,   530,   397,   177,   246,    34,   189,    37,    14,    36,
   395,    32,    33,   367,   308,    14,    35,    72,    30,   181,
     5,   166,   165,   194,    32,    33,     6,    72,   187,   167,
   170,   168,    91,   164,   100,   344,   173,    34,   174,    37,
    14,    36,   176,    35,    20,    30,   188,   127,   177,    39,
    40,   189,   182,    38,     7,    49,    32,    33,   102,   370,
    31,   124,   317,   353,   181,    34,    38,    37,   267,    36,
   326,    20,   471,   495,    77,   171,   125,    20,   452,    38,
    39,    40,   150,   151,    32,    33,     3,    31,    53,   152,
   128,   188,    54,    26,   451,   306,    34,   182,    37,    14,
    36,   327,   157,    23,   126,   124,   377,   378,    80,   297,
   223,    38,   115,   201,   380,    32,    33,    49,   115,   453,
    26,   120,   295,   116,   386,   555,   541,   514,   496,   116,
   379,   358,   478,   406,   328,   298,    92,   528,   287,    38,
   286,   525,   502,   240,   372,   454,   237,   227,   229,   230,
   231,   232,   233,    14,   285,    15,   455,   200,   135,   137,
   111,   148,    75,    63,   103,    89,    69,   139,   336,   147,
    38,    62,   450,   138,   318,   449,    42,   156,   223,   292,
   223,   223,   223,   223,   223,    97,    84,   476,   361,   257,
   258,   259,   260,   261,   262,   263,   264,   266,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   223,   223,
   223,   223,   223,   223,   223,   223,   226,   223,   284,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,    14,
   498,   348,   324,   457,   497,   223,   323,   330,   278,   313,
   242,   448,   517,   316,   447,    45,   331,    44,   303,   226,
   304,   110,   133,   320,   223,   223,   314,   443,   223,   226,
   199,   540,   307,   373,    14,   347,   426,    18,    14,   411,
    20,   224,   335,    45,    57,   189,    39,    40,    34,   405,
    46,    14,   146,   223,    39,    40,   252,   228,   442,    46,
   403,    47,    34,   223,   191,    14,    13,   332,    13,   351,
   226,   466,    43,    14,   124,    24,    27,   307,   339,   342,
   281,   480,   354,   309,   236,   188,   239,   238,   315,   237,
   520,   435,   441,   212,   187,   519,   518,   158,   360,    79,
   124,   145,    24,   357,   382,   197,    22,    68,   384,   365,
   208,   209,   210,   211,   212,   187,   392,   235,   282,   401,
    71,    11,    35,    82,    30,   391,    61,   283,    88,   408,
   146,   255,    16,   305,    56,   279,   234,   412,   413,   432,
   433,   410,   414,   444,    86,   440,   431,   429,   430,   428,
   427,    51,    96,   124,    67,    59,   118,   407,    99,   487,
   198,   446,   289,   290,   291,   477,    31,   206,   207,   208,
   209,   210,   211,   212,   187,    81,   475,   223,    94,   223,
   223,   223,   223,   223,   223,   153,   155,   439,   467,   160,
   341,    85,    93,   143,   551,   474,   456,   192,    73,    26,
   458,   459,   460,   461,   462,   463,   486,   485,   464,   492,
   438,   488,   490,   340,   499,   160,   506,   248,   545,   108,
   105,   516,   503,   493,   333,   505,   334,   321,   510,   491,
    83,   205,   511,   473,   329,   437,   542,   515,   552,   325,
   506,   531,   534,   538,   223,   526,   529,   241,   543,   505,
   532,   513,   536,   149,   500,   204,   109,   481,   436,    64,
   223,    55,   523,    50,   122,   223,   104,   130,   223,   300,
   250,   129,   107,   548,   539,   302,   550,   256,   409,   202,
   203,   544,   553,   554,   396,   383,   371,   399,   381,   388,
   387,   390,   364,   547,   288,   288,   288,   288,   166,   165,
   293,   254,   249,   310,   368,   187,   167,   170,   168,   363,
   164,   349,   299,   173,    34,   174,    37,    14,    36,   247,
   195,   322,   301,   253,   196,   177,   142,   144,   189,   121,
    70,    60,   296,    32,    33,   319,   166,   165,   244,   312,
   117,   181,    98,   187,   167,   170,   168,   190,   164,   132,
    95,   173,    34,   174,    37,    14,    36,    66,    21,    17,
    10,     8,     9,   177,     4,   352,   189,   288,   188,   356,
   294,    32,    33,   288,   182,   114,   113,   136,   265,   181,
   134,   501,    76,   161,   163,   424,   417,   362,    38,   343,
   216,   213,   222,   221,   220,   218,   219,   217,   206,   207,
   208,   209,   210,   211,   212,   187,   188,    65,   162,   479,
   345,   469,   182,   445,   416,    58,   419,   418,   394,   425,
   465,   312,   423,   508,   494,   422,    38,   215,   214,   216,
   213,   222,   221,   220,   218,   219,   217,   206,   207,   208,
   209,   210,   211,   212,   187,   421,   483,   524,   512,   420,
    74,    41,    87,    90,   385,   415,   366,   393,   369,   375,
   402,   389,   376,   374,   359,   346,   338,   245,   434,   215,
   214,   216,   213,   222,   221,   220,   218,   219,   217,   206,
   207,   208,   209,   210,   211,   212,   187,   215,   214,   216,
   213,   222,   221,   220,   218,   219,   217,   206,   207,   208,
   209,   210,   211,   212,   187,   193,   140,   251,   119,   101,
    52,   337,   243,    78,    29,   470,    12,   549,   215,   214,
   216,   213,   222,   221,   220,   218,   219,   217,   206,   207,
   208,   209,   210,   211,   212,   187,     2,     1,   489,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   507,     0,     0,     0,     0,     0,   468,     0,   472,
     0,     0,     0,     0,   546,     0,     0,   522,     0,     0,
     0,     0,     0,     0,     0,   507,   533,   535,   537,   215,
   214,   216,   213,   222,   221,   220,   218,   219,   217,   206,
   207,   208,   209,   210,   211,   212,   187,   215,   214,   216,
   213,   222,   221,   220,   218,   219,   217,   206,   207,   208,
   209,   210,   211,   212,   187,     0,     0,     0,   350,   214,
   216,   213,   222,   221,   220,   218,   219,   217,   206,   207,
   208,   209,   210,   211,   212,   187,   280,   215,   214,   216,
   213,   222,   221,   220,   218,   219,   217,   206,   207,   208,
   209,   210,   211,   212,   187,   213,   222,   221,   220,   218,
   219,   217,   206,   207,   208,   209,   210,   211,   212,   187,
   222,   221,   220,   218,   219,   217,   206,   207,   208,   209,
   210,   211,   212,   187 };
yytabelem yypact[]={

  -190,-10000000,  -243,-10000000,-10000000,-10000000,-10000000,-10000000,    31,  -105,
    31,-10000000,-10000000,    25,-10000000,    33,-10000000,  -138,-10000000,   -74,
-10000000,     4,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,    56,-10000000,-10000000,-10000000,-10000000,
-10000000,  -231,-10000000,-10000000,  -229,-10000000,-10000000,-10000000,  -191,  -255,
    37,-10000000,-10000000,    32,-10000000,   -80,-10000000,-10000000,-10000000,   -78,
    33,-10000000,-10000000,    37,   -90,  -207,  -164,   -78,-10000000,   -62,
    33,    32,   -85,-10000000,-10000000,    33,  -131,-10000000,  -164,-10000000,
-10000000,-10000000,-10000000,-10000000,   -64,    32,-10000000,  -233,-10000000,   -87,
-10000000,   -85,-10000000,-10000000,-10000000,   -62,  -166,-10000000,    31,-10000000,
-10000000,  -149,-10000000,-10000000,  -193,-10000000,-10000000,-10000000,-10000000,-10000000,
     9,-10000000,-10000000,-10000000,-10000000,  -255,  -255,   -76,-10000000,  -300,
    32,  -166,   -82,-10000000,   -85,    33,    33,    66,   -84,-10000000,
-10000000,   348,-10000000,  -166,-10000000,-10000000,-10000000,-10000000,-10000000,    31,
  -267,-10000000,   -62,-10000000,    17,-10000000,  -100,-10000000,  -193,-10000000,
   -85,   -85,-10000000,-10000000,    47,-10000000,-10000000,   348,    32,   659,
    29,-10000000,-10000000,-10000000,   348,   348,   348,   348,   348,   348,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,    85,    90,    88,-10000000,    87,-10000000,-10000000,    70,    -8,
-10000000,-10000000,-10000000,  -292,-10000000,  -166,   -62,    32,    54,  -166,
  -166,-10000000,-10000000,-10000000,    32,-10000000,   348,   348,   348,   348,
   348,   348,   348,   310,  -197,   348,   348,   348,   348,   348,
   348,   348,   348,   348,   348,-10000000,    -9,   619,    70,-10000000,
-10000000,-10000000,-10000000,-10000000,    80,   348,    31,    31,    31,    31,
-10000000,   -70,    31,-10000000,  -165,  -132,-10000000,  -166,     9,    32,
-10000000,-10000000,-10000000,  -166,-10000000,-10000000,-10000000,   120,   120,    99,
    99,    99,    99,    99,   688,   348,   410,   348,   640,   674,
   179,   179,   179,   179,   179,   179,-10000000,   659,-10000000,  -242,
    84,    31,    -7,    13,   659,-10000000,-10000000,    89,    70,-10000000,
-10000000,-10000000,  -226,   -75,    10,-10000000,  -166,-10000000,-10000000,  -166,
     9,-10000000,     9,   688,   410,   -11,-10000000,   659,  -160,    31,
   -10,     3,-10000000,-10000000,   348,    31,-10000000,    70,   -81,    78,
  -165,-10000000,     9,-10000000,  -242,-10000000,   348,-10000000,-10000000,-10000000,
-10000000,    31,   659,    89,-10000000,-10000000,  -253,    32,    23,   -16,
-10000000,-10000000,   601,-10000000,    70,-10000000,  -219,  -193,-10000000,-10000000,
-10000000,-10000000,-10000000,  -169,-10000000,   -59,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,    31,  -279,     3,  -225,  -121,    21,  -157,
-10000000,-10000000,-10000000,  -193,  -144,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,    32,  -283,  -296,-10000000,-10000000,    59,
    43,-10000000,-10000000,-10000000,  -134,-10000000,-10000000,-10000000,-10000000,-10000000,
    28,-10000000,-10000000,    43,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
    27,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -193,    88,-10000000,-10000000,
-10000000,-10000000,    87,-10000000,   -14,   -83,  -181,  -202,  -154,  -117,
  -103,-10000000,    85,   348,    28,    -6,-10000000,   348,   348,   348,
   348,   348,   348,-10000000,    71,-10000000,   540,  -222,   659,   659,
   659,   659,   491,   659,-10000000,-10000000,   -60,  -135,    84,    82,
-10000000,-10000000,-10000000,  -325,-10000000,-10000000,-10000000,    43,-10000000,-10000000,
    31,-10000000,-10000000,  -325,-10000000,  -208,  -139,   -13,-10000000,    70,
-10000000,  -123,-10000000,    58,  -322,-10000000,-10000000,-10000000,    43,-10000000,
-10000000,  -140,-10000000,    -1,-10000000,   119,   118,   113,  -314,   348,
-10000000,-10000000,  -124,  -129,-10000000,-10000000,  -297,    58,    66,    44,
    58,   348,    19,   659,  -141,-10000000,  -129,-10000000,   348,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,   509,
   348,-10000000,-10000000,-10000000,   449,-10000000,-10000000,   659,-10000000,-10000000,
-10000000,-10000000,-10000000,  -142,-10000000,-10000000 };
yytabelem yypgo[]={

     0,   817,   816,   796,   401,   337,   386,    29,   125,     2,
    11,   794,    50,    13,    92,    24,   379,   793,   403,   792,
   791,   790,   400,   789,   788,   385,   787,   786,   785,   747,
   746,   745,   744,   743,   742,   741,   740,   739,   738,   736,
   735,   734,   377,    14,   733,   408,   732,   731,   414,   730,
   729,   728,     1,   727,   726,   725,   705,   704,   703,   702,
   700,   699,   698,   697,   696,   695,   387,   694,   693,   691,
   689,    32,   145,   688,     3,   687,   381,   667,   666,   665,
    12,    19,    18,    17,    16,   664,   204,     4,   663,   440,
   190,   188,   662,     0,    15,   661,     9,     8,    21,    48,
     6,   210,   660,   657,   656,   655,   172,   650,   649,   645,
   644,   642,   641,   640,   639,   638,   352,   637,   630,   629,
   627,   622,   620,   618,   615,   612,   611,   610,   609,   607,
   606,   604,   603,   301,   600,   599,   592,   591,    23,   589,
    25,   584,   583,   572,   571,   570,    10,   569,   568,   567,
     7,   566,   565,   564,   558,   552,   551,   547,   546,   544,
   543,   541,   539,   538,   537,   534,   531,   525,   518,   517,
   516,   515,   513,     5,   509,   503,   502,   501,   498,   490,
   488,   487,   474,   472,   467,   456,   445,   439,   437,   435,
   434,   432,   425,   416,   415,   413,   407,   398,   397 };
yytabelem yyr1[]={

     0,   111,     1,   100,     2,   112,     2,     2,   113,   113,
   114,     4,     3,     3,   115,   115,   115,     6,     6,   110,
   110,   110,   110,    15,    15,    75,   117,    75,    17,    17,
   118,   119,    16,    18,    18,    89,   121,    89,   122,   122,
   120,   120,   116,   116,   123,   124,    19,   107,   107,   106,
   125,   125,   101,   101,   101,   104,   105,   102,   103,    20,
   109,   109,   108,   108,   108,    21,   126,    21,    21,   127,
   127,    22,    22,    22,    46,    46,    23,    23,   128,    23,
   129,   129,    76,    24,   130,    24,    24,   131,   131,    25,
    26,   132,    26,   133,   133,    27,    27,   134,    27,    28,
    28,   135,    28,    29,    29,   136,    29,    30,    30,   137,
    30,   138,   138,   139,   141,    77,   140,   140,   142,   142,
    31,    31,   143,    32,    33,    33,    33,    34,   144,    35,
    36,    36,   145,    37,   147,    37,    38,   148,    38,   146,
   146,   150,   150,   149,   149,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    39,   151,    39,   152,    39,
    41,   153,    41,   154,    41,   155,    80,   156,   156,   157,
   157,    42,    42,    42,    43,    43,    43,    43,    43,    43,
    43,    43,    43,    43,    44,    44,    45,   158,    45,   159,
   159,    47,   160,    47,   161,   161,   161,   162,    48,    49,
    49,   163,   164,   165,    50,    51,   166,    51,   167,   167,
   168,    52,    95,   169,    95,    53,   170,    53,   171,   172,
   174,    55,   173,   173,   175,   177,   178,    54,   176,   176,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
   179,   180,   181,   182,    56,    57,    57,    92,   183,    92,
    58,    58,    58,   184,   185,    59,    60,    60,   186,    60,
   187,   187,    61,    62,   188,    62,    63,    63,    64,    64,
    65,   189,    65,   190,   190,    66,   191,    66,    66,    67,
    68,    68,    69,    69,    70,    70,    78,    78,    78,    78,
    78,    78,    78,   192,    79,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,   193,    71,    72,    72,    72,    72,
    72,    93,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    83,    82,    84,    94,    96,    97,    97,    97,    86,
    86,    90,    90,    81,    91,    87,    87,   194,    87,   195,
   195,   196,   196,   197,   197,     5,     7,     7,     7,     7,
     7,     7,    88,    88,    88,    88,    88,    88,     8,     8,
     9,    10,    99,    99,    99,    11,    12,    14,    14,    13,
   198,    73,    98 };
yytabelem yyr2[]={

     0,     1,    25,     3,     1,     1,     7,     3,     3,     5,
     1,     9,     5,     1,     3,     7,     2,     3,     3,     1,
     3,     3,     3,     1,     5,     1,     1,     5,     3,     5,
     1,     1,    11,     1,     3,     5,     1,     9,     3,     7,
     0,     5,     0,     2,     1,     1,    11,     3,     7,     5,
     1,     3,     3,     3,     3,     5,     5,     3,     3,     7,
     1,     5,     3,     3,     3,     1,     1,     7,     5,     5,
     7,     5,     7,    17,     1,     3,     1,     3,     1,     7,
     3,     7,     7,     1,     1,     7,     5,     5,     7,     5,
     3,     1,     5,     3,     7,     1,     3,     1,     7,     1,
     3,     1,     7,     1,     3,     1,     7,     1,     5,     1,
     9,     0,     5,     1,     1,    13,     3,     7,     0,     2,
     1,     5,     1,    17,     3,     3,     3,     7,     1,     5,
     1,     5,     1,     7,     1,     7,     1,     1,     7,     9,
     2,     4,     0,     9,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     1,     7,     1,     9,
     1,     1,     7,     1,     9,     1,     5,     0,     2,     7,
     9,     3,     7,     5,     3,     5,     5,     7,     5,     7,
     5,     5,     5,     5,     3,     5,     5,     1,     9,     3,
     7,     1,     1,     9,     0,     3,     7,     1,     7,     1,
     5,     1,     1,     1,    21,     1,     1,     5,     3,     5,
     1,    11,     1,     1,     7,     1,     1,     7,     1,     1,
     1,    17,     0,     5,     1,     1,     1,    15,     3,     7,
     3,     3,     3,     7,     7,     7,     7,     7,     7,     7,
     1,     1,     1,     1,    27,     1,     5,     1,     1,     7,
     1,     9,     5,     1,     1,    13,     1,     5,     1,     9,
     3,     7,     3,     1,     1,     7,     7,     7,     7,     7,
     1,     1,     5,     3,     5,     3,     1,     9,     5,    11,
     1,     3,     3,     3,     1,     7,     3,     3,     3,     3,
     3,     3,     3,     1,     9,     3,     3,     3,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     9,     7,     9,
     7,     7,     7,     7,     7,     7,     7,     7,     7,     5,
     5,     5,     5,     5,     1,    11,     3,     5,     9,     5,
     5,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     7,     7,     7,    11,     7,     5,    11,    15,     3,
     3,     7,     7,     5,     5,     1,     5,     1,     9,     3,
     7,     3,     7,     0,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     5,     1,     3,     3,     5,     3,     3,     3,     3,
     1,     9,     1 };
yytabelem yychk[]={

-10000000,    -1,    -2,   326,  -110,   313,   319,   347,  -112,  -111,
  -113,    -4,    -3,    -5,   287,   310,    -4,  -114,   292,  -100,
   287,  -115,    -6,   291,    -5,    -7,    -8,    -9,   -10,   -11,
   -12,   -14,   303,   304,   284,   -99,   288,   286,   358,   268,
   269,   -47,   300,  -116,   293,   291,   283,   285,   -15,   336,
  -160,    -6,   -21,   329,   -14,  -161,   -48,   287,   -65,  -189,
  -126,  -116,   301,   293,  -162,   -75,  -117,  -190,   -66,   294,
  -127,   -22,  -100,   -48,   -49,   302,   -92,   331,   -17,   -16,
   322,   -66,   -18,   -89,   298,   -22,  -116,   -46,   -45,   300,
   -44,  -100,   317,  -183,   -16,  -118,  -191,   299,  -121,  -116,
   317,   -23,   341,   301,  -158,   -45,   -80,  -155,   -18,   -89,
  -133,  -101,  -100,  -104,  -105,   328,   339,  -122,    -5,   -24,
   320,  -128,  -159,   -43,  -100,   319,   347,   290,   333,  -156,
  -157,   -98,  -119,   293,  -102,   -14,  -103,   -14,   299,   293,
   -27,   349,  -130,  -116,  -129,   -76,  -101,   301,   293,   -45,
  -100,  -100,   -10,    -5,   -99,    -5,   311,   -98,   -42,   -71,
    -5,   -88,   -73,   -85,   280,   269,   268,   276,   278,   -93,
   277,    -8,    -9,   283,   285,   -12,   -14,   295,   -83,   -82,
   -84,   311,   344,   -81,   -94,   -97,   -96,   275,   338,   298,
  -120,  -101,    -5,   -28,   340,  -134,  -131,   -25,   -89,   293,
   307,   -43,   -45,   -45,   -42,  -116,   268,   269,   270,   271,
   272,   273,   274,   261,   259,   258,   260,   267,   265,   266,
   264,   263,   262,   -93,   292,   -87,   280,   -71,    -5,   -71,
   -71,   -71,   -71,   -71,  -193,  -198,   279,   279,   279,   279,
   -87,    -5,   298,   -19,  -123,   -29,   346,  -135,  -133,   -25,
  -116,   -26,   282,  -132,   -76,  -101,  -116,   -71,   -71,   -71,
   -71,   -71,   -71,   -71,   -71,   348,   -71,   315,   -71,   -71,
   -71,   -71,   -71,   -71,   -71,   -71,   -71,   -71,   297,  -194,
   297,   280,  -197,  -196,   -71,   -86,   -90,   -91,    -5,   -86,
   -86,   -86,   299,    -5,  -107,  -106,  -125,   324,   317,  -136,
  -133,  -116,  -133,   -71,   -71,  -195,   -72,   -71,   306,   279,
  -142,  -140,    -5,   296,   293,   279,   -87,   338,   299,  -124,
   293,  -101,  -133,   297,   293,  -101,   280,   311,   344,   -86,
   297,   293,   -71,   -91,   -90,   -87,   299,   -20,   -30,   280,
  -106,   -72,   -71,    -5,   338,  -116,   -31,   292,   297,  -137,
   297,   -87,  -109,   332,   -43,  -138,  -108,    -7,   350,   -32,
   -15,   297,   -77,  -139,  -143,  -140,   -39,   342,  -141,   -38,
   334,  -151,   315,   292,   -33,   -37,   -34,   313,   314,   337,
   321,  -148,   -80,  -152,   -43,   -41,   318,  -145,  -147,   -35,
  -144,  -138,   -80,  -116,   -62,   343,  -153,   348,  -146,  -149,
  -150,  -146,   -36,   281,   -13,   286,   317,  -188,   -80,  -154,
   -98,   291,   -13,  -146,   -80,   -40,   -67,   -78,   -63,   -64,
   -50,   -55,   -56,   -59,   -79,   -61,   289,   -81,   -82,   -84,
   -83,   -94,   -97,   -96,    -5,   344,  -163,  -171,  -179,  -184,
  -192,   345,   311,   280,  -150,   -68,   -43,   308,   305,   308,
   305,   325,   330,   323,   312,   309,   -71,   289,   -71,   -71,
   -71,   -71,   -71,   -71,  -180,   -60,   280,   -80,   297,   -69,
    -5,   344,   348,  -172,  -146,  -185,   297,  -186,   317,   -70,
   279,  -164,  -173,   -54,   353,  -181,  -146,  -187,   -13,    -5,
  -146,  -174,  -173,  -175,   -57,   331,   317,   297,   293,   -87,
  -165,   -95,   315,  -176,   -74,   -10,    -9,    -5,   -58,   352,
   -80,   -13,   -51,  -166,   317,  -169,  -177,   293,   257,   257,
   257,   351,    -5,   -71,   -53,   315,  -167,   -52,   316,  -146,
   348,   -74,   -10,    -5,    -9,    -5,   -10,    -5,    -9,   -71,
   292,   317,  -170,   -52,   -71,  -178,   335,   -71,  -146,   348,
  -146,  -182,  -168,  -146,  -146,   317 };
yytabelem yydef[]={

     4,    -2,    19,    -2,     1,    20,    21,    22,    13,     0,
    -2,     8,    10,     0,   365,     0,     9,   382,    12,   191,
     3,    42,    14,    16,    17,    18,   366,   367,   368,   369,
   370,   371,   378,   379,   380,     0,   386,   387,   388,   383,
   384,    23,   192,    11,   382,    43,   381,   385,    65,     0,
   194,    15,    -2,    -2,    24,     0,   195,   197,    -2,     0,
     0,    68,   193,     0,   199,   247,     0,   272,   273,    -2,
    67,    42,    74,   196,   198,     0,     0,   248,    27,    28,
    30,   274,   276,    -2,    36,    42,    69,    -2,    75,   187,
   200,   184,     2,   165,    29,    33,     0,    35,     0,    70,
    72,    83,    -2,   186,     0,   185,   249,    -2,    31,    34,
   277,    93,    52,    53,    54,     0,     0,     0,    38,    95,
    -2,     0,     0,   189,   174,     0,     0,   382,     0,   166,
    -2,     0,    40,     0,    55,    57,    56,    58,    37,     0,
    99,    -2,     0,    86,    79,    80,     0,   188,     0,   175,
   176,   178,   180,   181,     0,   182,   183,     0,    42,   171,
   355,   295,   296,   297,     0,     0,     0,     0,     0,     0,
   324,   372,   373,   374,   375,   376,   377,   390,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   331,   355,     0,
    -2,    94,    39,   103,    -2,     0,    85,    42,    91,     0,
     0,   190,   177,   179,    42,   169,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   173,   353,   357,     0,   355,   319,
   320,   321,   322,   323,     0,   363,     0,     0,     0,     0,
   346,     0,     0,    41,    50,     0,    -2,     0,    98,    42,
    87,    89,    90,     0,    81,    82,   170,   299,   300,   301,
   302,   303,   304,   305,   306,     0,   308,     0,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   172,   356,     0,
   298,   118,     0,   364,   361,   341,   349,   350,   355,   342,
   343,   345,     0,     0,    45,    47,     0,    51,    73,     0,
   102,    88,    92,   307,   309,     0,   359,   326,     0,     0,
     0,   119,   116,   391,     0,     0,   354,   355,     0,   107,
    50,    49,   106,   358,     0,   327,     0,   329,   330,   344,
   325,     0,   362,   351,   352,   347,     0,    42,   120,   109,
    48,   360,     0,   117,   355,    46,    60,     0,   108,   111,
   328,   348,    59,    -2,   121,   113,    61,    62,    63,    64,
   122,   110,   112,     0,   155,   114,   136,   156,     0,     0,
   137,   165,   158,     0,   160,   124,   125,   126,   132,   134,
   128,   111,   157,   165,    42,   263,   161,   142,   142,   130,
     0,    -2,   159,   115,     0,   264,   165,   163,   133,   392,
    -2,   135,   127,     0,   129,   389,   123,   142,   162,   165,
    -2,   141,   131,   265,   164,   142,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   280,   286,   287,   288,
   289,   290,   291,   292,   355,     0,     0,     0,     0,     0,
     0,   262,     0,     0,    -2,     0,   281,     0,     0,     0,
     0,     0,     0,   241,   256,   165,     0,     0,   266,   268,
   267,   269,     0,   219,   142,   254,   258,     0,     0,   284,
   282,   283,   202,   222,   242,   142,   257,     0,   294,   279,
     0,   142,   220,   222,   224,   245,     0,     0,   260,   355,
   203,   212,   223,   382,   250,   165,   255,   259,     0,   285,
    -2,     0,   213,   225,   228,   230,   231,   232,     0,     0,
   246,   261,   215,     0,   221,   142,     0,   382,   382,     0,
   382,     0,   355,   252,     0,   216,   207,   208,     0,   214,
   226,   229,   233,   234,   237,   239,   235,   236,   238,     0,
     0,   204,   142,   209,     0,   142,   243,   251,   217,   210,
   227,   142,   142,     0,   211,   244 };
typedef struct
#ifdef __cplusplus
	yytoktype
#endif
{ char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"TE_DOTDOT",	257,
	"TE_IMPLIES",	258,
	"TE_OR",	259,
	"TE_XOR",	260,
	"TE_AND",	261,
	"TE_NE",	262,
	"TE_EQ",	263,
	"TE_LT",	264,
	"TE_GT",	265,
	"TE_LE",	266,
	"TE_GE",	267,
	"TE_PLUS",	268,
	"TE_MINUS",	269,
	"TE_STAR",	270,
	"TE_SLASH",	271,
	"TE_MOD",	272,
	"TE_DIV",	273,
	"TE_POWER",	274,
	"TE_FREE",	275,
	"TE_NOT",	276,
	"TE_STRIP",	277,
	"TE_OLD",	278,
	"TE_DOT",	279,
	"TE_LPARAN",	280,
	"TE_ALIAS",	281,
	"TE_ALL",	282,
	"TE_INTEGER",	283,
	"TE_CHAR",	284,
	"TE_REAL",	285,
	"TE_STRING",	286,
	"TE_ID",	287,
	"TE_A_BIT",	288,
	"TE_BANG",	289,
	"TE_BIT",	290,
	"TE_SEMICOLON",	291,
	"TE_COLON",	292,
	"TE_COMMA",	293,
	"TE_CREATION",	294,
	"TE_LARRAY",	295,
	"TE_RARRAY",	296,
	"TE_RPARAN",	297,
	"TE_LCURLY",	298,
	"TE_RCURLY",	299,
	"TE_LSQURE",	300,
	"TE_RSQURE",	301,
	"TE_CONSTRAIN",	302,
	"TE_FALSE",	303,
	"TE_TRUE",	304,
	"TE_ACCEPT",	305,
	"TE_ADDRESS",	306,
	"TE_AS",	307,
	"TE_ASSIGN",	308,
	"TE_CHECK",	309,
	"TE_CLASS",	310,
	"TE_CURRENT",	311,
	"TE_DEBUG",	312,
	"TE_DEFERRED",	313,
	"TE_DO",	314,
	"TE_ELSE",	315,
	"TE_ELSEIF",	316,
	"TE_END",	317,
	"TE_ENSURE",	318,
	"TE_EXPANDED",	319,
	"TE_EXPORT",	320,
	"TE_EXTERNAL",	321,
	"TE_FEATURE",	322,
	"TE_FROM",	323,
	"TE_FROZEN",	324,
	"TE_IF",	325,
	"TE_INDEXING",	326,
	"TE_IN_END",	327,
	"TE_INFIX",	328,
	"TE_INHERIT",	329,
	"TE_INSPECT",	330,
	"TE_INVARIANT",	331,
	"TE_IS",	332,
	"TE_LIKE",	333,
	"TE_LOCAL",	334,
	"TE_LOOP",	335,
	"TE_OBSOLETE",	336,
	"TE_ONCE",	337,
	"TE_PRECURSOR",	338,
	"TE_PREFIX",	339,
	"TE_REDEFINE",	340,
	"TE_RENAME",	341,
	"TE_REQUIRE",	342,
	"TE_RESCUE",	343,
	"TE_RESULT",	344,
	"TE_RETRY",	345,
	"TE_SELECT",	346,
	"TE_SEPARATE",	347,
	"TE_THEN",	348,
	"TE_UNDEFINE",	349,
	"TE_UNIQUE",	350,
	"TE_UNTIL",	351,
	"TE_VARIANT",	352,
	"TE_WHEN",	353,
	"EIF_ERROR2",	354,
	"EIF_ERROR3",	355,
	"EIF_ERROR4",	356,
	"EIF_ERROR5",	357,
	"EIF_ERROR6",	358,
	"EIF_ERROR7",	359,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"Class_declaration : Indexing Header_mark",
	"Class_declaration : Indexing Header_mark TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
	"Pushing_id : TE_ID",
	"Indexing : /* empty */",
	"Indexing : TE_INDEXING",
	"Indexing : TE_INDEXING Index_list",
	"Indexing : TE_INDEXING",
	"Index_list : Index_clause",
	"Index_list : Index_list Index_clause",
	"Index_clause : Index",
	"Index_clause : Index Index_terms ASemi",
	"Index : Identifier TE_COLON",
	"Index : /* empty */",
	"Index_terms : Index_value",
	"Index_terms : Index_terms TE_COMMA Index_value",
	"Index_terms : TE_SEMICOLON",
	"Index_value : Identifier",
	"Index_value : Manifest_constant",
	"Header_mark : /* empty */",
	"Header_mark : TE_DEFERRED",
	"Header_mark : TE_EXPANDED",
	"Header_mark : TE_SEPARATE",
	"Obsolete : /* empty */",
	"Obsolete : TE_OBSOLETE Manifest_string",
	"Features : /* empty */",
	"Features : /* empty */",
	"Features : Feature_clause_list",
	"Feature_clause_list : Feature_clause",
	"Feature_clause_list : Feature_clause_list Feature_clause",
	"Feature_clause : TE_FEATURE",
	"Feature_clause : TE_FEATURE Clients",
	"Feature_clause : TE_FEATURE Clients Feature_declaration_list",
	"Clients : /* empty */",
	"Clients : Client_list",
	"Client_list : TE_LCURLY TE_RCURLY",
	"Client_list : TE_LCURLY",
	"Client_list : TE_LCURLY Class_list TE_RCURLY",
	"Class_list : Identifier",
	"Class_list : Class_list TE_COMMA Identifier",
	"Feature_declaration_list : /* empty */",
	"Feature_declaration_list : Feature_declaration_list Feature_declaration",
	"ASemi : /* empty */",
	"ASemi : TE_SEMICOLON",
	"Feature_declaration : /* empty */",
	"Feature_declaration : New_feature_list",
	"Feature_declaration : New_feature_list Declaration_body ASemi",
	"New_feature_list : New_feature",
	"New_feature_list : New_feature_list TE_COMMA New_feature",
	"New_feature : Feature_name_mark Feature_name",
	"Feature_name_mark : /* empty */",
	"Feature_name_mark : TE_FROZEN",
	"Feature_name : Pushing_id",
	"Feature_name : Infix",
	"Feature_name : Prefix",
	"Infix : TE_INFIX Infix_operator",
	"Prefix : TE_PREFIX Prefix_operator",
	"Infix_operator : Manifest_string",
	"Prefix_operator : Manifest_string",
	"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
	"Constant_or_routine : /* empty */",
	"Constant_or_routine : TE_IS Feature_value",
	"Feature_value : Manifest_constant",
	"Feature_value : TE_UNIQUE",
	"Feature_value : Routine",
	"Inheritance : /* empty */",
	"Inheritance : TE_INHERIT",
	"Inheritance : TE_INHERIT Parent_list",
	"Inheritance : TE_INHERIT ASemi",
	"Parent_list : Parent ASemi",
	"Parent_list : Parent_list Parent ASemi",
	"Parent : Pushing_id Actual_generics",
	"Parent : Pushing_id Actual_generics TE_END",
	"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
	"Actual_generics : /* empty */",
	"Actual_generics : Existing_generics",
	"Rename : /* empty */",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME Rename_list",
	"Rename_list : Rename_pair",
	"Rename_list : Rename_list TE_COMMA Rename_pair",
	"Rename_pair : Feature_name TE_AS Feature_name",
	"New_exports : /* empty */",
	"New_exports : TE_EXPORT",
	"New_exports : TE_EXPORT New_export_list",
	"New_exports : TE_EXPORT ASemi",
	"New_export_list : New_export_item ASemi",
	"New_export_list : New_export_list New_export_item ASemi",
	"New_export_item : Client_list Feature_set",
	"Feature_set : TE_ALL",
	"Feature_set : /* empty */",
	"Feature_set : Feature_list",
	"Feature_list : Feature_name",
	"Feature_list : Feature_list TE_COMMA Feature_name",
	"Undefine : /* empty */",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE Feature_list",
	"Redefine : /* empty */",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE Feature_list",
	"Select : /* empty */",
	"Select : TE_SELECT",
	"Select : TE_SELECT",
	"Select : TE_SELECT Feature_list",
	"Formal_arguments : /* empty */",
	"Formal_arguments : TE_LPARAN TE_RPARAN",
	"Formal_arguments : TE_LPARAN",
	"Formal_arguments : TE_LPARAN Entity_declaration_list TE_RPARAN",
	"Entity_declaration_list : /* empty */",
	"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
	"Entity_declaration_group : /* empty */",
	"Entity_declaration_group : Identifier_list",
	"Entity_declaration_group : Identifier_list TE_COLON Type ASemi",
	"Identifier_list : Identifier",
	"Identifier_list : Identifier_list TE_COMMA Identifier",
	"Strip_identifier_list : /* empty */",
	"Strip_identifier_list : Identifier_list",
	"Type_mark : /* empty */",
	"Type_mark : TE_COLON Type",
	"Routine : Obsolete",
	"Routine : Obsolete Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
	"Routine_body : Internal",
	"Routine_body : External",
	"Routine_body : TE_DEFERRED",
	"External : TE_EXTERNAL External_language External_name",
	"External_language : /* empty */",
	"External_language : Non_empty_string",
	"External_name : /* empty */",
	"External_name : TE_ALIAS Non_empty_string",
	"Internal : TE_DO",
	"Internal : TE_DO Compound",
	"Internal : TE_ONCE",
	"Internal : TE_ONCE Compound",
	"Local_declarations : /* empty */",
	"Local_declarations : TE_LOCAL",
	"Local_declarations : TE_LOCAL Entity_declaration_list",
	"Compound : Instructionl Set_position Instruction1 Opt_Semi",
	"Compound : Opt_Semi",
	"Opt_Semi : Opt_Semi TE_SEMICOLON",
	"Opt_Semi : /* empty */",
	"Instructionl : Instructionl Set_position Instruction1 Opt_Semi",
	"Instructionl : Opt_Semi",
	"Instruction1 : Creation",
	"Instruction1 : Call",
	"Instruction1 : Assignment",
	"Instruction1 : Reverse_assignment",
	"Instruction1 : Conditional",
	"Instruction1 : Multi_branch",
	"Instruction1 : Loop",
	"Instruction1 : Debug",
	"Instruction1 : Check",
	"Instruction1 : Retry",
	"Precondition : /* empty */",
	"Precondition : TE_REQUIRE",
	"Precondition : TE_REQUIRE Assertion",
	"Precondition : TE_REQUIRE TE_ELSE",
	"Precondition : TE_REQUIRE TE_ELSE Assertion",
	"Postcondition : /* empty */",
	"Postcondition : TE_ENSURE",
	"Postcondition : TE_ENSURE Assertion",
	"Postcondition : TE_ENSURE TE_THEN",
	"Postcondition : TE_ENSURE TE_THEN Assertion",
	"Assertion : /* empty */",
	"Assertion : Assertion_list",
	"Assertion_list : /* empty */",
	"Assertion_list : Assertion_list_non_empty",
	"Assertion_list_non_empty : Set_position Assertion_clause ASemi",
	"Assertion_list_non_empty : Assertion_list_non_empty Set_position Assertion_clause ASemi",
	"Assertion_clause : Expression",
	"Assertion_clause : Identifier TE_COLON Expression",
	"Assertion_clause : Identifier TE_COLON",
	"Type : Pushing_id",
	"Type : Pushing_id Existing_generics",
	"Type : TE_EXPANDED Pushing_id",
	"Type : TE_EXPANDED Pushing_id Existing_generics",
	"Type : TE_SEPARATE Pushing_id",
	"Type : TE_SEPARATE Pushing_id Existing_generics",
	"Type : TE_BIT Integer_constant",
	"Type : TE_BIT Identifier",
	"Type : TE_LIKE Identifier",
	"Type : TE_LIKE TE_CURRENT",
	"Class_type : Pushing_id",
	"Class_type : Pushing_id Existing_generics",
	"Existing_generics : TE_LSQURE TE_RSQURE",
	"Existing_generics : TE_LSQURE",
	"Existing_generics : TE_LSQURE Type_list TE_RSQURE",
	"Type_list : Type",
	"Type_list : Type_list TE_COMMA Type",
	"Formal_generics : /* empty */",
	"Formal_generics : TE_LSQURE",
	"Formal_generics : TE_LSQURE Formal_generic_list TE_RSQURE",
	"Formal_generic_list : /* empty */",
	"Formal_generic_list : Formal_generic",
	"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
	"Formal_generic : TE_ID",
	"Formal_generic : TE_ID Constraint",
	"Constraint : /* empty */",
	"Constraint : TE_CONSTRAIN Class_type",
	"Conditional : /* empty */",
	"Conditional : TE_IF Expression TE_THEN",
	"Conditional : TE_IF Expression TE_THEN Compound",
	"Conditional : TE_IF Expression TE_THEN Compound Elsif Else_part TE_END",
	"Elsif : /* empty */",
	"Elsif : /* empty */",
	"Elsif : Elsif_list",
	"Elsif_list : Elsif_part",
	"Elsif_list : Elsif_list Elsif_part",
	"Elsif_part : TE_ELSEIF Expression TE_THEN",
	"Elsif_part : TE_ELSEIF Expression TE_THEN Compound",
	"Inspect_default : /* empty */",
	"Inspect_default : TE_ELSE",
	"Inspect_default : TE_ELSE Compound",
	"Else_part : /* empty */",
	"Else_part : TE_ELSE",
	"Else_part : TE_ELSE Compound",
	"Multi_branch : /* empty */",
	"Multi_branch : TE_INSPECT Expression",
	"Multi_branch : TE_INSPECT Expression When_part_list",
	"Multi_branch : TE_INSPECT Expression When_part_list Inspect_default TE_END",
	"When_part_list : /* empty */",
	"When_part_list : When_part When_part_list",
	"When_part : TE_WHEN",
	"When_part : TE_WHEN Choices",
	"When_part : TE_WHEN Choices TE_THEN",
	"When_part : TE_WHEN Choices TE_THEN Compound",
	"Choices : Choice",
	"Choices : Choices TE_COMMA Choice",
	"Choice : Integer_constant",
	"Choice : Character_constant",
	"Choice : Identifier",
	"Choice : Integer_constant TE_DOTDOT Integer_constant",
	"Choice : Integer_constant TE_DOTDOT Identifier",
	"Choice : Identifier TE_DOTDOT Integer_constant",
	"Choice : Identifier TE_DOTDOT Identifier",
	"Choice : Character_constant TE_DOTDOT Character_constant",
	"Choice : Identifier TE_DOTDOT Character_constant",
	"Choice : Character_constant TE_DOTDOT Identifier",
	"Loop : /* empty */",
	"Loop : TE_FROM",
	"Loop : TE_FROM Compound",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP Compound TE_END",
	"Invariant : /* empty */",
	"Invariant : TE_INVARIANT Assertion",
	"Class_invariant : /* empty */",
	"Class_invariant : TE_INVARIANT",
	"Class_invariant : TE_INVARIANT Assertion",
	"Variant : /* empty */",
	"Variant : TE_VARIANT Identifier TE_COLON Expression",
	"Variant : TE_VARIANT Expression",
	"Debug : /* empty */",
	"Debug : TE_DEBUG Debug_keys",
	"Debug : TE_DEBUG Debug_keys Compound TE_END",
	"Debug_keys : /* empty */",
	"Debug_keys : TE_LPARAN TE_RPARAN",
	"Debug_keys : TE_LPARAN",
	"Debug_keys : TE_LPARAN Debug_key_list TE_RPARAN",
	"Debug_key_list : Non_empty_string",
	"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
	"Retry : TE_RETRY",
	"Rescue : /* empty */",
	"Rescue : TE_RESCUE",
	"Rescue : TE_RESCUE Compound",
	"Assignment : Identifier TE_ASSIGN Expression",
	"Assignment : TE_RESULT TE_ASSIGN Expression",
	"Reverse_assignment : Identifier TE_ACCEPT Expression",
	"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
	"Creators : /* empty */",
	"Creators : /* empty */",
	"Creators : Creation_clause_list",
	"Creation_clause_list : Creation_clause",
	"Creation_clause_list : Creation_clause_list Creation_clause",
	"Creation_clause : TE_CREATION",
	"Creation_clause : TE_CREATION Clients",
	"Creation_clause : TE_CREATION Clients Feature_list",
	"Creation_clause : TE_CREATION Client_list",
	"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
	"Creation_type : /* empty */",
	"Creation_type : Type",
	"Creation_target : Identifier",
	"Creation_target : TE_RESULT",
	"Creation_call : /* empty */",
	"Creation_call : TE_DOT Identifier Parameters",
	"Call : A_feature",
	"Call : Call_on_result",
	"Call : Call_on_feature",
	"Call : Call_on_current",
	"Call : Call_on_expression",
	"Call : A_precursor",
	"Call : Call_on_precursor",
	"Check : /* empty */",
	"Check : TE_CHECK Assertion TE_END",
	"Expression : Expression_constant",
	"Expression : Manifest_array",
	"Expression : Feature_call",
	"Expression : TE_LPARAN Expression TE_RPARAN",
	"Expression : Expression TE_PLUS Expression",
	"Expression : Expression TE_MINUS Expression",
	"Expression : Expression TE_STAR Expression",
	"Expression : Expression TE_SLASH Expression",
	"Expression : Expression TE_MOD Expression",
	"Expression : Expression TE_DIV Expression",
	"Expression : Expression TE_POWER Expression",
	"Expression : Expression TE_AND Expression",
	"Expression : Expression TE_AND TE_THEN Expression",
	"Expression : Expression TE_OR Expression",
	"Expression : Expression TE_OR TE_ELSE Expression",
	"Expression : Expression TE_IMPLIES Expression",
	"Expression : Expression TE_XOR Expression",
	"Expression : Expression TE_GE Expression",
	"Expression : Expression TE_GT Expression",
	"Expression : Expression TE_LE Expression",
	"Expression : Expression TE_LT Expression",
	"Expression : Expression TE_EQ Expression",
	"Expression : Expression TE_NE Expression",
	"Expression : Expression Free_operator Expression",
	"Expression : TE_MINUS Expression",
	"Expression : TE_PLUS Expression",
	"Expression : TE_NOT Expression",
	"Expression : TE_OLD Expression",
	"Expression : Free_operator Expression",
	"Expression : TE_STRIP",
	"Expression : TE_STRIP TE_LPARAN Strip_identifier_list TE_RPARAN",
	"Actual_parameter : Expression",
	"Actual_parameter : TE_ADDRESS Feature_name",
	"Actual_parameter : TE_ADDRESS TE_LPARAN Expression TE_RPARAN",
	"Actual_parameter : TE_ADDRESS TE_CURRENT",
	"Actual_parameter : TE_ADDRESS TE_RESULT",
	"Free_operator : TE_FREE",
	"Feature_call : Call_on_current",
	"Feature_call : Call_on_result",
	"Feature_call : Call_on_feature",
	"Feature_call : TE_CURRENT",
	"Feature_call : TE_RESULT",
	"Feature_call : A_feature",
	"Feature_call : Call_on_expression",
	"Feature_call : A_precursor",
	"Feature_call : Call_on_precursor",
	"Call_on_current : TE_CURRENT TE_DOT Remote_call",
	"Call_on_result : TE_RESULT TE_DOT Remote_call",
	"Call_on_feature : A_feature TE_DOT Remote_call",
	"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
	"Call_on_precursor : A_precursor TE_DOT Remote_call",
	"A_precursor : TE_PRECURSOR Parameters",
	"A_precursor : TE_LCURLY Identifier TE_RCURLY TE_PRECURSOR Parameters",
	"A_precursor : TE_LCURLY TE_LCURLY Identifier TE_RCURLY TE_RCURLY TE_PRECURSOR Parameters",
	"Remote_call : Call_on_feature_access",
	"Remote_call : Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
	"A_feature : Identifier Parameters",
	"Feature_access : Identifier Parameters",
	"Parameters : /* empty */",
	"Parameters : TE_LPARAN TE_RPARAN",
	"Parameters : TE_LPARAN",
	"Parameters : TE_LPARAN Parameter_list TE_RPARAN",
	"Parameter_list : Actual_parameter",
	"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
	"Expression_list : Expression",
	"Expression_list : Expression_list TE_COMMA Expression",
	"Manifest_expression_list : /* empty */",
	"Manifest_expression_list : Expression_list",
	"Identifier : TE_ID",
	"Manifest_constant : Boolean_constant",
	"Manifest_constant : Character_constant",
	"Manifest_constant : Integer_constant",
	"Manifest_constant : Real_constant",
	"Manifest_constant : Bit_constant",
	"Manifest_constant : Manifest_string",
	"Expression_constant : Boolean_constant",
	"Expression_constant : Character_constant",
	"Expression_constant : TE_INTEGER",
	"Expression_constant : TE_REAL",
	"Expression_constant : Bit_constant",
	"Expression_constant : Manifest_string",
	"Boolean_constant : TE_FALSE",
	"Boolean_constant : TE_TRUE",
	"Character_constant : TE_CHAR",
	"Integer_constant : Sign TE_INTEGER",
	"Sign : /* empty */",
	"Sign : TE_PLUS",
	"Sign : TE_MINUS",
	"Real_constant : Sign TE_REAL",
	"Bit_constant : TE_A_BIT",
	"Manifest_string : TE_STRING",
	"Manifest_string : EIF_ERROR6",
	"Non_empty_string : TE_STRING",
	"Manifest_array : TE_LARRAY",
	"Manifest_array : TE_LARRAY Manifest_expression_list TE_RARRAY",
	"Set_position : /* empty */",
};
#endif /* YYDEBUG */
/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident	"@(#)yaccpar	6.12	93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#define YYNEW(type)	malloc(sizeof(type) * yynewmax)
#define YYCOPY(to, from, type) \
	(type *) memcpy(to, (char *) from, yynewmax * sizeof(type))
#define YYENLARGE( from, type) \
	(type *) realloc((char *) from, yynewmax * sizeof(type))
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-10000000)

/*
** global variables used by the parser
*/
YYSTYPE *yypv;			/* top of value stack */
int *yyps;			/* top of state stack */

int yystate;			/* current state */
int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */
int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()		yycvtok(yylex())
/*
** yycvtok - return a token if i is a wchar_t value that exceeds 255.
**	If i<255, i itself is the token.  If i>255 but the neither 
**	of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int yycvtok(int i)
#else
int yycvtok(i) int i;
#endif
{
	int first = 0;
	int last = YYNMBCHARS - 1;
	int mid;
	wchar_t j;

	if(i&0x60000000){/*Must convert to a token. */
		if( yymbchars[last].character < i ){
			return i;/*Giving up*/
		}
		while ((last>=first)&&(first>=0)) {/*Binary search loop*/
			mid = (first+last)/2;
			j = yymbchars[mid].character;
			if( j==i ){/*Found*/ 
				return yymbchars[mid].tvalue;
			}else if( j<i ){
				first = mid + 1;
			}else{
				last = mid -1;
			}
		}
		/*No entry in the table.*/
		return i;/* Giving up.*/
	}else{/* i is already a token. */
		return i;
	}
}
#else/*!YYNMBCHARS*/
#define YYLEX()		yylex()
#endif/*!YYNMBCHARS*/

/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void)
#else
int yyparse()
#endif
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
	hacks to please C++ and lint - goto's inside switch should never be
	executed; yypvt is set to 0 to avoid "used before set" warning.
*/
	static int __yaccpar_lint_hack__ = 0;
	switch (__yaccpar_lint_hack__)
	{
		case 1: goto yyerrlab;
		case 2: goto yynewstate;
	}
	yypvt = 0;
#endif

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

#if YYMAXDEPTH <= 0
	if (yymaxdepth <= 0)
	{
		if ((yymaxdepth = YYEXPAND(0)) <= 0)
		{
			yyerror("yacc initialization error");
			YYABORT;
		}
	}
#endif

	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */
	goto yystack;	/* moved from 6 lines above to here to please C++ */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ yymaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int yyps_index = (yy_ps - yys);
			int yypv_index = (yy_pv - yyv);
			int yypvt_index = (yypvt - yyv);
			int yynewmax;
#ifdef YYEXPAND
			yynewmax = YYEXPAND(yymaxdepth);
#else
			yynewmax = 2 * yymaxdepth;	/* double table size */
			if (yymaxdepth == YYMAXDEPTH)	/* first time growth */
			{
				char *newyys = (char *)YYNEW(int);
				char *newyyv = (char *)YYNEW(YYSTYPE);
				if (newyys != 0 && newyyv != 0)
				{
					yys = YYCOPY(newyys, yys, int);
					yyv = YYCOPY(newyyv, yyv, YYSTYPE);
				}
				else
					yynewmax = 0;	/* failed */
			}
			else				/* not first time */
			{
				yys = YYENLARGE(yys, int);
				yyv = YYENLARGE(yyv, YYSTYPE);
				if (yys == 0 || yyv == 0)
					yynewmax = 0;	/* failed */
			}
#endif
			if (yynewmax <= yymaxdepth)	/* tables not expanded */
			{
				yyerror( "yacc stack overflow" );
				YYABORT;
			}
			yymaxdepth = yynewmax;

			yy_ps = yys + yyps_index;
			yy_pv = yyv + yypv_index;
			yypvt = yyv + yypvt_index;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			printf( "Received token " );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				printf( "Received token " );
				if ( yychar == 0 )
					printf( "end-of-file\n" );
				else if ( yychar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
			skip_init:
				yynerrs++;
				/* FALLTHRU */
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					printf( "Error recovery discards " );
					if ( yychar == 0 )
						printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 197 "parser.y"
{click_list_init();} break;
case 2:
# line 199 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yypvt[-7].value),deferred,expanded,separate,yypvt[-11].node,yypvt[-6].node,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node,click_list_new(), current_location->start_position);
		} break;
case 3:
# line 207 "parser.y"
{
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		} break;
case 4:
# line 218 "parser.y"
{yyval.node = NULL;} break;
case 5:
# line 219 "parser.y"
{list_init();} break;
case 6:
# line 220 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 7:
# line 222 "parser.y"
{yyval.node = NULL;} break;
case 8:
# line 226 "parser.y"
{list_push(yypvt[-0].node);} break;
case 9:
# line 228 "parser.y"
{list_push(yypvt[-0].node);} break;
case 10:
# line 231 "parser.y"
{list_init();} break;
case 11:
# line 232 "parser.y"
{yyval.node = create_node2(INDEX_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 12:
# line 236 "parser.y"
{yyval.node = yypvt[-1].node;} break;
case 13:
# line 238 "parser.y"
{yyval.node = NULL;} break;
case 14:
# line 242 "parser.y"
{list_push(yypvt[-0].node);} break;
case 15:
# line 244 "parser.y"
{list_push(yypvt[-0].node);} break;
case 17:
# line 249 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 18:
# line 251 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 19:
# line 259 "parser.y"
{deferred = FALSE; expanded = FALSE; separate = FALSE;} break;
case 20:
# line 261 "parser.y"
{deferred = TRUE; expanded = FALSE; separate = FALSE;} break;
case 21:
# line 263 "parser.y"
{expanded = TRUE; deferred = FALSE; separate = FALSE;} break;
case 22:
# line 265 "parser.y"
{expanded = FALSE; deferred = FALSE; separate = TRUE;} break;
case 23:
# line 274 "parser.y"
{yyval.node = NULL;} break;
case 24:
# line 276 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 25:
# line 285 "parser.y"
{yyval.node = NULL;} break;
case 26:
# line 286 "parser.y"
{list_init();} break;
case 27:
# line 287 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 28:
# line 292 "parser.y"
{list_push(yypvt[-0].node);} break;
case 29:
# line 294 "parser.y"
{list_push(yypvt[-0].node);} break;
case 30:
# line 298 "parser.y"
{fclause_pos = current_location->end_position;} break;
case 31:
# line 298 "parser.y"
{list_init();} break;
case 32:
# line 299 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_fclause_as(yypvt[-2].node,yyval.node,fclause_pos);
		} break;
case 33:
# line 307 "parser.y"
{yyval.node = NULL;} break;
case 34:
# line 309 "parser.y"
{yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);} break;
case 35:
# line 313 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							} break;
case 36:
# line 317 "parser.y"
{list_init();} break;
case 37:
# line 318 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 38:
# line 322 "parser.y"
{
							list_push(yypvt[-0].node);
							} break;
case 39:
# line 326 "parser.y"
{
							list_push(yypvt[-0].node);
							} break;
case 41:
# line 333 "parser.y"
{list_push(yypvt[-0].node);} break;
case 44:
# line 340 "parser.y"
{list_init();} break;
case 45:
# line 340 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 46:
# line 341 "parser.y"
{
		yyval.node = create_feature_as(yypvt[-2].node,yypvt[-1].node,click_list_start(yypvt[-3].value),current_location->start_position);
		click_list_set (yyval.node, yypvt[-3].value);
		} break;
case 47:
# line 349 "parser.y"
{
		yyval.value = yypvt[-0].value;
		list_push(click_list_elem(yyval.value));
		} break;
case 48:
# line 354 "parser.y"
{
		yyval.value = yypvt[-2].value;
		list_push(click_list_elem(yypvt[-0].value));
		} break;
case 49:
# line 362 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 50:
# line 368 "parser.y"
{
		is_frozen = FALSE;
		} break;
case 51:
# line 372 "parser.y"
{
		is_frozen = TRUE;
		} break;
case 52:
# line 379 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 53:
# line 384 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 54:
# line 388 "parser.y"
{
		yyval.value = yypvt[-0].value;
		} break;
case 55:
# line 395 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 56:
# line 404 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		} break;
case 57:
# line 412 "parser.y"
{
		extern int is_infix(char *s);

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		} break;
case 58:
# line 425 "parser.y"
{
		extern int is_prefix(char *s);

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		} break;
case 59:
# line 437 "parser.y"
{yyval.node = create_node3(BODY_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yypvt[-2].node == NULL) && (yypvt[-1].node == NULL) && (yypvt[-0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yypvt[-0].cr_node.cr_type == CR_CONSTANT) && ((yypvt[-2].node != NULL) || (yypvt[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yypvt[-2].node != NULL) && ((yypvt[-0].cr_node.cr_type != CR_ROUTINE) || (yypvt[-0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	} break;
case 60:
# line 457 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;} break;
case 61:
# line 459 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].cr_node.cr_node;yyval.cr_node.cr_type = yypvt[-0].cr_node.cr_type;} break;
case 62:
# line 463 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yypvt[-0].node));yyval.cr_node.cr_type = CR_CONSTANT;} break;
case 63:
# line 465 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;} break;
case 64:
# line 467 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].node;yyval.cr_node.cr_type = CR_ROUTINE;} break;
case 65:
# line 476 "parser.y"
{yyval.node = NULL;} break;
case 66:
# line 477 "parser.y"
{list_init();} break;
case 67:
# line 478 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 68:
# line 482 "parser.y"
{ yyval.node = NULL;} break;
case 69:
# line 487 "parser.y"
{list_push(yypvt[-1].node);} break;
case 70:
# line 489 "parser.y"
{list_push(yypvt[-1].node);} break;
case 71:
# line 494 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-1].value),yypvt[-0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-1].value);
		} break;
case 72:
# line 500 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-2].value),yypvt[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-2].value);
		} break;
case 73:
# line 507 "parser.y"
{
		inherit_context = (yypvt[-5].node==NULL)&&(yypvt[-4].node==NULL)&&(yypvt[-3].node==NULL)&&(yypvt[-2].node==NULL)&&(yypvt[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-7].value),yypvt[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);
		click_list_set (rn_ast, yypvt[-7].value);
		} break;
case 74:
# line 516 "parser.y"
{yyval.node = NULL;} break;
case 75:
# line 518 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 76:
# line 522 "parser.y"
{yyval.node = NULL;} break;
case 77:
# line 524 "parser.y"
{yyval.node = NULL;} break;
case 78:
# line 525 "parser.y"
{list_init();} break;
case 79:
# line 526 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 80:
# line 531 "parser.y"
{list_push(yypvt[-0].node);} break;
case 81:
# line 533 "parser.y"
{list_push(yypvt[-0].node);} break;
case 82:
# line 538 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yypvt[-2].value),click_list_elem(yypvt[-0].value));
		click_list_set (click_list_elem(yypvt[-0].value), yypvt[-2].value);
		} break;
case 83:
# line 545 "parser.y"
{yyval.node = NULL;} break;
case 84:
# line 546 "parser.y"
{list_init();} break;
case 85:
# line 547 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 86:
# line 549 "parser.y"
{yyval.node = NULL;} break;
case 87:
# line 554 "parser.y"
{list_push(yypvt[-1].node);} break;
case 88:
# line 556 "parser.y"
{list_push(yypvt[-1].node);} break;
case 89:
# line 560 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yypvt[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yypvt[-0].node);
		} break;
case 90:
# line 567 "parser.y"
{yyval.node = create_node(ALL_AS);} break;
case 91:
# line 568 "parser.y"
{list_init();} break;
case 92:
# line 569 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 93:
# line 574 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 94:
# line 576 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));} break;
case 95:
# line 580 "parser.y"
{yyval.node = NULL;} break;
case 96:
# line 582 "parser.y"
{yyval.node = NULL;} break;
case 97:
# line 583 "parser.y"
{list_init();} break;
case 98:
# line 584 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 99:
# line 588 "parser.y"
{yyval.node = NULL;} break;
case 100:
# line 590 "parser.y"
{yyval.node = NULL;} break;
case 101:
# line 591 "parser.y"
{list_init();} break;
case 102:
# line 592 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 103:
# line 596 "parser.y"
{yyval.node = NULL;} break;
case 104:
# line 598 "parser.y"
{yyval.node = NULL;} break;
case 105:
# line 599 "parser.y"
{list_init();} break;
case 106:
# line 600 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 107:
# line 608 "parser.y"
{yyval.node = NULL;} break;
case 108:
# line 610 "parser.y"
{yyerror((char *)0);} break;
case 109:
# line 611 "parser.y"
{list_init();} break;
case 110:
# line 612 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 112:
# line 617 "parser.y"
{list_push(yypvt[-0].node);} break;
case 113:
# line 620 "parser.y"
{list_init();} break;
case 114:
# line 620 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 115:
# line 621 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yypvt[-3].node,yypvt[-1].node);} break;
case 116:
# line 625 "parser.y"
{list_push(yypvt[-0].node);} break;
case 117:
# line 627 "parser.y"
{list_push(yypvt[-0].node);} break;
case 120:
# line 635 "parser.y"
{yyval.node = NULL;} break;
case 121:
# line 637 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 122:
# line 641 "parser.y"
{yyval.loc = current_location;} break;
case 123:
# line 644 "parser.y"
{yyval.node = create_routine_as(yypvt[-7].node,yypvt[-6].loc->start_position,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 124:
# line 648 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 125:
# line 650 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 126:
# line 652 "parser.y"
{yyval.node = create_node(DEFERRED_AS);} break;
case 127:
# line 656 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 128:
# line 659 "parser.y"
{SET_POS(current_location);} break;
case 129:
# line 660 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yypvt[-0].node);} break;
case 130:
# line 664 "parser.y"
{yyval.node = NULL;} break;
case 131:
# line 666 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 132:
# line 669 "parser.y"
{list_init();} break;
case 133:
# line 670 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 134:
# line 671 "parser.y"
{list_init();} break;
case 135:
# line 672 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 136:
# line 678 "parser.y"
{yyval.node = NULL;} break;
case 137:
# line 679 "parser.y"
{list_init();} break;
case 138:
# line 680 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 139:
# line 684 "parser.y"
{list_push(yypvt[-1].node);} break;
case 143:
# line 691 "parser.y"
{list_push(yypvt[-1].node);} break;
case 145:
# line 696 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 146:
# line 698 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 147:
# line 700 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 148:
# line 702 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 149:
# line 704 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 150:
# line 706 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 151:
# line 708 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 152:
# line 710 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 153:
# line 712 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 154:
# line 714 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 155:
# line 718 "parser.y"
{yyval.node = NULL;} break;
case 156:
# line 719 "parser.y"
{id_level = ASSERT_LEVEL;} break;
case 157:
# line 720 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yypvt[-0].node);
								} break;
case 158:
# line 723 "parser.y"
{id_level = ASSERT_LEVEL;} break;
case 159:
# line 724 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yypvt[-0].node);
								} break;
case 160:
# line 730 "parser.y"
{yyval.node = NULL;} break;
case 161:
# line 731 "parser.y"
{id_level = ASSERT_LEVEL;} break;
case 162:
# line 732 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yypvt[-0].node);
								} break;
case 163:
# line 735 "parser.y"
{id_level = ASSERT_LEVEL;} break;
case 164:
# line 736 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yypvt[-0].node);
								} break;
case 165:
# line 742 "parser.y"
{list_init();} break;
case 166:
# line 743 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 169:
# line 750 "parser.y"
{list_push(yypvt[-1].node);} break;
case 170:
# line 752 "parser.y"
{list_push(yypvt[-1].node);} break;
case 171:
# line 756 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,NULL,yypvt[-0].node);
								} break;
case 172:
# line 760 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,yypvt[-2].node,yypvt[-0].node);
								} break;
case 173:
# line 764 "parser.y"
{ yyval.node = NULL;} break;
case 174:
# line 774 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 175:
# line 779 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 176:
# line 784 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 177:
# line 789 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 178:
# line 794 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		} break;
case 179:
# line 799 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		} break;
case 180:
# line 804 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yypvt[-0].node);
		} break;
case 181:
# line 808 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yypvt[-0].node);
		} break;
case 182:
# line 812 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yypvt[-0].node);
		} break;
case 183:
# line 816 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		} break;
case 184:
# line 823 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
        click_list_set (yyval.node, yypvt[-0].value);
        } break;
case 185:
# line 828 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
        click_list_set (yyval.node, yypvt[-1].value);
        } break;
case 186:
# line 836 "parser.y"
{yyval.node = NULL;} break;
case 187:
# line 837 "parser.y"
{list_init();} break;
case 188:
# line 838 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 189:
# line 845 "parser.y"
{list_push(yypvt[-0].node);} break;
case 190:
# line 847 "parser.y"
{list_push(yypvt[-0].node);} break;
case 191:
# line 855 "parser.y"
{
		yyval.node = NULL;
		} break;
case 192:
# line 858 "parser.y"
{list_init();} break;
case 193:
# line 859 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		} break;
case 195:
# line 867 "parser.y"
{list_push(yypvt[-0].node);} break;
case 196:
# line 869 "parser.y"
{list_push(yypvt[-0].node);} break;
case 197:
# line 873 "parser.y"
{strcpy(generic_name, token_str);} break;
case 198:
# line 874 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yypvt[-0].node);} break;
case 199:
# line 878 "parser.y"
{yyval.node = NULL;} break;
case 200:
# line 880 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 201:
# line 887 "parser.y"
{yyval.loc = current_location;} break;
case 202:
# line 887 "parser.y"
{list_init();} break;
case 203:
# line 887 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 204:
# line 888 "parser.y"
{SET_POS(yypvt[-9].loc); yyval.node = create_node4(IF_AS,yypvt[-7].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);} break;
case 205:
# line 892 "parser.y"
{yyval.node = NULL;} break;
case 206:
# line 893 "parser.y"
{list_init();} break;
case 207:
# line 894 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 208:
# line 898 "parser.y"
{list_push(yypvt[-0].node);} break;
case 209:
# line 900 "parser.y"
{list_push(yypvt[-0].node);} break;
case 210:
# line 903 "parser.y"
{list_init();} break;
case 211:
# line 904 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 212:
# line 908 "parser.y"
{yyval.node = NULL;} break;
case 213:
# line 909 "parser.y"
{list_init();} break;
case 214:
# line 910 "parser.y"
{yyval.node = inspect_else();} break;
case 215:
# line 914 "parser.y"
{yyval.node = NULL;} break;
case 216:
# line 915 "parser.y"
{list_init();} break;
case 217:
# line 916 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 218:
# line 919 "parser.y"
{yyval.loc = current_location;} break;
case 219:
# line 920 "parser.y"
{list_init();} break;
case 220:
# line 920 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 221:
# line 922 "parser.y"
{SET_POS(yypvt[-7].loc); yyval.node = create_node3(INSPECT_AS,yypvt[-5].node,yypvt[-2].node,yypvt[-1].node);} break;
case 223:
# line 935 "parser.y"
{list_push(yypvt[-1].node);} break;
case 224:
# line 938 "parser.y"
{list_init();} break;
case 225:
# line 938 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 226:
# line 938 "parser.y"
{list_init();} break;
case 227:
# line 939 "parser.y"
{yyval.node = create_node2(CASE_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 228:
# line 943 "parser.y"
{list_push(yypvt[-0].node);} break;
case 229:
# line 945 "parser.y"
{list_push(yypvt[-0].node);} break;
case 230:
# line 949 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 231:
# line 951 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 232:
# line 953 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);} break;
case 233:
# line 955 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 234:
# line 957 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 235:
# line 959 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 236:
# line 961 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 237:
# line 963 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 238:
# line 965 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 239:
# line 967 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 240:
# line 970 "parser.y"
{yyval.loc = current_location;} break;
case 241:
# line 970 "parser.y"
{list_init();} break;
case 242:
# line 970 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 243:
# line 970 "parser.y"
{list_init();} break;
case 244:
# line 971 "parser.y"
{SET_POS(yypvt[-12].loc); yyval.node = create_node5(LOOP_AS,yypvt[-8].node,yypvt[-7].node,yypvt[-6].node,yypvt[-4].node,list_new(CONSTRUCT_LIST_AS));} break;
case 245:
# line 975 "parser.y"
{yyval.node = NULL;} break;
case 246:
# line 977 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 247:
# line 981 "parser.y"
{yyval.node = NULL;} break;
case 248:
# line 982 "parser.y"
{id_level = INVARIANT_LEVEL;} break;
case 249:
# line 983 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yypvt[-0].node);
		} break;
case 250:
# line 991 "parser.y"
{yyval.node = NULL;} break;
case 251:
# line 993 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 252:
# line 995 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yypvt[-0].node);} break;
case 253:
# line 998 "parser.y"
{yyval.loc = current_location; } break;
case 254:
# line 998 "parser.y"
{list_init();} break;
case 255:
# line 999 "parser.y"
{SET_POS(yypvt[-5].loc); yyval.node = create_node2(DEBUG_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));} break;
case 256:
# line 1003 "parser.y"
{yyval.node = NULL;} break;
case 257:
# line 1005 "parser.y"
{yyval.node = NULL;} break;
case 258:
# line 1006 "parser.y"
{list_init();} break;
case 259:
# line 1007 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 260:
# line 1011 "parser.y"
{list_push(yypvt[-0].node);} break;
case 261:
# line 1013 "parser.y"
{list_push(yypvt[-0].node);} break;
case 262:
# line 1017 "parser.y"
{yyval.node = create_node(RETRY_AS);} break;
case 263:
# line 1021 "parser.y"
{yyval.node = NULL;} break;
case 264:
# line 1022 "parser.y"
{list_init();} break;
case 265:
# line 1023 "parser.y"
{yyval.node = rescue_instr();} break;
case 266:
# line 1040 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 267:
# line 1042 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 268:
# line 1046 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);} break;
case 269:
# line 1048 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 270:
# line 1053 "parser.y"
{yyval.node = NULL;} break;
case 271:
# line 1054 "parser.y"
{list_init();} break;
case 272:
# line 1055 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 273:
# line 1059 "parser.y"
{list_push(yypvt[-0].node);} break;
case 274:
# line 1061 "parser.y"
{list_push(yypvt[-0].node);} break;
case 275:
# line 1065 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);} break;
case 276:
# line 1066 "parser.y"
{list_init();} break;
case 277:
# line 1067 "parser.y"
{yyval.node = create_node2(CREATE_AS,yypvt[-2].node,list_new(CONSTRUCT_LIST_AS));} break;
case 278:
# line 1069 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);								} break;
case 279:
# line 1075 "parser.y"
{yyval.node = create_node3(CREATION_AS,yypvt[-3].node,yypvt[-1].node,yypvt[-0].node);} break;
case 280:
# line 1079 "parser.y"
{yyval.node = NULL;} break;
case 281:
# line 1081 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 282:
# line 1085 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yypvt[-0].node,NULL);} break;
case 283:
# line 1087 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 284:
# line 1091 "parser.y"
{yyval.node = NULL;} break;
case 285:
# line 1093 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 286:
# line 1101 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 287:
# line 1103 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 288:
# line 1105 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 289:
# line 1107 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 290:
# line 1109 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 291:
# line 1111 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 292:
# line 1113 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);} break;
case 293:
# line 1116 "parser.y"
{yyval.loc = current_location; } break;
case 294:
# line 1117 "parser.y"
{SET_POS(yypvt[-3].loc); yyval.node = create_node1(CHECK_AS,yypvt[-1].node);} break;
case 295:
# line 1125 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 296:
# line 1127 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);} break;
case 297:
# line 1129 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yypvt[-0].node);} break;
case 298:
# line 1131 "parser.y"
{yyval.node = create_node1(PARAN_AS, yypvt[-1].node);} break;
case 299:
# line 1133 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 300:
# line 1135 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 301:
# line 1137 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 302:
# line 1139 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 303:
# line 1141 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 304:
# line 1143 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 305:
# line 1145 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 306:
# line 1147 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 307:
# line 1149 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 308:
# line 1151 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 309:
# line 1153 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 310:
# line 1155 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 311:
# line 1157 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 312:
# line 1159 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 313:
# line 1161 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 314:
# line 1163 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 315:
# line 1165 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 316:
# line 1167 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 317:
# line 1169 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 318:
# line 1171 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].node);} break;
case 319:
# line 1174 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yypvt[-0].node);} break;
case 320:
# line 1176 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yypvt[-0].node);} break;
case 321:
# line 1178 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yypvt[-0].node);} break;
case 322:
# line 1180 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yypvt[-0].node);} break;
case 323:
# line 1182 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 324:
# line 1183 "parser.y"
{yyerrok;list_init();} break;
case 325:
# line 1184 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 326:
# line 1188 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 327:
# line 1190 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yypvt[-0].value));
								} break;
case 328:
# line 1195 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(EXPR_ADDRESS_AS,yypvt[-1].node);
								} break;
case 329:
# line 1200 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);} break;
case 330:
# line 1202 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);} break;
case 331:
# line 1206 "parser.y"
{yyval.node = create_id(token_str);} break;
case 332:
# line 1214 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 333:
# line 1216 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 334:
# line 1218 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 335:
# line 1220 "parser.y"
{yyval.node = create_node(CURRENT_AS);} break;
case 336:
# line 1222 "parser.y"
{yyval.node = create_node(RESULT_AS);} break;
case 337:
# line 1224 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 338:
# line 1226 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 339:
# line 1228 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 340:
# line 1230 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 341:
# line 1234 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yypvt[-0].node);} break;
case 342:
# line 1238 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yypvt[-0].node);} break;
case 343:
# line 1242 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 344:
# line 1246 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 345:
# line 1250 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 346:
# line 1254 "parser.y"
{yyval.node = create_node2(PRECURSOR_AS,NULL,yypvt[-0].node);} break;
case 347:
# line 1256 "parser.y"
{yyval.node = create_node2(PRECURSOR_AS,yypvt[-3].node,yypvt[-0].node);} break;
case 348:
# line 1258 "parser.y"
{yyval.node = create_node2(PRECURSOR_AS,yypvt[-4].node,yypvt[-0].node);} break;
case 349:
# line 1262 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 350:
# line 1264 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 351:
# line 1268 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 352:
# line 1270 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 353:
# line 1274 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yypvt[-1].node,yypvt[-0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							}
						} break;
case 354:
# line 1289 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yypvt[-1].node,yypvt[-0].node);} break;
case 355:
# line 1293 "parser.y"
{yyval.node = NULL;} break;
case 356:
# line 1295 "parser.y"
{yyval.node = NULL;} break;
case 357:
# line 1296 "parser.y"
{list_init();} break;
case 358:
# line 1297 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 359:
# line 1301 "parser.y"
{list_push(yypvt[-0].node);} break;
case 360:
# line 1303 "parser.y"
{list_push(yypvt[-0].node);} break;
case 361:
# line 1307 "parser.y"
{list_push(yypvt[-0].node);} break;
case 362:
# line 1309 "parser.y"
{list_push(yypvt[-0].node);} break;
case 365:
# line 1321 "parser.y"
{
				yyval.node = create_id(token_str);
				} break;
case 366:
# line 1327 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 367:
# line 1329 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 368:
# line 1331 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 369:
# line 1333 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 370:
# line 1335 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 371:
# line 1337 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 372:
# line 1341 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 373:
# line 1343 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 374:
# line 1345 "parser.y"
{yyval.node = create_int(token_str,0);} break;
case 375:
# line 1347 "parser.y"
{yyval.node = create_real(token_str,0);} break;
case 376:
# line 1349 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 377:
# line 1351 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 378:
# line 1355 "parser.y"
{yyval.node = create_bool(0);} break;
case 379:
# line 1357 "parser.y"
{yyval.node = create_bool(1);} break;
case 380:
# line 1361 "parser.y"
{yyval.node = create_char(token_str);} break;
case 381:
# line 1365 "parser.y"
{yyval.node = create_int(token_str,yypvt[-1].value);} break;
case 382:
# line 1369 "parser.y"
{yyval.value = 0;} break;
case 383:
# line 1371 "parser.y"
{yyval.value = 0;} break;
case 384:
# line 1373 "parser.y"
{yyval.value = 1;} break;
case 385:
# line 1377 "parser.y"
{yyval.node = create_real(token_str,yypvt[-1].value);} break;
case 386:
# line 1381 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));} break;
case 387:
# line 1385 "parser.y"
{yyval.node = create_string(token_str);} break;
case 388:
# line 1387 "parser.y"
{yyval.node = create_string(token_str);} break;
case 389:
# line 1391 "parser.y"
{yyval.node = create_string(token_str);} break;
case 390:
# line 1394 "parser.y"
{list_init();} break;
case 391:
# line 1395 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));} break;
case 392:
# line 1398 "parser.y"
{SET_POS (current_location) ; yyval.loc = current_location;} break;
	}
	goto yystack;		/* reset registers in driver code */
}

