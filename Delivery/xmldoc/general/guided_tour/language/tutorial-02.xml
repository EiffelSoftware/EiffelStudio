<document title="1 Overview">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>10</envision_pseudo_name>
				<envision_title>Overview</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Eiffel is a method and language for the efficient description and development of quality systems.  </paragraph>
		<paragraph>As a language, Eiffel is more than a programming language.  It covers not just programming in the restricted sense of implementation but the whole spectrum of software development:
		<line_break/>
		<list ordered="false">
			<item>
				<italic>Analysis, modeling and specification</italic>, where Eiffel can be used as a purely descriptive tool to analyze and document the structure and properties of complex systems (even non-software systems).
			</item>
			<item>
				<italic>Design and architecture</italic>, where Eiffel can be used to build solid, flexible system structures.
			</item>
			<item>
				<italic>Implementation</italic>, where Eiffel provides practical software solutions with an efficiency comparable to solutions based on such traditional approaches as C and Fortran.
			</item>
			<item>
				<italic>Maintenance</italic>, where Eiffel helps thanks to the architectural flexibility of the resulting systems.
			</item>
			<item>
				<italic>Documentation</italic>, where Eiffel permits automatic generation of documentation, textual and graphical, from the software itself, as a partial substitute for separately developed and maintained software documentation.
			</item>
		</list></paragraph>
		<paragraph>Although the language is the most visible part, Eiffel is best viewed as a 
			<bold>method</bold>, which guides system analysts and developers through the process of software construction.  The Eiffel method is focused on both productivity (the ability to produce systems on time and within budget) and quality, with particular emphasis on the following quality factors:
		<line_break/>
		<list ordered="false">
			<item>
				<italic>Reliability:</italic> producing bug-free systems, which perform as expected.
			</item>
			<item>
				<italic>Reusability:</italic> making it possible to develop systems from prepackaged, high-quality components, and to transform software elements into such reusable components for future reuse.
			</item>
			<item>
				<italic>Extendibility:</italic> developing software that is truly soft -- easy to adapt to the inevitable and frequent changes of requirements and other constraints.
			</item>
			<item>
				<italic>Portability:</italic> freeing developers from machine and operating system peculiarities, and enabling them to produce software that will run on many different platforms.
			</item>
			<item>
				<italic>Maintainability:</italic> yielding software that is clear, readable, well structured, and easy to continue enhancing and adapting.
			</item>
		</list></paragraph>
	</paragraph></document>
