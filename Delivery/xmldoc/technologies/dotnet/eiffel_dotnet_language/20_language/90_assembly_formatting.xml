<document output="all" title="Referenced Assembly Type and Feature Name Conversion">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Eiffel for .NET</envision_location>
				<envision_title>Referenced Assembly Type and Feature Name Conversion</envision_title>
				<envision_pseudo_name>90</envision_pseudo_name>
			</toc>
			<xml>
				<keyword>
					<index>K</index>
					<term>Eiffel Name Formatting</term>
				</keyword>
				<keyword>
					<index>K</index>
					<term>Eiffel for .NET, Referenced Assembly Types</term>
				</keyword>
			</xml>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>
			The <link><url>url</url><label>Eiffel for .NET language</label></link> is Eiffel. It is not a variant of Eiffel that spawned a new language, as is <bold>C#</bold>, or a dramatic evolution of Eiffel, such as <bold>Visual Basic .NET</bold> is to <bold>VB6</bold>.
			 As Eiffel stands today, and will probably remain, Eiffel's conventions for class names and features names do not match that of the Pascal and Camel-casing conventions recommended by Microsoft. Eiffel also does not support the notion of full quantified type names. 
			 The period ('<bold>.</bold>') between namespace and type names is not valid Eiffel syntax. These naming convention rules pose a problem for maintaining the Eiffel language. To address this issue, when referencing .NET assemblies, all referenced assembly type names and 
			 feature names are converted into "Eiffel-case" when using Eiffel.
		</paragraph>
		
		<anchor>eiffel_case</anchor>
		<heading>
			<size>2</size>
			<content>What is Eiffel-Case?</content>
		</heading>
		<paragraph>
			Eiffel-casing is almost the same for both class and class feature names, all words are separated using underscores ('<bold>_</bold>'). 
			The differences between them are class names are always in uppercase and feature names always in lowercase.
		</paragraph>
		
		<paragraph>
			<class_name>MY_CLASS</class_name> is an example of an Eiffel-cased class name.
			<line_break/>
			<feature_name>my_feature</feature_name> is an example of an Eiffel-cased feature name.
		</paragraph>
		
		<paragraph>
			There are complex rules to ensure that the automatic formatting of .NET name, type, method, property and otherwise are formatted to the most readable name possible, given their casing convention. One absolute is that the Eiffel compilation process will remove the namespace from the fully qualified type name and format just the type name. 
		</paragraph>
		
		<paragraph>
			For example <class_name>System.Windows.Forms.Border3DStyle</class_name> would yield <class_name>BORDER_3D_STYLE</class_name>.
		</paragraph>
		
		<paragraph>
			Stripping the namespace from the name is essential to keep type names short and usable, who wants to use <class_name>SYSTEM_WINDOWS_FORMS_BORDER_3D_STYLE</class_name>? Dropping the namespace does present a potential problem; assemblies may have two type that are of the same name but are located in different namespaces. A resolution to this comes in the form of assembly prefixes. For every assembly a class name prefix can be specified. Eiffel Software have reserved a set of assembly prefix pairs which should not be change as they are used by the Eiffel class libraries. 
			For example, <italic>System.Windows.Forms.dll</italic> contains a commonly used type called <class_name>System.Windows.Forms.Form</class_name>. During the compilation process <italic>System.Windows.Forms.dll</italic> will be evaluated and <class_name>System.Windows.Forms.Form</class_name> will yield the <class_name>FORM</class_name> Eiffel class name. <italic>System.Windows.Forms.dll</italic> has been assigned the '<class_name>WINFORMS_</class_name>' prefix, so <class_name>FORM</class_name> would actually be <class_name>WINFORMS_FORM</class_name> instead.
		</paragraph>
		
		<output output="envision">
			<paragraph>
				In EiffelEnvision you can set a prefix using the <link><url>url</url><label>*Prefix</label></link> property displayed in the property window for an <link><url>url</url><label>*Component Reference</label></link>. For those prefixes/assembly associations that have been preset by Eiffel Software, the <link><url>url</url><label>*Prefix</label></link> property is read-only.
			</paragraph>
		</output>
				
		<anchor>prefixes</anchor>
		<heading>
			<size>2</size>
			<content>Reserved Prefixes</content>
		</heading>
		<paragraph>
			The following table displays the fixed assembly class name prefixes, assigned by Eiffel Software, for the Microsoft Foundation Class Libraries:
			<table>
				<width>300</width>
				<row>
					<cell>mscorlib.dll</cell>
					<cell>No Prefix</cell>
				</row>
				<row>
					<cell>System.dll</cell>
					<cell><class_name>SYSTEM_DLL_</class_name></cell>
				</row>
				<row>
					<cell>System.XML.dll</cell>
					<cell><class_name>XML_</class_name></cell>
				</row>
				<row>
					<cell>System.Data.dll</cell>
					<cell><class_name>DATA_</class_name></cell>
				</row>
				<row>
					<cell>System.Web.dll</cell>
					<cell><class_name>WEB_</class_name></cell>
				</row>
				<row>
					<cell>System.EnterpriseServices.dll</cell>
					<cell><class_name>ENTERPRISE_</class_name></cell>
				</row>
				<row>
					<cell>System.Windows.Forms.dll</cell>
					<cell><class_name>WINFORMS_</class_name></cell>
				</row>
			</table>
		</paragraph>

		<output output="envision">
			<paragraph>
				In EiffelEnvision, to browse the available .NET types and features, with their formatted and prefixed names you can use the <link><url>url</url><label>*Object Browser</label></link>.
			</paragraph>
		</output>
	</paragraph>
</document>
