<document output="envision" title="Intellisense and Completion">
	<meta_data>
		<help>
			<toc>
				<envision_title>Intellisense and Completion</envision_title>
				<envision_pseudo_name>00</envision_pseudo_name>
			</toc>
			<xml>
				<xmlkeyword>
					<index>A</index>
					<term>eeEiffelEditorIntellisense</term>
				</xmlkeyword>
				<xmlkeyword>
					<index>K</index>
					<term>Intellisense</term>
				</xmlkeyword>
				<xmlkeyword>
					<index>K</index>
					<term>Editor, Intellisense Features</term>
				</xmlkeyword>
				<xmlkeyword>
					<index>K</index>
					<term>Eiffel Editor, Intellisense Features</term>
				</xmlkeyword>
			</xml>
		</help>
	</meta_data>
	<paragraph>
		The EiffelEnvision editor comes complete with all <help_link>
			<keywords>vcovrAutomaticStatementCompletion</keywords>
			<tab_index>0</tab_index>
		</help_link> features expected of a Visual Studio .NET editor.
		
		<anchor>code_completion</anchor>
		<heading>
			<size>2</size>
			<content>List Members and Complete Word</content>
		</heading>
		<paragraph>
			Code completion is based on the <help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				core Visual Studio .NET editor
			</help_link>'s <help_link>
				<keywords>vcgrfListMembers</keywords>
				<tab_index>0</tab_index>
				list members
			</help_link> feature. It provides the ability to list and complete Eiffel <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>feature</anchor_name>
				<label>*features</label>
			</link> and <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>classes</anchor_name>
				<label>*class</label>
			</link> names. By default, the editor will automatically display the <help_link>
				<keywords>vcgrfListMembers</keywords>
				<tab_index>0</tab_index>
				list members
			</help_link> window when typing a '.' (period) when qualifying feature calls. The list members window may not appear all of the time due to several reasons; you may have 
			incorrectly spelled a client feature name (prior to the period), there are no features currently <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url>
				<anchor_name>feature</anchor_name>
				<label>*exported</label>
			</link> to the client or the information may not be available at the time and a compilation is required.
		</paragraph>
		<paragraph>
			The list members may also be shown at any time by using CTRL+SPACEBAR or ALT+RIGHT ARROW.
		</paragraph>
		<paragraph>
			If you have already begun to type a feature's, name you may access the <help_link>
				<keywords>vcgrfCompleteWord</keywords>
				<tab_index>0</tab_index>
				Complete Word
			</help_link> functionality of the editor. Complete word does not require a qualified feature call as does <help_link>
				<keywords>vcgrfListMembers</keywords>
				<tab_index>0</tab_index>
				list members
			</help_link>. As long a a single character has been typed, you may complete that feature. Pressing CTRL+SPACEBAR or ALT+RIGHT ARROW will attempt to
			complete what you have already typed automatically. If the partial feature name you type matches more than one feature for the current context, the 
			<help_link>
				<keywords>vcgrfListMembers</keywords>
				<tab_index>0</tab_index>
				list members
			</help_link> window will be displayed where the appropriate selection can be made.
		</paragraph>
		<paragraph>
			Please see the <help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				core Visual Studio .NET editor
			</help_link> <help_link>
				<keywords>vcgrfListMembers</keywords>
				<tab_index>0</tab_index>
				List Members
			</help_link> for more information and additional ways to access this feature.
		</paragraph>
		
		<anchor>quick_info</anchor>
		<heading>
			<size>2</size>
			<content>Quick Info</content>
		</heading>
		<paragraph>When browsing or editing a 
			<link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>class</anchor_name>
				<label>class</label>
			</link> text, the editor provides quick, context-sensitive information about the current 
			<link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>class</anchor_name>
				<label>class</label>
			</link>. This allows the developer to quickly get summary information about a particular 
			<link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>feature</anchor_name>
				<label>feature</label>
			</link>  such as the name, 
			<link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>argument</anchor_name>
				<label>argument</label>
			</link> parameters, return type and usage description at a glance. <bold>Quick Info</bold> will also show detailed information for any <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>preconditions</anchor_name>
				<label>*preconditions</label>
			</link> and <link>
				<url>/20_Language/10_Eiffel_NET/10_Conventions/index.xml</url><anchor_name>postconditions</anchor_name>
				<label>*postconditions</label>
			</link> applied to the feature. To display the <bold>Quick Info</bold> simply 
			move the mouse cursor over the feature in question and a tooltip will display the information regarding the feature.
		</paragraph>
		<paragraph>
			Please see the <help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				core Visual Studio .NET editor
			</help_link> <help_link>
				<keywords>vcgrfQuickInfo</keywords>
				<tab_index>0</tab_index>
				Quick Info
			</help_link> for more information and ways to access this feature.
		</paragraph>

		<anchor>parameter_info</anchor>
		<heading>
			<size>2</size>
			<content>Parameter Info</content>
		</heading>
		<paragraph>
			The Parameter Info option opens the Parameters list to give you information about the number, names, and types of parameters required by a function or attribute. 
			Parameter Info is similar to the Eiffel editor's <link><url>url</url><label>Quick Info</label></link> in the respect that it shows associated features' full information 
			and descriptions. The difference between these two features is that the parameter information will highlight the next parameter, in the description of the feature, by making the parameter bold.
		</paragraph>
		<paragraph>
			Please see the <help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				core Visual Studio .NET editor
			</help_link> <help_link>
				<keywords>vcgrfParameterInfo</keywords>
				<tab_index>0</tab_index>
				Parameter Info
			</help_link> for more information and ways to access this feature.
		</paragraph>

		<anchor>auto_brace_matching</anchor>
		<heading>
			<size>2</size>
			<content>Automatic Brace Matching</content>
		</heading>
		<paragraph>
			Automatic brace matching gives you immediate feedback on misplaced brackets or open-ended code segments. This feature is always in effect; there is no related menu command or other option to disable it.
		</paragraph>
		<paragraph>
			Automatic brace matching recognizes the following pairs:
		</paragraph>
		<table >
			<width>400</width>
			<border>0</border>
			<row>
				<cell style="width: 100px;">( )</cell>
				<cell>Parentheses</cell>
			</row>
			<row>
				<cell>[ ]</cell>
				<cell>Brackets</cell>
			</row>
			<row>
				<cell>{ }</cell>
				<cell>Braces</cell>
			</row>
			<row>
				<cell>&amp;lt;&amp;lt; &amp;gt;&amp;gt;</cell>
				<cell>Array angled brackets</cell>
			</row>
		</table>
		
		<paragraph>
			Language constructs, such as <code><keyword>do</keyword></code>...<code><keyword>end</keyword></code> and <code><keyword>if</keyword></code>...<code><keyword>then</keyword></code>...<code><keyword>end</keyword></code>, are also automatically matched.
		</paragraph>

		<anchor>see_also</anchor>
		<heading>
			<size>2</size>
			<content>Related Section</content>
		</heading>
		<seealso>
			<bold>See also</bold>:
			<line_break/>
			<link>
				<url>index.xml</url>
				<label>Eiffel Editor</label>
			</link>
			<line_break/>
			<link>
				<url>browse_and_navigation.xml</url>
				<label>Code Browsing and Navigation</label>
			</link>
			<line_break/>
			<link>
				<url>t</url>
				<label>*Eiffel the Language</label>
			</link>
			<line_break/>
			<link>
				<url>configuration/index.xml</url>
				<label>Configuring the editor</label>
			</link>
			<line_break/>
			<help_link>
				<keywords>vxurfCodeTextEditorWindow</keywords>
				<tab_index>0</tab_index>
				Core Editor
			</help_link>
		</seealso>
	</paragraph>
</document>
