system
	test

root
	TEST_CLASS: make_and_launch

default

	assertion (no) 

cluster

dev:						"D:\work\library"

	-- eXML
	eXML: "$EXML/lib";
		eXML_interface (eXML): "$/interface"
			eXML_general_interface (eXML_interface): "$/general"
			eXML_event_interface (eXML_interface): "$/event"
			eXML_tree_interface (eXML_interface): "$/tree"
			eXML_factory_interface (eXML_interface): "$/factory"
			eXML_formater_interface (eXML_interface): "$\formater"
			eXML_position_interface (eXML_interface): "$\position"
			eXML_source_interface (eXML_interface): "$\source"

	eXML_implementation (eXML): "$\implementation"	
		eXML_implementation_interface (eXML_implementation): "$\implementation_interface"
			eXML_general_implementatin_interface (eXML_implementation_interface): "$\general"
			eXML_event_implementation_interface (eXML_implementation_interface): "$\event"
			eXML_tree_implementation_interface (eXML_implementation_interface): "$\tree"

		eXML_expat_implementation (eXML_implementation): "$\expat"
			eXML_expat_general_implementation (eXML_expat_implementation): "$\general"
			eXML_expat_event_implementation (eXML_expat_implementation): "$\event"
			eXML_expat_ise_implementation (eXML_expat_implementation): "$\compiler_specific\ise"
			eXML_expat_factory_implementation (eXML_expat_implementation): "$\factory"
			eXML_expat_position_implementation (eXML_expat_implementation): "$\position"
			eXML_expat_source_implementation (eXML_expat_implementation): "$\source"

		eXML_tree_on_event_implementation (eXML_implementation): "$\tree_on_event"
			eXML_tree_on_event_tree_implementation (eXML_tree_on_event_implementation): "$\tree"
			eXML_tree_on_event_factory_implementation (eXML_tree_on_event_implementation): "$\factory"


	uc_string:			"$UCSTRING\lib";
	uc_string_spec:			"$UCSTRING\spec\ise";

		-- Gobo Eiffel Kernel Library
	kl_kernel:			"$GOBO\library\kernel";
	kl_kernel_spec:		"$GOBO\library\kernel\spec\ise";

		-- Gobo Eiffel Structure Library
	ds_container:		"$GOBO\library\structure\container";
	ds_cursor:			"$GOBO\library\structure\cursor";
	ds_list:			"$GOBO\library\structure\list";
	ds_sort:			"$GOBO\library\structure\sort";
	ds_support:			"$GOBO\library\structure\support";
	ds_table:			"$GOBO\library\structure\table";
	ds_dispenser:			"$GOBO\library\structure\dispenser";


--pr_skeleton(dev):		"$\newgobo\library\gobo\library\parse\skeleton"

--lx_skeleton(dev):		"$\newgobo\library\gobo\library\lexical\skeleton"

--kl_kernel(dev):			"$\newgobo\library\gobo\library\kernel"
--kl_kernel_spec(dev):		"$\newgobo\library\gobo\library\kernel\spec\ise"
--all kjlkjl(dev):			"$\newgobo\library\gobo\library\structure"
--	exclude
--		base
--	end


event(dev):					"$\newvision2\event"

all wel (dev):						"$\wel"

bench_wid (dev):			"$\newvision2\bench_widg"

all vision2(dev):				"$\newvision2\vision2"
	exclude
		gtk
		new_figures
		--"mswin";
		--"new_figures";
		"EIFGEN";
	end

--|Appears to be a base in gobo
all base :					"C:\eiffel50\library\base"
	exclude
		"table_eiffel3"
	end

--test(dev):				"$\newvision2\v2_hack-o-rama/vision2/release/test"

external

include_path:
			"$EXPAT\xmlparse",
			--"$EXML\compiler_specific\ise\clib",
           	"d:\work\library\wel\spec\windows\include",
			"d:\work\library\newvision2\vision2\spec\include",
			"$GOBO\library\kernel\include",
			"d:\work\library\exml_02_cvs\exml\exml\lib\implementation\expat\compiler_specific\ise\clib";
object:
			"$EXML\lib\implementation\expat\compiler_specific\ise\clib\msc\exml.lib",
			"$EXPAT\lib\xmlparse.lib",
			"d:\work\library\wel\spec\$(COMPILER)\lib\wel.lib",
			"d:\work\library\newvision2\vision2\spec\$(COMPILER)\lib\vision2.lib",
			"d:\work\library\newvision2\vision2\spec\$(COMPILER)\lib\zlib.lib",
			"d:\work\library\newvision2\vision2\spec\$(COMPILER)\lib\libpng.lib";
end
