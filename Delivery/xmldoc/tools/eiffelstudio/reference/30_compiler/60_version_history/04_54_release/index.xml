<document output="studio" title="Major changes between ISE Eiffel 5.3 and ISE Eiffel 5.4">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>What's new
		</heading>
		<list ordered="false">
			<item>Support for assertion checking on external routines.</item>
			<item>Removed limitation about implementing or redefining a non-external           routine by an external one and vice versa.</item>
			<item>Support for new C/C++ inline specification.</item>
			<item>For .NET, allow calling of overloaded features for a .NET classes           to be called without using disambiguated names. Disambiguated names           are still needed when redefining inherited features from .NET classes.</item>
			<item>Support for inclusion of .NET resources within Eiffel assemblies.</item>
			<item>Launch C compilation when needed if 
				"-c_compile" option is specified on the 
				"ec" command line.
			</item>
			<item>Added ability to define custom attributes on assembly. One as to define custom attributes under the new `assembly_metadata' index clause of the root class.</item>
			<item>Limited support for new 
				<code>
					<keyword>convert</keyword>
				</code> keyword           (only on argument passing and assignments. Not supported when used           with infix routines).
			</item>
		</list>
		<heading>
			<size>2</size>Improvements
		</heading>
		<list ordered="false">
			<item>Improved speed of compilation by about 20-30%</item>
			<item>Improved run-time memory allocation speed and footprint so that it           has a 15%-20% faster allocation scheme and takes less memory than           before.</item>
			<item>Reduced waiting time at the end of the degree 6 when performing a           compilation from scratch (reduced to about 50% or more of the time it           used to take)</item>
			<item>Improved speed of 
				<class_name>TUPLE</class_name> creation and 
				<class_name>TUPLE</class_name> access           which generates more compact C code.
			</item>
			<item>Improved speed of agent calls by a factor of 2 to 3.</item>
			<item>Improved speed of Eiffel calls from C (CECIL and use of $ operator           on routines). It also makes generated           executables smaller (about 1-5% smaller depending on number of           routines used in this context)</item>
		</list>
		<heading>
			<size>2</size>Changes
		</heading>
		<list ordered="false">
			<item>Changed the way we generate calls to C/C++ external routines. It           is possible that because of this change, code that used to C compile,           will not compile anymore. This happens mostly when mixing C and C++           code and the C call being made is incorrect but was not previously           checked against the C header files if provided.</item>
			<item>In multithreaded mode, all C externals that could potentially           block the execution of the system should be marked `blocking' as in:
				<line_break/>
				<code_block>	<feature_name>sleep</feature_name> (m: <class_name>INTEGER</class_name>) <keyword>is</keyword>
		<keyword>external</keyword>
			"C blocking"          
		<keyword>end</keyword></code_block>
				Not doing it could generate dead-lock during the execution of a multithreaded system.
			</item>
			<item>Static access on externals is now only authorized when external is           a frozen external without assertions.</item>
			<item>Compiler will now report a warning for assignments like those:
				<line_break/>
				<code_block>td: <class_name>TUPLE</class_name> [<class_name>DOUBLE</class_name>]
ti: <class_name>TUPLE</class_name> [<class_name>INTEGER</class_name>]

td := ti</code_block>
				The warning will help you correct code using this pattern, because in           the next release this will be rejected in order to conform to the           Eiffel language specification.          
			</item>
			<item>Now we do not generate by default the .NET attribute <class_name>ComVisibleAttribute</class_name> with a False value. If needed it has to be done through the new compiler functionality to add custom attributes on assembly.</item>
			<item>Changed indexing clause tag for specifying custom attributes for .NET systems. Now `attribute' is replaced by `metadata'. Now you can have:
				<list ordered="false">
					<item>metadata: generated for both interface and implementation classes </item>
					<item>assembly_metadata: generated for assembly only when specified in root class of system </item>
					<item>class_metadata: generated only for implementation class </item>
					<item>interface_metadata: generated only for interface class</item>
				</list>
			</item>
		</list>
		<heading>
			<size>2</size>Bug fixes
		</heading>
		<heading>
			<size>3</size>Language issues
		</heading>
		<list ordered="false">
			<item>Now checks for valid export status in agent creation. Meaning that           in class 
				<class_name>MY_CLASS</class_name>, the following agent creation          
				<code>
					<keyword>agent</keyword>
				</code> 
				<feature_name>target</feature_name>.
				<feature_name>call</feature_name> is valid if and           only if 
				<feature_name>call</feature_name> is exported to 
				<class_name>MY_CLASS</class_name>.
			</item>
			<item>Allowed type specification for open operands in agent creation,           i.e. one can now write: 
				<code>
					<keyword>agent</keyword>
				</code> 
				<feature_name>f</feature_name> ({
				<class_name>A</class_name>}).
			</item>
			<item>Fixed bug which allowed compiler to accept the following incorrect           code: 
				<feature_name>char</feature_name>: 
				<class_name>CHARACTER</class_name> 
				<code>
					<keyword>is</keyword>
				</code> 
				<code>
					<string>"rdsf"</string>
				</code>
			</item>
			<item>Fixed bug in error reporting for incompatible 
				<class_name>BIT</class_name> types           involving bit manifest constants. It would           always report 
				<class_name>BIT 0</class_name>, instead of the actual number of bits in the bit           manifest constant.
			</item>
		</list>
		<heading>
			<size>3</size>Compiler issues
		</heading>
		<list ordered="false">
			<item>Fixed non-detection of changes when changing code from          
				<code>
					<keyword>agent</keyword>
				</code> 
				<feature_name>call </feature_name>to          
				<code>
					<keyword>agent</keyword>
				</code> 
				<code>
					<keyword>Current</keyword>
				</code>.
				<feature_name>call</feature_name>.   Which should check for the validity of export of 
				<feature_name>call </feature_name>  to current class.
			</item>
			<item>Fixed creation and assignment attempts on generic types that have anchored types in their generic parameter, and the anchor is itself generic.</item>
		</list>
		<heading>
			<size>3</size>Runtime/code generation issues
		</heading>
		<list ordered="false">
			<item>Fixed issue when shared library definition file did not exist or           was invalid. Now it will not produce any C compilation errors.</item>
			<item>Fixed bug in recoverable storable when there is a mismatch. The           first assignment attempt in           
				<feature_name>internal_correct_mismatch</feature_name> from 
				<class_name>ANY</class_name> would crash.
			</item>
			<item>Fixed issue when retrieving storable files that contain TUPLE instances.</item>
			<item>Fixed issues when using agents in a multithreaded application,           they will sometimes disable the garbage collector and the application           might quickly run out of memory.</item>
			<item>Fixed random crashes when EIF_MEMORY_CHUNK, EIF_MEMORY_SCAVENGE           and EIF_STACK_CHUNK environment variables had an incorrect value.           Instead the runtime will now fix the value to an appropriate one.</item>
		</list>
		<heading>
			<size>3</size>.NET issues
		</heading>
		<list ordered="false">
			<item>Fixed bug in code generation  with following statement:
				<line_break/>
				<code_block>l_time: <class_name>TIME_SPAN</class_name>
<feature_name>print</feature_name> (l_time.<feature_name>total_milliseconds</feature_name>.<feature_name>out</feature_name>)</code_block>
			</item>
			<item>Fixed incorrect code generation with code accessing attributes of .NET expanded types.</item>
			<item>Fixed incorrect computation of equal when used with basic types, e.g. equal (1, 1) would return False instead of True. </item>
		</list>
		<heading>
			<size>3</size>Store/Retrieve issues
		</heading>
		<list ordered="false">
			<item>Fixed memory corruption bug with recoverable storable when a           mismatch was detected</item>
			<item>Fixed issue where mismatch was not detected if attributes were           dropped</item>
			<item>Fixed issue with independent store when storing <class_name>TUPLE</class_name> objects where it would crash if storable did not include a reference to <class_name>ANY</class_name>. </item>
		</list>
	</paragraph></document>
