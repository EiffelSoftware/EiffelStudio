<document output="studio" title="EiffelStore DataView Cluster">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>1. Introduction
		</heading>
		<paragraph>DataView cluster helps the programmer creating a GUI for a RDBMS. It gives a basic solution for a RDBMS GUI and also enables the developer to customize his GUI from this basic interface.</paragraph>
		<paragraph>This cluster is client of EiffelStore to interface with a RDBMS and EiffelVision2 to create a GUI. However, the use of EiffelStore and EiffelVision 2 is sufficiently encapsulated to let the programmer use other database/graphic libraries.</paragraph>
		<paragraph>Notice finally that DataView is based on some common O-O
			<italic>design patterns</italic>. Knowing these patterns will help you understand how the library works. It can also give an example of patterns use.
		</paragraph>
		<heading>
			<size>2</size>2. Specifications
		</heading>
		<paragraph>This part draws the main capabilities that can be expected from the DataView cluster. These capabilities are not exhaustive since the cluster architecture enables to add easily new capabilities to it.</paragraph>
		<heading>
			<size>3</size>2.1. Required database structure
		</heading>
		<paragraph>The cluster has been designed to work well with relational databases on Third Normal Form. Database tables must also have an unique numeric ID.</paragraph>
		<list ordered="false">
			<item>The cluster automatically performs associations between related tables.  This is required to work fine with 3rd NF architectures.</item>
			<item>The unique ID enables to update the database content. If you only intend to  display database table content, unique IDs are not required.</item>
			<item>The numeric ID enables to directly give IDs to new table rows. If you don't  intend to create table rows, this is not necessary. Notice that with only a  couple of redefinitions, the numeric ID requirement problem can be overcome.</item>
		</list>
		<heading>
			<size>3</size>2.2. Database content display
		</heading>
		<paragraph>The cluster provides facilities to:</paragraph>
		<list ordered="false">
			<item>display a set of table rows.</item>
			<item>select a (current) table row in the set.</item>
			<item>display the current table row so that it can be edited.</item>
		</list>
		<paragraph>For instance, an interface can display a multi-column list of table rows. A given row can be selected in the list and its information can be then edited through a set of text fields and combo-boxes.</paragraph>
		<paragraph>The standard cluster usage is to define a GUI that will associate a given frame/window to a given database table, that is, the information that is displayed in a GUI area will be determined at compile-time. This enables to adapt the GUI display to the type of information displayed, which is recommended when creating a GUI for non-developer users (or any people that should not be aware of the database structure and functioning). Nevertheless, determining the type of information displayed by a frame/window at runtime is still possible as not hard-coded.</paragraph>
		<paragraph>Abstracting database in the GUI might not be as easy as only changing database attribute fields names. Information to display may not match the database tables structure. However, for consistency reasons, we can assume that he information to display within a GUI area belongs to a set of associated tables. The easiest solution is to create database views that directly contain the information to display on the GUI area. This implies though that the database has to be modified for the GUI needs.</paragraph>
		<paragraph>DataView cluster affords a second solution:</paragraph>
		<list ordered="false">
			<item>Model-View separation enables to merge graphically information that is  separated in the process part (i.e. that is from a different table).</item>
			<item>Table associations facilities enable to specify to display automatically  content of table rows associated to a given table row. For instance, with a  CONTACTS table associated to a COMPANIES table, the cluster can retrieve  automatically a COMPANIES table row associated to a selected CONTACTS table  row.</item>
		</list>
		<heading>
			<size>3</size>2.3. Actions performed on the database
		</heading>
		<paragraph>The cluster provides facilities for the following actions:</paragraph>
		<list ordered="false">
			<item>Creating a table row</item>
			<item>Deleting a table row</item>
			<item>Updating the content of a table row</item>
			<item>Selecting a set of table rows</item>
		</list>
		<paragraph>Other capabilities can be added to these ones, for instance by writing descendants of DataView cluster classes that would handle more database operations.</paragraph>
		<paragraph>Operations relative to the database structure modification, for instance creating a database table, may be more difficult to add since the database structure is hard-coded. But these advanced capabilities might not be necessary in a GUI for non-developer users.</paragraph>
		<heading>
			<size>2</size>3. General description
		</heading>
		<heading>
			<size>3</size>3.1. Global architecture
		</heading>
		<paragraph>The DataView cluster is based on 1 class called <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> that represents the interface for 1 relational database table. An architecture using
			<italic>DataView</italic> is centered on database table structure rather than the GUI structure. The basic idea is to have:
		</paragraph>
		<list ordered="false">
			<item>1 database relational table</item>
			<item>1 GUI window or frame</item>
			<item>1 <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> object</item>
		</list>
		<paragraph>This is then possible to adapt the code to have a GUI meeting the specifications, database structure can be totally abstracted in the interface, which might be more convenient for non-developer GUI users.</paragraph>
		<heading>
			<size>3</size>3.2. Library structure
		</heading>
		<paragraph>The cluster can be separated into 3 main parts:</paragraph>
		<list ordered="false">
			<item>The
				<bold>model</bold>: processes the information and interfaces with an  abstract graphic interface (the handle) and an abstract  database interface.
			</item>
			<item>The
				<bold>handle</bold>: defines an abstract graphic interface for the model.
			</item>
			<item>The
				<bold>view</bold>: implements the handle interface with EiffelVision2  widgets.
			</item>
		</list>
		<paragraph>The abstract database interface is defined in the EiffelStore generation.tables_access cluster. This cluster can indeed been used independently from the DataView cluster.</paragraph>
		<heading>
			<size>3</size>3.3. Model cluster structure
		</heading>
		<paragraph>The
			<bold>model</bold> cluster processes the information retrieved from the GUI and the database and update then both GUI and database.
		</paragraph>
		<paragraph>The cluster is based on the <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> class which objects represents a database relational table (or view).</paragraph>
		<paragraph>DV_TABLE_COMPONENT objects can be interconnected to match the table associations. The <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> class has been designed to work with 3rd Normal Form relational databases. <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> achieves most of the work to retrieve associated table rows for a 3NF database. For instance, when deleting a table row, the component ensures that every associated table row is also deleted.</paragraph>
		<paragraph><link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> objects can be customized by adding some subcomponents to it. Subcomponents enable to display table rows content on screen, to navigate among table rows and to perform different database queries.</paragraph>
		<paragraph>
			<image>
				<url>sub-component_objects.png</url>
			</image>
		</paragraph>
		<paragraph>Process objects structure for a GUI</paragraph>
		<heading>
			<size>3</size>3.4. Design patterns
		</heading>
		<paragraph>This cluster adapts several well-known O-O design patterns.</paragraph>
		<heading>
			<size>4</size>3.4.1. Model-View separation pattern
		</heading>
		<paragraph>The GUI appearance is totally abstracted in the GUI processing part, this enables to change the GUI display without changing any part of the model part.This is implemented with 2 sets of classes:</paragraph>
		<list ordered="false">
			<item>A set of interfaces that corresponds to each type of abstract widgets  needed by the model.</item>
			<item>A set of classes that implements these interfaces. Notice that an implementation class can implement several interfaces and several classes  can implement the same interface.</item>
		</list>
		<paragraph>Let's see an example through a BON diagram:</paragraph>
		<paragraph>
			<image>
				<url>model_view_relationship.png</url>
			</image>
		</paragraph>
		<paragraph>Model-View separation pattern implementation in
			<italic>DataView</italic>
		</paragraph>
		<list ordered="false">
			<item>Light blue classes represents the model cluster.</item>
			<item>Orange class represents the handle.</item>
			<item>Yellow and green classes represents the view cluster.</item>
			<item>Pink classes represents the EiffelVision2 library.</item>
		</list>
		<heading>
			<size>4</size>3.4.2. Strategy pattern
		</heading>
		<paragraph>DataView cluster provides the developer with a basic GUI implementation AND lets them customize their application. This is possible with a strategy pattern:</paragraph>
		<paragraph>The developer assigns different subcomponents to a <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> object to define its behavior. The component object only uses the interface of each subcomponent.</paragraph>
		<paragraph>A default implementation is written for each interface to let the user use the cluster as quick as possible. To adapt components behavior to their needs, the developer can then create a new subcomponent class inheriting from the abstract interface.</paragraph>
		<paragraph>This BON diagram illustrates this for <link><url>../../reference/dv_creator_chart.xml</url><label>DV_CREATOR</label></link> and <link><url>../../reference/dv_searcher_chart.xml</url><label>DV_SEARCHER</label></link> subcomponents:</paragraph>
		<paragraph>
			<image>
				<url>DV_TABLE_COMPONENT_strategy.png</url>
			</image>
		</paragraph>
		<paragraph>Strategy pattern used in
			<italic>DataView</italic> model cluster
		</paragraph>
		<heading>
			<size>2</size>4. Cluster interface
		</heading>
		<paragraph>This part describes how to use the table component class and its subcomponents classes:</paragraph>
		<list ordered="false">
			<item>The <link><url>../../reference/dv_searcher_chart.xml</url><label>DV_SEARCHER</label></link> class to
				<link>
					<anchor_name>dv_searcher</anchor_name>
					<label>select table  rows from the database</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_tablerows_navigator_chart.xml</url><label>DV_TABLEROW_NAVIGATOR</label></link> class to
				<link>
					<anchor_name>dv_tablerow_navigator</anchor_name>
					<label>navigate  among selected table rows</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_creator_chart.xml</url><label>DV_CREATOR</label></link> class to
				<link>
					<anchor_name>dv_creator</anchor_name>
					<label>create new  table rows in the database</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_tablerow_fields_chart.xml</url><label>DV_TABLEROW_FIELDS</label></link> class to
				<link>
					<anchor_name>dv_tablerow_fields</anchor_name>
					<label>edit  a table row content</label>
				</link>.
			</item>
		</list>
		<heading>
			<size>3</size>4.1. DV_TABLE_COMPONENT class
		</heading>
		<paragraph>This class is responsible for the management of a database table. Its behavior is determined by its assigned subcomponents.</paragraph>
		<paragraph>To create a valid and functional <link><url>../../reference/dv_tablerows_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> object, follow these steps:</paragraph>
		<list ordered="true">
			<item>Call set_tablecode to specify which table the component will deal with.</item>
			<item>Specify
				<link>
					<anchor_name>output_handler</anchor_name>
					<label>handlers to output messages</label>
				</link>.
			</item>
			<item>Set the
				<link>
					<anchor_name>database_handler</anchor_name>
					<label>database handler</label>
				</link>.
			</item>
			<item>Add different
				<link>
					<anchor_name>controllers</anchor_name>
					<label>controllers corresponding to actions  to perform</label>
				</link>.
			</item>
			<item>Set
				<link>
					<anchor_name>subcomponents</anchor_name>
					<label>subcomponents</label>
				</link>.
			</item>
			<item>Set
				<link>
					<anchor_name>associated_components</anchor_name>
					<label>associated components</label>
				</link>.
			</item>
			<item>Call activate to let the component work. This will basically set  different default values for non required information not set during the  creation process.</item>
		</list>
		<paragraph>The component can then be used on an interface:</paragraph>
		<list ordered="false">
			<item>Input interactions are done via component and subcomponents controllers  (4).</item>
			<item>Output interactions are done via output handlers (2).</item>
		</list>
		<heading>
			<size>4</size>4.1.1. Output handlers
		</heading>
		<paragraph>Output handlers are specific to the <link><url>../../reference/dv_tablerows_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> object, that is, you can output messages in a different way within your GUI. However, the same handlers will be used for subcomponents.</paragraph>
		<paragraph>3 handlers can be set:</paragraph>
		<list ordered="false">
			<item>`status_handler' to display status information</item>
			<item>`warning_handler' to display warning information. Warnings usually  correspond to database errors, they are called warnings because the database  error is "caught" and the message should enable the user to round  the problem.</item>
			<item>`confirmation_handler' to ask for confirmation before an action.</item>
		</list>
		<paragraph>These handlers have default values, which are:</paragraph>
		<list ordered="false">
			<item>For `status_handler' and `warning_handler', messages are displayed on  standard output (with {ANY}.io.put_string)</item>
			<item>For `confirmation_handler', action is executed without confirmation.</item>
		</list>
		<heading>
			<size>4</size>4.1.2. Database handler
		</heading>
		<paragraph>This handler is specific to the application. It must inherit from <class_name>ABSTRACT_DB_TABLE_MANAGER</class_name>. Since it is specific to the program, it can be set before creating any <link><url>../../reference/dv_table_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> object through {DV_DATABASE_HANDLER}.set_database_handler.The <link><url>../../reference/db_table_manager_chart.xml</url><label>DB_TABLE_MANAGER</label></link> class is the default database handler for EiffelStore.</paragraph>
		<heading>4.1.3. Action controllers</heading>
		<paragraph>No subcomponent is associated to 'write', 'refresh' and 'delete' actions since these actions does not require specific behavioral choices.</paragraph>
		<paragraph>To perform 'write', 'refresh' and 'delete' at runtime, a controller is associated to each of these actions. This controller triggers the action when a determined user event is grabbed, for instance, when the user clicks a button.</paragraph>
		<paragraph>
			<link>
				<anchor_name>dv_s_control</anchor_name>
				<label>Controllers</label>
			</link> are implemented by the abstract class <link><url>../../reference/dv_sensitive_control_chart.xml</url><label>DV_SENSITIVE_CONTROL</label></link> of cluster user_interactions (handle).
		</paragraph>
		<heading>
			<size>4</size>4.1.4. Subcomponents
		</heading>
		<paragraph>Subcomponents can be assigned to a table component to specify its behavior to create table rows, select table rows from the database and navigate among selected table rows. A special subcomponent enable to display the
			<italic>current</italic> table row, i.e. the table row that can be edited to update the database. The default behavior for these subcomponents is that the functionality is not available, that is, subcomponents are not mandatory.
		</paragraph>
		<paragraph>These components share the table component output handlers. They are automatically activated when table component is activated.</paragraph>
		<heading>
			<size>4</size>4.1.5. Associated components
		</heading>
		<paragraph>Table components can be associated to reflect relation of database tables represented. Associated table components are organized:</paragraph>
		<list ordered="false">
			<item>1 master component enables to manually select database table rows.</item>
			<item>Slave components automatically select table rows that are associated to  the current table row of the master component.</item>
		</list>
		<note>
			<bold>Note</bold>: Notice that table associations can be
			<bold>nested</bold>.
		</note>
		<paragraph>2 types of associations are possible to reflect table relations:</paragraph>
		<list ordered="false">
			<item>The slave table is dependent on the master table (1:N relationship)</item>
			<item>The slave table is necessary for the master table (N:1 relationship)</item>
		</list>
		<paragraph>Let us see an example with 3 relational tables:</paragraph>
		<paragraph>
			<image>
				<url>table-objects_associations.png</url>
			</image>
		</paragraph>
		<paragraph>Tables architecture and corresponding component objects</paragraph>
		<paragraph>The object architecture leads to a GUI where the user can select a company and see the company country information and contacts in this company.</paragraph>
		<paragraph>Finally, notice that by default slave components have the same output handlers as their master and slave components are activated when the master component is.</paragraph>
		<heading>
			<size>3</size>4.2. DV_SEARCHER class
		</heading>
		<heading>
			<size>4</size>4.2.1. Overview
		</heading>
		<paragraph><link><url>../../reference/dv_searcher_chart.xml</url><label>DV_SEARCHER</label></link> is responsible for retrieving table rows from the database. Let us see how it interacts with a table component:</paragraph>
		<paragraph>
			<image>
				<url>component-search_relation.png</url>
			</image>
		</paragraph>
		<paragraph>Basic relationship between table component class and search class</paragraph>
		<list ordered="false">
			<item>`display' assigns a set of table rows to the table component.</item>
			<item>`refresh' asks to refresh the table rows from the same database query.</item>
		</list>
		<paragraph><link><url>../../reference/dv_searcher_chart.xml</url><label>DV_SEARCHER</label></link> component does not afford an extended interface. This interface is defined in its descendants. The implemented <link><url>../../reference/dv_searcher_chart.xml</url><label>DV_SEARCHER</label></link> descendants are:</paragraph>
		<list ordered="false">
			<item><link><url>../../reference/dv_typed_searcher_chart.xml</url><label>DV_TYPED_SEARCHER</label></link> performs different
				<link>
					<anchor_name>dv_typed_searcher</anchor_name>
					<label>basic  searches</label>
				</link> used by the cluster.
			</item>
			<item><link><url>../../reference/dv_interactive_searcher_chart.xml</url><label>DV_INTERACTIVE_SEARCHER</label></link> enables to create a graphic interface to
				<link>
					<anchor_name>dv_interactive_searcher</anchor_name>
					<label>let  user set search parameters</label>
				</link>.
			</item>
		</list>
		<heading>
			<size>4</size>4.2.2. DV_TYPED_SEARCHER class
		</heading>
		<paragraph>This class provides 3 types of searches:</paragraph>
		<list ordered="false">
			<item>"Every row" search: every rows of a table are fetched.</item>
			<item>"ID selection" search: the selection is qualified by an ID.</item>
			<item>"Qualified selection" search: the selection is qualified.</item>
		</list>
		<heading>
			<size>5</size>4.2.2.1. "Every row" search
		</heading>
		<paragraph>Call read to set table rows on the associated table component.</paragraph>
		<heading>
			<size>5</size>4.2.2.2. "ID selection" search
		</heading>
		<paragraph>Call read_from_tablerow to set table rows on the associated table component. Qualification ID is the ID of the table row in parameter. Table of row in parameter must be the table of rows to select.</paragraph>
		<paragraph>This capability is used by DataView cluster in <link><url>../../reference/dv_choice_creator_chart.xml</url><label>DV_CHOICE_CREATOR</label></link> to select a just-created table row and display it on the table component.</paragraph>
		<heading>
			<size>5</size>4.2.2.3. "Qualified selection" search
		</heading>
		<paragraph>Call read_from_table row to set table rows on the associated table component. Table of row in parameter may not be the table of rows to select.</paragraph>
		<paragraph>To extract the qualifier, the search component needs additional information:</paragraph>
		<list ordered="false">
			<item>The location of the qualifying value in the table row passed in parameter  (set_row_attribute_code)</item>
			<item>The qualifying attribute location in the table rows to select (set_criterion)</item>
		</list>
		<paragraph>This capability is used in <link><url>../../reference/dv_tablerows_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link> when a table row is selected to set associated table rows to slave components. Take a look at add_necessary_table and add_dependent_table.</paragraph>
		<heading>
			<size>4</size>4.2.3. DV_INTERACTIVE_SEARCHER class
		</heading>
		<paragraph>This class enables to create a graphic interface to let user perform basic searches. These searches are qualified by one table attribute. This interface has 5 parts:</paragraph>
		<list ordered="false">
			<item>A
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label> controller</label>
				</link> that enables to launch the search
			</item>
			<item>A
				<link>
					<anchor_name>dv_s_string</anchor_name>
					<label> text input field</label>
				</link> to set qualifying attribute
			</item>
			<item>A
				<link>
					<anchor_name>dv_s_string</anchor_name>
					<label> text input field</label>
				</link> to set qualifying value
			</item>
			<item>A
				<link>
					<anchor_name>dv_s_integer</anchor_name>
					<label> typed input field</label>
				</link> to set qualification type
			</item>
			<item>A
				<link>
					<anchor_name>dv_s_check</anchor_name>
					<label> Boolean input field</label>
				</link> to set case sensitivity
			</item>
		</list>
		<paragraph>Text input fields correspond to handle class <link><url>../../reference/dv_sensitive_string_chart.xml</url><label>DV_SENSITIVE_STRING</label></link>, typed input fields corresponds to handle class <link><url>../../reference/dv_sensitive_integer_chart.xml</url><label>DV_SENSITIVE_INTEGER</label></link> and Boolean input fields corresponds to handle class <link><url>../../reference/dv_sensitive_check_chart.xml</url><label>DV_SENSITIVE_CHECK</label></link>.</paragraph>
		<heading>
			<size>3</size>4.3. DV_TABLEROW_NAVIGATOR class
		</heading>
		<heading>
			<size>4</size>4.3.1. Overview
		</heading>
		<paragraph>Table component class contains a set of table rows. This class lets table component class know which of these rows is the current one.</paragraph>
		<paragraph>
			<image>
				<url>component_navigate_relation.png</url>
			</image>
		</paragraph>
		<paragraph>Basic relationship between table component class and navigation class</paragraph>
		<paragraph><link><url>../../reference/dv_choice_creator_chart.xml</url><label>DV_CHOICE_CREATOR</label></link> also uses the class to enable to select associated table rows when creating a new table row (for instance, when creating a company, an existing country should be selected). Let us see how this is designed:</paragraph>
		<paragraph>
			<image>
				<url>DV_TABLEROWS_NAVIGATOR_clients.png</url>
			</image>
		</paragraph>
		<paragraph>DV_TABLEROWS_NAVIGATOR clients</paragraph>
		<note>
			<bold>Note</bold>: DV_TABLEROWS_COMPONENT class merely carries a set of table rows and enables to select one table row.
		</note>
		<paragraph>DV_CONTROL_NAVIGATOR affords a way to navigate among searched table rows.</paragraph>
		<heading>
			<size>4</size>4.3.2. DV_CONTROL_NAVIGATOR class
		</heading>
		<paragraph>This class enables 2 navigation systems:</paragraph>
		<list ordered="false">
			<item>Navigating among table rows with "previous" and "next"  controllers.</item>
			<item>Navigating among table rows through a display list.</item>
		</list>
		<tip>
			<bold>Tip</bold>: Notice that both systems can be used.
		</tip>
		<paragraph>You can directly set
			<link>
				<anchor_name>dv_s_control</anchor_name>
				<label> controllers</label>
			</link> for "previous" and"next" actions. A 3rd controller, "edit list", enables to show or raise the display list.
		</paragraph>
		<warning>
			<bold>Caution</bold>: Notice that DV_CONTROL_NAVIGATOR only manages this controller sensitivity.
		</warning>
		<paragraph>You can assign a
			<link>
				<anchor_name>dv_tablerow_list</anchor_name>
				<label> display list</label>
			</link> to the navigator with a <link><url>../../reference/dv_tablerow_list_chart.xml</url><label>DV_TABLEROW_LIST</label></link> component.
		</paragraph>
		<heading>
			<size>3</size>4.4. DV_CREATOR class
		</heading>
		<heading>
			<size>4</size>4.4.1. Overview
		</heading>
		<paragraph>This class enables to create database table rows.</paragraph>
		<paragraph>
			<image>
				<url>component-create_relation.png</url>
			</image>
		</paragraph>
		<paragraph>Basic relationship between table component class and navigation class</paragraph>
		<paragraph><link><url>../../reference/dv_creator_chart.xml</url><label>DV_CREATOR</label></link> class contains minimum information to interact with <link><url>../../reference/dv_tablerows_component_chart.xml</url><label>DV_TABLE_COMPONENT</label></link>: when a table row is created, a creator component may display it on the table component. In this case, when the table component needs to refresh the table rows set, this refreshing action need to be managed by the creator component:</paragraph>
		<list ordered="false">
			<item>`set_just_created' informs a table component that displayed table row set  comes from the creator component.</item>
			<item>`refresh' lets the creation component refresh table component display.</item>
		</list>
		<paragraph>Much of the work, that is row creation, is totally abstracted in DV_CREATOR.DV_CHOICE_CREATOR implements DV_CREATOR and thus affords a creation procedure.</paragraph>
		<heading>
			<size>4</size>4.4.2. DV_CHOICE_CREATOR class
		</heading>
		<heading>
			<size>5</size>4.4.2.1. Overview
		</heading>
		<paragraph>This class creates a new table row and sets its key values:</paragraph>
		<list ordered="false">
			<item>Database handle gives the primary key value (ID) .</item>
			<item>The class asks the user for foreign key values (for table associations) by  displaying available values in a list.</item>
		</list>
		<paragraph>DV_TABLEROW_NAVIGATOR is used to select a foreign key value, let us see how this is implemented:</paragraph>
		<paragraph>
			<image>
				<url>DV_CHOICE_CREATOR_fkeys_selection.png</url>
			</image>
		</paragraph>
		<paragraph><link><url>../../reference/dv_choice_creator_chart.xml</url><label>DV_CHOICE_CREATOR</label></link> suppliers for foreign keys selection</paragraph>
		<paragraph><link><url>../../reference/dv_tablerow_id_provider_chart.xml</url><label>DV_TABLEROW_ID_PROVIDER</label></link> inherits from <link><url>../../reference/dv_tablerows_component_chart.xml</url><label>DV_TABLEROWS_COMPONENT</label></link> to interface with <link><url>../../reference/dv_tablerows_navigator_chart.xml</url><label>DV_TABLEROWS_NAVIGATOR</label></link>.</paragraph>
		<paragraph>Relation between <link><url>../../reference/dv_choice_creator_chart.xml</url><label>DV_CHOICE_CREATOR</label></link> and <link><url>../../reference/dv_tablerow_id_provider_chart.xml</url><label>DV_TABLEROW_ID_PROVIDER</label></link> is basically:</paragraph>
		<paragraph>
			<image>
				<url>creator-provider_relation.png</url>
			</image>
		</paragraph>
		<paragraph><class_name>DV_CHOICE_CREATOR/DV_TABLEROW_ID_PROVIDER</class_name> basic interactions</paragraph>
		<paragraph>Creation process and <link><url>../../reference/dv_choice_creator_chart.xml</url><label>DV_CHOICE_CREATOR</label></link> objects creation procedure can help you use this class.</paragraph>
		<heading>
			<size>5</size>4.4.2.2. Creation process
		</heading>
		<paragraph>Table row creation process is:</paragraph>
		<list ordered="true">
			<item>Table row creation is triggered by a
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label> controller</label>
				</link> ("create")
			</item>
			<item> <class_name>DV_CHOICE_CREATOR</class_name>  creates a table row object</item>
			<item> <class_name>DV_CHOICE_CREATOR </class_name> requests a first foreign key value to <link><url>../../reference/dv_tablerow_id_provider_chart.xml</url><label>DV_TABLEROW_ID_PROVIDER</label></link> (through `select_from_table')</item>
			<item> <class_name>DV_TABLEROW_ID_PROVIDER </class_name> loads the available table rows that can be  referenced</item>
			<item> <class_name>DV_TABLEROW_ID_PROVIDER</class_name> assigns the table rows to <class_name>DV_TABLEROWS_NAVIGATOR</class_name>  and  pops up the interface with the table rows</item>
			<item>Table row selection is triggered by a
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label> controller</label>
				</link> ("ok")
			</item>
			<item> <class_name>DV_TABLEROW_ID_PROVIDER</class_name> retrieves the selected table row ID and gives it  back to <class_name>DV_CHOICE_CREATOR</class_name>  (through `add_foreign_key_value')</item>
			<item> <class_name>DV_CHOICE_CREATOR</class_name> requests other foreign key values to   <class_name>DV_TABLEROW_ID_PROVIDER</class_name></item>
			<item> <class_name>DV_CHOICE_CREATOR</class_name> creates the database row with a new ID through the  database handle</item>
		</list>
		<heading>
			<size>5</size>4.4.2.3. Objects creation procedure
		</heading>
		<paragraph>To create a DV_CHOICE_CREATOR, follow these steps:</paragraph>
		<list ordered="true">
			<item>Create an object conforming to DV_TABLEROWS_NAVIGATOR</item>
			<item>Create a <class_name>DV_TABLEROW_ID_PROVIDER</class_name> object and assign the  <class_name>DV_TABLEROWS_NAVIGATOR</class_name>  object to it</item>
			<item>Set a
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label> controller</label>
				</link> to trigger foreign key selection
			</item>
			<item>Set the action to perform to pop up the interface to select the foreign  key</item>
			<item>Create a <class_name>DV_CHOICE_CREATOR</class_name>  object and assign the <class_name>DV_TABLEROW_ID_PROVIDER</class_name>  object to it</item>
			<item>Set a
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label> controller</label>
				</link> to trigger table row creation
			</item>
		</list>
		<heading>
			<size>3</size>4.5. DV_TABLEROW_FIELDS class
		</heading>
		<heading>
			<size>4</size>4.5.1. Overview
		</heading>
		<paragraph>This class enable to display and edit the current table row of a table component. Let us see first how it interacts with the table component:</paragraph>
		<paragraph>
			<image>
				<url>component-fields_relation.png</url>
			</image>
		</paragraph>
		<paragraph>DV_TABLE_COMPONENT/DV_TABLEROW_FIELDS basic interactions</paragraph>
		<list ordered="false">
			<item>refresh_tablerow refreshes display with a new table  row</item>
			<item>update_tablerow requests an updated table row for  database update. Unchanged values are kept from a default table row</item>
			<item>updated_tablerow is the last updated table row</item>
		</list>
		<paragraph>The class contains a list of fields that represent editable table attributes.The design is simple:</paragraph>
		<paragraph>
			<image>
				<url>DV_TABLEROW_FIELDS_design.png</url>
			</image>
		</paragraph>
		<paragraph>Table row edition capability design</paragraph>
		<heading>
			<size>4</size>4.5.2. DV_TABLEROW_FIELD class
		</heading>
		<paragraph>This class enables to edit a table row attribute value. The view is abstracted using the handle cluster <link><url>../../reference/dv_sensitive_string_chart.xml</url><label>DV_SENSITIVE_STRING</label></link> class that
			<link>
				<anchor_name>dv_s_string</anchor_name>
				<label>represents the editable text value</label>
			</link>.
		</paragraph>
		<paragraph>This class manages a field value but can also provide field name and type if
			<link>
				<anchor_name>dv_s_string</anchor_name>
				<label>graphic fields</label>
			</link> are provided. Notice that standard <link><url>../../reference/dv_tablerow_field_chart.xml</url><label>DV_TABLEROW_FIELD</label></link> objects can be generated through the <link><url>../../reference/dv_factory_chart.xml</url><label>DV_FACTORY</label></link> class, which is a component factory.
		</paragraph>
		<heading>
			<size>2</size>5. Handle cluster
		</heading>
		<paragraph>This cluster provides the model with an interface to input or output data on the GUI. This enables to remove any link to a graphic implementation in the model, following the
			<link>
				<anchor_name>model-view_sep</anchor_name>
				<label>Model-View separation</label>
			</link> design pattern. The cluster contains a set of interface classes to design this:
		</paragraph>
		<list ordered="false">
			<item>The <link><url>../../reference/dv_sensitive_control_chart.xml</url><label>DV_SENSITIVE_CONTROL</label></link> class to
				<link>
					<anchor_name>dv_s_control</anchor_name>
					<label>let the user  trigger an action</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_sensitive_string_chart.xml</url><label>DV_SENSITIVE_STRING</label></link> class to
				<link>
					<anchor_name>dv_s_string</anchor_name>
					<label>input or output a  text value</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_sensitive_string_chart.xml</url><label>DV_SENSITIVE_INTEGER</label></link> class to
				<link>
					<anchor_name>dv_s_integer</anchor_name>
					<label>input or output  a quantity value</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_sensitive_check_chart.xml</url><label>DV_SENSITIVE_CHECK</label></link> class to
				<link>
					<anchor_name>dv_s_check</anchor_name>
					<label>input or output a  tag value</label>
				</link>.
			</item>
			<item>The <link><url>../../reference/dv_tablerow_list_chart.xml</url><label>DV_TABLEROW_LIST</label></link> class to
				<link>
					<anchor_name>dv_tablerow_list</anchor_name>
					<label>display a set of  table rows and grab events on it</label>
				</link>.
			</item>
		</list>
		<heading>
			<size>3</size>5.1. DV_SENSITIVE_CONTROL class
		</heading>
		<paragraph>The <link><url>../../reference/dv_sensitive_control_chart.xml</url><label>DV_SENSITIVE_CONTROL</label></link> class lets a model class trigger a specific action on a determined user event. Furthermore, the model class lets the user know when its state enables to trigger the action, by setting the controller sensitivity (i.e. if the controller is insensitive, the action cannot be triggered).</paragraph>
		<note>
			<bold>Note</bold>: sensitivity excepted, these controllers could have been implemented by Eiffel
			<italic>agents</italic>.
		</note>
		<note>
			<bold>Note</bold>: sensitivity enables to let the user know
			<italic>before</italic>triggering an action if this is possible or not. The other possibility is to let the user know
			<italic>after</italic> trying to trigger the action that it was not possible(with a warning for instance): this is often less convenient.
		</note>
		<paragraph>The standard controllers are buttons or menu items: the specific action is triggered when button is clicked or menu item selected.</paragraph>
		<paragraph> <link><url>../../reference/dv_sensitive_control_chart.xml</url><label>DV_SENSITIVE_CONTROL</label></link> is inherited by <link><url>../../reference/dv_button_chart.xml</url><label>DV_BUTTON</label></link> that implements an EiffelVision2 button. Other implementations can be added, such as a menu item.</paragraph>
		<heading>
			<size>3</size>5.2. DV_SENSITIVE_STRING class
		</heading>
		<paragraph>The <link><url>../../reference/dv_sensitive_string_chart.xml</url><label>DV_SENSITIVE_STRING</label></link> class lets a model class input or output a text graphically. As for controllers, the model class lets the user know when a text value can be input by setting the widget sensitivity.</paragraph>
		<paragraph>The standard graphical widgets to perform this are text fields, but several other widgets can be used:</paragraph>
		<list ordered="false">
			<item>A combo-box so that the interface can suggest different values.</item>
			<item>A label if the text only need to be output.</item>
		</list>
		<note>
			<bold>Note</bold>: customized, specific widgets can be defined, you can for instance take a look at the DV_STRING_LIST class.
		</note>
		<heading>
			<size>3</size>5.3. DV_SENSITIVE_INTEGER class
		</heading>
		<paragraph>This class lets a model class input or output an <class_name>INTEGER</class_name> value graphically. As for controllers, the model class lets the user know when an integer value can be input by setting the widget sensitivity.</paragraph>
		<paragraph>Different widgets can be used to implement this:</paragraph>
		<list ordered="false">
			<item>A text field. Notice that the value entered should be checked to ensure it  is an <class_name>INTEGER </class_name>value.</item>
			<item>A combo-box. Each combo-box option is associated to an integer.</item>
			<item>A scroll button.</item>
		</list>
		<heading>
			<size>3</size>5.4. DV_SENSITIVE_CHECK class
		</heading>
		<paragraph>This class lets a model class input or output a <class_name>BOOLEAN </class_name>value graphically. As for controllers, the model class lets the user know when a Boolean value can be input by setting the widget sensitivity.</paragraph>
		<paragraph>The standard widget to implement this is a check box.</paragraph>
		<heading>
			<size>3</size>5.5. DV_TABLEROW_LIST class
		</heading>
		<paragraph>The <link><url>../../reference/dv_tablerow_list_chart.xml</url><label>DV_TABLEROW_LIST</label></link> class provides an interface to display a set of table rows so that the user can select a particular row.</paragraph>
		<list ordered="false">
			<item>The model can be informed of a row selection or deselection: the class  accepts actions (implemented by
				<italic>agents</italic>) that are triggered when a row  is selected or deselected.
			</item>
			<item>The model can retrieve the currently selected row: the class yields the  current index position in the list.</item>
		</list>
		<paragraph><link><url>../../reference/dv_tablerow_multilist_chart.xml</url><label>DV_TABLEROW_MULTILIST</label></link> implements DV_TABLEROW_LIST with an EiffelVision2 multi-column list.</paragraph>
		<note>
			<bold>Note</bold>: This class is used for the
			<link>
				<anchor_name>dv_control_navigator</anchor_name>
				<label>standard implementation</label>
			</link> of <link><url>../../reference/dv_tablerows_navigator_chart.xml</url><label>DV_TABLEROW_NAVIGATOR</label></link> to
			<link>
				<anchor_name>dv_tablerow_navigator</anchor_name>
				<label>navigate among table rows</label>
			</link> selected from the database.
		</note>
	</paragraph></document>