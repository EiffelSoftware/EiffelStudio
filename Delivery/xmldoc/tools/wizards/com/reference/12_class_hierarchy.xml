<document title="Class Hierarchy" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph> The generated Eiffel code reflects the architecture of the component described in the definition file. Each interface corresponds to a deferred Eiffel class that includes one deferred feature per interface function. The deferred features are implemented in the heir inheriting from all interfaces. This central class will be referred to as Eiffel coclass in the rest of this document.</paragraph>
		<heading>
			<size>2</size>EiffelCOM System Basic Architecture
		</heading>
		<image>
			<url>../images/com_image24.gif</url>
		</image>
		<paragraph>In a client application the Eiffel coclass inherits from the class 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_queriable.xml</url>
				<label>
					<code>
						<class_name>ECOM_QUERIABLE</class_name>
					</code>
				</label>
			</link>, which is part of the EiffelCOM library. This class includes the feature 
			<code>
				<feature_name>make_from_other</feature_name>
			</code> to initialize the component from another instance of 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_interface.xml</url>
				<label>
					<code>
						<class_name>ECOM_INTERFACE</class_name>
					</code>
				</label>
			</link>.
		</paragraph>
		<heading>
			<size>2</size>EiffelCOM System Basic Architecture
		</heading>
		<image>
			<url>../images/com_image25.gif</url>
		</image>
		<paragraph>In a server application the Eiffel coclass inherits from the class 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_stub.xml</url>
				<label>
					<code>
						<class_name>ECOM_STUB</class_name>
					</code>
				</label>
			</link>, which is part of the EiffelCOM library. This class includes the feature 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_stub.xml#f_create_item</url>
				<label><code><feature_name>create_item</feature_name></code></label>
			</link> to initialize the component for COM.
		</paragraph>
		<paragraph>The 
			<italic>Interface_proxy</italic> folder includes Eiffel classes wrapping interfaces that are sent to or received by the component. Such interfaces will be referred to as client implemented interfaces in the rest of the document. These classes inherit from both the deferred interface class and 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_queriable.xml</url>
				<label>
					<code>
						<class_name>ECOM_QUERIABLE</class_name>
					</code>
				</label>
			</link>.
		</paragraph>
		<heading>
			<size>2</size>Client Implemented Interfaces
		</heading>
		<image>
			<url>../images/com_image26.gif</url>
		</image>
		<paragraph>The 
			<italic>Interface_stub</italic> folder includes Eiffel classes implementing interfaces that are sent by the component. Such interfaces will be referred to as server implemented interfaces in the rest of the document. These classes inherit from both the deferred interface class and 
			<link>
				<url>../../../../libraries/com/reference/interfaces/ecom_stub.xml</url>
				<label>
					<code>
						<class_name>ECOM_STUB</class_name>
					</code>
				</label>
			</link>.
		</paragraph>
		<heading>
			<size>2</size>Server Implemented Interfaces
		</heading>
		<image>
			<url>../images/com_image27.gif</url>
		</image>
		<line_break/>
		<line_break/> 
		<paragraph> For both Eiffel coclass and Implemented interfaces, the 
			<code>
				<class_name>INTERFACE</class_name>
			</code> class contains no implementation; it only defines the signatures of the functions that are part of the interface. The actual implementation lies in the heir of that class.
		</paragraph>
		<paragraph> How you should use the generated classes in your system depends on whether you want to access an existing component (client) or build a new component in Eiffel (server).</paragraph>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>01_introduction_d.xml</url>
				<label>Introduction Dialog and Main Window</label>
			</link>
			<line_break/>
			<link>
				<url>02_generated_code_type_d.xml</url>
				<label>Generated Code Type Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>03_definition_file_d.xml</url>
				<label>Definition File Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>04_eiffel_project_file_d.xml</url>
				<label>Eiffel Project File Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>05_destination_folder_d.xml</url>
				<label>Destination Folder Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>06_idl_marshalling_d.xml</url>
				<label>IDL Marshaling Definition Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>07_type_lybrary_m_d.xml</url>
				<label>Type Library Marshaling Definition Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>08_final_d.xml</url>
				<label>Final Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>09_com_definition_file_processing.xml</url>
				<label>COM Definition File Processing</label>
			</link>
			<line_break/>
			<link>
				<url>10_eiffel_project_processing.xml</url>
				<label>Eiffel Project Processing</label>
			</link>
			<line_break/>
			<link>
				<url>11_generated_files.xml</url>
				<label>Generated Files</label>
			</link>
			<line_break/>
			<link>
				<url>12_class_hierarchy.xml</url>
				<label>Class Hierarchy</label>
			</link>
			<line_break/>
			<link>
				<url>13_accessing_component.xml</url>
				<label>Accessing a Component</label>
			</link>
			<line_break/>
			<link>
				<url>14_building_component.xml</url>
				<label>Building a Component</label>
			</link>
		</seealso>
	</paragraph></document>
