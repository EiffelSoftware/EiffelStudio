indexing
	description: "Objects that represent an EV_TITLED_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	COLUMN_TAB

inherit
	COLUMN_TAB_IMP
	
	GRID_ACCESSOR
		undefine
			copy, default_create, is_equal
		end


feature {NONE} -- Initialization

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			current_column_index := 1
			column_finder.set_prompt ("Column Finder : ")
			column_finder.motion_actions.extend (agent column_motion)
		end

feature {NONE} -- Implementation

	current_column_index: INTEGER
			-- Current index of column for property change.

	column_index_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `column_index'.
		do
			current_column_index := a_value
			column_motion (grid.column (current_column_index).item (1))
		end
	
	column_width_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `column_width'.
		do
			grid.column (current_column_index).set_width (a_value)
		end
		
	column_motion (an_item: EV_GRID_ITEM) is
			--
		do
			if an_item /= Void then
				column_properties_frame.enable_sensitive
				column_index.change_actions.block
				column_index.set_value (an_item.column.index)
				current_column_index := an_item.column.index
				column_index.change_actions.resume
				column_width.change_actions.block
				column_width.set_value (an_item.column.width)
				column_width.change_actions.resume
				column_title_entry.change_actions.block
				column_title_entry.set_text (an_item.column.title)
				column_title_entry.change_actions.resume
				column_selected_button.select_actions.block
				if an_item.column.is_selected then
					column_selected_button.enable_select
				else
					column_selected_button.disable_select
				end
				column_selected_button.select_actions.resume
				column_visible_button.select_actions.block
				if grid.column_displayed (an_item.column.index) then
					column_visible_button.enable_select
				else
					column_visible_button.disable_select
				end
				column_visible_button.select_actions.resume
			else
				column_properties_frame.disable_sensitive
			end
		end
		
	column_selected_button_selected is
			-- Called by `select_actions' of `column_selected_button'.
		do
			if column_selected_button.is_selected then
				grid.column (current_column_index).enable_select
			else
				grid.column (current_column_index).disable_select
			end
		end
		
	column_title_entry_changed is
			-- Called by `change_actions' of `column_title_entry'.
		do
			grid.column (current_column_index).set_title (column_title_entry.text)
		end
		
	swap_column_button_selected is
			-- Called by `select_actions' of `swap_column_button'.
		local
			column_counter: INTEGER
			first_selected, second_selected: INTEGER
		do
			from
				column_counter := 1
			until
				column_counter > grid.column_count or second_selected > 0
			loop
				if grid.column (column_counter).is_selected then
					if first_selected = 0 then
						first_selected := column_counter
					else
						second_selected := column_counter
					end
				end
				column_counter := column_counter + 1
			end
			grid.move_column (first_selected, second_selected)
		end
		
	column_visible_button_selected is
			-- Called by `select_actions' of `column_visible_button'.
		do
			if column_visible_button.is_selected then
				grid.show_column (current_column_index)
			else
				grid.hide_column (current_column_index)
			end
		end

	clear_column_button_selected is
			-- Called by `select_actions' of `clear_column_button'.
		do
			grid.column (current_column_index).clear
		end

end -- class COLUMN_TAB

