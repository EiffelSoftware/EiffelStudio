<document title="3 Object-Oriented Design">
	<meta_data>
		<help>
			<toc>
				<envision_location>EiffelEnvision\A Guide to Eiffel for .NET\Invitation to Eiffel</envision_location>
				<envision_pseudo_name>30</envision_pseudo_name>
				<envision_title>Object-Oriented Design</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>To achieve reusability, extendibility and reliability, the principles of object-oriented design provide the best known technical answer.  </paragraph>
		<paragraph>An in-depth discussion of these principles fall beyond the scope of this introduction but here is a short definition:</paragraph>
		<info>Object-oriented design is the construction of software systems as structured collections of abstract data type implementations, or "classes".  </info>
		<paragraph>The following points are worth noting in this definition:<line_break/>
		<list ordered="false">
			<item>The emphasis is on structuring a system around the types of objects it manipulates (not the functions it performs on them) and on reusing whole data structures together with the associated operations (not isolated routines).  </item>
			<item>Objects are described as instances of abstract data types -- that is to say, data structures known from an official interface rather than through their representation.  </item>
			<item>The basic modular unit, called the class, describes one implementation of an abstract data type (or, in the case of "deferred" classes, as studied below, a set of possible implementations of the same abstract data type).  </item>
			<item>The word 
				<italic>collection</italic> reflects how classes should be designed: as units which are interesting and useful on their own, independently of the systems to which they belong, and may be reused by many different systems.  Software construction is viewed as the assembly of existing classes, not as a top-down process starting from scratch.  
			</item>
			<item>Finally, the word 
				<italic>structured</italic> reflects the existence of two important relations between classes: the client and inheritance relations.  
			</item>
		</list></paragraph>
		<paragraph>Eiffel makes these techniques available to developers in a simple and practical way.</paragraph>
		<paragraph>As a language, Eiffel includes more than presented in this introduction, but not 
			much more; it is a small language, not much bigger (by such a measure as the number of keywords) than Pascal.  It was meant to be a member of the class of languages which programmers can master entirely -- as opposed to languages of which most programmers know only a subset.  Yet it is appropriate for the development of industrial software systems, as has by now been shown by many full-scale projects, some in the thousands of classes and hundreds of thousands of lines, in companies around the world.  
		</paragraph>
	</paragraph></document>
