<document title="Release notes of EiffelStudio 5.3" output="studio">
	<meta_data>
		<help/>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>Graphical environment
		</heading>
		<heading>
			<size>3</size>Changes
		</heading>
		<list ordered="false">
			<item>In project settings, we now accept a root class without creation procedure.</item>
			<item>In .NET code generation, we do not force the C compilation at each compilation. It is only done when necessary (for example when a C external has been added).</item>
			<item>Incremental .NET code generation (See <link><url>../30_compiler/60_version_history/03_53_release/index.xml</url><label>compiler release notes</label></link> for more info).</item>
			<item>Recoverable storable (See <link><url>../30_compiler/60_version_history/03_53_release/index.xml</url><label>compiler release notes</label></link> for more info).</item>
		</list>
		<heading>
			<size>3</size>Bug fixes
		</heading>
		<list ordered="false">
			<item>Fixed issue with setting of arguments. After restarting EiffelStudio the command line argument contains an extra `]' character.</item>
			<item>Fixed issue with working directories where only the first one ever set was used even if new ones have been set afterwards.</item>
			<item>Fixed issue where generating documentation for all/library cluster would stop during generation without completing.</item>
			<item>Fixed crash in diagram tool when moving label on client/supplier link between two classes.</item>
			<item>Fixed resource leak on Windows 98 and Windows Me.</item>
			<item>Fixed issue in projects where clusters are specified with relative path would not compile after adding a local assembly.</item>
			<item>Fixed problem with cluster tool management where moving classes around or looking up a class will generate an error box instead of performing the requested operation.</item>
			<item>Fixed incorrect Ace file specification for EiffelVision2 examples and wizards on Unix platforms where application could be linked dynamically with `libpng' but should not.</item>
			<item>Fixed disappearance of EiffelStudio when debugging a routine `infix' or `prefix' in which an exception was raised. This issue was only occurring with melted code (usually noticeable when using a precompiled library).</item>
			<item>Changing the project specific command line arguments will not touch the project settings configuration file (ace file).</item>
		</list>
		<heading>
			<size>2</size>Compiler
		</heading>
		<list ordered="false">
			<item>Click 
				<link>
					<url>../30_compiler/60_version_history/03_53_release/index.xml</url>
					<label>here</label>
				</link> for the compiler release notes.
			</item>
		</list>
		<heading>
			<size>2</size>Libraries
		</heading>
		<heading>
			<size>3</size>CECIL
		</heading>
		<list ordered="false">
			<item>Enforced definition of EIF_OBJECT so that it is different from EIF_REFERENCE to better catch errors when passing a protected reference to a feature accepting an unprotected reference and vice versa. Because of this change some C code might not compile anymore which is good as it points out that code was doing something wrong that could corrupt the Eiffel memory.</item>
		</list>
		<heading>
			<size>3</size>EiffelBase
		</heading>
		<list ordered="false">
			<item>Added in 
				<code>
					<class_name>INTERNAL</class_name>
				</code> the following new features: 
				<code>
					<feature_name>field_static_type_of_type</feature_name>
				</code>, 
				<code>
					<feature_name>class_name_of_type</feature_name>
				</code>, 
				<code>
					<feature_name>type_name</feature_name>
				</code> and 
				<code>
					<feature_name>type_name_of_type</feature_name>
				</code>.
			</item>
			<item>Added 
				<code>
					<feature_name>truncated_to_integer_64</feature_name>
				</code> in 
				<code>
					<class_name>REAL</class_name>
				</code> and 
				<code>
					<class_name>DOUBLE</class_name>
				</code>.
			</item>
			<item>Added 
				<code>
					<feature_name>to_integer_64</feature_name>
				</code> in 
				<code>
					<class_name>STRING</class_name>
				</code>.
			</item>
			<item>Added new classes 
				<code>
					<class_name>MEMORY_STRUCTURE</class_name>
				</code>, 
				<code>
					<class_name>MANAGED_POINTER</class_name>
				</code> and 
				<code>
					<class_name>C_STRING</class_name>
				</code> to better manage access to C and C++ memory structure.
			</item>
			<item>Fixed incorrect implementation of 
				<code>
					<feature_name>area</feature_name>
				</code> and 
				<code>
					<feature_name>substring</feature_name>
				</code> for 
				<code>
					<class_name>STRING</class_name>
				</code> in dotnet mode.
			</item>
			<item>Fixed bug in 
				<code>
					<feature_name>copy</feature_name>
				</code> from 
				<code>
					<class_name>STRING</class_name>
				</code> where following code was violating <code><feature_name>valid_count</feature_name></code> invariant from 
				<code>
					<class_name>STRING</class_name>
				</code>: 
				<code_block>
<keyword>local</keyword>
	s, t: <class_name>STRING</class_name>
<keyword>do</keyword>
	<keyword>create</keyword> s.<feature_name>make</feature_name> (9)
	<keyword>create</keyword> t.<feature_name>make</feature_name> (10) 
	t.<feature_name>append</feature_name> ("1234567890") 
	s.<feature_name>copy</feature_name> (t)
<keyword>end</keyword></code_block>
			</item>			
			<item>Added support for storable in .NET. However .NET and classic implementation are completely different and 
				<code>
					<feature_name>independent_store</feature_name>
				</code> will not be able to retrieve a storable file if not made using the same code generation.
			</item>
			<item>Fixed a bug in 
				<code>
					<feature_name>is_equal</feature_name>
				</code> from 
				<code>
					<class_name>LIST</class_name>
				</code> where comparing two lists of different counts could break the comparison:
				<line_break/>
				<code_block>
<feature_name>make</feature_name> <keyword>is</keyword>
	<keyword>local</keyword>
		a, b: <class_name>LIST</class_name> [<class_name>INTEGER</class_name>]
	<keyword>do</keyword>
		<keyword>create</keyword> {<class_name>ARRAYED_LIST</class_name> [<class_name>INTEGER</class_name>]} a.<feature_name>make</feature_name> (2)
		a.<feature_name>extend</feature_name> (10)
		
		<keyword>create</keyword> {<class_name>ARRAYED_LIST</class_name> [<class_name>INTEGER</class_name>]} b.<feature_name>make</feature_name> (2)
		b.<feature_name>extend</feature_name> (10)
		b.<feature_name>extend</feature_name> (11)
		
		<feature_name>print</feature_name> (<feature_name>equal</feature_name> (b, a))
	<keyword>end</keyword></code_block>
			</item>
			<item>Fixed .NET implementation of 
				<code>
					<feature_name>open_write</feature_name>
				</code> and 
				<code>
					<feature_name>create_read_write</feature_name>
				</code> in 
				<code>
					<class_name>FILE</class_name>
				</code>. They were not resetting the file size to zero if file already existed.
			</item>
			<item>Added <code><feature_name>correct_mismatch</feature_name></code> on <code><class_name>ANY</class_name></code> used for `recoverable storable'.</item>
			<item>Added <code><feature_name>correct_mismatch</feature_name></code> on <code><class_name>HASH_TABLE</class_name></code> to enable retrieval of the 5.1 and older version of <code><class_name>HASH_TABLE</class_name></code>.</item>
			<item>Fixed bug in implementation of <code><feature_name>copy</feature_name></code> and <code><feature_name>is_equal</feature_name></code> for <code><class_name>TREE</class_name></code> and descendant classes. Now descendants of <code><class_name>TREE</class_name></code> that would like to compare additional attributes of their class needs to redefine <code><feature_name>node_is_equal</feature_name></code> whose default implementation will always result in a true value.</item>
			<item>Changed default semantic of <code><feature_name>make</feature_name></code> and <code><feature_name>put_child</feature_name></code> from <code><class_name>FIXED_TREE</class_name></code>, to preserve existing semantic, you should use <code><feature_name>make_filled</feature_name></code> and <code><feature_name>replace_child</feature_name></code> instead. </item>
		</list>
		<heading>
			<size>3</size>Eiffel2Java
		</heading>
		<list ordered="false">
			<item>Updated library so that it works both in classic and dotnet mode.</item>
		</list>
		<heading>
			<size>3</size>EiffelCOM
		</heading>
		<list ordered="false">
			<item>Fixed crash in <code><feature_name>ccom_set_name</feature_name></code> from <code><class_name>FONT_IMPL_PROXY</class_name></code>.</item>
		</list>
		<heading>
			<size>3</size>EiffelNet
		</heading>
		<list ordered="false">
			<item>Fixed assertion violation of call to 
				<code>
					<feature_name>to_integer</feature_name>
				</code> in feature 
				<code>
					<feature_name>get_content_length</feature_name>
				</code> from 
				<code>
					<class_name>HTTP_PROTOCOL</class_name>
				</code> if assertions are enabled on EiffelBase.
			</item>
		</list>
		<heading>
			<size>3</size>EiffelStore
		</heading>
		<list ordered="false">
			<item>Updated library so that it works both in classic and dotnet mode.</item>
			<item>Fixed issue with oracle handle which did not work with the included Borland C compiler.</item>
			<item>Removed 
				<code>
					<feature_name>nb_classes</feature_name>
				</code> from 
				<code>
					<class_name>EXT_INTERNAL</class_name>
				</code>.
			</item>
			<item>Removed need for additional object file (`support.lib' on Windows and `libsupport.a' on Unix platforms), so make sure to remove it from your project configurations.</item>
		</list>
		<heading>
			<size>3</size>EiffelVision2
		</heading>
		<list ordered="false">
			<item>
				<link>
					<url>../../../../libraries/vision2/content/0-_revisions/index.xml</url>
					<label>Click here to see list of update and modification to Eiffel Vision2</label>
				</link>.
			</item>
		</list>
		<heading>
			<size>3</size>WEL
		</heading>
		<list ordered="false">
			<item>Removed inheritance to <code><class_name>WEL_STRUCTURE</class_name></code> in <code><class_name>WEL_STRING</class_name></code>, it now inherits from new <code><class_name>C_STRING</class_name></code> class. In the process removed the following features which were inherited from <code><class_name>WEL_STRUCTURE</class_name></code> and did not make sense to <code><class_name>WEL_STRING</class_name></code> <code><feature_name>memory_copy</feature_name></code>, <code><feature_name>structure_size</feature_name></code>, <code><feature_name>dispose</feature_name></code>, <code><feature_name>set_item</feature_name></code>, <code><feature_name>set_shared</feature_name></code>, <code><feature_name>set_unshared</feature_name></code>, <code><feature_name>shared</feature_name></code>, <code><feature_name>to_integer</feature_name></code>. No replacements have been provided for those features. Made <code><feature_name>initialize</feature_name></code> and <code><feature_name>initialize_with_character</feature_name></code> obsolete, instead we now provide two features inherited from <code><class_name>C_STRING</class_name></code> <code><feature_name>fill_blank</feature_name></code> and <code><feature_name>fill_value</feature_name></code>.</item>
		</list>
		<paragraph> </paragraph>
		<paragraph>
			<link>
				<url>Eiffel52.xml</url>
				<label>Click here to check out what was new in Eiffel 5.2</label>
			</link>
		</paragraph>
		<paragraph>
			<link>
				<url>Eiffel51.xml</url>
				<label>Click here to check out what was new in Eiffel 5.1</label>
			</link>
		</paragraph>
		<paragraph>
			<link>
				<url>Eiffel50.xml</url>
				<label>Click here to check out what was new in Eiffel 5.0</label>
			</link>
		</paragraph>
	</paragraph></document>
