indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	legal: "See notice at end of class."
	status: "See notice at end of class."
	date: "$Date$"
	revision: "$Revision$"

class
	EB_METRIC_BACKUP_METRICS_DIALOG

inherit
	EB_METRIC_BACKUP_METRICS_DIALOG_IMP

	EB_METRIC_INTERFACE_PROVIDER
		undefine
			is_equal,
			copy,
			default_create
		end

	EB_METRIC_TOOL_INTERFACE
		undefine
			is_equal,
			copy,
			default_create
		end

create
	make

feature {NONE} -- Initialization

	make (a_metric_tool: ES_METRICS_TOOL_PANEL) is
			-- Initialize `metric_tool' with `a_metric_tool'.
		require
			a_metric_tool_attached: a_metric_tool /= Void
		do
			set_metric_tool (a_metric_tool)
			default_create
			set_width (400)
			create file_open_dialog
			file_open_dialog.save_actions.extend (agent on_file_selected)
		end

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_title (metric_names.t_backup_metrics)
			select_file_lbl.set_text (metric_names.t_select_file_for_backup)
			close_btn.set_text (metric_names.t_close)
			close_btn.select_actions.extend (agent on_close)
			backup_btn.set_text (metric_names.t_backup)
			backup_btn.select_actions.extend (agent on_backup)
			backup_btn.disable_sensitive
			browse_btn.select_actions.extend (agent on_browse_file)
			file_name_area.change_actions.extend (agent on_text_change)
			file_name_area.key_press_actions.extend (agent on_key_pressed_in_file_name_area)
			show_actions.extend (agent file_name_area.set_focus)
			set_default_cancel_button (close_btn)
			set_icon_pixmap (pixmaps.icon_pixmaps.tool_metric_icon)
		end

feature{NONE} -- Actions

	on_browse_file is
			-- Action to be performed to open a dialog to select file
		do
			if last_selected /= Void then
				file_open_dialog.set_start_directory (last_selected)
			end
			file_open_dialog.save_actions.extend (agent on_file_selected)
			file_open_dialog.show_modal_to_window (Current)
		end

	on_file_selected is
			-- Action to be performed when a file name is selected in `file_open_dialog'
		do
			last_selected := file_open_dialog.file_name.twin
			file_name_area.set_text (file_open_dialog.file_name)
		end

	on_text_change is
			-- Action to be performed when text in `file_name_area' changes
		do
			if file_name_area.text.is_empty then
				backup_btn.disable_sensitive
			else
				backup_btn.enable_sensitive
			end
		end

	on_backup is
			-- Action to be performed to backup user-defined metrics to selected file
		do
			metric_manager.clear_last_error
			metric_manager.store_metric_definitions (file_name_area.text)
			if metric_manager.has_error then
				(create {ES_SHARED_PROMPT_PROVIDER}).prompts.show_error_prompt (metric_manager.last_error.message_with_location, Current, Void)
			else
				(create {ES_SHARED_PROMPT_PROVIDER}).prompts.show_info_prompt (metric_names.t_metric_backuped, Current, Void)
			end
		end

	on_close is
			-- Action to be performed to close current dialog
		do
			hide
		end

	on_key_pressed_in_file_name_area (a_key: EV_KEY) is
			-- Action to be performed when `a_key' is pressed in `file_name_area'
		require
			a_key_attached: a_key /= Void
		do
			if a_key.code = {EV_KEY_CONSTANTS}.key_enter and then not file_name_area.text.is_empty then
				on_backup
			end
		end

feature {NONE} -- Implementation

	last_selected: STRING
			-- Last selected position to backup

	file_open_dialog: EV_FILE_SAVE_DIALOG
			-- Dialog to browse a file

invariant
	file_open_dialog_attached: file_open_dialog /= Void

indexing
        copyright:	"Copyright (c) 1984-2006, Eiffel Software"
        license:	"GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
        licensing_options:	"http://www.eiffel.com/licensing"
        copying: "[
                        This file is part of Eiffel Software's Eiffel Development Environment.
                        
                        Eiffel Software's Eiffel Development Environment is free
                        software; you can redistribute it and/or modify it under
                        the terms of the GNU General Public License as published
                        by the Free Software Foundation, version 2 of the License
                        (available at the URL listed under "license" above).
                        
                        Eiffel Software's Eiffel Development Environment is
                        distributed in the hope that it will be useful,	but
                        WITHOUT ANY WARRANTY; without even the implied warranty
                        of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
                        See the	GNU General Public License for more details.
                        
                        You should have received a copy of the GNU General Public
                        License along with Eiffel Software's Eiffel Development
                        Environment; if not, write to the Free Software Foundation,
                        Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
                ]"
        source: "[
                         Eiffel Software
                         356 Storke Road, Goleta, CA 93117 USA
                         Telephone 805-685-1006, Fax 805-685-6869
                         Website http://www.eiffel.com
                         Customer support http://support.eiffel.com
                ]"

end
