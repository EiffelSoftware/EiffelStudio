class 
	CONVERTER

creation
	make

feature -- Initialization

	make (a_class_name: STRING; output_file, input_file: STRING) is
			-- Create a class `a_class_name' in the file `output_file'.
		require 
			a_class_name_not_void: a_class_name /= Void
			a_class_name_not_empty: not a_class_name.empty
			output_file_not_void: output_file /= Void
			output_file_not_empty: not output_file.empty
		do
			class_name := a_class_name
			class_name.to_upper
			!! class_file.make_create_read_write (output_file)
			class_file.putstring ("indexing%N")
			class_file.putstring ("%Tdescription: %"Generated by h2e from the file %%%N")
			class_file.putstring ("%T%T%%")
			class_file.putstring (input_file)
			class_file.putstring (".%"%N%N")
			class_file.putstring ("class%N%T")
			class_file.putstring (class_name)
			class_file.putstring ("%N%Nfeature -- Access%N%N")
		end

feature -- Access

	class_file: PLAIN_TEXT_FILE

	class_name: STRING

feature -- Basic operations

	convert (input_file: STRING) is
			-- Scans input_file for "#define id integer" and puts them in output_file
		require
			input_file_not_Void: input_file /= Void
			input_file_not_empty: not input_file.empty
			input_file_exists: file_exists (input_file)
		local
			id: STRING
			eiffel_id: STRING
			a_file: PLAIN_TEXT_FILE
		do
			!! a_file.make_open_read (input_file)
			from
			until
				a_file.after
			loop
				a_file.read_character
				if a_file.last_character.is_equal ('#') then
					a_file.read_word
					if a_file.last_string.is_equal ("define") then
						a_file.read_word
						id := clone (a_file.last_string)
						a_file.read_word
						if a_file.last_string.is_integer then
							class_file.putchar ('%T')
							id.to_lower
							eiffel_id := clone (id)
							eiffel_id.put (eiffel_id.item (1).upper, 1)
							class_file.putstring (eiffel_id)
							class_file.putstring (": INTEGER is ")
							class_file.putstring (a_file.last_string)
							class_file.new_line
						else
							from
								a_file.back
							until
								a_file.item = '%N' or
								a_file.item = '%T' or
								a_file.item = ' '
							loop
								a_file.back
							end
						end
					end
				else
					if a_file.last_character /= '%T'and
						a_file.last_character /= '%N'and
						a_file.last_character /= ' ' and not
						a_file.end_of_file then
							a_file.next_line
					end
				end
			end
			check
				end_of_input_reached: a_file.end_of_file
			end
			a_file.close
		end 

	close_file is
			-- Puts class-statement end in ouput_file and closes it.
		require
			class_file_is_open: class_file.is_open_write
		do
			class_file.putstring ("%Nend -- class ")
			class_file.putstring (class_name)
			class_file.close
		ensure
			class_file_is_closed: class_file.is_closed
		end 

feature -- Status report

	file_exists (filename: STRING): BOOLEAN is
			-- Check if a file with filename exists
		require
			filename_not_void: filename /= Void
		local
			a_file: PLAIN_TEXT_FILE
		do
			!! a_file.make (filename)
			Result := a_file.exists
		end

end -- class CONVERTER

--|---------------------------------------------------------------- 
--| Copyright (C) 1995, Interactive Software Engineering Inc.
--| All rights reserved. Duplication and distribution prohibited.
--|
--| 270 Storke Road, Suite 7, Goleta, CA 93117 USA
--| Telephone 805-685-1006
--| Fax 805-685-6869
--| Electronic mail <info@eiffel.com>
--| Customer support e-mail <support@eiffel.com>
--|----------------------------------------------------------------
