<document title="Widget selector">
	<meta_data>
		<help>
			<toc>
				<envision_title>Widget Selector</envision_title>
				<envision_location>EiffelEnvision\Tools\EiffelBuild\Reference</envision_location>
				<envision_pseudo_name>64</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The Widget Selector allows you to manage windows, dialogs and "top level" objects within the EiffelBuild project, with all windows accessible through this tool. Using the widget selector, you may add new windows to your project; delete windows; assign a root window (launched from the generated application); and group windows into directories. All objects contained in the Widget Selector are generated as individual classes at generation time. The Widget Selector has the following appearance:</paragraph>
		<paragraph>
			<image> 
				<url>/images/eiffelbuild/screenshots/window_selector.png</url>
			</image>
		</paragraph>
		<heading>
			<size>2</size>Adding Objects
		</heading>
		<paragraph>To add an Object to your project, 
			<link>
				<url>/tools/eiffelbuild/reference/02_notation.xml</url><anchor_name>pick_and_drop</anchor_name>
				<label>pick</label>
			</link> the object type from the 
			<link>
				<url>/tools/eiffelbuild/reference/30_type_selector/index.xml</url>
				<label>type selector</label>
			</link>, and 
			<link>
				<url>/tools/eiffelbuild/reference/02_notation.xml</url><anchor_name>pick_and_drop</anchor_name>
				<label>drop</label>
			</link> into the Widget Selector. There are two possible drop targets within the widget selector:
			<list ordered="false">
				<item>
					<bold>The Widget Selector itself</bold> - The newly created object is added to the root directory of the project.
				</item>
				<item>
					<bold>A Directory node</bold> - The newly created object is added to the directory that was the target of the drop.
				</item>
			</list>Both of these outcomes create a new object in your project that is to be generated as an individual class during code generation.
			<note>
				<bold>Note</bold>: The selected object in the Widget Selector is automatically targeted as the root window of the 
				<link>
					<url>/tools/eiffelbuild/reference/20_layout_constructor/index.xml</url>
					<label>layout constructor</label>
				</link>, permitting building. You may not build directly into the representation of an object within the Widget Selector, as this must be performed within the <link>
					<url>/tools/eiffelbuild/reference/20_layout_constructor/index.xml</url>
					<label>layout constructor</label>
				</link> or <link><url>../60_builder_window/index.xml</url><label>builder window</label></link>.
			</note>
		</paragraph>
		<heading>
			<size>2</size>Root Window
		</heading>
		<paragraph>The root window of a project is launched by the application class of the generated EiffelBuild project when executed. By assigning a window as a root, you ensure that it will be displayed on screen as the "root" window of the generated system when the system is launched.</paragraph>
		<paragraph>The root window of the project is highlighted with a star, indicating that it is the root. Looking at the screenshot at the top of this page, the window named "main_window" is currently flagged as the root window of the project. To set a window as the root window of the project, select the window in the Widget Selector, and press the 
			<image> 
				<url>/images/eiffelbuild/icons/icon_titled_window_main_small_color.png</url>
			</image> button displayed at the top of the Widget Selector.
			<heading>
				<size>2</size>Directories
			</heading>
			<paragraph>The ability to add directories to your project permit organization of objects into sub groups as necessitated by your design. To add a directory to the project, select the 
				<image> 
					<url>/images/eiffelbuild/icons/icon_new_cluster_small_color.png</url>
				</image> button displayed at the top of the Widget Selector, which displays the following dialog, prompting for the name of the directory to add:
			</paragraph>
			<paragraph>
				<image> 
					<url>/images/eiffelbuild/screenshots/new_directory_dialog.png</url>
				</image>
			</paragraph>
			<paragraph>Enter a unique name that is not already in use, and select "OK" to add the directory to your project. The newly added directory is then visible, as a node in the Widget Selector.</paragraph>
			<note>
				<bold>Note</bold>: Creating a new directory in the Widget Selector causes the actual directory on the disk to be created immediately.
			</note>
			<paragraph>You may insert objects into a directory, or move an object between directories by 
				<link>
					<url>/tools/eiffelbuild/reference/02_notation.xml</url><anchor_name>pick_and_drop</anchor_name>
					<label>picking</label>
				</link> the object from its representation in the Widget Selector, and 
				<link>
					<url>/tools/eiffelbuild/reference/02_notation.xml</url><anchor_name>pick_and_drop</anchor_name>
					<label>dropping</label>
				</link> on the desired directory. Each object contained in the Widget Selector is generated as a seperate class and the parent directory is used as the generated location on disk.
				<note>
					<bold>Note</bold>: If you move an object between directories within an EiffelBuild project that has already generated the Eiffel code for that object, the code files are moved immediately on the disk.
				</note>
				<paragraph>Directories may be nested as deeply as required, and the following buttons are available to help with directory nesting:</paragraph>
				<list>
				<item><image> 
					<url>/images/eiffelbuild/icons/directory_search_small.png</url>
				</image>Selecting this button recursively adds all directories from the current project location to the project.</item>
				<item><image> 
					<url>/images/eiffelbuild/icons/icon_show_hide_directory_color.png</url>
				</image>Selecting this button causes all directories included within the project that do not contain one or more objects to be hidden/shown within the Widget Selector.</item>
				</list>
				Note that any directories that do not contain objects or have object nested within their structure recursively are displayed grayed out to indicate that there are no objects within.
				<heading>
					<size>2</size>Expanding
				</heading>
				<paragraph>The
					<image> 
						<url>/images/eiffelbuild/icons/icon_expand_all_small_color.png</url>
					</image> button displayed at the top of the Widget Selector expands all nodes contained.
				</paragraph>
				<heading>
					<size>2</size>Client Representations
				</heading>
				<paragraph>
				All objects within the Widget Selector that are used as clients within other object structures have client information displayed as subnodes of their representation, as illustrated in the following screenshot:
				</paragraph>
				<paragraph>
				<image> 
				<url>/images/eiffelbuild/screenshots/widget_selector_clients.png</url>
			</image>
				</paragraph>
				<paragraph>
				The OK_CANCEL_BUTTONS object is used is used in two different places within the project: once within INPUT_DIALOG and once within MAIN_WINDOW. If you select the tree node representing the instance of OK_CANCEL_BUTTONS within MAIN_WINDOW, the MAIN_WINDOW is targetted to the <link>
				<url>/tools/eiffelbuild/reference/30_type_selector/index.xml</url>
				<label>type selector</label></link> with the instance of the OK_CANCEL_BUTTONS object selected.
				</paragraph>
				<paragraph>
				To use an instance of a widget contained within the Widget Selector as a client, simply pick the representation of the object and drop into  the desired parent object within the <link>
				<url>/tools/eiffelbuild/reference/30_type_selector/index.xml</url>
				<label>type selector</label></link>
				</paragraph>
				<seealso>
					<bold>See also</bold>:
					<line_break/>
					<link>
						<url>/tools/eiffelbuild/reference/20_layout_constructor/index.xml</url>
						<label>Layout constructor</label>
					</link>
				</seealso>
			</paragraph>
		</paragraph>
	</paragraph></document>
