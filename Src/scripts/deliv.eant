<?xml version="1.0"?>

<project name="delivery" default="help">
	<description>
		description: "delivery building"
		author: "Jocelyn Fiat and others"
		note: "This script could be split into severals scripts, one for each product"
	</description>
	<inherit>
		<parent location="${EIFFEL_SRC}/scripts/misc/compile_executables.eant">
			<redefine target="help"/>
		</parent>
	</inherit>
	
	<target name="help">
		<precursor />
		<echo message="       ----------"/>
		<echo message=" geant ${opt} build_es"/>
	</target>

	<target name="init_deliv" depend="init_system" >
		<set name="INSTALL_DIR" value="${cwd}${path_separator}EiffelXX" unless="${INSTALL_DIR}" />
		<set name="OUTPUT_DIR" value="${cwd}${path_separator}bin" unless="${OUTPUT_DIR}"/>
		<set name="build_es_logfile" value="${cwd}${path_separator}build_es.log" unless="$build_es_logfile" />
	</target>

	<target name="build_es" depend="init_deliv" >
		<set name="build_es_logfile" value="${cwd}${path_separator}build_es.log" />
		<echo message="Build EiffelStudio ..." to_file="$build_es_logfile" append="true" />

		<geant target="set_version"			fork="false" reuse_variables="true" />
		<geant target="compile_es" 			fork="false" reuse_variables="true" />
		<geant target="create_es_delivery" 	fork="false" reuse_variables="true" />
		<geant target="install_es" 			fork="false" reuse_variables="true" />
	</target>

	<target name="create_es_delivery" depend="init_deliv" >
		<echo message="Building delivery for ES into ${INSTALL_DIR}" to_file="$build_es_logfile" append="true" />
		<!-- Delivery -->
		<available resource="${INSTALL_DIR}" variable="installdir_available"/>
		<!--
		<echo message="Clean delivery ..." to_file="$build_es_logfile" append="true" if="${installdir_available}=true"  />
		<geant target="clean_delivery" reuse_variables="true" fork="false" if="${installdir_available}=true" />
		<echo message="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" />
		<echo message="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<exit code="${return_code}" unless="${return_code}=0" />

		<available resource="${INSTALL_DIR}" variable="installdir_available"/>
		-->
		<mkdir directory="${INSTALL_DIR}"  if="${installdir_available}=false" />

		<set name="return_code" value="0" />

		<echo message="Make delivery in ${INSTALL_DIR} ..." to_file="$build_es_logfile" append="true" if="${installdir_available}=false" />
		<geant target="make_delivery" reuse_variables="true" fork="false" dir="${INSTALL_DIR}" if="${installdir_available}=false" />
		<echo message="Error occurred during 'make_delivery' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<exit code="${return_code}" unless="${return_code}=0" />

		<echo message="Update delivery in ${INSTALL_DIR} ..." to_file="$build_es_logfile" append="true" if="${installdir_available}=true" />
		<geant target="update_delivery" reuse_variables="true" fork="false" dir="${INSTALL_DIR}" if="${installdir_available}=true" />
		<echo message="Error occurred during 'make_delivery' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<exit code="${return_code}" unless="${return_code}=0" />
	</target>

	<target name="compile_es" depend="init_deliv" >
		<echo message="Compiling ES into ${OUTPUT_DIR}" to_file="$build_es_logfile" append="true" />

		<mkdir directory="${OUTPUT_DIR}" />
		<!-- run-time -->
		<echo message="Compile runtime ..." to_file="$build_es_logfile" append="true" />
		<geant target="compile_runtime" />
		<echo message="Error occurred during 'compile_runtime_dll' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />

		<!-- library -->
		<echo message="Compile library ..." to_file="$build_es_logfile" append="true" />
		<geant target="compile_library" />
		<echo message="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<available resource="${EIFFEL_SRC}\library\wel\spec\msc\dll\wel_hook.dll" variable="tmp_available"/>
		<copy file="${EIFFEL_SRC}\library\wel\spec\msc\dll\wel_hook.dll" to_file="${OUTPUT_DIR}${path_separator}wel_hook.dll" if="${tmp_available}=true" />

		<!-- IL runtime -->
		<available resource="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time\EiffelSoftware.Runtime.dll" variable="tmp_available"/>
		<copy file="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time\EiffelSoftware.Runtime.dll" to_file="${OUTPUT_DIR}${path_separator}EiffelSoftware.Runtime.dll" if="${tmp_available}=true" />
		
		<!-- ec -->
		<echo message="Finalize ec ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_ec" />
		<echo message="Error occurred during 'finalize_ec' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}bench${path_separator}F_code${path_separator}ec${exe}" to_file="${OUTPUT_DIR}${path_separator}ec${exe}" if="${return_code}=0" />

		<!-- estudio -->
		<echo message="Finalize estudio ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_estudio" />
		<echo message="Error occurred during 'finalize_estudio' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}estudio${path_separator}F_code${path_separator}estudio${exe}" to_file="${OUTPUT_DIR}${path_separator}estudio${exe}" if="${return_code}=0"/>
		<!-- specific to windows -->
		<geant target="compile_es_windows" fork="false" reuse_variables="true" if="${is_windows}" />

		<echo message="Compiling ES is completed ..." to_file="$build_es_logfile" append="true" />

		<!-- quick_finalize -->
		<echo message="Finalize quick_finalize ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_quick_finalize" />
		<echo message="Error occurred during 'finalize_quick_finalize' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}quick_finalize${path_separator}f_code${path_separator}quick_finalize${exe}" to_file="${OUTPUT_DIR}${path_separator}quick_finalize${exe}" if="${return_code}=0" />

	</target>

	<target name="compile_es_windows" depend="init_deliv" if="${is_windows}" >
		<!-- finish_freezing -->
		<echo message="Finalize finish_freezing ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_finish_freezing" />
		<echo message="Error occurred during 'finalize_finish_freezing' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}finish_freezing${path_separator}f_code${path_separator}finish_freezing${exe}" to_file="${OUTPUT_DIR}${path_separator}finish_freezing${exe}" if="${return_code}=0" />

		<!-- h2e -->
		<echo message="Finalize h2e ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_h2e" />
		<echo message="Error occurred during 'finalize_h2e' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}h2e${path_separator}f_code${path_separator}h2e${exe}" to_file="${OUTPUT_DIR}${path_separator}h2e${exe}" if="${return_code}=0" />

		<!-- emake -->
		<echo message="Finalize emake ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_emake"  />
		<echo message="Error occurred during 'finalize_emake' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy file="${compile_dir}${path_separator}EIFGENs${path_separator}emake${path_separator}F_code${path_separator}emake${exe}" to_file="${OUTPUT_DIR}${path_separator}emake${exe}" if="${return_code}=0"/>

		<!-- dotnet consumer -->
		<echo message="Finalize mdconsumer ..." to_file="$build_es_logfile" append="true" />
		<geant target="finalize_mdconsumer" fork="false" />
		<echo message="Error occurred during 'finalize_mdconsumer' (${return_code})" unless="${return_code}=0" to_file="$build_es_logfile" append="true" />
		<copy to_directory="${OUTPUT_DIR}" dir="${compile_dir}\EIFGENs\consumer_20\F_code" if="${return_code}=0" >
			<fileset include="@(*.dll)" />
		</copy>
	</target>

	<target name="install_es" depend="init_deliv" >
		<echo message="Installing ES into ${INSTALL_DIR}" to_file="$build_es_logfile" append="true" />

		<!-- install binaries -->
		<set name="tmp_install_dir" value="${INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}" />

		<available dir="${OUTPUT_DIR}" resource="ec${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="ec${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>

		<available dir="${OUTPUT_DIR}" resource="estudio${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="estudio${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>



		<copy dir="${OUTPUT_DIR}" to_directory="${tmp_install_dir}${path_separator}bin" >
			<fileset include="@(*.dll)" />
		</copy>

		<geant target="install_es_windows" fork="false" reuse_variables="true" if="${is_windows}" />
		<geant target="install_es_unix" fork="false" reuse_variables="true" unless="${is_windows}" />

		<unset name="tmp_install_dir" />
		<!-- end of install -->

		<echo message="Installing ES is completed ..." to_file="$build_es_logfile" append="true" />
	</target>


	<target name="install_es_unix" depend="init_deliv" unless="${is_windows}" >
		<exec executable="chmod a+x ${tmp_install_dir}/bin/* " accept_errors="true" exit_code_variable="return_code" />
	</target>

	<target name="install_es_windows" depend="init_deliv" if="${is_windows}" >
		<available dir="${OUTPUT_DIR}" resource="wel_hook.dll" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="wel_hook.dll" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="EiffelSoftware.Runtime.dll" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="EiffelSoftware.Runtime.dll" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true" />
		<copy dir="${OUTPUT_DIR}" file="EiffelSoftware.Runtime.dll" to_directory="${tmp_install_dir}${path_separator}lib" 
			if="${tmp_available}=true" />

		<available dir="${OUTPUT_DIR}" resource="finish_freezing${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="finish_freezing${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>

		<available dir="${OUTPUT_DIR}" resource="quick_finalize${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="quick_finalize${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>

		<available dir="${OUTPUT_DIR}" resource="h2e${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="h2e${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>

		<available dir="${OUTPUT_DIR}" resource="emake${exe}" variable="tmp_available"/>
		<copy dir="${OUTPUT_DIR}" file="emake${exe}" to_directory="${tmp_install_dir}${path_separator}bin" 
			if="${tmp_available}=true"/>
	</target>

	<target name="clean_es" depend="init_deliv" >
		<exec executable="rmdir /q/s ${EIFGENs}" if="${is_windows}" />
		<exec executable="\rm -rf ${EIFGENs}" unless="${is_windows}" />
		<available resource="${INSTALL_DIR}" variable="installdir_available"/>
		<geant target="clean_delivery" reuse_variables="true" fork="false" if="${installdir_available}=true" />
	</target>

	<target name="clean_delivery" depend="init_deliv" >
		<!--
		<delete directory="${INSTALL_DIR}" if="${installdir_available}=true" />
		-->
		<exec executable="rmdir /q/s ${INSTALL_DIR}" if="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="\rm -rf ${INSTALL_DIR}" unless="${is_windows}" accept_errors="true" exit_code_variable="return_code" />
	</target>
	<target name="make_delivery" depend="init_deliv" >
		<echo message="Task: make_delivery"/>
		<set name="NEW_ISE_EIFFEL" value="${cwd}" unless="${NEW_ISE_EIFFEL}" />
		<geant target="make_delivery_common" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" />
		<geant target="make_delivery_windows" reuse_variables="true" fork="false" if="${is_windows}" dir="${NEW_ISE_EIFFEL}" />
		<geant target="make_delivery_unix" reuse_variables="true" fork="false" unless="${is_windows}" dir="${NEW_ISE_EIFFEL}" />

		<!-- compile NEW_ISE_EIFFEL library -->
		<set name="old_ISE_LIBRARY" value="${ISE_LIBRARY}" />
		<setenv name="ISE_LIBRARY" value="${NEW_ISE_EIFFEL}" />
		<geant target="compile_library" />
		<echo message="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0" />
		<setenv name="ISE_LIBRARY" value="${old_ISE_LIBRARY}" />
		<unset name="old_ISE_LIBRARY" />
		<set name="return_code" value="0" />
	</target>

	<target name="update_delivery" depend="init_deliv" >
		<echo message="Task: update_delivery"/>
		<set name="NEW_ISE_EIFFEL" value="${cwd}" />
		<geant target="make_delivery" reuse_variables="true" fork="false" />
	</target>

	<target name="make_delivery_common" depend="init_deliv" >
		<!-- platform independant -->
		<set name="SVNURL" value="https://eiffelsoftware.origo.ethz.ch/svn/es/trunk" />
		<exec executable="svn checkout $SVNURL/Delivery . " />
		<exec executable="svn checkout $SVNURL/Src/library library" />
		<exec executable="svn checkout $SVNURL/Src/C_library C_library" />
		<mkdir directory="studio/spec/$ISE_PLATFORM"/>
		<mkdir directory="studio/spec/$ISE_PLATFORM/bin"/>
		<echo message="make dir : studio/spec/$ISE_PLATFORM/include" />
		<mkdir directory="studio/spec/$ISE_PLATFORM/include"/>
		<mkdir directory="studio/spec/$ISE_PLATFORM/lib"/>
		<copy to_directory="${INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/include" dir="${EIFFEL_SRC}/C/run-time" >
			<fileset include="@(*.h)" />
		</copy>
		<copy file="${EIFFEL_SRC}/C/eif_confmagic.h" to_file="${INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/include/eif_confmagic.h" />
		<copy file="${EIFFEL_SRC}/C/run-time/x2c${exe}" to_file="${INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/x2c${exe}" />
		<copy file="${EIFFEL_SRC}/C/ipc/daemon/ecdbgd${exe}" to_file="${INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/ecdbgd${exe}" />

		<copy to_directory="${INSTALL_DIR}\precomp\spec\${ISE_PLATFORM}" dir="precomp\spec\platform" >
			<fileset 
				include="@(**/*)" 
				exclude="@(**/.svn/**/*)"
			/>
		</copy>
	</target>

	<target name="make_delivery_windows" depend="init_deliv" >
		<!-- Windows -->
		<mkdir directory="studio\spec\$ISE_PLATFORM\lib\$ISE_C_COMPILER"/>
		<copy to_directory="${INSTALL_DIR}\studio\spec\${ISE_PLATFORM}\lib\$ISE_C_COMPILER" dir="${EIFFEL_SRC}\C\run-time\LIB" >
			<fileset include="@(*.lib|*.dll)" />
		</copy>
		<copy to_directory="${INSTALL_DIR}\studio\config\${ISE_PLATFORM}" dir="studio\config\windows" unless="${ISE_PLATFORM}=windows" >
			<fileset 
				include="@(**/*)" 
				exclude="@(**/.svn/**/*)"
			/>
		</copy>
	</target>

	<target name="make_delivery_unix" depend="init_deliv" >
		<copy file="${EIFFEL_SRC}/C/config.sh" to_directory="studio/spec/${ISE_PLATFORM}/include" />
		<copy to_directory="${INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/lib" dir="${EIFFEL_SRC}/C/run-time" >
			<fileset include="@(lib*.*)" />
		</copy>
		<copy to_directory="${INSTALL_DIR}/studio/config/${ISE_PLATFORM}" dir="studio/config/unix">
			<fileset 
				include="@(**/*)" 
				exclude="@(**/.svn/**/*)"
			/>
		</copy>
		<exec executable="ln -s -f ../../unix/finish_freezing finish_freezing" dir="studio/spec/$ISE_PLATFORM/bin" />
		<exec executable="ln -s -f ../../unix/prelink prelink" dir="studio/spec/$ISE_PLATFORM/bin" />
	</target>

</project>
