
EiffelWeasel: An Automated Regression Testing Tool for ISE Eiffel 3
===================================================================

The EiffelWeasel test suite execution program executes an Eiffel
compilation and execution test suite.  It only supports the ISE Eiffel
3.0 environment.

Usage:

   eweasel [options]

   	Option			Default	if absent	Multiple occurrences
	------			-----------------	--------------------

	-help			No help message		No effect
	-define name value	No defines done		Cumulative
	-read file		No control file read	Cumulative
	-catalog file		No tests selected	Cumulative
	-filter filter		No test filtering	Cumulative
	-level level		Execute			Supersedes
	-keep which		Keep tests that fail	Supersedes
	-output directory	Current directory 	Supersedes

		
   Options are processed in the order in which they occur on the
   command line.  Options may be abbreviated to a prefix which is
   unambiguous among all possible options (e.g., `-d' or `-def' for
   `-define').  With the current options, this means that one letter
   abbreviations such as `-f' are always valid. 

   The possible options, presented in the order in which they are
   likely to be specified, are:

	-help
	
		Display message giving help on command line options.
		If this option is present, no test execution is
		attempted.

	-define name value
	
		Define substitution variable `name' to have value
		`value'.  You will often want to define the
		following variables on the command line:

			INCLUDE		
				
				The full path name of the standard
				include directory (usually
				$EWEASEL/control, where $EWEASEL is
				the path name of the eweasel
				installation directory).

			HOME	

				Your home directory.

		
	-read file

		Read and execute test suite control file `file'.
		A test suite control file may only contain some of the
		instructions that a test control file contains.
		These instructions are:

			define
			define_directory
			define_file
			undefine
			include

		These instructions have the same syntax and semantics
		as they do in a test control file.  The test suite
		control file is used to define names particular to a
		specific user, site or operating system.  There is no
		default for this option.  Omitting it is likely to
		cause obvious and immediate errors in test execution.

	-catalog file

		Add all of the tests contained in test catalog `file'
		to the list of tests to be executed.

	-filter filter

		Retain only those tests selected by filter `filter'.
		Multiple occurrences of this option are allowed.  In
		the absence of any filters, all tests in the catalog
		are executed, in the order in which they appear in the
		catalog.  Filtering has no effect on test execution
		order.  A filter may be one of the following:

			'test <test-name>'

				Retain for execution only the tests
				with the name <test-name>.  Since
				tests should have unique names, there
				is normally only one such test.

			'kw <test-keyword>'

				Retain for execution only the tests
				whose catalog entry includes the
				keyword <test-keyword>.

			'skip <position>'
				
				Retain for execution only the tests
				after <position> (i.e., skip all tests
				up to and including <position>).
				Valid positions are:

					<integer>
					<test-name>
					<integer>%

				If a percentage is specified and the
				calculated position falls in the
				middle of a test, that test is skipped.

			'start <position>'
				
				Retain for execution only the tests
				at or after <position> (i.e., skip all tests
				up to but not including <position>).
			
				If a percentage is specified and the
				calculated position falls in the
				middle of a test, that test is retained.
			
			'end <position>'
				
				Retain for execution only the tests at
				or before <position> (i.e., skip all
				tests after <position>).
			
				If a percentage is specified and the
				calculated position falls in the
				middle of a test, that test is retained.
			
			'range <position> <position>'
				
				Retain for execution only the tests at
				or after <position1> and at or before
				<position2>.
			
				If a percentage is specified and the
				calculated position falls in the
				middle of a test, that test is retained.
			
			'part <integer1> of <integer2>'
				
				Divide the currently remaining tests
				into <integer2> equal parts.  Retain
				for execution only the tests in part
				<integer1>.
			
			'limit <position>'

				Retain for execution only the tests at
				or before <position> (i.e., skip all
				tests after <position>).
			
				If a percentage is specified and the
				calculated position falls in the
				middle of a test, that test is retained.
			
	-level { show | syntax | validity | execute }

		Set the test execution level.  Possible executions
		levels are:

			show	Display the names of the selected tests,
				but don't do any other processing on them.

			syntax	Check each test for syntax only.
				Define and undefine instructions are
				executed.  Detects test instruction
				syntax errors and some invalid or
				missing defines.

			validity
				Check each test for syntax and also
				execute some parts of it in an effort
				to check whether it is valid.  Does not
				execute any instructions involving
				Eiffel compilation, C compilation or
				system execution.
				
			execute
				Execute each test fully.  This is
				the default.
				
	-keep { all | none | pass | fail }
	
		Specify which test directories are to be kept rather
		than deleted after test execution ends.  If a test
		directory is not kept, the entire directory tree for
		that test is deleted.  Possible "keep" values are:
		
			all	Keep all test directories, regardless
				of test pass/fail status.

			none	Do not keep any test directories; delete 
				each test directories after test
				execution ends.

			pass	Keep test directories only for those
				tests which pass.

			fail	Keep test directories only for those
				tests which fail.

		The default is `-keep fail'.

	-output directory

		Make `directory' the test suite output directory.
		Default is the current directory.  Each test is
		performed in its own "test directory", which is always
		a subdirectory of the output directory.  The
		subdirectory used as the test directory for a
		particular test is the one which has the same name as
		the last component of the pathname for the test's
		source directory.


For portability, directory names in both test catalogs and test
control files should always be specified via substitution variables.
Also, file names should be kept short and should only use alphanumeric
characters.

