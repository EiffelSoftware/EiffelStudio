-- This file has been generated by EWG. Do not edit. Changes will be lost!

class CFALLOCATOR_CONTEXT_STRUCT

inherit

	EWG_STRUCT

	CFALLOCATOR_CONTEXT_STRUCT_EXTERNAL
		export
			{NONE} all
		end

create

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {ANY} -- Access

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER is
			-- Access member `version'
		require
			exists: exists
		do
			Result := get_version_external (item)
		ensure
			result_correct: Result = get_version_external (item)
		end

	set_version (a_value: INTEGER) is
			-- Set member `version'
		require
			exists: exists
		do
			set_version_external (item, a_value)
		ensure
			a_value_set: a_value = version
		end

	info: POINTER is
			-- Access member `info'
		require
			exists: exists
		do
			Result := get_info_external (item)
		ensure
			result_correct: Result = get_info_external (item)
		end

	set_info (a_value: POINTER) is
			-- Set member `info'
		require
			exists: exists
		do
			set_info_external (item, a_value)
		ensure
			a_value_set: a_value = info
		end

	retain: POINTER is
			-- Access member `retain'
		require
			exists: exists
		do
			Result := get_retain_external (item)
		ensure
			result_correct: Result = get_retain_external (item)
		end

	set_retain (a_value: POINTER) is
			-- Set member `retain'
		require
			exists: exists
		do
			set_retain_external (item, a_value)
		ensure
			a_value_set: a_value = retain
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	release: POINTER is
			-- Access member `release'
		require
			exists: exists
		do
			Result := get_release_external (item)
		ensure
			result_correct: Result = get_release_external (item)
		end

	set_release (a_value: POINTER) is
			-- Set member `release'
		require
			exists: exists
		do
			set_release_external (item, a_value)
		ensure
			a_value_set: a_value = release
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	copydescription: POINTER is
			-- Access member `copyDescription'
		require
			exists: exists
		do
			Result := get_copydescription_external (item)
		ensure
			result_correct: Result = get_copydescription_external (item)
		end

	set_copydescription (a_value: POINTER) is
			-- Set member `copyDescription'
		require
			exists: exists
		do
			set_copydescription_external (item, a_value)
		ensure
			a_value_set: a_value = copydescription
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	allocate: POINTER is
			-- Access member `allocate'
		require
			exists: exists
		do
			Result := get_allocate_external (item)
		ensure
			result_correct: Result = get_allocate_external (item)
		end

	set_allocate (a_value: POINTER) is
			-- Set member `allocate'
		require
			exists: exists
		do
			set_allocate_external (item, a_value)
		ensure
			a_value_set: a_value = allocate
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	reallocate: POINTER is
			-- Access member `reallocate'
		require
			exists: exists
		do
			Result := get_reallocate_external (item)
		ensure
			result_correct: Result = get_reallocate_external (item)
		end

	set_reallocate (a_value: POINTER) is
			-- Set member `reallocate'
		require
			exists: exists
		do
			set_reallocate_external (item, a_value)
		ensure
			a_value_set: a_value = reallocate
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	deallocate: POINTER is
			-- Access member `deallocate'
		require
			exists: exists
		do
			Result := get_deallocate_external (item)
		ensure
			result_correct: Result = get_deallocate_external (item)
		end

	set_deallocate (a_value: POINTER) is
			-- Set member `deallocate'
		require
			exists: exists
		do
			set_deallocate_external (item, a_value)
		ensure
			a_value_set: a_value = deallocate
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
	preferredsize: POINTER is
			-- Access member `preferredSize'
		require
			exists: exists
		do
			Result := get_preferredsize_external (item)
		ensure
			result_correct: Result = get_preferredsize_external (item)
		end

	set_preferredsize (a_value: POINTER) is
			-- Set member `preferredSize'
		require
			exists: exists
		do
			set_preferredsize_external (item, a_value)
		ensure
			a_value_set: a_value = preferredsize
		end

-- TODO: function pointers not yet callable from
--		struct, use corresponding callback class instead
end
