<?xml version="1.0"?>
<document title="Eiffel for .NET Compliance">
  <meta_data>
    <help>
      <toc>
	    <envision_location>EiffelEnvision\A Guide to Eiffel for .NET\The Eiffel for .NET Language\Eiffel for .NET</envision_location>
        <envision_title>Eiffel for .NET Compliance</envision_title>
        <envision_pseudo_name>85</envision_pseudo_name>
      </toc>
      <xml>
        <xmlkeyword>
          <index>K</index>
          <term>Eiffel for .NET, Compliance</term>
        </xmlkeyword>
      </xml>
    </help>
  </meta_data>
  <paragraph>
  		<paragraph>
			As of EiffelEnvision 2.6, Eiffel for ASP.NET 5.6 and EiffelStudio 5.7; Eiffel for .NET introduces the notion of <bold>Eiffel-Compliance</bold>. .NET specifies a number of language interopability rules in a <link><url>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconwhatiscommonlanguagespecification.asp</url><label>Common Language Specification-Compliance</label></link> specification. Eiffel for .NET supports all CLS-Compliant type and features in .NET but now additionally supports a number of non-CLS-compliant types and features. This is the purpose of the Eiffel-Compliant notion.
		</paragraph>
		<note>
			<bold>Note</bold>: The information contained within this page does not go into any depth on the Common Language Specification (CLS) or CLS-Compliance. For this information please see Microsoft's on-line documentation <link><url>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconwhatiscommonlanguagespecification.asp</url><label>What is the Common Language Specification?</label></link>
		</note>
		
		<anchor>applicablity</anchor>
		<heading>
			<size>2</size>
			<content>Applicability</content>
		</heading>
		<paragraph>
			The CLS states a number of rules .NET tools have to abide by to be CLS-compliant. These rules relate to both a .NET producer, generally a compiler generating .NET code, and a consumer, which is generally a compiler that consumes .NET assemblies for reuse. Eiffel-Compliance relates only to consumption of .NET assemblies.
		</paragraph>
		
		<anchor>what_is_compliant</anchor>
		<heading>
			<size>2</size>
			<content>What is Eiffel-Compliant?</content>
		</heading>
		<paragraph>
			As already state, anything CLS-compliant is Eiffel-compliant. Eiffel-Compliancy merely allows for exceptions so that non-CLS-compliant assemblies, types and members can be used in Eiffel for .NET.
		</paragraph>
		<paragraph>
			The following list outlines the supported non-CLS-compliant types:
			<list ordered="false">
				<item>All unsigned numerical basic types such as <class_name>System.UInt32</class_name> as <class_name>System.UInt64</class_name>, represented by <class_name>NATURAL_xx</class_name>.</item>
				<item>Native pointers (<class_name>System.IntPtr</class_name>), represented by <class_name>POINTER</class_name></item>
			</list>
		</paragraph>
		<paragraph>
			Typically assemblies, types or members are marked with the <class_name>System.CLSCompliantAttribute</class_name> attribute to explicitly indicate if they are CLS-compliant or not. The Eiffel for .NET compiler will now ignore this attribute and instead infer if they are Eiffel-Compliant. With 
			such an inference engine at hand, Eiffel for .NET opens itself up to extended support for COM/Legacy interop as well support assemblies not adhering to CLS-compliant rules, for one reason or another.
		</paragraph>
		<output output="envision">
			<anchor>tools</anchor>
			<heading>
				<size>2</size>
				<content>Tools</content>
			</heading>
			<paragraph>
				Installed with EiffelEnvision, the <link><url>../../../../tools/compliance_checker/index.xml</url><label>Eiffel for .NET Compliance Checker Tool</label></link> gives a visual report on third-party assemblies conformance to CLS/Eiffel-Compliance. Typically if some type or feature cannot be used in Eiffel for .NET this tool 
				should be used to check the respective assembly. The tool also serves as a validation tool for component vendors to ensure assemblies can be used from the Eiffel for .NET language.
			</paragraph>
		</output>
  </paragraph>
</document>
