?RCS: $Id: d_sgndchr.U 78389 2004-11-30 00:17:17Z manus $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log$
?RCS: Revision 1.1  2004/11/30 00:17:18  manus
?RCS: Initial revision
?RCS:
?RCS: Revision 3.0.1.2  1997/02/28  15:44:25  ram
?RCS: patch61: added a ?F: metalint hint
?RCS:
?RCS: Revision 3.0.1.1  1995/07/25  14:00:24  ram
?RCS: patch56: made cc and ccflags optional dependencies
?RCS:
?RCS: Revision 3.0  1993/08/18  12:07:16  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_sgndchr: cat rm +cc +ccflags Setvar
?MAKE:	-pick add $@ %<
?S:d_sgndchr:
?S:	This variable conditionally defines the SIGNEDCHAR symbol, which
?S:	indicates to the C program that signed characters are available.
?S:.
?C:SIGNEDCHAR:
?C:	This symbol, if defined, indicates that characters are a signed type.
?C:	If not defined, things declared as signed characters (and that make
?C:	use of negative values) should probably be declared as shorts instead.
?C:.
?H:#$d_sgndchr SIGNEDCHAR	/**/
?H:.
?F:!try
?LINT:set d_sgndchr
: check for signed chars
echo " "
echo "Checking to see if your C compiler can do signed chars..." >&4
$cat >try.c <<'EOCP'
main()
{
	char c = 0;

	c--;
	exit(c >= 0);
}
EOCP
$cc $ccflags -o try try.c
if ./try; then
	val="$define"
	echo "It certainly can."
else
	val="$undef"
	echo "It can't.  I'll have to make some things type short."
fi
set d_sgndchr
eval $setvar
$rm -f try*

