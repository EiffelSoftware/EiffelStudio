<document title="Criterion References" output="studio">
<meta_data/>
<paragraph>
	<heading>
		<size>2</size>
		<content>Text Criterion</content>
	</heading>
	<paragraph>
		<bold>name_is</bold><line_break/>
		<bold>Syntax:</bold> name_is "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if name of the candidate code element matched the given pattern. For more details about matching strategy and case-sensitivity modifier, see the documentation of text criterion.
	</paragraph>
	<paragraph>
	 	<bold>text_is</bold><line_break/>
		<bold>Syntax:</bold> text_is "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if text of a candidate code element matches the given pattern.
	</paragraph>
	<paragraph>
		<bold>top_indexing_contain</bold><line_break/>
		<bold>Syntax:</bold> top_indexing_contain "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if text (indexing tags are not included) of the top indexing clause in the candidate class matches the given pattern.
	</paragraph>

	<paragraph>
		<bold>top_indexing_has_tag</bold><line_break/>
		<bold>Syntax:</bold> top_indexing_has_tag "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if tags of the top indexing clause in the candidate class matches the given pattern.
	</paragraph>

	
	 
	<paragraph>
		<bold>bottom_indexing_contain</bold><line_break/>
		<bold>Syntax:</bold> bottom_indexing_contain "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold >This criterion will evaluate to True if text (indexing tags are not included) of the bottom indexing clause in the candidate class matches the given pattern.
	</paragraph>

	<paragraph>
		<bold>bottom_indexing_has_tag</bold><line_break/>
		<bold>Syntax:</bold> bottom_indexing_has_tag "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold >This criterion will evaluate to True if tags of the bottom indexing clause in the candidate class matches the given pattern.
	</paragraph>
	 
	<paragraph>
		<bold>indexing_contain</bold><line_break/>
		<bold>Syntax:</bold> indexing_contain "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold>Class<line_break/>
		<bold>Remark:</bold >This criterion will evaluate to True if (top or bottom) indexing clause matches the given pattern.
	</paragraph>
	 
	<paragraph>
		<bold>indexing_has_tag</bold><line_break/>
		<bold>Syntax:</bold> indexing_has_tag "pattern", matching strategy, case-sensitivity<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if tag of (top or bottom) indexing clause of the candidate class matches the given pattern.
	</paragraph>
	
	<heading>
		<size>2</size>
		<content>Path Criterion</content>
	</heading>	
	<paragraph>
		<bold>path_in</bold><line_break/>
		<bold>Syntax:</bold> path_in "path"<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if path (related to the class's written in group) of the class candidate is "path" or its subdirectory. "path" is in Unix format, i.e., different sections are separated by a "/". On Windows, path matching is case-sensitive, on other platforms, it's case-sensitive.
	</paragraph>

	<paragraph>
		<bold>path_is</bold><line_break/>
		<bold>Syntax:</bold> path_is "path"<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if path (related to the class's written in group) of the class candidate is "path". "path" is in Unix format, i.e., different sections are separated by a "/". On Windows, path matching is case-sensitive, on other platforms, it's case-sensitive.
	</paragraph>
	<heading>
		<size>2</size>
		<content>Relation Criterion</content>
	</heading>			

	<paragraph>
		<bold>ancestor_is</bold><line_break/>
		<bold>Syntax:</bold> ancestor_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if candidate class (or feature) is descendant of any (if more than one are possible) of the class (or feature) specified in the criterion domain.<line_break/>
		For example, in a class metric,
		    <note>ancestor_is {<class_name>STRING_8</class_name>}</note><line_break/>
		will evaluate to True when a candidate class is a descendant of class <class_name>STRING_8</class_name>.<line_break/>
		In a class metric, 
		<note>ancestor_is {<class_name>LINKED_LIST</class_name>, <class_name>DS_LINKED_LIST</class_name>} </note>
		will evaluate to True when a candidate class is a descendant of either <class_name>LINKED_LIST</class_name> or <class_name>DS_LINKED_LIST</class_name>.
	</paragraph>

	<paragraph>
		<bold>proper_ancestor_is</bold><line_break/>
		<bold>Syntax:</bold> proper_ancestor_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if a candidate class is a proper descendant of any of the classes in criterion domain. First, let's use the following figure to demonstrate the concepts of ancestor, proper ancestor, parent and indirect parent. (Note: the hierarchy is not complete) <line_break/>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/class_hie.jpg</url>
				<alt_text>class hierarchy</alt_text>
			</image>
		</paragraph>		
		Ancestors of <class_name>STRING_32</class_name> are: <class_name>STRING_32</class_name>, <class_name>STRING_GENERAL</class_name>, <class_name>INDEXABLE</class_name>, <class_name>COMPARABLE</class_name> and <class_name>PART_COMPARABLE</class_name>.<line_break/>
		Proper ancestors of <class_name>STRING_32</class_name> are <class_name>STRING_GENERAL</class_name>, <class_name>INDEXABLE</class_name>, <class_name>COMPARABLE</class_name> and <class_name>PART_COMPARABLE</class_name>.<line_break/>
		Parents of <class_name>STRING_32</class_name> are: <class_name>STRING_GENERAL</class_name> and <class_name>INDEXABLE</class_name><line_break/>
		Indirect parents of <class_name>STRING_32</class_name> are: <class_name>COMPARABLE</class_name> and <class_name>PARTCOMPARABLE</class_name><line_break/>
		The related concepts of descendants, proper descendants, heirs, indirect heirs follow the same rule but are in the reversed direction. <line_break/>
	</paragraph>

	<paragraph>
		<bold>descendant_is</bold><line_break/>
		<bold>Syntax:</bold> descendant_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if candidate class is or feature is ancestor of any (if more than one are possible) of the class or feature specified in the criterion domain.<line_break/>
	</paragraph>
	
	<paragraph>
		<bold>proper_descendant_is</bold><line_break/>
		<bold>Syntax:</bold> proper_descendant_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if a candidate class is a proper ancestor of any of the classes in criterion domain.<line_break/>
	</paragraph>
	
	<paragraph>	
		<bold>parent_is</bold><line_break/>
		<bold>Syntax:</bold> parent_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if a candidate class is a heir of any of the classes in criterion domain.<line_break/>
	</paragraph>

	<paragraph>
		<bold>indirect_parent_is</bold><line_break/>
		<bold>Syntax:</bold> indirect_parent_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if a candidate class is a indirect heir of any of the classes in criterion domain.<line_break/>
	</paragraph>
	
	<paragraph>
		<bold>heir_is</bold><line_break/>
		<bold>Syntax:</bold> heir_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if a candidate class is a parent of any of the classes in criterion domain.<line_break/>
	</paragraph>

	<paragraph>
		<bold>indirect_heir_is</bold><line_break/>
		<bold>Syntax:</bold> indirect_heir_is {domain}<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion evaluates to True if a candidate class is a indirect parent of any of the classes in criterion domain.<line_break/>
	</paragraph>
	
	<paragraph>
		<bold>client_is</bold><line_break/>
		<bold>Syntax:</bold> client_is {domain}, directness, normally_referenced, syntactically_referenced<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remarks:</bold> This criterion evaluates to True if a candidate class is supplier of any of the classes in criterion domain. Directness modifier is boolean modifier, if it's True only direct suppliers are picked, if indirect modifier is set, only indirect suppliers are picked. normally_referenced and syntactically_referenced modifiers are both boolean modifiers, they enable to specify how one class is used by another class. Let's use an example to demonstrate these ideas, for example, in class A, there is a feature foo:<line_break/>
		<code_block>
	        <feature_name>foo</feature_name> <keyword>is</keyword>
	                 <keyword>local</keyword>
	                          <local_variable>l_str</local_variable><symbol>:</symbol> <class_name>STRING</class_name>
	                          <local_variable>l_file</local_variable><symbol>:</symbol> <class_name>FILE</class_name>
	                 <keyword>do</keyword>
	                          <keyword>create</keyword> <local_variable>l_str</local_variable><symbol>.</symbol><feature_name>make_empty</feature_name>
	                 <keyword>end</keyword>
		</code_block><line_break/>
		Then both <class_name>STRING</class_name> and <class_name>FILE</class_name> are suppliers of class <class_name>A</class_name>. <class_name>STRING</class_name> is normal supplier because a feature make_empty in <class_name>STRING</class_name> is invoked in class <class_name>A</class_name>, but <class_name>FILE</class_name> is a syntactically referenced supplier because no feature from <class_name>FILE</class_name> is called from <class_name>A</class_name>. Classes explicitly listed in inherit clause of a class are also considered as syntactically referenced suppliers.
		<paragraph>Concepts of direct/indirect, normally referenced/syntactically referenced clients follow the same rule expect in the other direction.</paragraph>			
	</paragraph>
	
	<paragraph>
		<bold>supplier_is</bold><line_break/>
		<bold>Syntax:</bold> supplier_is {domain}, directness, normally_referenced, syntactically_referenced<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate class is client of any of the classes in criterion domain.<line_break/>
		For more information of directness modifier, normally_referenced modifier and syntactically_referenced modifier, see document for relation criterion client_is<line_break/>
	</paragraph>
	<paragraph>
		<bold>callee_is</bold><line_break/>
		<bold>Syntax:</bold> callee_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature is calling any of the feature listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration.<line_break/>
	</paragraph>
	<paragraph>
		<bold>caller_is</bold><line_break/>
		<bold>Syntax:</bold> caller_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature is called by any of the feature listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration. <line_break/>
	</paragraph>
	<paragraph>
		<bold>assignee_is</bold><line_break/>
		<bold>Syntax:</bold> assignee_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature assigns to any of the feature listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration.<line_break/>
	</paragraph>
	<paragraph>
		<bold>assigner_is</bold><line_break/>
		<bold>Syntax:</bold> assigner_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature assigns to any of the feature listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration.<line_break/>
	</paragraph>
	<paragraph>
		<bold>createe_is</bold><line_break/>
		<bold>Syntax:</bold> createe_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature creates any of the feature (must be an attribute) listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration.<line_break/>
	</paragraph>
	<paragraph>
		<bold>creator_is</bold><line_break/>
		<bold>Syntax:</bold> creator_is {domain}, only_current_version<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold><line_break/>
		This criterion evaluates to True if a candidate feature (must be an attribute) is created by any of the feature listed in criterion domain.<line_break/>
		only_current_verision modifier is a boolean modifier, if it's True, when the criterion is evaluated, only the candidate feature is taken into consideration, otherwise, the candidate feature and all its descendant versions are taken into consideration.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_exported_to</bold><line_break/>
		<bold>Syntax:</bold> is_exported_to {domain}<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is exported to all the classes listed in criterion domain.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_implementors_of</bold><line_break/>
		<bold>Syntax:</bold> is_implementors_of {domain}<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is an implementer of some features listed in criterion domain.<line_break/>
	</paragraph>
	<paragraph>
		<bold>return_type_is</bold><line_break/>
		<bold>Syntax:</bold> return_type_is {domain}<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if associated class of the return type of the candidate feature is listed in criterion domain.<line_break/>	
	</paragraph>	
	<heading>
		<size>2</size>
		<content>Value Criterion</content>
	</heading>	
	<paragraph>
		<bold> value_of_metric_is</bold><line_break/>
		<bold>Syntax:</bold> value_of_metric_is <bold>Metric</bold>, {domain}, value_tester<line_break/>
		<bold> Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold>The <bold>Metric</bold> modifier will be a specified metric name. This criterion will evaluate to True if the calculated metric (from metric modifier) over input domain (from criterion domain) satisfies some given value tester (from value_tester modifier). 
		
		<paragraph>For example, if we want to find classes whose code is over 1000 lines, we can create the following metric and run it over input domain {Application target}:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/value_of_metric_is.jpg</url>
				<alt_text>Actual semantic for input domain item</alt_text>
			</image>
		</paragraph>	
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/value_tester.jpg</url>
				<alt_text>Actual semantic for input domain item</alt_text>
			</image>
		</paragraph>
		<paragraph>In the above dialog, you can customize the value_of_metric_is criterion. A metric needs to be specified as well as its input domain. Sometimes, "Delayed item" is set in the input domain meaning that no matter what the current candidate code element is, use it as input domain to the selected metric and calculate that metric to see if it's value satisfies the given value testers which are also set in this dialog.</paragraph>			
		<paragraph>You can specify more than one value tester and they can be anded (when "Match all" is selected) or ored (when "Match any" is selected). if no value tester is set, the value_of_metric_is criterion always evaluates to True.</paragraph>
		<paragraph>This metric reads, for every class from application target, calculate metric <bold>Lines of code</bold> over that class (this is the usage of "Delayed item"),  and if the value of <bold>Lines of code</bold> over that class is larger than 1000, that class satisfies the <bold>value_of_metric_is</bold> criterion thus it's included in the result.</paragraph>
		<paragraph>Let's see another example of value_of_metric_is criterion which is more complicated and involves the use of the "Use external delayed domain" option.</paragraph>
		<paragraph>Suppose we are to construct a metric called <bold>Unused features</bold> which can finds unused features. First, it must be a feature metric because we want features in the result. Second, for every feature candidate, we want a predicate which evaluates to True if that candidate feature is not called by any feature.</paragraph>
		<paragraph>And this predicate is semantically equal to say: count all callers of the candidate feature and check if the value is zero. So now, we realize that we need a metric which returns the number of callers of a given feature.</paragraph>
		<paragraph>We can construct this feature metric as follows:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/callee_is.jpg</url>
				<alt_text>value criterion</alt_text>
			</image>
		</paragraph>
		<paragraph>Let's call it "callee_is" (note: here callee_is is a metric name instead of a criterion name). It uses "Delayed item" because we want that "Delayed item" to be replaced by the actual candidate feature at run-time.</paragraph>
		<paragraph>Then we can construct our <bold>Unused features</bold> metric as follows:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/unused_feature.jpg</url>
				<alt_text>value criterion</alt_text>
			</image>
		</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/unused_feature_criterion.jpg</url>
				<alt_text>value criterion</alt_text>
			</image>
		</paragraph>
		<paragraph>In this dialog, note that the "Use external delayed domain" option is checked. It has to be checked. Let's see why.</paragraph>
		<paragraph>This value_of_metric_is criterion should check this: for every candidate feature, test if the number of callers of that feature in current application target scope is zero.</paragraph>
 		<paragraph>Suppose now a feature named foo is the candidate feature.</paragraph>
		<paragraph>If the "Use external delayed domain" is not checked, then the metric <bold>callee_is</bold> is calculated over input domain {application target}. </paragraph>
 		<paragraph>So when calculate callee_is metric, every feature (let's call the current candidate feature <class_name>APPLICATION</class_name>.<feature_name>goo</feature_name>) from current application target is checked to see if it satisfies the criterion: callee_is {<class_name>APPLICATION</class_name>.<feature_name>goo</feature_name>} (the "Delayed item" is replaced by the current candidate feature). This is actually checking if a feature is called by itself.</paragraph>
 		<paragraph>As you can see, if "Use external delayed domain" option is not checked, during the period of value_of_metric_is criterion evaluation, the current feature candidate from the <bold>Unused features</bold> metrics is never involved. This of course yields wrong result.</paragraph>
 		<paragraph>Now we select the "Use external delayed domain" option. Recall that current candidate feature of metric <bold>Unused features</bold> is <class_name>APPLICATION</class_name>.<feature_name>foo</feature_name>.</paragraph>
		<paragraph>When the value_of_metric_is criterion is evaluated, the delayed item from metric <bold>callee_is</bold> is replaced by <class_name>APPLICATION</class_name>.<feature_name>foo</feature_name>. So the metric <bold>callee_is</bold> now is equal to:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/fake_callee_is.jpg</url>
				<alt_text>value criterion</alt_text>
			</image>
		</paragraph>
		<paragraph>which reads: calculate the number of callers of feature <class_name>APPLICATION</class_name>.<feature_name>foo</feature_name>. And the value_of_metric_is criterion is now semantically equal to: test if number of callers of <class_name>APPLICATION</class_name>.<feature_name>foo</feature_name> is zero. This is what we want.</paragraph>
		<paragraph>As we can see, when the option "Use external delayed domain" is selected, the delayed item from the criterion metric will be replaced by the current candidate code element. Otherwise, it will be replaced by the candidate element from criterion metric input domain when criterion metric is calculated.</paragraph>
	</paragraph>
	<heading>
		<size>2</size>
		<content>Normal Criterion</content>
	</heading>
	<paragraph>
		<bold>false</bold><line_break/>
		<bold>Syntax:</bold> false<line_break/>
		<bold>Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold> This criterion will always evaluate to False.<line_break/>
	</paragraph>
	<paragraph>	
		<bold>has_argument</bold><line_break/>
		<bold>Syntax:</bold> has_argument<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has arguments.<line_break/>
	</paragraph>
	<paragraph>			
		<bold>has_assertion</bold><line_break/>
		<bold>Syntax:</bold> has_assertion<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has any precondition or postcondition.<line_break/>
	</paragraph>
	<paragraph>			
		<bold>has_assigner</bold><line_break/>
		<bold>Syntax:</bold> has_assigner<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature (must be an attribute then) has assigner.<line_break/>
	</paragraph>
	<paragraph>			
		<bold>has_bottom_indexing</bold><line_break/>
		<bold>Syntax:</bold> has_bottom_indexing<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if candidate class has bottom indexing. <line_break/>
	</paragraph>
	<paragraph>
		<bold>has_comment</bold><line_break/>
		<bold>Syntax:</bold> has_comment<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if candidate feature has header comment.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_constraint</bold><line_break/>
		<bold>Syntax:</bold> has_constraint<line_break/>
		<bold>Applicable on:</bold> Generic<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate generic has constraint.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_creation_constraint</bold><line_break/>
		<bold>Syntax:</bold> has_creation_constraint<line_break/>
		<bold>Applicable on:</bold> Generic<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate generic has creation constraint<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_expression</bold><line_break/>
		<bold>Syntax:</bold> has_expression<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion has associated expression.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_indexing</bold><line_break/>
		<bold>Syntax:</bold> has_indexing<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class or feature has indexing clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_immediate_invariant</bold><line_break/>
		<bold>Syntax:</bold> has_immediate_invariant<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class has immediate invariant clause (not inherited invariant clause).<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_local</bold><line_break/>
		<bold>Syntax:</bold> has_local<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has locals defined in it.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_postcondition</bold><line_break/>
		<bold>Syntax:</bold> has_postcondition<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has immediate postconditions.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_precondition</bold><line_break/>
		<bold>Syntax:</bold> has_precondition<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has immediate preconditions.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_rescue</bold><line_break/>
		<bold>Syntax:</bold> has_rescue<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature has rescue clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_tag</bold><line_break/>
		<bold>Syntax:</bold> has_tag<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate has a descriptive tag associated with it.<line_break/>
	</paragraph>
	<paragraph>
		<bold>has_top_indexing</bold><line_break/>
		<bold>Syntax:</bold> has_top_indexing<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class has top indexing clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_always_compiled</bold><line_break/>
		<bold>Syntax:</bold> is_always_compiled<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is an always compiled class. Some basic class such as <class_name>INTEGER</class_name>, <class_name>REAL</class_name> are always compiled no matter whether they are used in an application. These class will cause is_always_compiled criterion evaluate to True.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_assembly</bold><line_break/>
		<bold>Syntax:</bold> is_assembly<line_break/>
		<bold>Applicable on:</bold> Group<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate group is an assembly.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_attribute</bold><line_break/>
		<bold>Syntax:</bold> is_attribute<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is an attribute.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_blank</bold><line_break/>
		<bold>Syntax:</bold> is_blank<line_break/>
		<bold>Applicable on:</bold> Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate line is blank.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_cluster</bold><line_break/>
		<bold>Syntax:</bold> is_cluster<line_break/>
		<bold>Applicable on:</bold> Group<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate group is a cluster.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_command</bold><line_break/>
		<bold>Syntax:</bold> is_command<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is a command.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_comment</bold><line_break/>
		<bold>Syntax:</bold> is_comment<line_break/>
		<bold>Applicable on:</bold> Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate line is comment line.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_compiled</bold><line_break/>
		<bold>Syntax:</bold> is_compiled<line_break/>
		<bold>Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate code element is compiled. Target, group are considered to be compiled once they are referenced by the application. Class (if it is not an always-compiled class) is considered to be compiled if it's used somewhere in the application. always-compiled class are always compiled. and the compilation status of generic, feature, assertion, argument local and line are determined by the compilation status of their written in class.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_constant</bold><line_break/>
		<bold>Syntax:</bold> is_constant<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is a constant.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_creator</bold><line_break/>
		<bold>Syntax:</bold> is_creator<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is a creator feature.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_deferred</bold><line_break/>
		<bold>Syntax:</bold> is_deferred<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is deferred<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_effective</bold><line_break/>
		<bold>Syntax:</bold> is_effective<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class or feature is effective.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_ensure</bold><line_break/>
		<bold>Syntax:</bold> is_ensure<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is in ensure clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_ensure_then</bold><line_break/>
		<bold>Syntax:</bold> is_ensure_then<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is in ensure then clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_enum</bold><line_break/>
		<bold>Syntax:</bold> is_enum<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is an enumeration. Only has effect on .NET platform, on other platforms, this criterion always evaluates to False.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_expanded</bold><line_break/>
		<bold>Syntax:</bold> is_expanded<line_break/>
		<bold>Applicable on:</bold> Class, Generic<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class or generic is expanded.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_exported</bold><line_break/>
		<bold>Syntax:</bold> is_exported<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is exported to ANY.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_external</bold><line_break/>
		<bold>Syntax:</bold> is_external<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class or feature is external.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_feature</bold><line_break/>
		<bold>Syntax:</bold> is_feature<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is real feature. In metrics tool, invariant is treated as a special kind of feature. So if you count features in a class, it's invariant clause will be included. is_feature criterion is used to filter invariant clause out.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_from_any</bold><line_break/>
		<bold>Syntax:</bold> is_from_any<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is from class <class_name>ANY</class_name>.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_frozen</bold><line_break/>
		<bold>Syntax:</bold> is_frozen<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is frozen.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_function</bold><line_break/>
		<bold>Syntax:</bold> is_function<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate is a function.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_generic</bold><line_break/>
		<bold>Syntax:</bold> is_generic<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is a generic class.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_hidden</bold><line_break/>
		<bold>Syntax:</bold> is_hidden<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is exported to <class_name>NONE</class_name>.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_immediate</bold><line_break/>
		<bold>Syntax:</bold> is_immediate<line_break/>
		<bold>Applicable on:</bold> Feature, Assertion, Argument, Local<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate code element is immediate instead of inherited.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_implementation_comment</bold><line_break/>
		<bold>Syntax:</bold> is_implementation_comment<line_break/>
		<bold>Applicable on:</bold> Line<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate line is implementation comment. Implementation comment is also called commented code. In Eiffel, the convention is that if the comment indicator "--" starts from the first column of a line, that line is an implementation comment line.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_infix</bold><line_break/>
		<bold>Syntax:</bold> is_infix<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is infix.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_invariant</bold><line_break/>
		<bold>Syntax:</bold> is_invariant<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is from invariant clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_invariant_feature</bold><line_break/>
		<bold>Syntax:</bold> is_invariant_feature<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is an invariant. See the description of criterion is_feature for more detail.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_library</bold><line_break/>
		<bold>Syntax:</bold> is_library<line_break/>
		<bold>Applicable on:</bold> Group<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate group is a library.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_obsolete</bold><line_break/>
		<bold>Syntax:</bold> is_obsolete<line_break/>
		<bold>Applicable on:</bold> Class, Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class or feature is obsolete.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_once</bold><line_break/>
		<bold>Syntax:</bold> is_once<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is once.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_origin</bold><line_break/>
		<bold>Syntax:</bold> is_origin<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is origin instead of a inherited one.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_override</bold><line_break/>
		<bold>Syntax:</bold> is_override<line_break/>
		<bold>Applicable on:</bold> Group<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate group overrides some other group.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_overriden</bold><line_break/>
		<bold>Syntax:</bold> is_overriden<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is overridden by some other class.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_overrider</bold><line_break/>
		<bold>Syntax:</bold> is_overrider<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class overrides some other class.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_partial</bold><line_break/>
		<bold>Syntax:</bold> is_partial<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is partical class. Only has effect on .NET platform, on other platforms, this criterion always evaluates to False.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_postcondition</bold><line_break/>
		<bold>Syntax:</bold> is_postcondition<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is a postcondition.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_precompiled</bold><line_break/>
		<bold>Syntax:</bold> is_precompiled<line_break/>
		<bold>Applicable on:</bold> Class<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is precompiled.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_precondition</bold><line_break/>
		<bold>Syntax:</bold> is_precondition<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is a precondition.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_prefix</bold><line_break/>
		<bold>Syntax:</bold> is_prefix<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate is a prefix.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_procedure</bold><line_break/>
		<bold>Syntax:</bold> is_procedure<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is a procedure.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_query</bold><line_break/>
		<bold>Syntax:</bold> is_query<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is a query.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_read_only</bold><line_break/>
		<bold>Syntax:</bold> is_read_only<line_break/>
		<bold>Applicable on:</bold> Class <line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate class is read-only.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_reference</bold><line_break/>
		<bold>Syntax:</bold> is_reference<line_break/>
		<bold>Applicable on:</bold> Generic<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate generic is reference.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_require</bold><line_break/>
		<bold>Syntax:</bold> is_require<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is in require clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_require_else</bold><line_break/>
		<bold>Syntax:</bold> is_require_else<line_break/>
		<bold>Applicable on:</bold> Assertion<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate assertion is in require else clause.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_satisfied_by</bold><line_break/>
		<bold>Syntax:</bold> is_satisfied_by command specification<line_break/>
		<bold>Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold>
		<paragraph>This criterion will invoke external command given in command specification to decide whether current item is evaluated to True. Placeholders are used as interface between current item and the external command. The following placeholders are supported:</paragraph>
		<paragraph>
		<list ordered="false">
			<item>$class_name: this will be replaced by class name of current item</item>
			<item>$directory_name: this will be replaced by the directory location of current item</item>
			<item>$file: this will be replaced by file name part, i.e., without heading directory, of $path of current item</item>
			<item>$file_name: this will be replaced by the path of current item</item>
			<item>$f_code: this will be replaced by the F_code directory of current target, if defined</item>
			<item>$group_directory: this will be replaced by the directory of the group of current item</item>
			<item>$group_name: this will be replaced by the group name of current item</item>
			<item>$path: same as $file_name</item>
			<item>$project_directory: this will be replaced by the directory of current project, if defined</item>
			<item>$target_directory: this will be replaced by the directory of current target, if defined</item>
			<item>$target_name: this will be replaced by name of current target, if defined</item>			
			<item>$w_code: this will be replaced by the W_code directory of current target, if defined</item>
		</list>
		</paragraph>
		<paragraph>Command specification can be set in the dialog associated to this criterion, shown in the following picture:
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/is_satisfied_by.png</url>
				<alt_text>system hierarchy</alt_text>
			</image>		
		</paragraph>
		<paragraph>
			<bold>Command name</bold><line_break/>
			External command is specified here. <line_break/>
			The command shown in the picture will test the subversion status of the current class (suppose we are running a class metric). The class path is given by "$path". And the output of the "svn stat $path" command is redirected to grep so we can check if the output starts with a letter "M" which indicates tha the class is changed locally.
		</paragraph>
		<paragraph>
			<bold>Workding directory</bold><line_break/>
			Working directory for the command is set here.
		</paragraph>
		<paragraph>
			<bold>Input</bold><line_break/>
			Input, if any, of the command is set here. <line_break/>
			If the option "As file name" is checked, the text specified is treated as a file name in which actual input is stored.
		</paragraph>
		<paragraph>
			<bold>Output</bold><line_break/>
			Expected output, if any, of the command is set here.<line_break/>
			If the option "As file name" is checked, the text specified is treated as a file name in which actual output is stored.<line_break/>
			If the option "Enabled" is not checked, the output will be ignored.
		</paragraph>
		<paragraph>
			<bold>Error</bold><line_break/>
			Expected error, if any, of the command is set here. <line_break/>
			If the option "As file name" is checked, the text specified is treated as a file name in which actual error is stored. <line_break/>
			If the option "Enabled" is not checked, the error will be ignored.<line_break/>
			If the option "Redirected to output" is checked, error of the command will be redirected to output.
		</paragraph>		
		<paragraph>
			<bold>Exit code</bold><line_break/>
			Expected exit code of the command is set here.<line_break/>
			If the option "Enabled" is not checked, the exit code will be ignored.<line_break/>			
		</paragraph>				
		<paragraph>
			In the above output, error, exit code sections, if more than one are enabled, they are treated as "and-ed". For example if output and exit code are enabled, this criterion is evaluated to True only if the actual output from the command matches the expected output and the exit code from the command matches the expected exit code.
		</paragraph>
	</paragraph>
	<paragraph>
		<bold>is_unique</bold><line_break/>
		<bold>Syntax:</bold> is_unique<line_break/>
		<bold>Applicable on:</bold> Feature<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate feature is an unique feature.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_used</bold><line_break/>
		<bold>Syntax:</bold> is_used<line_break/>
		<bold>Applicable on:</bold> Local<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate local is used.<line_break/>
	</paragraph>
	<paragraph>
		<bold>is_used_in_library</bold><line_break/>
		<bold>Syntax:</bold> is_used_in_library<line_break/>
		<bold>Applicable on:</bold> Group<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate group is used in some library instead of only referenced by current application.<line_break/>
	</paragraph>
	
	<paragraph>
		<bold>is_visible</bold><line_break/>
 		<bold>Syntax:</bold> is_visible<line_break/>
		<bold>Applicable on:</bold> Class, Generic, Feature, Assertion, Argument, Local<line_break/>
		<bold>Remark:</bold> This criterion will evaluate to True if the candidate code element is visible from the input domain of current calculated metric.<line_break/>
		Visibility of a class means that if that element is visible from the input domain of the metric. To explains it more clearly, let's see an example: <line_break/>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/system_hierarchy.jpg</url>
				<alt_text>system hierarchy</alt_text>
			</image>
		</paragraph>
 		<paragraph>The figure shows the group hierarchy of a Vision2 application. library <cluster_name>base</cluster_name> and <cluster_name>vision2</cluster_name> are used by the application. And notice that library <cluster_name>wel</cluster_name> is used internally by <cluster_name>vision2</cluster_name> library but not by the application. This means that classes defined in <cluster_name>wel</cluster_name> library is not visible to the application thus one cannot use those <cluster_name>wel</cluster_name> classes in application.</paragraph>
 		<paragraph>And if we create the following basic metric and run it with current application target as input domain:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/visible_metric.jpg</url>
				<alt_text>visible</alt_text>
			</image>
		</paragraph>
 		<paragraph>We'll get all classes in the application including those classes in <cluster_name>wel</cluster_name> library because every class is descendant of class <class_name>ANY</class_name>.</paragraph>
		<paragraph>But if we do things a little bit differently, we create the following metric and run it with current application target as input domain:</paragraph>
		<paragraph>
			<image>
				<url>../../../../../images/eiffelstudio/metrics_tool/visible_metric2.jpg</url>
				<alt_text>visible</alt_text>
			</image>
		</paragraph>
 		<paragraph>Then we will get all visible classes in current application target. i.e., those classes in <cluster_name>wel</cluster_name> library (any maybe some other invisible classes as well) are filtered out.</paragraph>
		<paragraph>Visibility of a generic, feature, assertion, argument, local is determined by its written in class. </paragraph>				
	</paragraph>	
		
	<paragraph>
 		<bold>true</bold><line_break/>
		<bold>Syntax:</bold> true<line_break/>
		<bold>Applicable on:</bold> Target, Group, Class, Generic, Feature, Assertion, Argument, Local, Line<line_break/>
		<bold>Remark:</bold> This criterion always evaluates to True.<line_break/>	
	</paragraph>	

</paragraph>
</document>
