system
	init_build

root
	project_initializer (root_cluster): "make"

default
--	precompiled ("$EIFFEL4\precomp\spec\$PLATFORM\vision");
--		rename
--			HASH_TABLE as NEW_HASH_TABLE
--		end;
	exception_trace (no);
	assertion (all);
	array_optimization (yes);
	profile (no);

cluster 

	root_cluster:					"$BUILD_SRC\build\project_initializer";

-- Build43dev
	
	new_stuff:						"$BUILD_SRC\build\new_stuff";
--	new_widget(new_stuff):			"$\new_widget";
	new_interface(new_stuff):		"$\new_interface";
	object_editor (new_stuff):		"$\object_editor";

--	new_library:					"$BUILD_SRC\new_library";

--	new_base (new_library):			"$\new_base";
	
--	new_vision (new_library):		"$\new_vision";
--	new_implement (new_vision):		"$\implement";
--	new_mswin (new_implement):		"$\mswin";
--	new_commands (new_mswin):		"$\commands";
--	new_mswin_widgets (new_mswin):	"$\widgets";
--	new_toolkit (new_implement):	"$\toolkit";
--	new_oui (new_vision):			"$\oui";
--	new_oui_widgets (new_oui):		"$\widgets";

-- EiffelBase

	base:							"$BUILD_SRC\library\base";
	structures (base):				"$\structures"
		default
			assertion (no)
		end;
	access (structures):			"$\access"
		default
			assertion (no)
		end;
	cursors (structures):			"$\cursors"
		default
			assertion (no)
		end;
	cursor_tree (structures):		"$\cursor_tree"
		default
			assertion (no)
		end;
	dispenser (structures):			"$\dispenser"
		default
			assertion (no)
		end;
	iteration (structures):			"$\iteration"
		default
			assertion (no)
		end;
	kernel (base):					"$\kernel"
		default
			assertion (no)
		end;
	list (structures):				"$\list"
		default
			assertion (no)
		end;
	set (structures):				"$\set"
		default
			assertion (no)
		end;
	sort (structures):				"$\sort"
		default
			assertion (no)
		end;
	storage (structures):			"$\storage"
		default
			assertion (no)
		end;
	support (base):					"$\support"
		default
			assertion (no)
		end;
	table (structures):				"$\table"
		default
			assertion (no)
		end;
	traversing (structures):		"$\traversing"
		default
			assertion (no)
		end;
	tree (structures):				"$\tree"
		default
			assertion (no)
		end;

 -- WEL
	wel:							"$BUILD_SRC\library\wel"
		default
			assertion (require)
		end;
	wel_constants (wel):			"$\consts"
		default
			assertion (require)
		end;
	wel_controls (wel):				"$\controls"
		default
			assertion (require)
		end;
--		option
--			assertion (no): WEL_CONTROL;
--		end;
	wel_gdi (wel):					"$\gdi"
		default
			assertion (require)
		end;
	wel_gdi_stocks (wel): 			"$\gdistock"
		default
			assertion (require)
		end;
	wel_standard_dialogs (wel):		"$\stddlgs"
		default
			assertion (require)
		end;
	wel_messages (wel):				"$\messages"
		default
			assertion (require)
		end;
	wel_structures (wel): 			"$\structs"
		default
			assertion (require)
		end;
	wel_support (wel):				"$\support"
		default
			assertion (require)
		end;
	wel_windows (wel):				"$\windows"
		default
			assertion (require)
		end; 

-- EiffelVision
 
	vision:                 "$BUILD_SRC\library\vision";
	vision_kernel (vision):         "$\oui\kernel"
		default
			assertion (require)
		end;
	vision_widgets (vision):        "$\oui\widgets"
		default
			assertion (require)
		end;
	vision_context_data (vision): "$\oui\context_data"
		default
			assertion (require)
		end;
 
	vision_figures (vision): "$\figures"
		default
			assertion (require)
		end;
	vision_tools (vision): "$\tools"
		default
			assertion (require)
		end;
 
-- Toolkit
	vision_toolkit (vision): "$\implement\toolkit"
		default
			assertion (require)
		end;
	vision_toolkit_kernel (vision_toolkit): "$\kernel"
		default
			assertion (require)
		end;
	vision_toolkit_widgets (vision_toolkit): "$\widgets"
		default
			assertion (require)
		end;
	vision_toolkit_support (vision_toolkit): "$\support"
		default
			assertion (require)
		end;
 
-- Implementation clusters for Ms Windows
	vision_imp (vision):          "$\implement\mswin"
		default
			assertion (require)
		end;
	vision_imp_kernel (vision_imp):         "$\kernel"
		default
			assertion (require)
		end;
	vision_imp_widgets (vision_imp):        "$\widgets"
		default
			assertion (require)
		end;
	vision_imp_support (vision_imp):        "$\support"
		default
			assertion (require)
		end;
	vision_imp_command (vision_imp):        "$\commands"
		default
			assertion (require)
		end;
	vision_obsolete_mswin (vision): "$\obsolete\mswin"
		default
			assertion (require)
		end;
	vision_obsolete_oui (vision):   "$\obsolete\oui"
		default
			assertion (require)
		end;
	vision_obsolete_toolkit (vision):"$\obsolete\toolkit"
		default
			assertion (require)
		end;

-- EiffelBuild clusters

	build:										"$BUILD_SRC\build";
	
-- 	build_eiffel (build):						"$\eiffel";
--	build_rescue (build_eiffel): 				"$\rescue";
--	build_shared (build_eiffel):				"$\shared";
-- 	build_ast (build_eiffel):					"$\AST";
-- 	build_special_ast (build_ast):				"$\special_ast";
--	build_skeleton (build_ast):					"$\skeleton";

-- 	build_merger (build):						"$\merger";

	build_shared (build):						"$\Shared"
		exclude
			"shared_application.e";
			"shared_context.e";
			"shared_events.e";
			"shared_namer.e";
			"shared_predef_coms.e";
			"shared_storage_info.e";
			"shared_translations.e"
		end;

-- 	build_catalog (build):						"$\Catalog";
-- 	build_catalog_commands (build_catalog):		"$\Commands";
-- 
-- 	build_utility (build):						"$\Utility";

	build_constants (build):					"$\Constants";

	build_menus (build):						"$\Menus";

-- 	build_icon (build):							"$\Icon";
-- 
-- 	build_structures (build):					"$\Structures";
-- 
--  	build_windows (build):						"$\Windows"
-- 		exclude
-- 			"windows.e"
-- 		end;
-- 
-- 	build_window_mgr (build):					"$\WindowMgr";
-- 
-- 	build_liman (build):						"$\liman\build";
--	build_liman_common (build):					"$\liman\common";
--	build_liman_graphical (build):				"$\liman\common\graphical";

-- 	build_storage (build):						"$\Storage";
-- 	build_storage_command (build_storage):		"$\Command";
-- 	build_storage_context (build_storage):		"$\Context";
-- 	build_storage_control (build_storage):		"$\Control";
-- 	build_storage_function (build_storage):		"$\Function";;
-- 	build_storage_application (build_storage):	"$\Application";

-- 	build_generation (build):					"$\Generation";

-- 	build_transport (build):					"$\Transport";

-- 	build_context (build): 						"$\Context";
-- 	build_context_commands (build_context):		"$\Commands";
-- 	build_context_editor (build_context):		"$\Editor";
-- 	build_context_catalog (build_context):		"$\Catalog";
-- 	build_context_widgets (build_context):		"$\Widgets";
-- 	build_context_new_widgets (build_context):	"$\NewWidgets";
-- 	build_context_tree (build_context):	"$\Tree";

-- 	build_application (build):					"$\Application";
-- 	build_application_control (build_application):	"$\Control";
-- 	build_application_commands (build_application):	"$\Commands";
-- 
-- 	build_event (build):						"$\Event";

-- 	build_function (build):						"$\Function";
-- 	build_function_commands (build_function):	"$\Commands";
-- 	build_function_editor (build_function):		"$\Editor";
-- 	build_function_functions (build_function):	"$\Functions";
-- 	build_function_holes (build_function):		"$\Holes";
-- 	build_function_stones (build_function):		"$\Stones";
-- 	build_function_icon_box (build_function):	"$\IconBox";

-- 	build_command (build):						"$\Command";
-- 	build_command_catalog (build_command):		"$\Catalog";
-- 	build_command_commands (build_command):		"$\Commands";
-- 	build_command_editor (build_command):		"$\Editor";
-- 	build_command_predef (build_command):		"$\Predef";
-- 	build_command_stones (build_command):		"$\Stones";
-- 	build_command_instance (build_command):		"$\Instance";

-- 	build_patches (build):						"$\patches";
	
-- Common

	common:										"$BUILD_SRC\common";
	
        -- API cluster
	common_api (common):  						"$\eiffel\API";

	common_constants(common_api):				"$\constants"; 
	      -- Error processing
	common_error_common(common_api):			"$\error\common"
		exclude
			"syntax_error.e" 
		end;

	common_structured_text (common_api):		"$\structured_text"; 	

	common_shared(common_api):        "$\shared";
--	api_ids(api):           "$\ids";
-- 	api_queries(api):       "$\queries";
--	api_interface(api):     "$\interface";
--  	api_common(api):        "$\common";
--	communication(api):     "$\no_communication";
--      output(api):            "$\output";
--      evaluated_type(api):    "$\evaluated_type";



--	eiffel_expressions (build):	"$\eiffel\AST\expressions";
--	eiffel_instructions (build):	"$\eiffel\AST\instructions";
--	eiffel_stonables (build):	"$\eiffel\AST\stonables";
--	eiffel_skeleton (build):	"$\eiffel\AST\skeleton";
--	eiffel_error (build):		"$\eiffel\error";; -- ~\sr	from bench: Eiffel\API\error\common
--	eiffel_flatshort (common):	"$\eiffel\flat_short"; -- Part of this is in flat_short

	common_eiffel (common):						"$\eiffel";
--	common_const (common_eiffel):				"$\const" -- from bench: Eiffel\const\
--		default
--  			assertion(no);
--		end;

	common_lace_env (common_eiffel):			"$\lace\env";
--		default
--			assertion(no);
--		end;
	common_yacc (common_eiffel):				"$\yacc"; -- Eiffel\yacc
--		default
--			assertion(no);
--		end;

	--These seem to be build specific
--	eiffel_rescue (build):		"$\eiffel\rescue"; -- these classes are in patches
--	eiffel_shared (build):		"$\eiffel\shared"; -- these classes are in patches
	eiffel_clicking (build):					"$\eiffel\shared\clicking";

-- Patches from case: syntax_error, compiler_exporter
	case_patches:	"$BUILD_SRC\case\eiffel\patches";
--              exclude
--                    "syntax_error.e" 
--        end;
-- Patches from build: syntax_error
--	patches (build):	"$\patches";

	common_resources (common):					"$\resources"
		default
			assertion (require)
		end;
	common_parser (common):						"$\parser";
	common_parser_ast (common_parser):			"$\AST";
	common_skeleton (common_parser_ast):		"$\skeleton";
--		exclude
--			"access_assert_as.e";
--			"access_feat_as.e";
--			"access_id_as.e"
--		end;
	common_expressions (common_parser_ast):		"$\expressions";
	common_instructions (common_parser_ast):	"$\instructions";
	common_clickable (common_parser_ast):		"$\clickable";

	common_flat_short (common_parser):			"$\flat_short"
		default
			assertion (no)
		end;

	liman:										"$BUILD_SRC\limand";

--	liman_bench(liman):							"$\bench";
	liman_abstract(liman):						"$\abstract";
--	win time_lock(liman):						"$\time_lock";--win
	liman_graphical(liman):						"$\graphical";
--	liman_shared(liman):						"$\shared";--unix
--	liman_client(liman):						"$\client";--unix

-- Eiffel Bench Clusters

	bench: 										"$BUILD_SRC\Eiffel";

	bench_eiffel (bench):						"$\eiffel";
--	bench_interface (bench_eiffel): 			"$\interface";
--	bench_shared (bench_eiffel):				"$\shared";
	bench_ast (bench_eiffel):					"$\AST";
	bench_clickable (bench_ast):				"$\clickable";
	bench_skeleton (bench_ast):					"$\skeleton";
	bench_compiler (bench_eiffel):				"$\compiler"
		exclude
			"counter.e"
		end;
	bench_genericity (bench_eiffel):			"$\genericity";
	bench_server (bench_eiffel):				"$\server";

	bench_API (bench):							"$\API";

	bench_error (bench_API):					"$\error";
	bench_API_eiffel (bench_error):				"$\eiffel";

--	bench_parents (bench_API_eiffel):			"$\parents";

--	bench_API_interface (bench_API):			"$\interface";

	bench_ids (bench_API):						"$\ids";

	bench_evaluated_type (bench_API):			"$\evaluated_type";

	bench_output (bench_API):					"$\output";

	bench_const (bench):						"$\const";
	

external
	include_path: 	
			"$(BUILD_SRC)\C\parsing\shared",
			"$(BUILD_SRC)\library\wel\spec\windows\include",
			"$(BUILD_SRC)\library\wel\Clib";

	object:
			"$(BUILD_SRC)\library\wel\spec\msc\lib\wel.lib",
			"$(BUILD_SRC)\C\parsing\eiffel\weiffel.lib",
			"$(BUILD_SRC)\C\parsing\lace\lace.lib",
			"$(BUILD_SRC)\C\parsing\shared\parsing.lib",
			"$(BUILD_SRC)\C\platform\platform.lib";
end


