WIDGET     : Drawing Area
DESCRIPTION: Special area to draw.

CLIENT INTERFACE:
-----------------

class interface
	DRAWING_AREA

creation 
	make

feature

	add_expose_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to execute when
			-- current area is exposed.
			-- (from DRAWING)
		require -- from DRAWING
			exists: not destroyed;
			not_a_command_void: not (a_command = void)
		
	clear
			-- Clear the entire area.
			-- (from DRAWING)
		require -- from DRAWING
			exists: not destroyed
		
	remove_expose_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command from the list of action to execute when
			-- current area is exposed.
			-- (from DRAWING)
		require -- from DRAWING
			exists: not destroyed;
			not_a_command_void: not (a_command = void)
		
		require else -- from DRAWING
			other_exists: not (other = void)
		
	set_clip (a_clip: CLIP)
			-- Set a clip area.
			-- (from DRAWING)
		require -- from DRAWING
			exists: not destroyed;
			a_clip_exists: not (a_clip = void)
		
	set_no_clip
			-- Remove all clip area.
			-- (from DRAWING)
		require -- from DRAWING
			exists: not destroyed
		
	add_input_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when
			-- a key is pressed or when a mouse button is pressed.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
		require
			exists: not destroyed;
			valid_command: a_command /= void
		
	add_resize_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when
			-- current area is resized.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
		require
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_input_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command with argument from the list of action
			-- to be executed when a key is pressed or when a mouse button
			-- is pressed.
		require
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_resize_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command with argument from the list of action
			-- to be executed when current area is resized.
		require
			exists: not destroyed;
			valid_command: a_command /= void
		
feature  -- Color

	foreground_color: COLOR
			-- Foreground color of Current widget
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed
		ensure -- from PRIMITIVE
			valid_result: Result /= void
		
	set_foreground_color (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed;
			valid_color: new_color /= void
		ensure -- from PRIMITIVE
			foreground_set: foreground_color = new_color
		
feature  -- Widget hierarchy

	parent: COMPOSITE
			-- Parent of Current widget
			-- (from PRIMITIVE)
		require -- from STACKABLE
			exists: not destroyed
		
invariant
	-- from PRIMITIVE
	has_parent: not destroyed implies parent /= void;
	
end -- class DRAWING_AREA
