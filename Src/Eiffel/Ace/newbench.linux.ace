system
	"ec"

root
	EB_KERNEL: make

default
	assertion (check)
	assertion (require)
	assertion (ensure)
	disabled_debug (yes)
	disabled_debug ("activity")
	disabled_debug ("actual_replication")
	disabled_debug ("anchored_features")
	disabled_debug ("assertion")
	disabled_debug ("assertions")
	disabled_debug ("auto_completion")
	disabled_debug ("c_debugger")
	disabled_debug ("cache")
	disabled_debug ("cache_compiler")
	disabled_debug ("cache_research")
	disabled_debug ("cache_server")
	disabled_debug ("cache_stat")
	disabled_debug ("cecil")
	disabled_debug ("check_expanded")
	disabled_debug ("class_of_id")
	disabled_debug ("count")
	disabled_debug ("dbg_trace")
	disabled_debug ("dead_code")
	disabled_debug ("dead_code_removal")
	disabled_debug ("debbugger_hook")
	disabled_debug ("debug_recv")
	disabled_debug ("debugger")
	disabled_debug ("debugger_caching")
	disabled_debug ("debugger_eifnet_data")
	disabled_debug ("debugger_evaluator")
	disabled_debug ("debugger_hook")
	disabled_debug ("debugger_interface")
	disabled_debug ("debugger_trace")
	disabled_debug ("debugger_trace_breakpoint")
	disabled_debug ("debugger_trace_cache")
	disabled_debug ("debugger_trace_callstack")
	disabled_debug ("debugger_trace_eval")
	disabled_debug ("debugger_trace_eval_data")
	disabled_debug ("debugger_trace_synchro")
	disabled_debug ("display_exception_trace")
	disabled_debug ("dle topo")
	disabled_debug ("document")
	disabled_debug ("dollar")
	disabled_debug ("editor")
	disabled_debug ("eiffelnet")
	disabled_debug ("es_dockable_notebook")
	disabled_debug ("es_grid_layout")
	disabled_debug ("es_grid_layout_positioning")
	disabled_debug ("ev_gtk_creation")
	disabled_debug ("filters")
	disabled_debug ("fixme")
	disabled_debug ("flat_short")
	disabled_debug ("flush_file")
	disabled_debug ("formal_generic")
	disabled_debug ("gelex")
	disabled_debug ("genericity")
	disabled_debug ("geyacc")
	disabled_debug ("has_calls")
	disabled_debug ("hector")
	disabled_debug ("larry")
	disabled_debug ("lex_output")
	disabled_debug ("local_feat_adaptation")
	disabled_debug ("log_exceptions")
	disabled_debug ("once")
	disabled_debug ("optimization")
	disabled_debug ("options")
	disabled_debug ("parse")
	disabled_debug ("profile_convert")
	disabled_debug ("refactor_fixme")
	disabled_debug ("regexp")
	disabled_debug ("remove_class")
	disabled_debug ("replication")
	disabled_debug ("server")
	disabled_debug ("show_prof_query")
	disabled_debug ("timing")
	disabled_debug ("to_implement")
	disabled_debug ("trace_table")
	disabled_debug ("transfer")
	disabled_debug ("update_on_idle")
	disabled_debug ("verbose")
	disabled_debug ("xml_input_stream")
	disabled_debug ("xml_parser")
	debug (no)
	line_generation (no)
	profile (no)
	trace (no)
	override_cluster ("override")
	check_vape (yes)
	console_application (no)
	syntax_warning (yes)
	address_expression (no)
	array_optimization (no)
	dead_code_removal (yes)
	dynamic_runtime (no)
	exception_trace (yes)
	inlining (yes)
	inlining_size ("0")
	multithreaded (yes)


cluster
	override:		"$EIFFEL_SRC/Eiffel/override"


	all base:		"$EIFFEL_SRC/library/base"
		exclude
			"table"; ".svn";
		end

	table_eiffel_3:		"$EIFFEL_SRC/library/obsolete/base/table_eiffel3"

	events:		"$EIFFEL_SRC/library/event"

	all vision:		"$EIFFEL_SRC/library/vision2"
		exclude
			".svn"; "mswin"; "obsolete"; "gtk2";
		end

	all net:		"$EIFFEL_SRC/library/net"
		exclude
			".svn";
		end

	all time:		"$EIFFEL_SRC/library/time"
		exclude
			".svn"; "french"; "german";
		end

	beurk:		"$EIFFEL_SRC/Eiffel/beurk"

	all editor:		"$EIFFEL_SRC/library/editor"
		exclude
			".svn"; "eiffel"; "text_formatter.e"; "structured_text.e";
		end

	compiler_support:		"$EIFFEL_SRC/Eiffel/support"

	all parser:		"$EIFFEL_SRC/Eiffel/parser"
		exclude
			".svn"; "compiler_override"; "error";
		end

	flat_short_b:		"$EIFFEL_SRC/Eiffel/flat_short/bench"

	observer:		"$EIFFEL_SRC/library/patterns/observer"

	all gobo:		"$EIFFEL_SRC/library/gobo/library"
		exclude
			".svn"; "hact"; "se"; "ve"; "base"; "other"; "free_elks";
		end

	all case:		"$EIFFEL_SRC/Eiffel/case"
		exclude
			".svn";
		end

	all compiler:		"$EIFFEL_SRC/Eiffel/eiffel"
		exclude
			".svn"; "com_il_generation"; "kernel"; "windows";
		end

	all compiler_api:		"$EIFFEL_SRC/Eiffel/API"
		exclude
			".svn";
		end

	switch:		"$EIFFEL_SRC/Eiffel/switch"

	interface_switch (switch):		"$/interface/new_graphical"

	license_switch (switch):		"$/license/license"

	communications (switch):		"$/communication"

	all status (communications):		"$/status"
		exclude
			".svn"; "dotnet";
		end

	ipc (communications):		"$/ipc"

	debuging_class (communications):		"$/debug"

	debuging_formatters (communications):		"$/formatters"

	io_watcher (communications):		"$/spec/gtk"

	all lex:		"$EIFFEL_SRC/library/lex"
		exclude
			".svn";
		end

	all interface:		"$EIFFEL_SRC/Eiffel/interface"
		exclude
			".svn"; "graphical"; "win32"; "mswin"; "tty"; "Not_in_System"; "registry"; "preferences"; "dotnet";
		end

	all preferences:		"$EIFFEL_SRC/library/preferences"
		exclude
			".svn"; "registry_implementation";
		end

	all tty (interface):		"$/tty"
		exclude
			".svn"; "eb_diagram_html_generator.e"; "eb_gui_preferences.e";
		end

	all cli_writer:		"$EIFFEL_SRC/Eiffel/library/cli_writer"
		exclude
			"md_strong_name.e"; "md_public_key.e";
		end

	dotnet_helpers:		"$EIFFEL_SRC/dotnet/helpers"

	dotnet_logger:		"$EIFFEL_SRC/dotnet/helpers/logger/classic"

	all eac_components:		"$EIFFEL_SRC/dotnet/consumer/components"
		exclude
			".svn";
		end

	all eac_serialization:		"$EIFFEL_SRC/dotnet/consumer/serialization"
		exclude
			".svn";
		end

	eac_documentation:		"$EIFFEL_SRC/dotnet/eac_browser/src/deserialization/assembly_informations"

	all graph:		"$EIFFEL_SRC/library/graph"
		exclude
			".svn";
		end

	all memory_analyzer:		"$EIFFEL_SRC/library/memory_analyzer"
		exclude
			".svn";
		end

	all process:		"$EIFFEL_SRC/library/process"
		exclude
			".svn"; "dotnet"; "windows";
		end

	all vision2_extension:		"$EIFFEL_SRC/library/vision2_extension/independent"
		exclude
			".svn"; "mswin";
		end

	all thread:		"$EIFFEL_SRC/library/thread"
		exclude
			".svn";
		end

	all diff:		"$EIFFEL_SRC/library/diff"
		exclude
			".svn";
		end

	all uuid:		"$EIFFEL_SRC/library/uuid"
		exclude
			".svn";
		end

	all configuration:	"$EIFFEL_SRC/Eiffel/library/configuration"
		exclude
			".svn"; "dotnet";
		end

	all merger:		"$EIFFEL_SRC/tools/partial_classes_merger/src"
		exclude
			".svn"; "EIFGEN";
		end

external

	include_path:
		"\$(EIFFEL_SRC)/C/bench",
		"\$(EIFFEL_SRC)/C/platform",
		"\$(EIFFEL_SRC)/library/event/Clib",
		"\$(EIFFEL_SRC)/library/vision2/spec/include",
		"\$(EIFFEL_SRC)/library/vision2/implementation/gtk/Clib `$EIFFEL_SRC/library/vision2/implementation/gtk/Clib/vision2-gtk-config --include_path`",
		"\$(EIFFEL_SRC)/C_library/libpng",
		"\$(EIFFEL_SRC)/C_library/zlib",
		"\$(EIFFEL_SRC)/library/process/classic/unix/Clib"

	object:
		"$(EIFFEL_SRC)/C/bench/libmtcompiler.a",
		"$(EIFFEL_SRC)/C/ipc/ewb/libmtewb.a",
		"$(EIFFEL_SRC)/C/ipc/shared/libipc.a",
		"$(EIFFEL_SRC)/C/platform/libplatform.a",
		"$(EIFFEL_SRC)/library/event/spec/$(ISE_PLATFORM)/lib/io_watcher.o",
		"$(EIFFEL_SRC)/library/net/spec/$(ISE_PLATFORM)/lib/libmtnet.a",
		"`$(EIFFEL_SRC)/library/vision2/implementation/gtk/Clib/vision2-gtk-config --object`"

end
