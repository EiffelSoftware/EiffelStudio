#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 13 "parser.y"
#include "eiffel_c.h"
#include <stdio.h>

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2
#define SET_POS(x) yacc_position = x

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];
/* extern int yacc_current_position; */

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2

#line 40 "parser.y"
typedef union {
	char *node;
	int32  value;
	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
#line 43 "y.tab.c"
#define TE_DOTDOT 257
#define TE_IMPLIES 258
#define TE_OR 259
#define TE_XOR 260
#define TE_AND 261
#define TE_NE 262
#define TE_EQ 263
#define TE_LT 264
#define TE_GT 265
#define TE_LE 266
#define TE_GE 267
#define TE_PLUS 268
#define TE_MINUS 269
#define TE_STAR 270
#define TE_SLASH 271
#define TE_MOD 272
#define TE_DIV 273
#define TE_POWER 274
#define TE_FREE 275
#define TE_NOT 276
#define TE_STRIP 277
#define TE_OLD 278
#define TE_DOT 279
#define TE_LPARAN 280
#define TE_ALIAS 281
#define TE_ALL 282
#define TE_INTEGER 283
#define TE_CHAR 284
#define TE_REAL 285
#define TE_STRING 286
#define TE_ID 287
#define TE_A_BIT 288
#define TE_BANG 289
#define TE_BIT 290
#define TE_SEMICOLON 291
#define TE_COLON 292
#define TE_COMMA 293
#define TE_CREATION 294
#define TE_LARRAY 295
#define TE_RARRAY 296
#define TE_RPARAN 297
#define TE_LCURLY 298
#define TE_RCURLY 299
#define TE_LSQURE 300
#define TE_RSQURE 301
#define TE_CONSTRAIN 302
#define TE_FALSE 303
#define TE_TRUE 304
#define TE_ACCEPT 305
#define TE_ADDRESS 306
#define TE_AS 307
#define TE_ASSIGN 308
#define TE_CHECK 309
#define TE_CLASS 310
#define TE_CURRENT 311
#define TE_DEBUG 312
#define TE_DEFERRED 313
#define TE_DO 314
#define TE_ELSE 315
#define TE_ELSEIF 316
#define TE_END 317
#define TE_ENSURE 318
#define TE_EXPANDED 319
#define TE_EXPORT 320
#define TE_EXTERNAL 321
#define TE_FEATURE 322
#define TE_FROM 323
#define TE_FROZEN 324
#define TE_IF 325
#define TE_INDEXING 326
#define TE_IN_END 327
#define TE_INFIX 328
#define TE_INHERIT 329
#define TE_INSPECT 330
#define TE_INVARIANT 331
#define TE_IS 332
#define TE_LIKE 333
#define TE_LOCAL 334
#define TE_LOOP 335
#define TE_OBSOLETE 336
#define TE_ONCE 337
#define TE_PREFIX 338
#define TE_REDEFINE 339
#define TE_RENAME 340
#define TE_REQUIRE 341
#define TE_RESCUE 342
#define TE_RESULT 343
#define TE_RETRY 344
#define TE_SELECT 345
#define TE_SEPARATE 346
#define TE_THEN 347
#define TE_UNDEFINE 348
#define TE_UNIQUE 349
#define TE_UNTIL 350
#define TE_VARIANT 351
#define TE_WHEN 352
#define EIF_ERROR2 353
#define EIF_ERROR3 354
#define EIF_ERROR4 355
#define EIF_ERROR5 356
#define EIF_ERROR6 357
#define EIF_ERROR7 358
#define YYERRCODE 256
short yylhs[] = {                                        -1,
  108,    0,   96,    1,  110,    1,    1,  109,  109,  113,
    3,    2,    2,  112,  112,    5,    5,  107,  107,  107,
  107,   14,   14,   74,  114,   74,   16,   16,  115,  117,
   15,   17,   17,   88,  119,   88,  118,  118,  116,  116,
  111,  111,  120,  121,   18,  103,  103,   99,  122,  122,
  100,  100,  100,  101,  102,   97,   98,   19,  106,  106,
  105,  105,  105,   20,  124,   20,   20,  123,  123,   21,
   21,   21,   45,   45,   22,   22,  126,   22,  125,  125,
   75,   23,  128,   23,   23,  127,  127,   24,   25,  130,
   25,  129,  129,   26,   26,  131,   26,   27,   27,  132,
   27,   28,   28,  133,   28,   29,   29,  135,   29,  134,
  134,  137,  138,   76,  136,  136,  139,  139,   30,   30,
  140,   31,   32,   32,   32,   33,  141,   34,   35,   35,
  143,   36,  144,   36,   37,  145,   37,  142,  142,  147,
  147,  146,  146,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   38,  148,   38,  149,   38,   40,  150,
   40,  151,   40,  153,   79,  152,  152,  154,  154,   41,
   41,   41,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   43,   43,   44,  156,   44,  155,  155,   46,
  158,   46,  157,  157,  157,  159,   47,   48,   48,  160,
  161,  162,   49,   50,  164,   50,  163,  163,  165,   51,
   94,  166,   94,   52,  167,   52,  168,  170,  171,   54,
  169,  169,  173,  174,  175,   53,  172,  172,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,  176,  177,
  178,  179,   55,   56,   56,   91,  180,   91,   57,   57,
   57,  181,  182,   58,   59,   59,  184,   59,  183,  183,
   60,   61,  185,   61,   62,   62,   63,   63,   64,  187,
   64,  186,  186,   65,  188,   65,   65,   66,   67,   67,
   68,   68,   69,   69,   77,   77,   77,   77,   77,  189,
   78,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
  190,   70,   71,   71,   71,   71,   71,   92,   84,   84,
   84,   84,   84,   84,   84,   82,   81,   83,   93,   85,
   85,   89,   89,   80,   90,   86,   86,  192,   86,  191,
  191,  193,  193,  194,  194,    4,    6,    6,    6,    6,
    6,    6,   87,   87,   87,   87,   87,   87,    7,    7,
    8,    9,   95,   95,   95,   10,   11,   13,   13,   12,
  195,   72,  104,
};
short yylen[] = {                                         2,
    0,   12,    1,    0,    0,    3,    1,    1,    3,    0,
    3,    0,    2,    1,    3,    1,    1,    0,    1,    1,
    1,    0,    2,    0,    0,    2,    1,    2,    0,    0,
    5,    0,    1,    2,    0,    4,    1,    3,    0,    2,
    1,    0,    0,    0,    5,    1,    3,    2,    0,    1,
    1,    1,    1,    2,    2,    1,    1,    3,    0,    2,
    1,    1,    1,    0,    0,    3,    2,    2,    3,    2,
    3,    8,    0,    1,    0,    1,    0,    3,    1,    3,
    3,    0,    0,    3,    2,    2,    3,    2,    1,    0,
    2,    1,    3,    0,    1,    0,    3,    0,    1,    0,
    3,    0,    1,    0,    3,    0,    2,    0,    4,    0,
    2,    0,    0,    6,    1,    3,    0,    1,    0,    2,
    0,    8,    1,    1,    1,    3,    0,    2,    0,    2,
    0,    3,    0,    3,    0,    0,    3,    4,    1,    2,
    0,    4,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    0,    3,    0,    4,    0,    0,
    3,    0,    4,    0,    2,    0,    1,    3,    4,    1,
    3,    2,    1,    2,    2,    3,    2,    3,    2,    2,
    2,    2,    1,    2,    2,    0,    4,    1,    3,    0,
    0,    4,    0,    1,    3,    0,    3,    0,    2,    0,
    0,    0,   10,    0,    0,    2,    1,    2,    0,    5,
    0,    0,    3,    0,    0,    3,    0,    0,    0,    8,
    0,    2,    0,    0,    0,    7,    1,    3,    1,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    0,    0,
    0,    0,   13,    0,    2,    0,    0,    3,    0,    4,
    2,    0,    0,    6,    0,    2,    0,    4,    1,    3,
    1,    0,    0,    3,    3,    3,    3,    3,    0,    0,
    2,    1,    2,    1,    0,    4,    2,    5,    0,    1,
    1,    1,    0,    3,    1,    1,    1,    1,    1,    0,
    4,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    4,    3,    4,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    2,    2,    2,    2,    2,
    0,    5,    1,    2,    4,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    5,    1,
    1,    3,    3,    2,    2,    0,    2,    0,    4,    1,
    3,    1,    3,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    0,    1,    1,    2,    1,    1,    1,    1,
    0,    4,    0,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,   19,   20,   21,    1,  356,   10,
    8,    0,    0,    0,    0,   13,   41,    0,    0,  374,
  375,  371,  378,  377,  369,  370,  379,   16,   14,   17,
  357,  358,  359,  360,  361,  362,    0,    0,    9,    3,
    0,  372,  376,    0,  191,    0,   15,    0,    0,    0,
  196,  194,    0,   23,    0,    0,    0,    0,  192,   67,
    0,    0,    0,    0,  197,  195,    0,    0,    0,    0,
    0,    0,  272,    0,  199,    0,   68,    0,   74,    0,
    0,  247,    0,   29,   27,    0,    0,  275,    0,  273,
  184,  185,    0,   71,    0,    0,   69,  164,    2,    0,
   28,   34,    0,    0,    0,    0,    0,    0,  188,    0,
    0,    0,    0,    0,  248,    0,   30,   33,   37,    0,
    0,    0,   51,   92,   52,   53,    0,  180,  179,    0,
    0,  182,  181,    0,  174,    0,  187,   79,    0,    0,
   85,    0,    0,    0,    0,  165,    0,   39,    0,   36,
   56,   54,   57,   55,    0,  176,  178,  189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  328,    0,
  321,    0,    0,  365,  366,  381,    0,    0,    0,  363,
  364,  367,  368,    0,    0,  293,    0,  330,  329,  331,
  294,  292,    0,  335,    0,    0,   38,   93,   81,   80,
   86,   89,   88,    0,    0,    0,    0,    0,    0,    0,
  317,  316,  318,    0,  319,    0,    0,    0,    0,    0,
    0,  344,  168,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  320,    0,   40,    0,    0,   87,    0,    0,
   72,    0,    0,    0,    0,    0,    0,  336,  340,    0,
  337,  347,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  315,  338,  169,   50,   46,    0,    0,
    0,  115,    0,    0,    0,    0,  382,  345,    0,    0,
    0,  350,    0,    0,    0,    0,    0,   48,    0,  322,
  339,    0,  343,    0,    0,  326,  327,  324,    0,  349,
   47,    0,    0,    0,  116,    0,  351,  107,  110,   45,
    0,    0,  325,    0,  120,    0,   58,  109,  111,    0,
   62,   61,  121,   63,   60,    0,    0,    0,    0,    0,
    0,  157,  164,  136,    0,    0,  164,  156,  110,  125,
  131,  127,  133,    0,  124,  123,  114,  158,    0,  141,
    0,    0,  141,    0,    0,  132,  383,    0,    0,  126,
  380,  128,  134,  162,  164,  263,    0,    0,  140,  130,
  164,  161,  141,  122,    0,    0,    0,    0,  261,    0,
  141,  148,  149,  150,  151,  153,  146,  147,  144,  145,
  152,    0,  286,  288,  287,  289,    0,    0,    0,    0,
    0,  163,  264,    0,  280,    0,    0,    0,    0,    0,
    0,    0,    0,  240,    0,  164,    0,    0,    0,    0,
    0,    0,    0,    0,  141,    0,  253,    0,  282,  281,
    0,  201,    0,  241,  256,    0,  141,  291,    0,  278,
  141,  223,    0,  219,    0,  259,    0,    0,    0,  202,
    0,  222,    0,  164,    0,    0,  258,  254,  284,    0,
    0,    0,    0,  227,    0,  212,    0,  245,    0,    0,
  260,    0,    0,    0,    0,    0,    0,    0,  141,  220,
    0,    0,    0,  215,    0,    0,  207,    0,  235,  237,
  234,  238,  236,  233,  232,  228,  225,  213,    0,    0,
  141,  203,    0,  208,  141,    0,  242,  216,  209,  226,
  141,  141,    0,  210,  243,
};
short yydgoto[] = {                                       2,
    3,   10,   11,  210,   29,   30,  180,  181,   33,   34,
  182,  382,  183,   50,   85,   86,   88,  245,  323,   56,
   67,   96,  114,  161,  203,  144,  166,  209,  324,  332,
  344,  364,  365,  371,  380,  366,  355,  350,  401,  375,
  184,  109,   75,   79,   80,   46,   52,   65,  402,  492,
  507,  505,  463,  403,  404,  475,  490,  405,  447,  406,
  387,  407,  408,   62,   73,  409,  426,  451,  460,  185,
  302,  186,  484,   70,  138,  339,  410,  411,  115,  187,
  188,  189,  190,  191,  258,  222,  192,  162,  259,  260,
   83,  193,  194,  487,  130,  123,  152,  154,  288,  124,
  125,  126,  289,  145,  345,  337,    8,   14,   13,    4,
   18,   38,   15,   71,  100,  196,  148,  120,  103,  246,
  307,  290,   69,   61,  140,  112,  163,  142,  127,  204,
  164,  207,  250,  334,  329,  293,  340,  348,  294,  347,
  372,  376,  370,  373,  359,  377,  378,  353,  357,  385,
  391,  146,  116,  147,  111,   93,   53,   48,   57,  417,
  461,  480,  508,  493,  532,  499,  521,  418,  464,  453,
  473,  485,  471,  498,  525,  419,  445,  465,  531,   98,
  420,  457,  467,  456,  393,   74,   63,  104,  421,  214,
  303,  263,  255,  256,  217,
};
short yysindex[] = {                                   -311,
    0,    0, -139, -261,    0,    0,    0,    0,    0,    0,
    0, -235, -195, -234,  191,    0,    0, -261, -175,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61, -150,    0,    0,
 -138,    0,    0,  191,    0, -163,    0, -109, -264, -137,
    0,    0,  -64,    0, -195,    0,  -99, -109,    0,    0,
 -175,    0,  -82, -175,    0,    0, -195,  -81, -175,  -95,
  -96,  -26,    0,  -82,    0,  -81,    0,  -24,    0, -154,
 -195,    0,  -34,    0,    0,  -96,    9,    0,    0,    0,
    0,    0, -177,    0,    0,  -21,    0,    0,    0,  -26,
    0,    0, -261, -266,   72, -175, -202, -175,    0,  -81,
  122, -266, -195,   14,    0,    0,    0,    0,    0, -145,
 -264, -264,    0,    0,    0,    0,   73,    0,    0,   84,
  -81,    0,    0,  -81,    0, -177,    0,    0,   69,   88,
    0,  -26,    0,   56, 3353,    0,    0,    0, -261,    0,
    0,    0,    0,    0, -266,    0,    0,    0, -266, -266,
 -195,  118,  -26, -266,    0,   92, 3353, 3353,    0, 3353,
    0, 3353, 3353,    0,    0,    0,  175,  186,   65,    0,
    0,    0,    0, -195, 4418,    0,  192,    0,    0,    0,
    0,    0, 3353,    0, 3353,    0,    0,    0,    0,    0,
    0,    0,    0, -266, -195,   73, -266,    0,  169,  219,
    0,    0,    0,  223,    0, 4342, 3353, -261, -261,  209,
 3353,    0,    0, 3353, 3207, 3353, 3229, 3353, 3353, 3353,
 3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353, 3353,
 3353, -261,    0, -195,    0,  185,   73,    0,   73, -266,
    0, -261,  231, 4418,  251,  256,  219,    0,    0,  275,
    0,    0, 3251, 4418, 3705, 3353, 4380, 4437, 3353, 4451,
 2244, 2244, 2244, 2244, 2244, 2244, 1652, 1652,  -32,  -32,
  -32,  -32,  -32,    0,    0,    0,    0,    0,  263, -266,
   73,    0,  268,  265, -261, 3353,    0,    0, -261, -122,
 4418,    0, -237, 4380, 4451,  185,  294,    0, -261,    0,
    0, 4418,    0,  275, 3353,    0,    0,    0, 3251,    0,
    0,  283, -195,  290,    0, 4360,    0,    0,    0,    0,
 -177,  267,    0,  296,    0, -252,    0,    0,    0, -261,
    0,    0,    0,    0,    0,  268,  262,  303,  285,  299,
 -177,    0,    0,    0,  339, -195,    0,    0,    0,    0,
    0,    0,    0,  284,    0,    0,    0,    0,    0,    0,
  363,  349,    0,  301,  304,    0,    0,  365,  349,    0,
    0,    0,    0,    0,    0,    0,  337, -134,    0,    0,
    0,    0,    0,    0, 3353, -177,  175, -161,    0, -121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  192,    0,    0,    0,    0,  336,  332,  351,  368,
  372,    0,    0, 4400,    0,  393, 3353, 3353, 3353, 3353,
  365, 3353, 3353,    0,  413,    0,  231, -268, 4418, 4418,
 4418, 4418, 3412, 4418,    0,  398,    0,  382,    0,    0,
  421,    0,  350,    0,    0,  349,    0,    0, -261,    0,
    0,    0,  350,    0,  377,    0, -176,  386,  219,    0,
  220,    0,  394,    0,  384,  349,    0,    0,    0,    0,
  476,  487,  489,    0,  455,    0,  436,    0, 3353,  406,
    0,  445,  460,  220,   -8,   72,  220,  414,    0,    0,
  106, 4418, 3353,    0,  464, 3353,    0,  460,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3353, 3675,
    0,    0, 3453,    0,    0, 4418,    0,    0,    0,    0,
    0,    0,  465,    0,    0,
};
short yyrindex[] = {                                   -153,
 2990,    0,  477,   35,    0,    0,    0,    0,    0,    0,
    0,    0, 3461,    0,  150,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   85,    0,    0,  150,    0,  361,    0,  145,    0,  242,
    0,    0,    0,    0,   30,  261,  151,    0,    0,    0,
    0,  -37,    0,    0,    0,    0,  259,   91,  342,  469,
    0,   20,    0,  -35,    0,  165,    0, -111,    0,  -47,
  259,    0,    0,    0,    0, -215,  503,    0, 2383,    0,
    0,    0,    0,    0,  125,  102,    0,    0,    0, 3131,
    0,    0,    0,    0,  509,    0,    0,    0,    0, 4157,
    0,    0, -115,  -29,    0, 2890,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  442,    0,    0,    0,
 4209,    0,    0, 4261,    0,    0,    0,    0,    0,  -39,
    0,    0,  123, -278,    0,    0, 2968,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -94, -249,  435,    0,   15,  478,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  254,  354, 2703,    0,
    0,    0,    0, 3046, 3499,    0,  454,    0,    0,    0,
    0,    0,    0,    0,    0, 3552,    0,    0,    0,    0,
    0,    0,    0,    0,  -94,  157,    0,  -97,    0,  554,
    0,    0,    0,    0,    0,    0,  497,    0,    0, 3312,
 2878,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3046,    0, -240,   58,    0, -118,    0,
    0,  502,  654,  204,  498,    0,  554,    0,    0,  754,
    0,    0,    0, 3575, 2781,    0, 2521, 2439,    0, 2249,
 1654, 1754, 1854, 1954, 2054, 2154, 1454, 1554,  954, 1054,
 1154, 1254, 1354,    0,    0,    0,    0,    0, 3371,    0,
  483,    0,  505,    0,    0,    0,    0,    0,    0,    0,
 -125,    0,    0, 2603, 2344, -240, 2710,    0,    0,    0,
    0,  205,    0,  854,    0,    0,    0,    0,    0,    0,
    0,  516, 3577, 3053,    0,    0,    0,    0,    0,    0,
    0, 3506,    0,  520,    0,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  517,  373,    0, 3124,  441,
    0,    0,    0,    0,    0, 1389,    0,    0,    0,    0,
    0,    0,    0, -293,    0,    0,    0,    0,  273,    0,
   46,    0,    0, 3146,  491,    0,    0, 3994,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  569,    0,    0,
    0,    0,    0,    0,    0,  521,    0,    0,    0, 3672,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3718,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4040,    0,    0,    0, 4122,    0,    0,    0, 3764, 3810,
 3856, 3902,    0, -288,    0,  548,    0,    0,    0,    0,
 3948,    0,  167,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  167,    0,  -38,    0,    0,    0, 4085,    0,
  509,    0,  518,    0,  486,    0,    0,    0,    0,  292,
 -273, -260, -247,    0,  499,    0,    0,    0,    0,    0,
    0,  527,    0,  509,    0,  509,  509,    0,    0,    0,
 2881,  504,    0,    0,    0,    0,    0,  218,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  506,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    0,    0,  830,   -4,  808,  519,   -7,  -14, -103,    0,
   -3, -370,   29,  523,  767,    0,  760,    0,    0,    0,
  792,    0,    0,  699,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  669, -126,    0,  -51,    0,    0,  815,    0,    0,    0,
  366,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  802,    0,    0,    0,    0, -102,
  561,    0,  385,    0,  723,    0,    0,    0, -322,  507,
  512,  514,  515,    0, -214, -251,    0,  174,  587,  588,
    0,  -15,  522,    0,   -2,  -16,    0,    0,  584, -105,
    0,    0,    0, -143,    0,    0,    0,    0,    0,    0,
   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -146,    0,
    0,    0,    0,  534,    0,  567,    0,    0,    0,    0,
    0, -350,    0,    0,    0,    0,  508,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  470,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4726
short yytable[] = {                                      12,
   32,  129,   41,  195,  261,  298,  139,   31,  390,  158,
   28,   35,   37,   12,    1,   20,   21,  206,    9,  231,
   40,   23,  383,  159,   91,    9,  218,  285,  218,   32,
  358,   22,  230,   23,  368,   24,   31,   90,   98,   28,
   35,   37,  423,   36,   68,  229,   49,   76,  159,  198,
   25,   26,   68,  199,  139,  319,   16,  247,  135,  320,
  249,  121,  392,  218,  211,  212,   98,  213,  422,  215,
  216,  122,   36,  231,  449,   19,  110,   54,   90,  156,
  311,   60,  157,   49,    9,  466,  230,   49,   90,  131,
  243,  134,   27,   77,  454,   17,  341,   49,  119,  229,
  128,   26,  133,  291,   27,  491,  468,   97,  132,   40,
  470,   40,  105,  448,  254,   26,  476,  219,  264,  110,
  477,  265,  267,  268,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  141,
  179,  106,   44,  427,  197,  395,  428,  149,  518,  151,
  153,  488,    9,  150,  396,  107,    4,  315,  220,    4,
  301,   45,   94,  304,   40,    4,  305,  323,  108,  241,
  528,  323,   49,    5,  530,  186,  397,   51,  186,    6,
  533,  534,   83,  429,  308,   95,  430,  201,  316,  104,
  179,   55,    4,  312,  318,  241,  241,  241,  101,  241,
  241,   42,   64,   42,  335,  121,    7,  186,  398,  399,
  223,   72,  326,  257,  257,  122,  301,  479,   78,  103,
  317,  186,   42,   42,  356,   84,  101,  241,   58,   42,
  104,  248,   42,  388,  186,   82,   59,  257,  241,   70,
  104,  240,  169,   70,   42,   89,   70,  292,  241,  241,
   42,  241,  241,   42,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  425,
  286,   87,   75,  118,   70,   22,   92,   78,    9,   24,
   78,  271,   99,   70,   25,  241,  271,   94,  241,  241,
  257,   75,  424,   24,  257,  271,  241,   75,  113,   78,
   75,  100,   12,   12,  325,   78,   32,  102,   78,   94,
  241,  244,  244,  274,  110,   94,   65,   12,   12,   12,
   12,   32,   12,   42,  439,  440,  441,  442,   31,  443,
  444,   99,   35,   37,  110,  292,  274,   12,   12,   20,
   21,  274,  100,   42,  220,   43,   42,   32,   91,  330,
  274,   42,  100,   11,   11,   91,  221,   32,    9,   99,
   42,  143,  129,  129,   36,  155,   42,  483,   11,   11,
   11,   11,   11,   11,   91,  159,   11,   73,  190,  110,
  160,   73,  367,  400,   73,  220,  502,  129,   11,   11,
  511,   12,  515,  483,  165,   11,   91,  519,   11,  202,
  520,  190,   91,  523,   11,   91,  190,   73,  241,   96,
   73,   77,   73,  190,  136,  190,  526,  373,   82,  373,
  190,   73,  137,  241,  241,  241,  241,  241,  241,   73,
   73,   11,  373,  450,  373,   73,  208,  193,   73,   95,
   82,   76,   11,  198,   76,  193,   82,   22,   22,   82,
   96,  198,   77,  218,  469,   22,  482,  183,   20,   21,
   96,   95,   77,   76,  219,  183,  481,   95,   22,   76,
  242,   22,   76,   97,   22,   22,   23,    9,   24,  510,
  513,  221,  482,  221,  501,  251,  241,   20,   21,  509,
  512,  514,  481,   25,   26,   97,  352,  353,  220,  352,
  353,   97,  252,   22,  241,  262,    9,  241,  287,  295,
  241,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  206,  332,  206,   64,  332,  332,  332,  332,
  332,  332,  332,  296,  332,   42,  332,   27,  332,  332,
  332,  297,   42,  299,  270,  306,  332,  332,   64,  112,
  309,  310,  332,   64,  332,  332,  332,  332,  332,  332,
  332,  332,   64,  322,  332,   42,  332,  269,  332,  328,
   42,  331,  269,  332,  332,  137,  137,  332,  332,   42,
  332,  269,  338,  137,  351,  332,  332,  332,  336,  352,
  332,  374,  349,  332,  332,  332,  204,  205,  204,  137,
  332,  333,  333,  333,  333,  333,  333,  333,  333,  333,
  333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
  333,  333,  354,  333,  381,   66,  333,  333,  333,  333,
  333,  333,  333,  379,  333,  386,  333,  384,  333,  333,
  333,  360,  361,  394,   22,  389,  333,  333,   66,  362,
  432,  433,  333,   66,  333,  333,  333,  333,  333,  333,
  333,  333,   66,  434,  333,  363,  333,   22,  333,  435,
  436,  438,   22,  333,  333,  154,  154,  333,  333,   22,
  333,   22,  446,  154,  455,  333,  333,  333,  458,  459,
  333,  462,  478,  333,  333,  333,  154,  474,  486,  154,
  333,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  494,  334,  489,  276,  334,  334,  334,  334,
  334,  334,  334,  495,  334,  496,  334,  497,  334,  334,
  334,   84,  500,  135,  135,  503,  334,  334,  276,  504,
  517,  135,  334,  276,  334,  334,  334,  334,  334,  334,
  334,  334,  276,   84,  334,  506,  334,  135,  334,   84,
  522,  535,   84,  334,  334,  246,   18,  334,  334,   35,
  334,  373,  354,  355,  102,  334,  334,  334,  117,  105,
  334,  118,  108,  334,  334,  334,  112,  262,  113,  279,
  334,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  257,  211,  249,  346,  346,  346,  346,
  346,  346,  346,  214,  346,  224,  346,   39,  346,  346,
  346,   47,  101,  251,  342,  250,  346,  346,  343,  117,
   81,  205,  346,  244,  346,  346,  346,  346,  346,  346,
  346,  346,   66,  524,  346,   90,  346,  290,  346,  327,
  252,  516,  200,  346,  346,  313,  314,  346,  346,  321,
  346,  239,  369,  200,  412,  346,  346,  346,  217,  413,
  346,  414,  415,  346,  346,  346,  346,    0,  431,  416,
  346,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  472,  295,    0,    0,  295,  295,  295,  295,
  295,  295,  295,    0,  295,    0,  295,    0,  295,  295,
  295,    0,    0,    0,    0,    0,  295,  295,    0,    0,
    0,    0,  295,    0,  295,  295,  295,  295,  295,  295,
  295,  295,    0,    0,  295,    0,  295,    0,  295,    0,
    0,    0,    0,  295,  295,    0,    0,  295,  295,    0,
  295,    0,    0,    0,    0,  295,  295,  295,    0,    0,
  295,    0,    0,  295,  295,  295,    0,    0,    0,    0,
  295,  341,  341,  341,  341,  341,  341,  341,  341,  341,
  341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
  341,  341,    0,  341,    0,    0,  341,  341,  341,  341,
  341,  341,  341,    0,  341,    0,  341,    0,  341,  341,
  341,    0,    0,    0,    0,    0,  341,  341,    0,    0,
    0,    0,  341,    0,  341,  341,  341,  341,  341,  341,
  341,  341,    0,    0,  341,    0,  341,    0,  341,    0,
    0,    0,    0,  341,  341,    0,    0,  341,  341,    0,
  341,    0,    0,    0,    0,  341,  341,  341,    0,    0,
  341,    0,    0,  341,  341,  341,    0,    0,    0,    0,
  341,  342,  342,  342,  342,  342,  342,  342,  342,  342,
  342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
  342,  342,    0,  342,    0,    0,  342,  342,  342,  342,
  342,  342,  342,    0,  342,    0,  342,    0,  342,  342,
  342,    0,    0,    0,    0,    0,  342,  342,    0,    0,
    0,    0,  342,    0,  342,  342,  342,  342,  342,  342,
  342,  342,    0,    0,  342,    0,  342,    0,  342,    0,
    0,    0,    0,  342,  342,    0,    0,  342,  342,    0,
  342,    0,    0,    0,    0,  342,  342,  342,    0,    0,
  342,    0,    0,  342,  342,  342,    0,    0,    0,    0,
  342,  298,  298,  298,  298,  298,  298,  298,  298,  298,
  298,  298,  298,  298,  298,  298,  298,    0,    0,  298,
  298,  298,    0,  298,    0,    0,  298,  298,  298,  298,
  298,  298,  298,    0,  298,    0,  298,    0,  298,  298,
  298,    0,    0,    0,    0,    0,  298,  298,    0,    0,
    0,    0,  298,    0,  298,  298,  298,  298,  298,  298,
  298,  298,    0,    0,  298,    0,  298,    0,  298,    0,
    0,    0,    0,  298,  298,    0,    0,  298,  298,    0,
  298,    0,    0,    0,    0,  298,  298,  298,    0,    0,
  298,    0,    0,  298,  298,  298,    0,    0,    0,    0,
  298,  299,  299,  299,  299,  299,  299,  299,  299,  299,
  299,  299,  299,  299,  299,  299,  299,    0,    0,  299,
  299,  299,    0,  299,    0,    0,  299,  299,  299,  299,
  299,  299,  299,    0,  299,    0,  299,    0,  299,  299,
  299,    0,    0,    0,    0,    0,  299,  299,    0,    0,
    0,    0,  299,    0,  299,  299,  299,  299,  299,  299,
  299,  299,    0,    0,  299,    0,  299,    0,  299,    0,
    0,    0,    0,  299,  299,    0,    0,  299,  299,    0,
  299,    0,    0,    0,    0,  299,  299,  299,    0,    0,
  299,    0,    0,  299,  299,  299,    0,    0,    0,    0,
  299,  300,  300,  300,  300,  300,  300,  300,  300,  300,
  300,  300,  300,  300,  300,  300,  300,    0,    0,  300,
  300,  300,    0,  300,    0,    0,  300,  300,  300,  300,
  300,  300,  300,    0,  300,    0,  300,    0,  300,  300,
  300,    0,    0,    0,    0,    0,  300,  300,    0,    0,
    0,    0,  300,    0,  300,  300,  300,  300,  300,  300,
  300,  300,    0,    0,  300,    0,  300,    0,  300,    0,
    0,    0,    0,  300,  300,    0,    0,  300,  300,    0,
  300,    0,    0,    0,    0,  300,  300,  300,    0,    0,
  300,    0,    0,  300,  300,  300,    0,    0,    0,    0,
  300,  301,  301,  301,  301,  301,  301,  301,  301,  301,
  301,  301,  301,  301,  301,  301,  301,    0,    0,  301,
  301,  301,    0,  301,    0,    0,  301,  301,  301,  301,
  301,  301,  301,    0,  301,    0,  301,    0,  301,  301,
  301,    0,    0,    0,    0,    0,  301,  301,    0,    0,
    0,    0,  301,    0,  301,  301,  301,  301,  301,  301,
  301,  301,    0,    0,  301,    0,  301,    0,  301,    0,
    0,    0,    0,  301,  301,    0,    0,  301,  301,    0,
  301,    0,    0,    0,    0,  301,  301,  301,    0,    0,
  301,    0,    0,  301,  301,  301,    0,    0,    0,    0,
  301,  302,  302,  302,  302,  302,  302,  302,  302,  302,
  302,  302,  302,  302,  302,  302,  302,    0,    0,  302,
  302,  302,    0,  302,    0,    0,  302,  302,  302,  302,
  302,  302,  302,    0,  302,    0,  302,    0,  302,  302,
  302,    0,    0,    0,    0,    0,  302,  302,    0,    0,
    0,    0,  302,    0,  302,  302,  302,  302,  302,  302,
  302,  302,    0,    0,  302,   42,  302,    0,  302,    0,
    0,    0,    0,  302,  302,   42,    0,  302,  302,    0,
  302,    0,    0,    0,    0,  302,  302,  302,    0,    0,
  302,   42,   42,  302,  302,  302,    0,    0,    0,   42,
  302,  296,  296,  296,  296,  296,  296,  296,  296,  296,
  296,  296,  296,    0,    0,   42,    0,    0,    0,  296,
  296,  296,    0,  296,    0,    0,  296,  296,  296,  296,
  296,  296,  296,    0,  296,    0,  296,    0,  296,  296,
  296,    0,    0,    0,    0,    0,  296,  296,    0,    0,
    0,    0,  296,    0,  296,  296,  296,  296,  296,  296,
  296,  296,    0,    0,  296,    0,  296,    0,  296,    0,
    0,    0,    0,  296,  296,    0,    0,  296,  296,    0,
  296,    0,    0,    0,    0,  296,  296,  296,    0,    0,
  296,    0,    0,  296,  296,  296,    0,    0,    0,    0,
  296,  297,  297,  297,  297,  297,  297,  297,  297,  297,
  297,  297,  297,    0,    0,    0,    0,    0,    0,  297,
  297,  297,    0,  297,    0,    0,  297,  297,  297,  297,
  297,  297,  297,    0,  297,    0,  297,    0,  297,  297,
  297,    0,    0,    0,    0,    0,  297,  297,    0,    0,
    0,    0,  297,    0,  297,  297,  297,  297,  297,  297,
  297,  297,    0,    0,  297,    0,  297,    0,  297,    0,
    0,    0,    0,  297,  297,    0,    0,  297,  297,    0,
  297,    0,    0,    0,    0,  297,  297,  297,    0,    0,
  297,    0,    0,  297,  297,  297,    0,    0,    0,    0,
  297,  314,  314,  314,  314,  314,  314,  314,  314,  314,
  314,  236,  237,  238,  239,  240,  169,    0,    0,  314,
  314,  314,    0,  314,    0,    0,  314,  314,  314,  314,
  314,  314,  314,    0,  314,    0,  314,    0,  314,  314,
  314,    0,    0,    0,    0,    0,  314,  314,    0,    0,
    0,    0,  314,    0,  314,  314,  314,  314,  314,  314,
  314,  314,    0,    0,  314,    0,  314,    0,  314,    0,
    0,    0,    0,  314,  314,    0,    0,  314,  314,    0,
  314,    0,    0,    0,    0,  314,  314,  314,    0,    0,
  314,    0,    0,  314,  314,  314,    0,    0,    0,    0,
  314,  313,  313,  313,  313,  313,  313,  313,  313,  313,
  313,    0,    0,    0,    0,    0,    0,    0,    0,  313,
  313,  313,    0,  313,    0,    0,  313,  313,  313,  313,
  313,  313,  313,    0,  313,    0,  313,    0,  313,  313,
  313,    0,    0,    0,    0,    0,  313,  313,    0,    0,
    0,    0,  313,    0,  313,  313,  313,  313,  313,  313,
  313,  313,    0,    0,  313,    0,  313,    0,  313,    0,
    0,    0,    0,  313,  313,    0,    0,  313,  313,    0,
  313,    0,    0,    0,    0,  313,  313,  313,    0,    0,
  313,    0,    0,  313,  313,  313,    0,    0,    0,    0,
  313,  312,  312,  312,  312,  312,  312,  312,  312,  312,
  312,    0,    0,    0,    0,    0,    0,    0,    0,  312,
  312,  312,    0,  312,    0,    0,  312,  312,  312,  312,
  312,  312,  312,    0,  312,    0,  312,    0,  312,  312,
  312,    0,    0,    0,    0,    0,  312,  312,    0,    0,
    0,    0,  312,    0,  312,  312,  312,  312,  312,  312,
  312,  312,    0,    0,  312,    0,  312,    0,  312,    0,
    0,    0,    0,  312,  312,    0,    0,  312,  312,    0,
  312,    0,    0,    0,    0,  312,  312,  312,    0,    0,
  312,    0,    0,  312,  312,  312,    0,    0,    0,    0,
  312,  310,  310,  310,  310,  310,  310,  310,  310,  310,
  310,    0,    0,    0,    0,    0,    0,    0,    0,  310,
  310,  310,    0,  310,    0,    0,  310,  310,  310,  310,
  310,  310,  310,    0,  310,    0,  310,    0,  310,  310,
  310,    0,    0,    0,    0,    0,  310,  310,    0,    0,
    0,    0,  310,    0,  310,  310,  310,  310,  310,  310,
  310,  310,    0,    0,  310,    0,  310,    0,  310,    0,
    0,    0,    0,  310,  310,    0,    0,  310,  310,    0,
  310,    0,    0,    0,    0,  310,  310,  310,    0,    0,
  310,    0,    0,  310,  310,  310,    0,    0,    0,    0,
  310,  311,  311,  311,  311,  311,  311,  311,  311,  311,
  311,    0,    0,    0,    0,    0,    0,    0,    0,  311,
  311,  311,    0,  311,    0,    0,  311,  311,  311,  311,
  311,  311,  311,    0,  311,    0,  311,    0,  311,  311,
  311,    0,    0,    0,    0,    0,  311,  311,    0,    0,
    0,    0,  311,    0,  311,  311,  311,  311,  311,  311,
  311,  311,    0,    0,  311,    0,  311,    0,  311,    0,
    0,    0,    0,  311,  311,    0,    0,  311,  311,    0,
  311,    0,    0,    0,    0,  311,  311,  311,    0,    0,
  311,    0,    0,  311,  311,  311,    0,    0,    0,    0,
  311,  309,  309,  309,  309,  309,  309,  309,  309,  309,
  309,    0,    0,    0,    0,    0,    0,    0,    0,  309,
  309,  309,    0,  309,    0,    0,  309,  309,  309,  309,
  309,  309,  309,    0,  309,    0,  309,    0,  309,  309,
  309,    0,    0,    0,    0,    0,  309,  309,    0,    0,
    0,    0,  309,    0,  309,  309,  309,  309,  309,  309,
  309,  309,    0,    0,  309,    0,  309,    0,  309,    0,
    0,    0,    0,  309,  309,    0,    0,  309,  309,    0,
  309,    0,    0,    0,    0,  309,  309,  309,    0,    0,
  309,    0,    0,  309,  309,  309,  303,  303,  303,  303,
  309,  234,  235,  236,  237,  238,  239,  240,  169,    0,
    0,    0,    0,    0,  303,  303,  303,    0,  303,    0,
    0,  303,  303,  303,  303,  303,  303,  303,    0,  303,
    0,  303,    0,  303,  303,  303,    0,    0,    0,    0,
    0,  303,  303,    0,    0,    0,    0,  303,    0,  303,
  303,  303,  303,  303,  303,  303,  303,    0,    0,  303,
    0,  303,    0,  303,    0,    0,    0,    0,  303,  303,
    0,    0,  303,  303,    0,  303,    0,    0,    0,    0,
  303,  303,  303,    0,    0,  303,    0,    0,  303,  303,
  303,  304,  304,  304,  304,  303,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  304,
  304,  304,    0,  304,    0,    0,  304,  304,  304,  304,
  304,  304,  304,    0,  304,    0,  304,    0,  304,  304,
  304,    0,    0,    0,    0,    0,  304,  304,    0,    0,
    0,    0,  304,    0,  304,  304,  304,  304,  304,  304,
  304,  304,    0,    0,  304,    0,  304,    0,  304,   33,
    0,    0,    0,  304,  304,    0,  277,  304,  304,    0,
  304,    0,    0,    0,    0,  304,  304,  304,    0,    0,
  304,    0,    0,  304,  304,  304,  308,  308,  308,  277,
  304,    0,    0,    0,  277,    0,    0,    0,    0,    0,
   33,    0,    0,  277,  308,  308,  308,    0,  308,    0,
   33,  308,  308,  308,  308,  308,  308,  308,    0,  308,
    0,  308,    0,  308,  308,  308,    0,    0,    0,    0,
    0,  308,  308,    0,    0,    0,    0,  308,    0,  308,
  308,  308,  308,  308,  308,  308,  308,    0,    0,  308,
    0,  308,    0,  308,    0,    0,    0,    0,  308,  308,
    0,    0,  308,  308,    0,  308,    0,    0,  305,  305,
  308,  308,  308,    0,    0,  308,    0,    0,  308,  308,
  308,    0,    0,    0,    0,  308,  305,  305,  305,    0,
  305,    0,    0,  305,  305,  305,  305,  305,  305,  305,
    0,  305,    0,  305,    0,  305,  305,  305,    0,    0,
    0,    0,    0,  305,  305,    0,    0,    0,    0,  305,
    0,  305,  305,  305,  305,  305,  305,  305,  305,    0,
    0,  305,    0,  305,    0,  305,    0,    0,    0,    0,
  305,  305,    0,    0,  305,  305,    0,  305,    0,    0,
  306,  306,  305,  305,  305,    0,    0,  305,    0,    0,
  305,  305,  305,    0,    0,    0,    0,  305,  306,  306,
  306,    0,  306,    0,    0,  306,  306,  306,  306,  306,
  306,  306,    0,  306,    0,  306,    0,  306,  306,  306,
    0,    0,    0,    0,    0,  306,  306,    0,    0,    0,
    0,  306,    0,  306,  306,  306,  306,  306,  306,  306,
  306,    0,    0,  306,    0,  306,    0,  306,    0,    0,
    0,    0,  306,  306,    0,    0,  306,  306,    0,  306,
    0,    0,    0,    0,  306,  306,  306,    0,    0,  306,
    0,    0,  306,  306,  306,    0,    0,    0,    0,  306,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,    0,    0,    0,  346,  346,  346,  346,  346,
  346,    0,    0,  346,    0,    0,  106,  346,    0,    0,
  106,  106,    0,    0,    0,  346,  346,    0,    0,    0,
    0,    0,    0,  346,    0,  346,  346,    0,    0,  346,
    0,    0,    0,  346,    0,    0,  106,    0,    0,    0,
    0,  106,    0,  106,    0,    0,  346,  106,  307,  346,
  106,  106,    0,    0,  346,  346,    0,  106,    0,    0,
    0,    0,  346,  346,    0,    0,  307,  307,  307,  346,
  307,    0,    0,  307,  307,  307,  307,  307,  307,  307,
    0,  307,    0,  307,    0,  307,  307,  307,    0,    0,
    0,    0,    0,  307,  307,    0,    0,    0,    0,  307,
    0,  307,  307,  307,  307,  307,  307,  307,  307,    0,
    0,  307,    0,  307,    0,  307,    0,    0,    0,    0,
  307,  307,    0,    0,  307,  307,    0,  307,    0,    0,
    0,    0,  307,  307,  307,    0,    0,  307,    0,    0,
  307,  307,  307,    0,    0,    0,    0,  307,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,    0,  383,  383,  346,
    0,    0,    0,    0,  383,  383,  383,  383,  172,  383,
    0,    0,  383,  383,  383,  383,  383,  383,    0,    0,
    0,    0,    0,    0,  383,    0,    0,    0,    0,    0,
  172,  172,  383,  383,  172,    0,    0,    0,  172,    0,
  383,    0,  166,  166,    0,    0,  166,    0,    0,    0,
  166,  172,    0,    0,  172,    0,    0,    0,    0,  172,
    0,    0,    0,  166,    0,    0,  166,  172,  172,    0,
  346,  166,  383,    0,    0,  383,  383,    0,    0,  166,
  166,    0,  383,  383,  383,  383,  383,  383,    0,    0,
  383,  383,  383,  383,  383,  383,    0,    5,    5,    0,
    0,    0,  383,    0,    0,    0,    0,    0,    0,    0,
  383,  383,    5,    5,    5,    5,    5,    5,  383,    0,
  167,  167,    0,    0,  167,    0,    0,    0,  167,    0,
    0,    0,    5,    5,    0,    0,    0,    0,    0,    7,
    0,  167,    7,    0,  167,    0,    0,    0,    7,  167,
  383,    0,    0,   42,   42,    0,    0,  167,  167,    0,
   42,   42,   42,   42,  383,   42,    0,    0,   42,   42,
   42,   42,   42,   42,    0,    7,    0,    0,    0,  119,
   42,    0,    0,  119,    0,    0,    5,    0,   42,   42,
    0,    0,    0,    0,    0,    0,   42,    0,   42,   42,
    0,    0,   42,    0,    0,    0,   42,    0,    0,  119,
    0,    0,    0,    0,  119,    0,  119,    0,    0,   42,
  119,    0,   42,  119,  119,    0,    0,   42,   42,    0,
  119,  155,  155,    0,    0,   42,   42,    0,  155,  155,
  155,  155,   42,  155,    0,    0,  155,  155,  155,  155,
  155,  155,    0,  160,  160,    0,    0,   32,  155,    0,
  160,  160,  160,  160,    0,  160,  155,  155,  160,  160,
  160,  160,  160,  160,  155,    0,  155,  155,    0,    0,
  160,    0,    0,    0,  155,    0,    0,   32,  160,  160,
    0,    0,   32,    0,   32,    0,  160,  155,   32,    0,
  155,   32,  160,    0,    0,    0,  155,    0,   32,    0,
    0,    0,    0,    0,  167,  168,    0,    0,    0,    0,
  155,  169,  170,  171,  172,    0,  173,  160,  160,  174,
   22,  175,   23,    9,   24,    0,  167,  168,    0,    0,
    0,  176,  160,  169,  170,  171,  172,    0,  173,   25,
   26,  174,   22,  175,   23,    9,   24,  177,  167,  168,
    0,  266,    0,  176,    0,  169,  170,  171,  172,    0,
  173,   25,   26,  174,   22,  175,   23,    9,   24,  177,
    0,    0,    0,    0,    0,  176,    0,    0,    0,  178,
    0,    0,    0,   25,   26,    0,  300,    0,    0,    0,
    0,  177,    0,   27,    0,    0,    0,    0,    0,    0,
    0,  178,    0,    0,    0,  269,    0,    0,    0,  348,
  348,    0,    0,    0,    0,   27,  348,  348,  348,  348,
    0,  348,    0,  178,  348,  348,  348,  348,  348,  348,
    0,    0,    0,    0,    0,    0,  348,   27,    0,    0,
    0,    0,    0,    0,  348,  348,    0,  348,    0,    0,
  167,  168,  348,    0,    0,    0,    0,  169,  170,  171,
  172,    0,  173,    0,    0,  174,   22,  175,   23,    9,
   24,    0,    0,    0,    0,    0,    0,  176,    0,    0,
   44,    0,    0,    0,  348,   25,   26,   44,    0,    0,
    0,   44,   44,  177,    0,    0,    0,    0,  348,  224,
  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  169,   44,    0,    0,
    0,    0,   44,    0,   44,  178,    0,    0,   44,    0,
    0,   44,   44,    0,    0,    0,    0,    0,   44,   27,
  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,  240,  169,   42,   42,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   42,   42,   42,   42,   42,   42,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  452,    0,
    0,    0,    0,   42,   42,    0,    0,    0,    0,    0,
    6,    0,    0,    6,  170,  170,  170,    0,  170,    6,
    0,  170,  170,  170,  170,  170,  170,    0,    0,  170,
    0,    0,   59,  170,    0,    0,   59,    0,    0,  529,
    0,  170,  170,    0,    0,    0,    6,    0,    0,  170,
    0,  170,  170,    0,    0,  170,    0,   42,    0,  170,
    0,    0,   59,    0,    0,    0,    0,   59,    0,   59,
    0,    0,  170,   59,    0,  170,   59,    0,   43,    0,
  170,  170,    0,   59,    0,    0,    0,    0,  170,  170,
  171,  171,  171,    0,  171,  170,    0,  171,  171,  171,
  171,  171,  171,   42,    0,  171,    0,    0,   31,  171,
    0,    0,    0,   31,    0,   43,    0,  171,  171,   43,
    0,    0,   31,    0,    0,  171,    0,  171,  171,   43,
    0,  171,    0,   42,    0,  171,    0,    0,   42,    0,
   42,    0,    0,    0,   42,    0,    0,   42,  171,    0,
    0,  171,    0,    0,   42,    0,  171,  171,    0,    0,
    0,    0,    0,    0,  171,  171,    0,    0,    0,    0,
    0,  171,  224,  225,  226,  227,  228,  229,  230,  231,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  169,
  346,    0,    0,    0,    0,    0,    0,    0,  346,    0,
  346,    0,  346,  225,  226,  227,  228,  229,  230,  231,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  169,
  346,    0,  346,  346,    0,    0,  346,  346,  346,  346,
    0,    0,    0,    0,  346,    0,  346,  285,    0,    0,
    0,  346,  346,    0,  285,    0,  285,    0,  285,  527,
    0,    0,    0,  346,  346,  346,    0,    0,    0,    0,
    0,  346,  346,  346,    0,    0,  285,    0,  285,  285,
    0,    0,  285,  285,  285,  285,    0,    0,    0,    0,
  285,    0,  285,  268,    0,    0,    0,  285,  285,    0,
  268,    0,  268,    0,  268,    0,    0,    0,    0,  285,
  285,  285,    0,    0,    0,    0,    0,  285,  285,  285,
    0,    0,  268,    0,  268,  268,    0,    0,  268,  268,
  268,  268,    0,    0,    0,    0,  268,    0,  268,  266,
    0,    0,    0,  268,  268,    0,  266,    0,  266,    0,
  266,    0,    0,    0,    0,  268,  268,  268,    0,    0,
    0,    0,    0,  268,  268,  268,    0,    0,  266,    0,
  266,  266,    0,    0,  266,  266,  266,  266,    0,    0,
    0,    0,  266,    0,  266,  267,    0,    0,    0,  266,
  266,    0,  267,    0,  267,    0,  267,    0,    0,    0,
    0,  266,  266,  266,    0,    0,    0,    0,    0,  266,
  266,  266,    0,    0,  267,    0,  267,  267,    0,    0,
  267,  267,  267,  267,    0,    0,    0,    0,  267,    0,
  267,  265,    0,    0,    0,  267,  267,    0,  265,    0,
  265,    0,  265,    0,    0,    0,    0,  267,  267,  267,
    0,    0,    0,    0,    0,  267,  267,  267,    0,    0,
  265,    0,  265,  265,    0,    0,  265,  265,  265,  265,
    0,    0,    0,    0,  265,    0,  265,  283,    0,    0,
    0,  265,  265,    0,  283,    0,  283,    0,  283,    0,
    0,    0,    0,  265,  265,  265,    0,    0,    0,    0,
    0,  265,  265,  265,    0,    0,  283,    0,  283,  283,
    0,    0,  283,  283,  283,  283,    0,    0,    0,    0,
  283,    0,  283,  143,    0,    0,    0,  283,  283,    0,
  143,    0,  143,    0,    0,    0,    0,    0,    0,  283,
  283,  283,    0,    0,    0,    0,    0,  283,  283,  283,
    0,    0,  143,    0,  143,  143,    0,    0,  139,  139,
  139,  139,    0,    0,    0,    0,  143,    0,  143,  142,
    0,    0,    0,  143,  139,    0,  142,    0,  142,    0,
    0,    0,    0,    0,    0,  139,  143,  143,    0,    0,
    0,    0,    0,  139,  139,  139,    0,    0,  142,    0,
  142,  142,    0,    0,  138,  138,  138,  138,    0,    0,
    0,    0,  142,    0,  142,    0,    0,    0,    0,  142,
  138,  346,    0,  346,    0,  346,    0,    0,    0,    0,
    0,  138,  142,  142,    0,    0,    0,    0,    0,  138,
  138,  138,    0,  346,    0,  346,  346,    0,    0,  346,
  346,  346,  346,    0,    0,    0,    0,  346,  255,  346,
  255,    0,  255,    0,  346,  346,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  346,  346,  346,    0,
  255,    0,  255,  255,  346,  346,  346,    0,  255,    0,
    0,    0,    0,  173,  255,  173,  255,  173,    0,  173,
    0,  255,    0,  173,    0,    0,    0,  173,    0,    0,
    0,    0,    0,    0,  255,  255,    0,    0,    0,  173,
  173,    0,    0,  173,    0,    0,    0,  173,  173,    0,
  173,    0,    0,    0,  173,    0,    0,  173,  173,    0,
    0,    0,    0,  173,  173,  175,    0,  175,    0,  175,
    0,  175,    0,    0,    0,  175,    0,    0,    0,  175,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  175,  175,    0,    0,  175,    0,    0,    0,  175,
  175,    0,  175,    0,    0,    0,  175,    0,    0,  175,
  175,    0,    0,    0,    0,  175,  175,  177,    0,  177,
    0,  177,    0,  177,    0,    0,    0,  177,    0,    0,
    0,  177,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  177,  177,    0,    0,  177,    0,    0,
    0,  177,  177,    0,  177,    0,    0,    0,  177,    0,
    0,  177,  177,    0,    0,    0,    0,  177,  177,  224,
  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  169,  224,  225,  226,
  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  169,    0,    0,    0,  253,  226,
  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  169,    0,  333,  224,  225,  226,
  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  169,  224,  225,  226,  227,  228,
  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
  239,  240,  169,    0,    0,    0,  437,  227,  228,  229,
  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  169,  228,  229,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  169,
};
short yycheck[] = {                                       4,
   15,  105,   19,  147,  219,  257,  112,   15,  379,  136,
   15,   15,   15,   18,  326,  268,  269,  164,  287,  293,
  287,  286,  373,  317,   76,  287,  315,  242,  317,   44,
  353,  284,  293,  286,  357,  288,   44,  287,  317,   44,
   44,   44,  393,   15,   61,  293,  287,   64,  342,  155,
  303,  304,   69,  159,  160,  293,  292,  204,  110,  297,
  207,  328,  385,  352,  167,  168,  345,  170,  391,  172,
  173,  338,   44,  347,  343,  310,   93,   49,  328,  131,
  295,   55,  134,  336,  287,  456,  347,  328,  338,  106,
  193,  108,  357,   67,  445,  291,  349,  338,  103,  347,
  105,  317,  107,  250,  357,  476,  457,   81,  311,  287,
  461,  287,  290,  436,  217,  331,  293,  279,  221,  136,
  297,  224,  225,  226,  227,  228,  229,  230,  231,  232,
  233,  234,  235,  236,  237,  238,  239,  240,  241,  113,
  145,  319,  293,  305,  149,  280,  308,  293,  499,  121,
  122,  474,  287,  299,  289,  333,  310,  280,  280,  313,
  263,  300,  317,  266,  287,  319,  269,  293,  346,  185,
  521,  297,  336,  313,  525,  287,  311,  287,  290,  319,
  531,  532,  298,  305,  290,  340,  308,  161,  311,  287,
  195,  329,  346,  296,  300,  211,  212,  213,  317,  215,
  216,  317,  302,  298,  331,  328,  346,  319,  343,  344,
  184,  294,  315,  218,  219,  338,  319,  469,  300,  317,
  343,  333,  317,  339,  351,  322,  345,  243,  293,  345,
  328,  205,  348,  377,  346,  331,  301,  242,  254,  287,
  338,  274,  275,  291,  339,   72,  294,  252,  264,  265,
  345,  267,  268,  348,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  396,
  244,  298,  320,  100,  322,  284,  301,  317,  287,  317,
  320,  317,  317,  331,  322,  301,  322,  317,  304,  305,
  295,  339,  395,  331,  299,  331,  312,  345,  320,  339,
  348,  287,  268,  269,  309,  345,  287,  299,  348,  339,
  326,  350,  351,  294,  331,  345,  287,  283,  284,  285,
  286,  336,  288,  294,  427,  428,  429,  430,  336,  432,
  433,  317,  336,  336,  351,  340,  317,  303,  304,  268,
  269,  322,  328,  283,  280,  285,  317,  328,  291,  323,
  331,  322,  338,  268,  269,  298,  292,  338,  287,  345,
  331,  348,  317,  318,  336,  293,  283,  471,  283,  284,
  285,  286,  287,  288,  317,  307,  291,  287,  294,  396,
  293,  291,  356,  388,  294,  280,  489,  342,  303,  304,
  494,  357,  496,  497,  339,  310,  339,  292,  313,  282,
  503,  317,  345,  506,  319,  348,  322,  317,  424,  287,
  320,  287,  322,  329,  293,  331,  519,  283,  317,  285,
  336,  331,  301,  439,  440,  441,  442,  443,  444,  339,
  340,  346,  283,  438,  285,  345,  345,  293,  348,  317,
  339,  317,  357,  293,  320,  301,  345,  313,  314,  348,
  328,  301,  328,  279,  459,  321,  471,  293,  268,  269,
  338,  339,  338,  339,  279,  301,  471,  345,  334,  345,
  279,  337,  348,  317,  284,  341,  286,  287,  288,  494,
  495,  315,  497,  317,  489,  317,  502,  268,  269,  494,
  495,  496,  497,  303,  304,  339,  293,  293,  280,  296,
  296,  345,  280,  284,  520,  297,  287,  523,  324,  279,
  526,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  315,  280,  317,  294,  283,  284,  285,  286,
  287,  288,  289,  293,  291,  287,  293,  357,  295,  296,
  297,  296,  294,  279,  294,  293,  303,  304,  317,  287,
  293,  297,  309,  322,  311,  312,  313,  314,  315,  316,
  317,  318,  331,  280,  321,  317,  323,  317,  325,  297,
  322,  292,  322,  330,  331,  313,  314,  334,  335,  331,
  337,  331,  297,  321,  292,  342,  343,  344,  332,  315,
  347,  318,  341,  350,  351,  352,  315,  316,  317,  337,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  334,  280,  286,  294,  283,  284,  285,  286,
  287,  288,  289,  281,  291,  342,  293,  347,  295,  296,
  297,  313,  314,  317,  294,  291,  303,  304,  317,  321,
  325,  330,  309,  322,  311,  312,  313,  314,  315,  316,
  317,  318,  331,  323,  321,  337,  323,  317,  325,  312,
  309,  289,  322,  330,  331,  313,  314,  334,  335,  329,
  337,  331,  280,  321,  297,  342,  343,  344,  317,  279,
  347,  352,  317,  350,  351,  352,  334,  331,  315,  337,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  257,  280,  351,  294,  283,  284,  285,  286,
  287,  288,  289,  257,  291,  257,  293,  293,  295,  296,
  297,  317,  317,  313,  314,  350,  303,  304,  317,  315,
  347,  321,  309,  322,  311,  312,  313,  314,  315,  316,
  317,  318,  331,  339,  321,  316,  323,  337,  325,  345,
  317,  317,  348,  330,  331,  317,  310,  334,  335,  287,
  337,  283,  296,  296,  317,  342,  343,  344,  297,  317,
  347,  297,  287,  350,  351,  352,  287,  317,  292,  289,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  286,  317,  350,  283,  284,  285,  286,
  287,  288,  289,  317,  291,  347,  293,   18,  295,  296,
  297,   44,   86,  350,  336,  350,  303,  304,  336,  100,
   69,  163,  309,  195,  311,  312,  313,  314,  315,  316,
  317,  318,   58,  508,  321,   74,  323,  309,  325,  319,
  312,  497,  160,  330,  331,  299,  299,  334,  335,  306,
  337,  323,  359,  325,  388,  342,  343,  344,  330,  388,
  347,  388,  388,  350,  351,  352,  340,   -1,  401,  388,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  463,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,  287,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,  297,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,  313,  314,  350,  351,  352,   -1,   -1,   -1,  321,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,   -1,   -1,  337,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  270,  271,  272,  273,  274,  275,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,  258,  259,  260,  261,
  357,  268,  269,  270,  271,  272,  273,  274,  275,   -1,
   -1,   -1,   -1,   -1,  276,  277,  278,   -1,  280,   -1,
   -1,  283,  284,  285,  286,  287,  288,  289,   -1,  291,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,   -1,  321,
   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,  335,   -1,  337,   -1,   -1,   -1,   -1,
  342,  343,  344,   -1,   -1,  347,   -1,   -1,  350,  351,
  352,  258,  259,  260,  261,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,
   -1,   -1,  309,   -1,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   -1,  321,   -1,  323,   -1,  325,  287,
   -1,   -1,   -1,  330,  331,   -1,  294,  334,  335,   -1,
  337,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
  347,   -1,   -1,  350,  351,  352,  258,  259,  260,  317,
  357,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,   -1,   -1,  331,  276,  277,  278,   -1,  280,   -1,
  338,  283,  284,  285,  286,  287,  288,  289,   -1,  291,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,   -1,  321,
   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,  335,   -1,  337,   -1,   -1,  258,  259,
  342,  343,  344,   -1,   -1,  347,   -1,   -1,  350,  351,
  352,   -1,   -1,   -1,   -1,  357,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
  258,  259,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  276,  277,
  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,
  288,  289,   -1,  291,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,  309,   -1,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,   -1,  321,   -1,  323,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,
   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,  347,
   -1,   -1,  350,  351,  352,   -1,   -1,   -1,   -1,  357,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,  283,  284,  285,  286,  287,
  288,   -1,   -1,  291,   -1,   -1,  287,  295,   -1,   -1,
  291,  292,   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,  311,   -1,  313,  314,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,  317,   -1,   -1,   -1,
   -1,  322,   -1,  324,   -1,   -1,  334,  328,  258,  337,
  331,  332,   -1,   -1,  342,  343,   -1,  338,   -1,   -1,
   -1,   -1,  350,  351,   -1,   -1,  276,  277,  278,  357,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,   -1,  268,  269,  279,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,  291,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,
  313,  314,  303,  304,  317,   -1,   -1,   -1,  321,   -1,
  311,   -1,  313,  314,   -1,   -1,  317,   -1,   -1,   -1,
  321,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,
   -1,   -1,   -1,  334,   -1,   -1,  337,  350,  351,   -1,
  350,  342,  343,   -1,   -1,  268,  269,   -1,   -1,  350,
  351,   -1,  275,  276,  277,  278,  357,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,   -1,  268,  269,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  304,  283,  284,  285,  286,  287,  288,  311,   -1,
  313,  314,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,   -1,  310,
   -1,  334,  313,   -1,  337,   -1,   -1,   -1,  319,  342,
  343,   -1,   -1,  268,  269,   -1,   -1,  350,  351,   -1,
  275,  276,  277,  278,  357,  280,   -1,   -1,  283,  284,
  285,  286,  287,  288,   -1,  346,   -1,   -1,   -1,  287,
  295,   -1,   -1,  291,   -1,   -1,  357,   -1,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,  311,   -1,  313,  314,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  317,
   -1,   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,  334,
  328,   -1,  337,  331,  332,   -1,   -1,  342,  343,   -1,
  338,  268,  269,   -1,   -1,  350,  351,   -1,  275,  276,
  277,  278,  357,  280,   -1,   -1,  283,  284,  285,  286,
  287,  288,   -1,  268,  269,   -1,   -1,  287,  295,   -1,
  275,  276,  277,  278,   -1,  280,  303,  304,  283,  284,
  285,  286,  287,  288,  311,   -1,  313,  314,   -1,   -1,
  295,   -1,   -1,   -1,  321,   -1,   -1,  317,  303,  304,
   -1,   -1,  322,   -1,  324,   -1,  311,  334,  328,   -1,
  337,  331,  317,   -1,   -1,   -1,  343,   -1,  338,   -1,
   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,
  357,  275,  276,  277,  278,   -1,  280,  342,  343,  283,
  284,  285,  286,  287,  288,   -1,  268,  269,   -1,   -1,
   -1,  295,  357,  275,  276,  277,  278,   -1,  280,  303,
  304,  283,  284,  285,  286,  287,  288,  311,  268,  269,
   -1,  315,   -1,  295,   -1,  275,  276,  277,  278,   -1,
  280,  303,  304,  283,  284,  285,  286,  287,  288,  311,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  343,
   -1,   -1,   -1,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,  311,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,   -1,   -1,   -1,  347,   -1,   -1,   -1,  268,
  269,   -1,   -1,   -1,   -1,  357,  275,  276,  277,  278,
   -1,  280,   -1,  343,  283,  284,  285,  286,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  357,   -1,   -1,
   -1,   -1,   -1,   -1,  303,  304,   -1,  306,   -1,   -1,
  268,  269,  311,   -1,   -1,   -1,   -1,  275,  276,  277,
  278,   -1,  280,   -1,   -1,  283,  284,  285,  286,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
  280,   -1,   -1,   -1,  343,  303,  304,  287,   -1,   -1,
   -1,  291,  292,  311,   -1,   -1,   -1,   -1,  357,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  317,   -1,   -1,
   -1,   -1,  322,   -1,  324,  343,   -1,   -1,  328,   -1,
   -1,  331,  332,   -1,   -1,   -1,   -1,   -1,  338,  357,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,   -1,
  310,   -1,   -1,  313,  276,  277,  278,   -1,  280,  319,
   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,  291,
   -1,   -1,  287,  295,   -1,   -1,  291,   -1,   -1,  347,
   -1,  303,  304,   -1,   -1,   -1,  346,   -1,   -1,  311,
   -1,  313,  314,   -1,   -1,  317,   -1,  357,   -1,  321,
   -1,   -1,  317,   -1,   -1,   -1,   -1,  322,   -1,  324,
   -1,   -1,  334,  328,   -1,  337,  331,   -1,  287,   -1,
  342,  343,   -1,  338,   -1,   -1,   -1,   -1,  350,  351,
  276,  277,  278,   -1,  280,  357,   -1,  283,  284,  285,
  286,  287,  288,  287,   -1,  291,   -1,   -1,  317,  295,
   -1,   -1,   -1,  322,   -1,  324,   -1,  303,  304,  328,
   -1,   -1,  331,   -1,   -1,  311,   -1,  313,  314,  338,
   -1,  317,   -1,  317,   -1,  321,   -1,   -1,  322,   -1,
  324,   -1,   -1,   -1,  328,   -1,   -1,  331,  334,   -1,
   -1,  337,   -1,   -1,  338,   -1,  342,  343,   -1,   -1,
   -1,   -1,   -1,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,  357,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,
  289,   -1,  291,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  309,   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,  323,   -1,  325,  280,   -1,   -1,
   -1,  330,  331,   -1,  287,   -1,  289,   -1,  291,  335,
   -1,   -1,   -1,  342,  343,  344,   -1,   -1,   -1,   -1,
   -1,  350,  351,  352,   -1,   -1,  309,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,
  323,   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,
  287,   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,  342,
  343,  344,   -1,   -1,   -1,   -1,   -1,  350,  351,  352,
   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,
  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,
   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,
  291,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
   -1,   -1,   -1,  350,  351,  352,   -1,   -1,  309,   -1,
  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,
   -1,   -1,  323,   -1,  325,  280,   -1,   -1,   -1,  330,
  331,   -1,  287,   -1,  289,   -1,  291,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,   -1,   -1,   -1,   -1,  350,
  351,  352,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
  315,  316,  317,  318,   -1,   -1,   -1,   -1,  323,   -1,
  325,  280,   -1,   -1,   -1,  330,  331,   -1,  287,   -1,
  289,   -1,  291,   -1,   -1,   -1,   -1,  342,  343,  344,
   -1,   -1,   -1,   -1,   -1,  350,  351,  352,   -1,   -1,
  309,   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,  323,   -1,  325,  280,   -1,   -1,
   -1,  330,  331,   -1,  287,   -1,  289,   -1,  291,   -1,
   -1,   -1,   -1,  342,  343,  344,   -1,   -1,   -1,   -1,
   -1,  350,  351,  352,   -1,   -1,  309,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,
  323,   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,
  287,   -1,  289,   -1,   -1,   -1,   -1,   -1,   -1,  342,
  343,  344,   -1,   -1,   -1,   -1,   -1,  350,  351,  352,
   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,
  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,
   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
   -1,   -1,   -1,  350,  351,  352,   -1,   -1,  309,   -1,
  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,
   -1,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,  287,   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,   -1,   -1,   -1,   -1,  350,
  351,  352,   -1,  309,   -1,  311,  312,   -1,   -1,  315,
  316,  317,  318,   -1,   -1,   -1,   -1,  323,  287,  325,
  289,   -1,  291,   -1,  330,  331,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,
  309,   -1,  311,  312,  350,  351,  352,   -1,  317,   -1,
   -1,   -1,   -1,  287,  323,  289,  325,  291,   -1,  293,
   -1,  330,   -1,  297,   -1,   -1,   -1,  301,   -1,   -1,
   -1,   -1,   -1,   -1,  343,  344,   -1,   -1,   -1,  313,
  314,   -1,   -1,  317,   -1,   -1,   -1,  321,  322,   -1,
  324,   -1,   -1,   -1,  328,   -1,   -1,  331,  332,   -1,
   -1,   -1,   -1,  337,  338,  287,   -1,  289,   -1,  291,
   -1,  293,   -1,   -1,   -1,  297,   -1,   -1,   -1,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,  314,   -1,   -1,  317,   -1,   -1,   -1,  321,
  322,   -1,  324,   -1,   -1,   -1,  328,   -1,   -1,  331,
  332,   -1,   -1,   -1,   -1,  337,  338,  287,   -1,  289,
   -1,  291,   -1,  293,   -1,   -1,   -1,  297,   -1,   -1,
   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,  314,   -1,   -1,  317,   -1,   -1,
   -1,  321,  322,   -1,  324,   -1,   -1,   -1,  328,   -1,
   -1,  331,  332,   -1,   -1,   -1,   -1,  337,  338,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   -1,   -1,   -1,  297,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   -1,  297,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,   -1,   -1,   -1,  297,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,
};
#define YYFINAL 2
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 358
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"TE_DOTDOT","TE_IMPLIES","TE_OR",
"TE_XOR","TE_AND","TE_NE","TE_EQ","TE_LT","TE_GT","TE_LE","TE_GE","TE_PLUS",
"TE_MINUS","TE_STAR","TE_SLASH","TE_MOD","TE_DIV","TE_POWER","TE_FREE","TE_NOT",
"TE_STRIP","TE_OLD","TE_DOT","TE_LPARAN","TE_ALIAS","TE_ALL","TE_INTEGER",
"TE_CHAR","TE_REAL","TE_STRING","TE_ID","TE_A_BIT","TE_BANG","TE_BIT",
"TE_SEMICOLON","TE_COLON","TE_COMMA","TE_CREATION","TE_LARRAY","TE_RARRAY",
"TE_RPARAN","TE_LCURLY","TE_RCURLY","TE_LSQURE","TE_RSQURE","TE_CONSTRAIN",
"TE_FALSE","TE_TRUE","TE_ACCEPT","TE_ADDRESS","TE_AS","TE_ASSIGN","TE_CHECK",
"TE_CLASS","TE_CURRENT","TE_DEBUG","TE_DEFERRED","TE_DO","TE_ELSE","TE_ELSEIF",
"TE_END","TE_ENSURE","TE_EXPANDED","TE_EXPORT","TE_EXTERNAL","TE_FEATURE",
"TE_FROM","TE_FROZEN","TE_IF","TE_INDEXING","TE_IN_END","TE_INFIX","TE_INHERIT",
"TE_INSPECT","TE_INVARIANT","TE_IS","TE_LIKE","TE_LOCAL","TE_LOOP",
"TE_OBSOLETE","TE_ONCE","TE_PREFIX","TE_REDEFINE","TE_RENAME","TE_REQUIRE",
"TE_RESCUE","TE_RESULT","TE_RETRY","TE_SELECT","TE_SEPARATE","TE_THEN",
"TE_UNDEFINE","TE_UNIQUE","TE_UNTIL","TE_VARIANT","TE_WHEN","EIF_ERROR2",
"EIF_ERROR3","EIF_ERROR4","EIF_ERROR5","EIF_ERROR6","EIF_ERROR7",
};
char *yyrule[] = {
"$accept : Class_declaration",
"$$1 :",
"Class_declaration : Indexing Header_mark $$1 TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
"Pushing_id : TE_ID",
"Indexing :",
"$$2 :",
"Indexing : TE_INDEXING $$2 Index_list",
"Indexing : TE_INDEXING",
"Index_list : Index_clause",
"Index_list : Index_list ASemi Index_clause",
"$$3 :",
"Index_clause : Index $$3 Index_terms",
"Index :",
"Index : Identifier TE_COLON",
"Index_terms : Index_value",
"Index_terms : Index_terms TE_COMMA Index_value",
"Index_value : Identifier",
"Index_value : Manifest_constant",
"Header_mark :",
"Header_mark : TE_DEFERRED",
"Header_mark : TE_EXPANDED",
"Header_mark : TE_SEPARATE",
"Obsolete :",
"Obsolete : TE_OBSOLETE Manifest_string",
"Features :",
"$$4 :",
"Features : $$4 Feature_clause_list",
"Feature_clause_list : Feature_clause",
"Feature_clause_list : Feature_clause_list Feature_clause",
"$$5 :",
"$$6 :",
"Feature_clause : TE_FEATURE $$5 Clients $$6 Feature_declaration_list",
"Clients :",
"Clients : Client_list",
"Client_list : TE_LCURLY TE_RCURLY",
"$$7 :",
"Client_list : TE_LCURLY $$7 Class_list TE_RCURLY",
"Class_list : Identifier",
"Class_list : Class_list TE_COMMA Identifier",
"Feature_declaration_list :",
"Feature_declaration_list : Feature_declaration_list Feature_declaration",
"ASemi : TE_SEMICOLON",
"ASemi :",
"$$8 :",
"$$9 :",
"Feature_declaration : $$8 New_feature_list $$9 Declaration_body ASemi",
"New_feature_list : New_feature",
"New_feature_list : New_feature_list TE_COMMA New_feature",
"New_feature : Feature_name_mark Feature_name",
"Feature_name_mark :",
"Feature_name_mark : TE_FROZEN",
"Feature_name : Pushing_id",
"Feature_name : Infix",
"Feature_name : Prefix",
"Infix : TE_INFIX Infix_operator",
"Prefix : TE_PREFIX Prefix_operator",
"Infix_operator : Manifest_string",
"Prefix_operator : Manifest_string",
"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
"Constant_or_routine :",
"Constant_or_routine : TE_IS Feature_value",
"Feature_value : Manifest_constant",
"Feature_value : TE_UNIQUE",
"Feature_value : Routine",
"Inheritance :",
"$$10 :",
"Inheritance : TE_INHERIT $$10 Parent_list",
"Inheritance : TE_INHERIT ASemi",
"Parent_list : Parent ASemi",
"Parent_list : Parent_list Parent ASemi",
"Parent : Pushing_id Actual_generics",
"Parent : Pushing_id Actual_generics TE_END",
"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
"Actual_generics :",
"Actual_generics : Existing_generics",
"Rename :",
"Rename : TE_RENAME",
"$$11 :",
"Rename : TE_RENAME $$11 Rename_list",
"Rename_list : Rename_pair",
"Rename_list : Rename_list TE_COMMA Rename_pair",
"Rename_pair : Feature_name TE_AS Feature_name",
"New_exports :",
"$$12 :",
"New_exports : TE_EXPORT $$12 New_export_list",
"New_exports : TE_EXPORT ASemi",
"New_export_list : New_export_item ASemi",
"New_export_list : New_export_list New_export_item ASemi",
"New_export_item : Client_list Feature_set",
"Feature_set : TE_ALL",
"$$13 :",
"Feature_set : $$13 Feature_list",
"Feature_list : Feature_name",
"Feature_list : Feature_list TE_COMMA Feature_name",
"Undefine :",
"Undefine : TE_UNDEFINE",
"$$14 :",
"Undefine : TE_UNDEFINE $$14 Feature_list",
"Redefine :",
"Redefine : TE_REDEFINE",
"$$15 :",
"Redefine : TE_REDEFINE $$15 Feature_list",
"Select :",
"Select : TE_SELECT",
"$$16 :",
"Select : TE_SELECT $$16 Feature_list",
"Formal_arguments :",
"Formal_arguments : TE_LPARAN TE_RPARAN",
"$$17 :",
"Formal_arguments : TE_LPARAN $$17 Entity_declaration_list TE_RPARAN",
"Entity_declaration_list :",
"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
"$$18 :",
"$$19 :",
"Entity_declaration_group : $$18 Identifier_list $$19 TE_COLON Type ASemi",
"Identifier_list : Identifier",
"Identifier_list : Identifier_list TE_COMMA Identifier",
"Strip_identifier_list :",
"Strip_identifier_list : Identifier_list",
"Type_mark :",
"Type_mark : TE_COLON Type",
"$$20 :",
"Routine : Obsolete $$20 Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
"Routine_body : Internal",
"Routine_body : External",
"Routine_body : TE_DEFERRED",
"External : TE_EXTERNAL External_language External_name",
"$$21 :",
"External_language : $$21 Non_empty_string",
"External_name :",
"External_name : TE_ALIAS Non_empty_string",
"$$22 :",
"Internal : TE_DO $$22 Compound",
"$$23 :",
"Internal : TE_ONCE $$23 Compound",
"Local_declarations :",
"$$24 :",
"Local_declarations : TE_LOCAL $$24 Entity_declaration_list",
"Compound : Instructionl Set_position Instruction1 Opt_Semi",
"Compound : Opt_Semi",
"Opt_Semi : Opt_Semi TE_SEMICOLON",
"Opt_Semi :",
"Instructionl : Instructionl Set_position Instruction1 Opt_Semi",
"Instructionl : Opt_Semi",
"Instruction1 : Creation",
"Instruction1 : Call",
"Instruction1 : Assignment",
"Instruction1 : Reverse_assignment",
"Instruction1 : Conditional",
"Instruction1 : Multi_branch",
"Instruction1 : Loop",
"Instruction1 : Debug",
"Instruction1 : Check",
"Instruction1 : Retry",
"Precondition :",
"$$25 :",
"Precondition : TE_REQUIRE $$25 Assertion",
"$$26 :",
"Precondition : TE_REQUIRE TE_ELSE $$26 Assertion",
"Postcondition :",
"$$27 :",
"Postcondition : TE_ENSURE $$27 Assertion",
"$$28 :",
"Postcondition : TE_ENSURE TE_THEN $$28 Assertion",
"$$29 :",
"Assertion : $$29 Assertion_list",
"Assertion_list :",
"Assertion_list : Assertion_list_non_empty",
"Assertion_list_non_empty : Set_position Assertion_clause ASemi",
"Assertion_list_non_empty : Assertion_list_non_empty Set_position Assertion_clause ASemi",
"Assertion_clause : Expression",
"Assertion_clause : Identifier TE_COLON Expression",
"Assertion_clause : Identifier TE_COLON",
"Type : Pushing_id",
"Type : Pushing_id Existing_generics",
"Type : TE_EXPANDED Pushing_id",
"Type : TE_EXPANDED Pushing_id Existing_generics",
"Type : TE_SEPARATE Pushing_id",
"Type : TE_SEPARATE Pushing_id Existing_generics",
"Type : TE_BIT Integer_constant",
"Type : TE_BIT Identifier",
"Type : TE_LIKE Identifier",
"Type : TE_LIKE TE_CURRENT",
"Class_type : Pushing_id",
"Class_type : Pushing_id Existing_generics",
"Existing_generics : TE_LSQURE TE_RSQURE",
"$$30 :",
"Existing_generics : TE_LSQURE $$30 Type_list TE_RSQURE",
"Type_list : Type",
"Type_list : Type_list TE_COMMA Type",
"Formal_generics :",
"$$31 :",
"Formal_generics : TE_LSQURE $$31 Formal_generic_list TE_RSQURE",
"Formal_generic_list :",
"Formal_generic_list : Formal_generic",
"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
"$$32 :",
"Formal_generic : TE_ID $$32 Constraint",
"Constraint :",
"Constraint : TE_CONSTRAIN Class_type",
"$$33 :",
"$$34 :",
"$$35 :",
"Conditional : $$33 TE_IF Expression TE_THEN $$34 Compound $$35 Elsif Else_part TE_END",
"Elsif :",
"$$36 :",
"Elsif : $$36 Elsif_list",
"Elsif_list : Elsif_part",
"Elsif_list : Elsif_list Elsif_part",
"$$37 :",
"Elsif_part : TE_ELSEIF Expression TE_THEN $$37 Compound",
"Inspect_default :",
"$$38 :",
"Inspect_default : TE_ELSE $$38 Compound",
"Else_part :",
"$$39 :",
"Else_part : TE_ELSE $$39 Compound",
"$$40 :",
"$$41 :",
"$$42 :",
"Multi_branch : $$40 TE_INSPECT Expression $$41 When_part_list $$42 Inspect_default TE_END",
"When_part_list :",
"When_part_list : When_part When_part_list",
"$$43 :",
"$$44 :",
"$$45 :",
"When_part : TE_WHEN $$43 Choices $$44 TE_THEN $$45 Compound",
"Choices : Choice",
"Choices : Choices TE_COMMA Choice",
"Choice : Integer_constant",
"Choice : Character_constant",
"Choice : Identifier",
"Choice : Integer_constant TE_DOTDOT Integer_constant",
"Choice : Integer_constant TE_DOTDOT Identifier",
"Choice : Identifier TE_DOTDOT Integer_constant",
"Choice : Identifier TE_DOTDOT Identifier",
"Choice : Character_constant TE_DOTDOT Character_constant",
"Choice : Identifier TE_DOTDOT Character_constant",
"Choice : Character_constant TE_DOTDOT Identifier",
"$$46 :",
"$$47 :",
"$$48 :",
"$$49 :",
"Loop : $$46 TE_FROM $$47 Compound $$48 Invariant Variant TE_UNTIL Expression TE_LOOP $$49 Compound TE_END",
"Invariant :",
"Invariant : TE_INVARIANT Assertion",
"Class_invariant :",
"$$50 :",
"Class_invariant : TE_INVARIANT $$50 Assertion",
"Variant :",
"Variant : TE_VARIANT Identifier TE_COLON Expression",
"Variant : TE_VARIANT Expression",
"$$51 :",
"$$52 :",
"Debug : $$51 TE_DEBUG Debug_keys $$52 Compound TE_END",
"Debug_keys :",
"Debug_keys : TE_LPARAN TE_RPARAN",
"$$53 :",
"Debug_keys : TE_LPARAN $$53 Debug_key_list TE_RPARAN",
"Debug_key_list : Non_empty_string",
"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
"Retry : TE_RETRY",
"Rescue :",
"$$54 :",
"Rescue : TE_RESCUE $$54 Compound",
"Assignment : Identifier TE_ASSIGN Expression",
"Assignment : TE_RESULT TE_ASSIGN Expression",
"Reverse_assignment : Identifier TE_ACCEPT Expression",
"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
"Creators :",
"$$55 :",
"Creators : $$55 Creation_clause_list",
"Creation_clause_list : Creation_clause",
"Creation_clause_list : Creation_clause_list Creation_clause",
"Creation_clause : TE_CREATION",
"$$56 :",
"Creation_clause : TE_CREATION Clients $$56 Feature_list",
"Creation_clause : TE_CREATION Client_list",
"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
"Creation_type :",
"Creation_type : Type",
"Creation_target : Identifier",
"Creation_target : TE_RESULT",
"Creation_call :",
"Creation_call : TE_DOT Identifier Parameters",
"Call : A_feature",
"Call : Call_on_result",
"Call : Call_on_feature",
"Call : Call_on_current",
"Call : Call_on_expression",
"$$57 :",
"Check : $$57 TE_CHECK Assertion TE_END",
"Expression : Expression_constant",
"Expression : Manifest_array",
"Expression : Feature_call",
"Expression : TE_LPARAN Expression TE_RPARAN",
"Expression : Expression TE_PLUS Expression",
"Expression : Expression TE_MINUS Expression",
"Expression : Expression TE_STAR Expression",
"Expression : Expression TE_SLASH Expression",
"Expression : Expression TE_MOD Expression",
"Expression : Expression TE_DIV Expression",
"Expression : Expression TE_POWER Expression",
"Expression : Expression TE_AND Expression",
"Expression : Expression TE_AND TE_THEN Expression",
"Expression : Expression TE_OR Expression",
"Expression : Expression TE_OR TE_ELSE Expression",
"Expression : Expression TE_IMPLIES Expression",
"Expression : Expression TE_XOR Expression",
"Expression : Expression TE_GE Expression",
"Expression : Expression TE_GT Expression",
"Expression : Expression TE_LE Expression",
"Expression : Expression TE_LT Expression",
"Expression : Expression TE_EQ Expression",
"Expression : Expression TE_NE Expression",
"Expression : Expression Free_operator Expression",
"Expression : TE_MINUS Expression",
"Expression : TE_PLUS Expression",
"Expression : TE_NOT Expression",
"Expression : TE_OLD Expression",
"Expression : Free_operator Expression",
"$$58 :",
"Expression : TE_STRIP $$58 TE_LPARAN Strip_identifier_list TE_RPARAN",
"Actual_parameter : Expression",
"Actual_parameter : TE_ADDRESS Feature_name",
"Actual_parameter : TE_ADDRESS TE_LPARAN Expression TE_RPARAN",
"Actual_parameter : TE_ADDRESS TE_CURRENT",
"Actual_parameter : TE_ADDRESS TE_RESULT",
"Free_operator : TE_FREE",
"Feature_call : Call_on_current",
"Feature_call : Call_on_result",
"Feature_call : Call_on_feature",
"Feature_call : TE_CURRENT",
"Feature_call : TE_RESULT",
"Feature_call : A_feature",
"Feature_call : Call_on_expression",
"Call_on_current : TE_CURRENT TE_DOT Remote_call",
"Call_on_result : TE_RESULT TE_DOT Remote_call",
"Call_on_feature : A_feature TE_DOT Remote_call",
"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
"Remote_call : Call_on_feature_access",
"Remote_call : Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
"A_feature : Identifier Parameters",
"Feature_access : Identifier Parameters",
"Parameters :",
"Parameters : TE_LPARAN TE_RPARAN",
"$$59 :",
"Parameters : TE_LPARAN $$59 Parameter_list TE_RPARAN",
"Parameter_list : Actual_parameter",
"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
"Expression_list : Expression",
"Expression_list : Expression_list TE_COMMA Expression",
"Manifest_expression_list :",
"Manifest_expression_list : Expression_list",
"Identifier : TE_ID",
"Manifest_constant : Boolean_constant",
"Manifest_constant : Character_constant",
"Manifest_constant : Integer_constant",
"Manifest_constant : Real_constant",
"Manifest_constant : Bit_constant",
"Manifest_constant : Manifest_string",
"Expression_constant : Boolean_constant",
"Expression_constant : Character_constant",
"Expression_constant : TE_INTEGER",
"Expression_constant : TE_REAL",
"Expression_constant : Bit_constant",
"Expression_constant : Manifest_string",
"Boolean_constant : TE_FALSE",
"Boolean_constant : TE_TRUE",
"Character_constant : TE_CHAR",
"Integer_constant : Sign TE_INTEGER",
"Sign :",
"Sign : TE_PLUS",
"Sign : TE_MINUS",
"Real_constant : Sign TE_REAL",
"Bit_constant : TE_A_BIT",
"Manifest_string : TE_STRING",
"Manifest_string : EIF_ERROR6",
"Non_empty_string : TE_STRING",
"$$60 :",
"Manifest_array : TE_LARRAY $$60 Manifest_expression_list TE_RARRAY",
"Set_position :",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 1374 "parser.y"
char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char separate;					/* Boolean mark for separate class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap()
{
	return 1;
}
#line 1851 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 189 "parser.y"
{click_list_init();}
break;
case 2:
#line 191 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yyvsp[-7].value),deferred,expanded,separate,yyvsp[-11].node,yyvsp[-6].node,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,click_list_new(),
start_position);
		}
break;
case 3:
#line 200 "parser.y"
{
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		}
break;
case 4:
#line 211 "parser.y"
{yyval.node = NULL;}
break;
case 5:
#line 212 "parser.y"
{list_init();}
break;
case 6:
#line 213 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 7:
#line 215 "parser.y"
{yyval.node = NULL;}
break;
case 8:
#line 219 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 9:
#line 221 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 10:
#line 224 "parser.y"
{list_init();}
break;
case 11:
#line 225 "parser.y"
{yyval.node = create_node2(INDEX_AS,yyvsp[-2].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 12:
#line 229 "parser.y"
{yyval.node = NULL;}
break;
case 13:
#line 231 "parser.y"
{yyval.node = yyvsp[-1].node;}
break;
case 14:
#line 235 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 15:
#line 237 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 16:
#line 241 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 17:
#line 243 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 18:
#line 251 "parser.y"
{deferred = FALSE; expanded = FALSE; separate = FALSE;}
break;
case 19:
#line 253 "parser.y"
{deferred = TRUE; expanded = FALSE; separate = FALSE;}
break;
case 20:
#line 255 "parser.y"
{expanded = TRUE; deferred = FALSE; separate = FALSE;}
break;
case 21:
#line 257 "parser.y"
{expanded = FALSE; deferred = FALSE; separate = TRUE;}
break;
case 22:
#line 266 "parser.y"
{yyval.node = NULL;}
break;
case 23:
#line 268 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 24:
#line 277 "parser.y"
{yyval.node = NULL;}
break;
case 25:
#line 278 "parser.y"
{list_init();}
break;
case 26:
#line 279 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 27:
#line 284 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 28:
#line 286 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 29:
#line 290 "parser.y"
{yyval.value = start_position;}
break;
case 30:
#line 290 "parser.y"
{list_init();}
break;
case 31:
#line 291 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_fclause_as(yyvsp[-2].node,yyval.node,yyvsp[-3].value);
		}
break;
case 32:
#line 299 "parser.y"
{yyval.node = NULL;}
break;
case 33:
#line 301 "parser.y"
{yyval.node = create_node1(CLIENT_AS,yyvsp[0].node);}
break;
case 34:
#line 305 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							}
break;
case 35:
#line 309 "parser.y"
{list_init();}
break;
case 36:
#line 310 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 37:
#line 314 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 38:
#line 318 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 40:
#line 325 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 43:
#line 332 "parser.y"
{list_init();}
break;
case 44:
#line 332 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 45:
#line 333 "parser.y"
{
		yyval.node = create_feature_as(yyvsp[-2].node,yyvsp[-1].node,click_list_start(yyvsp[-3].value),start_position);
		click_list_set (yyval.node, yyvsp[-3].value);
		}
break;
case 46:
#line 341 "parser.y"
{
		yyval.value = yyvsp[0].value;
		list_push(click_list_elem(yyval.value));
		}
break;
case 47:
#line 346 "parser.y"
{
		yyval.value = yyvsp[-2].value;
		list_push(click_list_elem(yyvsp[0].value));
		}
break;
case 48:
#line 354 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 49:
#line 360 "parser.y"
{
		is_frozen = FALSE;
		}
break;
case 50:
#line 364 "parser.y"
{
		is_frozen = TRUE;
		}
break;
case 51:
#line 371 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 52:
#line 376 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 53:
#line 380 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 54:
#line 387 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 55:
#line 396 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 56:
#line 404 "parser.y"
{
		extern int is_infix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		}
break;
case 57:
#line 417 "parser.y"
{
		extern int is_prefix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		}
break;
case 58:
#line 429 "parser.y"
{yyval.node = create_node3(BODY_AS,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yyvsp[-2].node == NULL) && (yyvsp[-1].node == NULL) && (yyvsp[0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yyvsp[0].cr_node.cr_type == CR_CONSTANT) && ((yyvsp[-2].node != NULL) || (yyvsp[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yyvsp[-2].node != NULL) && ((yyvsp[0].cr_node.cr_type != CR_ROUTINE) || (yyvsp[0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	}
break;
case 59:
#line 449 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;}
break;
case 60:
#line 451 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].cr_node.cr_node;yyval.cr_node.cr_type = yyvsp[0].cr_node.cr_type;}
break;
case 61:
#line 455 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yyvsp[0].node));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 62:
#line 457 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 63:
#line 459 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].node;yyval.cr_node.cr_type = CR_ROUTINE;}
break;
case 64:
#line 468 "parser.y"
{yyval.node = NULL;}
break;
case 65:
#line 469 "parser.y"
{list_init();}
break;
case 66:
#line 470 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 67:
#line 474 "parser.y"
{ yyval.node = NULL;}
break;
case 68:
#line 479 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 69:
#line 481 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 70:
#line 486 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-1].value);
		}
break;
case 71:
#line 492 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-2].value),yyvsp[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-2].value);
		}
break;
case 72:
#line 499 "parser.y"
{
		inherit_context = (yyvsp[-5].node==NULL)&&(yyvsp[-4].node==NULL)&&(yyvsp[-3].node==NULL)&&(yyvsp[-2].node==NULL)&&(yyvsp[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-7].value),yyvsp[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);
		click_list_set (rn_ast, yyvsp[-7].value);
		}
break;
case 73:
#line 508 "parser.y"
{yyval.node = NULL;}
break;
case 74:
#line 510 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 75:
#line 514 "parser.y"
{yyval.node = NULL;}
break;
case 76:
#line 516 "parser.y"
{yyval.node = NULL;}
break;
case 77:
#line 517 "parser.y"
{list_init();}
break;
case 78:
#line 518 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 79:
#line 523 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 80:
#line 525 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 81:
#line 530 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yyvsp[-2].value),click_list_elem(yyvsp[0].value));
		click_list_set (click_list_elem(yyvsp[0].value), yyvsp[-2].value);
		}
break;
case 82:
#line 537 "parser.y"
{yyval.node = NULL;}
break;
case 83:
#line 538 "parser.y"
{list_init();}
break;
case 84:
#line 539 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 85:
#line 541 "parser.y"
{yyval.node = NULL;}
break;
case 86:
#line 546 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 87:
#line 548 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 88:
#line 552 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yyvsp[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yyvsp[0].node);
		}
break;
case 89:
#line 559 "parser.y"
{yyval.node = create_node(ALL_AS);}
break;
case 90:
#line 560 "parser.y"
{list_init();}
break;
case 91:
#line 561 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 92:
#line 566 "parser.y"
{list_push(click_list_elem(yyvsp[0].value));}
break;
case 93:
#line 568 "parser.y"
{list_push(click_list_elem(yyvsp[0].value));}
break;
case 94:
#line 572 "parser.y"
{yyval.node = NULL;}
break;
case 95:
#line 574 "parser.y"
{yyval.node = NULL;}
break;
case 96:
#line 575 "parser.y"
{list_init();}
break;
case 97:
#line 576 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 98:
#line 580 "parser.y"
{yyval.node = NULL;}
break;
case 99:
#line 582 "parser.y"
{yyval.node = NULL;}
break;
case 100:
#line 583 "parser.y"
{list_init();}
break;
case 101:
#line 584 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 102:
#line 588 "parser.y"
{yyval.node = NULL;}
break;
case 103:
#line 590 "parser.y"
{yyval.node = NULL;}
break;
case 104:
#line 591 "parser.y"
{list_init();}
break;
case 105:
#line 592 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 106:
#line 600 "parser.y"
{yyval.node = NULL;}
break;
case 107:
#line 602 "parser.y"
{yyerror((char *)0);}
break;
case 108:
#line 603 "parser.y"
{list_init();}
break;
case 109:
#line 604 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 111:
#line 609 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 112:
#line 612 "parser.y"
{list_init();}
break;
case 113:
#line 612 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 114:
#line 613 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yyvsp[-3].node,yyvsp[-1].node);}
break;
case 115:
#line 617 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 116:
#line 619 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 119:
#line 627 "parser.y"
{yyval.node = NULL;}
break;
case 120:
#line 629 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 121:
#line 633 "parser.y"
{yyval.value = start_position;}
break;
case 122:
#line 636 "parser.y"
{yyval.node = create_routine_as(yyvsp[-7].node,yyvsp[-6].value,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 123:
#line 640 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 124:
#line 642 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 125:
#line 644 "parser.y"
{yyval.node = create_node(DEFERRED_AS);}
break;
case 126:
#line 648 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 127:
#line 651 "parser.y"
{SET_POS(start_position);}
break;
case 128:
#line 652 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yyvsp[0].node);}
break;
case 129:
#line 656 "parser.y"
{yyval.node = NULL;}
break;
case 130:
#line 658 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 131:
#line 661 "parser.y"
{list_init();}
break;
case 132:
#line 662 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 133:
#line 663 "parser.y"
{list_init();}
break;
case 134:
#line 664 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 135:
#line 670 "parser.y"
{yyval.node = NULL;}
break;
case 136:
#line 671 "parser.y"
{list_init();}
break;
case 137:
#line 672 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 138:
#line 676 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 142:
#line 683 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 144:
#line 688 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 145:
#line 690 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 146:
#line 692 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 147:
#line 694 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 148:
#line 696 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 149:
#line 698 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 150:
#line 700 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 151:
#line 702 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 152:
#line 704 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 153:
#line 706 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 154:
#line 710 "parser.y"
{yyval.node = NULL;}
break;
case 155:
#line 711 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 156:
#line 712 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yyvsp[0].node);
								}
break;
case 157:
#line 715 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 158:
#line 716 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yyvsp[0].node);
								}
break;
case 159:
#line 722 "parser.y"
{yyval.node = NULL;}
break;
case 160:
#line 723 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 161:
#line 724 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yyvsp[0].node);
								}
break;
case 162:
#line 727 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 163:
#line 728 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yyvsp[0].node);
								}
break;
case 164:
#line 734 "parser.y"
{list_init();}
break;
case 165:
#line 735 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 168:
#line 742 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 169:
#line 744 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 170:
#line 748 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,NULL,yyvsp[0].node);
								}
break;
case 171:
#line 752 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,yyvsp[-2].node,yyvsp[0].node);
								}
break;
case 172:
#line 756 "parser.y"
{ yyval.node = NULL;}
break;
case 173:
#line 766 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 174:
#line 771 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 175:
#line 776 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 176:
#line 781 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 177:
#line 786 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 178:
#line 791 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 179:
#line 796 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yyvsp[0].node);
		}
break;
case 180:
#line 800 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yyvsp[0].node);
		}
break;
case 181:
#line 804 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yyvsp[0].node);
		}
break;
case 182:
#line 808 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		}
break;
case 183:
#line 815 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yyvsp[0].value),NULL);
        click_list_set (yyval.node, yyvsp[0].value);
        }
break;
case 184:
#line 820 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
        click_list_set (yyval.node, yyvsp[-1].value);
        }
break;
case 185:
#line 828 "parser.y"
{yyval.node = NULL;}
break;
case 186:
#line 829 "parser.y"
{list_init();}
break;
case 187:
#line 830 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 188:
#line 837 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 189:
#line 839 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 190:
#line 847 "parser.y"
{
		yyval.node = NULL;
		}
break;
case 191:
#line 850 "parser.y"
{list_init();}
break;
case 192:
#line 851 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 194:
#line 859 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 195:
#line 861 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 196:
#line 865 "parser.y"
{strcpy(generic_name, token_str);}
break;
case 197:
#line 866 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yyvsp[0].node);}
break;
case 198:
#line 870 "parser.y"
{yyval.node = NULL;}
break;
case 199:
#line 872 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 200:
#line 879 "parser.y"
{yyval.value = start_position;}
break;
case 201:
#line 879 "parser.y"
{list_init();}
break;
case 202:
#line 879 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 203:
#line 880 "parser.y"
{SET_POS(yyvsp[-9].value); yyval.node = create_node4(IF_AS,yyvsp[-7].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 204:
#line 884 "parser.y"
{yyval.node = NULL;}
break;
case 205:
#line 885 "parser.y"
{list_init();}
break;
case 206:
#line 886 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 207:
#line 890 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 208:
#line 892 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 209:
#line 895 "parser.y"
{list_init();}
break;
case 210:
#line 896 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 211:
#line 900 "parser.y"
{yyval.node = NULL;}
break;
case 212:
#line 901 "parser.y"
{list_init();}
break;
case 213:
#line 902 "parser.y"
{yyval.node = inspect_else();}
break;
case 214:
#line 906 "parser.y"
{yyval.node = NULL;}
break;
case 215:
#line 907 "parser.y"
{list_init();}
break;
case 216:
#line 908 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 217:
#line 911 "parser.y"
{yyval.value = start_position;}
break;
case 218:
#line 912 "parser.y"
{list_init();}
break;
case 219:
#line 912 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 220:
#line 914 "parser.y"
{SET_POS(yyvsp[-7].value); yyval.node = create_node3(INSPECT_AS,yyvsp[-5].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 222:
#line 927 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 223:
#line 930 "parser.y"
{list_init();}
break;
case 224:
#line 930 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 225:
#line 930 "parser.y"
{list_init();}
break;
case 226:
#line 931 "parser.y"
{yyval.node = create_node2(CASE_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 227:
#line 935 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 228:
#line 937 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 229:
#line 941 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 230:
#line 943 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 231:
#line 945 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 232:
#line 947 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 233:
#line 949 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 234:
#line 951 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 235:
#line 953 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 236:
#line 955 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 237:
#line 957 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 238:
#line 959 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 239:
#line 962 "parser.y"
{yyval.value = start_position;}
break;
case 240:
#line 962 "parser.y"
{list_init();}
break;
case 241:
#line 962 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 242:
#line 962 "parser.y"
{list_init();}
break;
case 243:
#line 963 "parser.y"
{SET_POS(yyvsp[-12].value); yyval.node = create_node5(LOOP_AS,yyvsp[-8].node,yyvsp[-7].node,yyvsp[-6].node,yyvsp[-4].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 244:
#line 967 "parser.y"
{yyval.node = NULL;}
break;
case 245:
#line 969 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 246:
#line 973 "parser.y"
{yyval.node = NULL;}
break;
case 247:
#line 974 "parser.y"
{id_level = INVARIANT_LEVEL;}
break;
case 248:
#line 975 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yyvsp[0].node);
		}
break;
case 249:
#line 983 "parser.y"
{yyval.node = NULL;}
break;
case 250:
#line 985 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 251:
#line 987 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yyvsp[0].node);}
break;
case 252:
#line 990 "parser.y"
{yyval.value = start_position; }
break;
case 253:
#line 990 "parser.y"
{list_init();}
break;
case 254:
#line 991 "parser.y"
{SET_POS(yyvsp[-5].value); yyval.node = create_node2(DEBUG_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 255:
#line 995 "parser.y"
{yyval.node = NULL;}
break;
case 256:
#line 997 "parser.y"
{yyval.node = NULL;}
break;
case 257:
#line 998 "parser.y"
{list_init();}
break;
case 258:
#line 999 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 259:
#line 1003 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 260:
#line 1005 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 261:
#line 1009 "parser.y"
{yyval.node = create_node(RETRY_AS);}
break;
case 262:
#line 1013 "parser.y"
{yyval.node = NULL;}
break;
case 263:
#line 1014 "parser.y"
{list_init();}
break;
case 264:
#line 1015 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 265:
#line 1032 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yyvsp[-2].node,NULL),yyvsp[0].node);}
break;
case 266:
#line 1034 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 267:
#line 1038 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yyvsp[-2].node,NULL),yyvsp[0].node);}
break;
case 268:
#line 1040 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 269:
#line 1045 "parser.y"
{yyval.node = NULL;}
break;
case 270:
#line 1046 "parser.y"
{list_init();}
break;
case 271:
#line 1047 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 272:
#line 1051 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 273:
#line 1053 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 274:
#line 1057 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);}
break;
case 275:
#line 1058 "parser.y"
{list_init();}
break;
case 276:
#line 1059 "parser.y"
{yyval.node = create_node2(CREATE_AS,yyvsp[-2].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 277:
#line 1061 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yyvsp[0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);								}
break;
case 278:
#line 1067 "parser.y"
{yyval.node = create_node3(CREATION_AS,yyvsp[-3].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 279:
#line 1071 "parser.y"
{yyval.node = NULL;}
break;
case 280:
#line 1073 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 281:
#line 1077 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yyvsp[0].node,NULL);}
break;
case 282:
#line 1079 "parser.y"
{yyval.node = create_node(RESULT_AS);}
break;
case 283:
#line 1083 "parser.y"
{yyval.node = NULL;}
break;
case 284:
#line 1085 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 285:
#line 1093 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 286:
#line 1095 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 287:
#line 1097 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 288:
#line 1099 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 289:
#line 1101 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 290:
#line 1104 "parser.y"
{yyval.value = start_position; }
break;
case 291:
#line 1105 "parser.y"
{SET_POS(yyvsp[-3].value); yyval.node = create_node1(CHECK_AS,yyvsp[-1].node);}
break;
case 292:
#line 1113 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yyvsp[0].node);}
break;
case 293:
#line 1115 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yyvsp[0].node);}
break;
case 294:
#line 1117 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yyvsp[0].node);}
break;
case 295:
#line 1119 "parser.y"
{yyval.node = create_node1(PARAN_AS, yyvsp[-1].node);}
break;
case 296:
#line 1121 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 297:
#line 1123 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 298:
#line 1125 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 299:
#line 1127 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 300:
#line 1129 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 301:
#line 1131 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 302:
#line 1133 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 303:
#line 1135 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 304:
#line 1137 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 305:
#line 1139 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 306:
#line 1141 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 307:
#line 1143 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 308:
#line 1145 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 309:
#line 1147 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 310:
#line 1149 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 311:
#line 1151 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 312:
#line 1153 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 313:
#line 1155 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 314:
#line 1157 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 315:
#line 1159 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 316:
#line 1162 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yyvsp[0].node);}
break;
case 317:
#line 1164 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yyvsp[0].node);}
break;
case 318:
#line 1166 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yyvsp[0].node);}
break;
case 319:
#line 1168 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yyvsp[0].node);}
break;
case 320:
#line 1170 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 321:
#line 1171 "parser.y"
{yyerrok;list_init();}
break;
case 322:
#line 1172 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 323:
#line 1176 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 324:
#line 1178 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yyvsp[0].value));
								}
break;
case 325:
#line 1183 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(EXPR_ADDRESS_AS,yyvsp[-1].node);
								}
break;
case 326:
#line 1188 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);}
break;
case 327:
#line 1190 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);}
break;
case 328:
#line 1194 "parser.y"
{yyval.node = create_id(token_str);}
break;
case 329:
#line 1202 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 330:
#line 1204 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 331:
#line 1206 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 332:
#line 1208 "parser.y"
{yyval.node = create_node(CURRENT_AS);}
break;
case 333:
#line 1210 "parser.y"
{yyval.node = create_node(RESULT_AS);}
break;
case 334:
#line 1212 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 335:
#line 1214 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 336:
#line 1218 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yyvsp[0].node);}
break;
case 337:
#line 1222 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 338:
#line 1226 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 339:
#line 1230 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 340:
#line 1234 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 341:
#line 1236 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 342:
#line 1240 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 343:
#line 1242 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 344:
#line 1246 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yyvsp[-1].node,yyvsp[0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yyvsp[-1].node,yyvsp[0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yyvsp[-1].node,yyvsp[0].node);
								break;
							}
						}
break;
case 345:
#line 1261 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 346:
#line 1265 "parser.y"
{yyval.node = NULL;}
break;
case 347:
#line 1267 "parser.y"
{yyval.node = NULL;}
break;
case 348:
#line 1268 "parser.y"
{list_init();}
break;
case 349:
#line 1269 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 350:
#line 1273 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 351:
#line 1275 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 352:
#line 1279 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 353:
#line 1281 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 356:
#line 1293 "parser.y"
{
				yyval.node = create_id(token_str);
				}
break;
case 357:
#line 1299 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 358:
#line 1301 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 359:
#line 1303 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 360:
#line 1305 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 361:
#line 1307 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 362:
#line 1309 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 363:
#line 1313 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 364:
#line 1315 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 365:
#line 1317 "parser.y"
{yyval.node = create_int(token_str,0);}
break;
case 366:
#line 1319 "parser.y"
{yyval.node = create_real(token_str,0);}
break;
case 367:
#line 1321 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 368:
#line 1323 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 369:
#line 1327 "parser.y"
{yyval.node = create_bool(0);}
break;
case 370:
#line 1329 "parser.y"
{yyval.node = create_bool(1);}
break;
case 371:
#line 1333 "parser.y"
{yyval.node = create_char(token_str);}
break;
case 372:
#line 1337 "parser.y"
{yyval.node = create_int(token_str,yyvsp[-1].value);}
break;
case 373:
#line 1341 "parser.y"
{yyval.value = 0;}
break;
case 374:
#line 1343 "parser.y"
{yyval.value = 0;}
break;
case 375:
#line 1345 "parser.y"
{yyval.value = 1;}
break;
case 376:
#line 1349 "parser.y"
{yyval.node = create_real(token_str,yyvsp[-1].value);}
break;
case 377:
#line 1353 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));}
break;
case 378:
#line 1357 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 379:
#line 1359 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 380:
#line 1363 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 381:
#line 1366 "parser.y"
{list_init();}
break;
case 382:
#line 1367 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 383:
#line 1370 "parser.y"
{yyval.value = SET_POS(start_position);}
break;
#line 3632 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
