indexing
	description:"Scanners for Eiffel parsers"
	author:     "Arnaud PICHERY from an Eric Bezault model"
	date:       "$Date$"
	revision:   "$Revision$"

class EDITOR_EIFFEL_SCANNER

inherit

	EDITOR_SCANNER

create
	make

feature -- Status report

	valid_start_condition (sc: INTEGER): BOOLEAN is
			-- Is `sc' a valid start condition?
		do
			Result := (sc = INITIAL)
		end

feature {NONE} -- Implementation

	yy_build_tables is
			-- Build scanner tables.
		do
			yy_nxt ?= yy_nxt_template
			yy_chk ?= yy_chk_template
			yy_base ?= yy_base_template
			yy_def ?= yy_def_template
			yy_ec ?= yy_ec_template
			yy_meta ?= yy_meta_template
			yy_accept ?= yy_accept_template
		end

	yy_execute_action (yy_act: INTEGER) is
			-- Execute semantic action.
		do
			inspect yy_act
when 1 then
--|#line 24
-- Ignore carriage return
when 2 then
--|#line 25

					create {EDITOR_TOKEN_SPACE} curr_token.make(text_count)
					update_token_list
					
when 3 then
--|#line 29

					create {EDITOR_TOKEN_TABULATION} curr_token.make(text_count, tab_size_cell)
					update_token_list
					
when 4 then
--|#line 33

					from i_ := 1 until i_ > text_count loop
						create {EDITOR_TOKEN_EOL} curr_token.make
						update_token_list
						i_ := i_ + 1
					end
					in_comments := False
					
when 5 then
--|#line 45
 
						-- comments
					create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					update_token_list
					in_comments := True
					
when 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 then
--|#line 54

						-- Symbols
					if not in_comments then
						create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 then
--|#line 75
 
						-- Operator Symbol
					if not in_comments then
						create {EDITOR_TOKEN_OPERATOR} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93 then
--|#line 105

										-- Keyword
										if not in_comments then
											create {EDITOR_TOKEN_KEYWORD} curr_token.make(text, tab_size_cell)
										else
											create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
										end
										update_token_list
										
when 94 then
--|#line 174

										if not in_comments then
											if not Eiffel_universe.classes_with_name (text).is_empty then
												create {EDITOR_TOKEN_CLASS} curr_token.make(text, tab_size_cell)
											else
												create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
											end
										else
											create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
										end
										update_token_list
										
when 95 then
--|#line 188

										if not in_comments then
											create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
										else
											create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
										end
										update_token_list
										
when 96 then
--|#line 200

										if not in_comments then
											create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
										else
											create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
										end
										update_token_list
										
when 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118 then
--|#line 214

					if not in_comments then
						create {EDITOR_TOKEN_CHARACTER} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 119 then
--|#line 244

					if not in_comments then
						code_ := text_substring (4, text_count - 2).to_integer
						if code_ > feature {CHARACTER}.Max_value then
							-- Character error. Consedered as text.
							create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_CHARACTER} curr_token.make(text, tab_size_cell)
						end
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 120, 121 then
--|#line 259

					-- Character error. Catch-all rules (no backing up)
					if not in_comments then
						create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 122, 123 then
--|#line 273

					-- Eiffel String
					if not in_comments then
						create {EDITOR_TOKEN_STRING} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 124 then
--|#line 286

					-- Eiffel Bit
					if not in_comments then
						create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
					else
						create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
					end
					update_token_list
					
when 125, 126 then
--|#line 298

						-- Eiffel Integer
						if not in_comments then
							create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 127 then
--|#line 308

						-- Eiffel Integer Error (considered as text)
						if not in_comments then
							create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 128 then
	yy_position := yy_position - 1
--|#line 320

							-- Eiffel reals & doubles
						if not in_comments then
							create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 129, 130 then
--|#line 321

							-- Eiffel reals & doubles
						if not in_comments then
							create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 131 then
	yy_position := yy_position - 1
--|#line 323

							-- Eiffel reals & doubles
						if not in_comments then
							create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 132, 133 then
--|#line 324

							-- Eiffel reals & doubles
						if not in_comments then
							create {EDITOR_TOKEN_NUMBER} curr_token.make(text, tab_size_cell)
						else
							create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
						end
						update_token_list
						
when 134 then
--|#line 341

					create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
					update_token_list
					
when 135 then
--|#line 349

					-- Error (considered as text)
				if not in_comments then
					create {EDITOR_TOKEN_TEXT} curr_token.make(text, tab_size_cell)
				else
					create {EDITOR_TOKEN_COMMENT} curr_token.make(text, tab_size_cell)
				end
				update_token_list
				
when 136 then
--|#line 0
echo
			else
				last_token := yyError_token
				fatal_error ("fatal scanner internal error: no action found")
			end
		end

	yy_execute_eof_action (yy_sc: INTEGER) is
			-- Execute EOF semantic action.
		do
			inspect yy_sc
when 0 then
--|#line 0
terminate
			else
				terminate
			end
		end

feature {NONE} -- Table templates

	yy_nxt_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    4,    5,    6,    7,    8,    9,   10,   11,   12,
			   10,   13,   14,   15,   16,   17,   18,   19,   20,   21,
			   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
			   32,   33,   34,   35,   36,   36,   37,   36,   36,   38,
			   36,   39,   40,   41,   36,   42,   43,   44,   45,   46,
			   47,   48,   36,   36,   49,   50,   51,   52,   53,   54,
			   55,   56,   57,   58,   59,   60,   61,   61,   62,   61,
			   61,   63,   61,   64,   65,   66,   61,   67,   68,   69,
			   70,   71,   72,   73,   61,   61,   74,   75,   82,   86,
			   87,   83,   88,   90,   92,   91,   91,  100,  101,  105,

			   93,   89,   94,  165,   95,   96,   94,  105,   96,   96,
			  102,  103,  149,   97,  529,  184,  184,  105,  150,  179,
			  105,   82,  175,  186,   83,   82,   83,  445,   83,  318,
			  318,  110,  336,  438,  336,  166,  522,  337,  337,  110,
			  338,  338,   98,  334,  151,   97,   98,  105,  105,  110,
			  152,  180,  110,  184,  176,  105,  105,  105,  105,  105,
			  105,  106,  105,  105,  105,  105,  107,  105,  108,  105,
			  105,  105,  105,  109,  105,  105,  105,  105,  105,  105,
			  105,  219,  219,  116,  154,  105,  164,  110,  110,  110,
			  110,  110,  110,  111,  110,  110,  110,  110,  112,  110,

			  113,  110,  110,  110,  110,  114,  110,  110,  110,  110,
			  110,  110,  110,  105,  105,  116,  154,  166,  164,  184,
			  176,  105,  105,  105,  105,  105,  105,  105,  105,  115,
			  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
			  105,  105,  105,  105,  105,  105,  105,  337,  337,  166,
			  178,  105,  176,  110,  110,  110,  110,  110,  110,  110,
			  110,  116,  110,  110,  110,  110,  110,  110,  110,  110,
			  110,  110,  110,  110,  110,  110,  110,  110,  110,  117,
			  105,  125,  178,  118,  333,  105,  180,  105,  105,  119,
			  105,  126,  120,  129,  153,  130,  163,  182,  332,  135,

			  105,  141,  331,  136,  105,  131,  181,  105,  142,  143,
			  330,  121,  110,  127,  144,  122,  137,  110,  180,  110,
			  110,  123,  110,  128,  124,  132,  154,  133,  164,  182,
			  167,  138,  110,  145,  105,  139,  110,  134,  182,  110,
			  146,  147,  155,  171,  105,  168,  148,  177,  140,  105,
			  105,  105,  156,  172,  157,  105,  111,  127,  158,  151,
			  121,  112,  169,  113,  122,  152,  110,  128,  114,  329,
			  123,  439,  439,  124,  159,  173,  110,  170,  328,  178,
			  327,  110,  110,  110,  160,  174,  161,  110,  111,  127,
			  162,  151,  121,  112,  138,  113,  122,  152,  139,  128,

			  114,  132,  123,  133,  169,  124,  159,  145,  220,  215,
			  215,  140,  105,  134,  146,  147,  160,  173,  161,  170,
			  148,  216,  162,  326,  223,  221,  138,  174,  325,  105,
			  139,  443,  443,  132,  324,  133,  169,  323,  159,  145,
			  221,  343,  343,  140,  110,  134,  146,  147,  160,  173,
			  161,  170,  148,  216,  162,  222,  225,  221,  223,  174,
			  189,  110,  322,  190,  191,  192,  193,  321,  211,  211,
			  320,   94,  194,  218,  218,  224,  225,  195,  225,  196,
			  212,  197,  198,  199,  200,  114,  201,  224,  202,  319,
			  225,  227,  203,   94,  204,  217,  218,  205,  206,  207,

			  208,  209,  210,  105,   97,  226,  213,  224,  225,  105,
			  225,   98,  212,  228,  109,  230,  105,  114,  229,  105,
			  231,  105,  233,  227,  234,  232,  105,  240,  235,  105,
			  236,  105,  105,   98,  237,  110,   97,  227,  239,  238,
			  317,  110,  241,  525,  525,  229,  114,  231,  110,  105,
			  229,  110,  231,  110,  233,  252,  236,  233,  110,  242,
			  237,  110,  236,  110,  110,  105,  237,  242,  249,  246,
			  239,  239,  244,  247,  243,  105,  245,  250,  248,  251,
			  253,  110,  243,  105,  105,  105,  105,  253,  256,  255,
			  316,  254,  257,  105,  526,  526,  105,  110,  264,  242,

			  249,  246,  265,  258,  246,  247,  259,  110,  247,  251,
			  249,  251,  253,  271,  243,  110,  110,  110,  110,  268,
			  260,  255,  260,  255,  261,  110,  261,  266,  110,  105,
			  265,  269,  105,  105,  265,  262,  105,  262,  263,  267,
			  263,  273,  274,  270,  276,  271,  272,  105,  275,  277,
			  105,  268,  278,  279,  260,  315,  105,  105,  261,  268,
			  314,  110,  295,  269,  110,  110,  294,  313,  110,  262,
			  312,  269,  263,  273,  275,  271,  277,  285,  273,  110,
			  275,  277,  110,  105,  279,  279,  280,  286,  110,  110,
			  287,  105,  288,  289,  295,  298,  281,  105,  295,  282,

			  290,  283,  284,  292,  291,  297,  296,  293,  299,  285,
			  105,  188,  105,  307,   79,  110,   78,  309,  285,  286,
			  311,  306,  287,  110,  288,  289,  308,  299,  286,  110,
			  105,  287,  292,  288,  289,  292,  293,  297,  297,  293,
			  299,  300,  110,  303,  110,  307,  301,  105,  304,  309,
			  442,  442,  311,  307,  184,  184,  310,  302,  309,  305,
			  335,  335,  110,   77,  339,  339,   94,  348,  344,  345,
			   76,  105,  212,  303,  183,  303,  340,   97,  304,  110,
			  304,  342,   94,  342,  345,  345,  343,  343,  311,  305,
			  104,  305,  184,  346,  346,  105,  350,  349,  213,  348,

			  347,  351,  341,  110,  212,  105,   98,  105,  340,   97,
			  352,  105,  354,  356,  358,  355,  105,  360,  105,  362,
			  361,  353,   98,  105,  105,  357,  364,  110,  350,  350,
			  359,  184,  348,  352,  363,  105,  366,  110,  105,  110,
			  369,  372,  352,  110,  354,  356,  358,  356,  110,  360,
			  110,  362,  362,  354,  370,  110,  110,  358,  364,  105,
			  371,  367,  360,  374,  105,  105,  364,  110,  366,  105,
			  110,  365,  369,  372,  105,  368,  375,  376,  382,  105,
			   99,  105,  381,   80,  373,  377,  370,  379,   79,  384,
			  383,  110,  372,  369,  105,  374,  110,  110,  378,  386,

			  380,  110,  388,  366,  390,  105,  110,  370,  376,  376,
			  382,  110,  387,  110,  382,  389,  374,  379,  392,  379,
			  385,  384,  384,  105,  105,  391,  110,  393,  394,  105,
			  380,  386,  380,  105,  388,  105,  390,  110,  396,  105,
			  395,  398,  105,  105,  388,  399,  400,  390,  397,  105,
			  392,  402,  386,  404,   78,  110,  110,  392,  401,  394,
			  394,  110,  403,  406,  105,  110,  105,  110,  405,  408,
			  396,  110,  396,  398,  110,  110,  105,  400,  400,  105,
			  398,  110,  414,  402,  105,  404,  409,  411,  416,  417,
			  402,  407,  105,  413,  404,  406,  110,  105,  110,  415,

			  406,  408,  418,  105,  410,  412,  419,  420,  110,  422,
			  105,  110,  424,  423,  414,  421,  110,  105,  411,  411,
			  416,  418,  425,  408,  110,  414,  105,  429,  426,  110,
			  428,  416,  105,  430,  418,  110,  412,  412,  420,  420,
			  427,  422,  110,  431,  424,  424,  432,  422,  105,  110,
			  434,  105,   77,  433,  426,  435,  318,  318,  110,  430,
			  426,   76,  428,  684,  110,  430,  684,  436,  436,  437,
			  437,  449,  428,  530,  530,  432,  440,  440,  432,  212,
			  110,  451,  434,  110,  441,  434,  441,  105,  340,  442,
			  442,  444,  444,  446,  453,  344,  345,  446,  448,  345,

			  345,  447,  447,  449,   97,  213,  105,  438,  105,  455,
			  452,  212,  105,  451,  341,  457,  450,  105,  459,  110,
			  340,  458,  454,  461,  463,  105,  453,  464,  456,  445,
			  449,  465,  460,  184,  105,  684,   97,  184,  110,  184,
			  110,  455,  453,  105,  110,  467,  105,  457,  451,  110,
			  459,  468,  462,  459,  455,  461,  463,  110,  105,  465,
			  457,  105,  469,  465,  461,  471,  110,  466,  473,  474,
			  470,  105,  475,  105,  105,  110,  477,  467,  110,  105,
			  472,  478,  479,  469,  463,  105,  476,  480,  481,  483,
			  110,  485,  105,  110,  469,  487,  684,  471,  489,  467,

			  473,  475,  471,  110,  475,  110,  110,  482,  477,  105,
			  491,  110,  473,  479,  479,  105,  105,  110,  477,  481,
			  481,  483,  486,  485,  110,  484,  105,  487,  105,  105,
			  489,  105,  490,  493,  492,  105,  495,  488,  105,  483,
			  496,  110,  491,  105,  497,  105,  499,  110,  110,  498,
			  494,  500,  501,  105,  487,  503,  504,  485,  110,  105,
			  110,  110,  505,  110,  491,  493,  493,  110,  495,  489,
			  110,  502,  497,  105,  507,  110,  497,  110,  499,  509,
			  508,  499,  495,  501,  501,  110,  105,  503,  505,  506,
			  105,  110,  511,  105,  505,  513,  105,  105,  514,  510,

			  512,  105,  515,  503,  105,  110,  507,  517,  519,  520,
			  105,  509,  509,  518,  521,  105,  516,  105,  110,  524,
			  524,  507,  110,  684,  511,  110,  684,  513,  110,  110,
			  515,  511,  513,  110,  515,  105,  110,  528,  528,  517,
			  519,  521,  110,  436,  436,  519,  521,  110,  517,  110,
			  527,  527,  531,  531,  105,  523,  684,  438,  532,  532,
			  527,  527,  340,  534,  105,  184,  184,  110,  105,  535,
			  537,  684,  533,  536,  538,  529,  105,  540,  105,  542,
			  105,  539,  543,  544,  546,  105,  110,  523,  341,  541,
			  445,  545,  547,  548,  340,  105,  110,  105,  550,  684,

			  110,  537,  537,   98,  533,  538,  538,  105,  110,  540,
			  110,  542,  110,  540,  544,  544,  546,  110,  549,  552,
			  105,  542,  554,  546,  548,  548,  105,  110,  105,  110,
			  550,  551,  556,  105,  558,  559,  557,  553,  555,  110,
			  105,  560,  561,  562,  564,  565,  566,  563,  105,  568,
			  550,  552,  110,  105,  554,  567,  570,  571,  110,  105,
			  110,  572,  105,  552,  556,  110,  558,  560,  558,  554,
			  556,  569,  110,  560,  562,  562,  564,  566,  566,  564,
			  110,  568,  573,  574,  576,  110,  105,  568,  570,  572,
			  105,  110,  577,  572,  110,  578,  105,  105,  580,  575,

			  105,  105,  582,  570,  584,  583,  105,  585,  579,  586,
			  588,  105,  581,  105,  574,  574,  576,  587,  110,  590,
			  105,  105,  110,  105,  578,  589,  606,  578,  110,  110,
			  580,  576,  110,  110,  582,  684,  584,  584,  110,  586,
			  580,  586,  588,  110,  582,  110,  592,  592,  594,  588,
			  684,  590,  110,  110,  591,  110,  591,  590,  606,  592,
			  592,  593,  593,  527,  527,  596,  596,  597,  597,  598,
			  598,  599,  599,  608,  213,  595,  600,  600,  603,  603,
			  594,  601,  105,  601,  438,  105,  599,  599,  605,  609,
			  604,  610,  105,  105,  105,  611,  607,  612,  105,  105,

			  613,  614,  615,  529,  616,  608,  105,  595,  105,  445,
			  105,  618,  592,  592,  110,  620,  684,  110,  622,  624,
			  606,  610,  604,  610,  110,  110,  110,  612,  608,  612,
			  110,  110,  614,  614,  616,  105,  616,  105,  110,  105,
			  110,  105,  110,  618,  619,  617,  625,  620,  621,  626,
			  622,  624,  623,  105,  105,  628,  105,  630,  105,  632,
			  105,  633,  634,  631,  627,  105,  629,  110,  105,  110,
			  105,  110,  105,  110,  636,  638,  620,  618,  626,  105,
			  622,  626,  640,  684,  624,  110,  110,  628,  110,  630,
			  110,  632,  110,  634,  634,  632,  628,  110,  630,  105,

			  110,  105,  110,  105,  110,  684,  636,  638,  637,  684,
			  635,  110,  639,  647,  640,  592,  592,  641,  641,  642,
			  684,  642,  645,  645,  643,  643,  646,  646,  599,  599,
			  684,  110,  644,  110,  644,  110,  105,  645,  645,  341,
			  638,  652,  636,  653,  640,  647,  648,  648,  599,  599,
			  649,  649,  650,  105,  650,  655,  684,  651,  651,  654,
			  529,  656,  647,  657,  105,  659,  105,  105,  110,  105,
			  658,  105,  660,  653,  105,  653,  661,  105,  105,  105,
			  663,  665,  664,  105,  662,  110,  105,  655,  341,  666,
			  667,  655,  669,  657,  647,  657,  110,  659,  110,  110,

			  105,  110,  659,  110,  661,  671,  110,  673,  661,  110,
			  110,  110,  663,  665,  665,  110,  663,  105,  110,  668,
			  105,  667,  667,  105,  669,  670,  672,  643,  643,  105,
			  105,  105,  110,  674,  674,  645,  645,  671,  105,  673,
			  645,  645,  675,  675,  598,  598,  651,  651,  676,  110,
			  676,  669,  110,  677,  677,  110,  647,  671,  673,  678,
			  678,  110,  110,  110,  105,  684,  105,  105,  680,  105,
			  110,  438,  105,  682,  105,  105,  105,  105,  679,  641,
			  641,  681,  341,  677,  677,  683,  683,  105,  647,  648,
			  648,  675,  675,  684,  684,  684,  110,  445,  110,  110,

			  680,  110,  684,  684,  110,  682,  110,  110,  110,  110,
			  680,  684,  684,  682,  684,  684,  684,  438,  684,  110,
			  684,  684,  684,  529,  684,  684,  684,  445,  684,  529,
			   81,   81,  684,   81,   81,   81,   81,   81,   81,   81,
			   81,   81,   81,   84,  110,  110,  110,  110,  110,   84,
			   84,   84,   84,   84,   84,   84,   85,   85,  684,   85,
			   85,   85,   85,   85,   85,   85,   85,   85,   85,  185,
			  185,  684,  185,  185,  684,  684,  185,  185,  185,  185,
			  185,  185,  187,  187,  684,  187,  187,  187,  187,  187,
			  187,  187,  187,  187,  187,  214,  214,  214,  214,  214,

			  214,  214,  684,  214,  214,  214,  214,  214,  602,  602,
			  602,  602,  602,  602,  602,  684,  602,  602,  602,  602,
			  602,    3,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

			  684,  684,  684,  684,  684,  684,  684,  684,  684>>)
		end

	yy_chk_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,   10,   13,
			   13,   10,   19,   20,   21,   20,   20,   26,   26,   36,

			   21,   19,   22,   42,   22,   22,   23,   42,   23,   23,
			   28,   28,   38,   22,  675,   53,   53,   45,   38,   47,
			   47,   81,   45,   83,   81,  186,   83,  648,  186,  194,
			  194,   36,  212,  641,  212,   42,  435,  212,  212,   42,
			  213,  213,   22,  210,   38,   22,   23,   30,   30,   45,
			   38,   47,   47,   53,   45,   30,   30,   30,   30,   30,
			   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
			   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
			   30,   98,   98,   56,   64,   30,   66,   30,   30,   30,
			   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

			   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
			   30,   30,   30,   31,   31,   56,   64,   67,   66,   98,
			   70,   31,   31,   31,   31,   31,   31,   31,   31,   31,
			   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
			   31,   31,   31,   31,   31,   31,   31,  336,  336,   67,
			   71,   31,   70,   31,   31,   31,   31,   31,   31,   31,
			   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
			   31,   31,   31,   31,   31,   31,   31,   31,   31,   32,
			   32,   33,   71,   32,  209,   33,   72,   41,   39,   32,
			   34,   33,   32,   34,   39,   34,   41,   73,  208,   35,

			   48,   37,  207,   35,   37,   34,   48,   35,   37,   37,
			  206,   32,   32,   33,   37,   32,   35,   33,   72,   41,
			   39,   32,   34,   33,   32,   34,   39,   34,   41,   73,
			   43,   35,   48,   37,   43,   35,   37,   34,   48,   35,
			   37,   37,   40,   44,   44,   43,   37,   46,   35,   40,
			  105,  109,   40,   44,   40,   46,   55,   58,   40,   63,
			   57,   55,   43,   55,   57,   63,   43,   58,   55,  205,
			   57,  338,  338,   57,   40,   44,   44,   43,  204,   46,
			  203,   40,  105,  109,   40,   44,   40,   46,   55,   58,
			   40,   63,   57,   55,   60,   55,   57,   63,   60,   58,

			   55,   59,   57,   59,   68,   57,   65,   62,  106,   94,
			   94,   60,  106,   59,   62,   62,   65,   69,   65,   68,
			   62,   94,   65,  202,  108,  111,   60,   69,  201,  108,
			   60,  341,  341,   59,  200,   59,   68,  199,   65,   62,
			  106,  342,  342,   60,  106,   59,   62,   62,   65,   69,
			   65,   68,   62,   94,   65,  107,  108,  111,  107,   69,
			   86,  108,  198,   86,   86,   86,   86,  197,   91,   91,
			  196,   96,   86,   96,   96,  112,  113,   86,  112,   86,
			   91,   86,   86,   86,   86,  116,   86,  107,   86,  195,
			  107,  121,   86,   95,   86,   95,   95,   86,   86,   86,

			   86,   86,   86,  115,   95,  117,   91,  112,  113,  117,
			  112,   96,   91,  118,  115,  119,  120,  116,  122,  119,
			  123,  118,  124,  121,  125,  120,  126,  130,  125,  129,
			  127,  125,  130,   95,  127,  115,   95,  117,  132,  129,
			  193,  117,  130,  438,  438,  118,  115,  119,  120,  137,
			  122,  119,  123,  118,  124,  137,  125,  120,  126,  130,
			  125,  129,  127,  125,  130,  131,  127,  133,  138,  134,
			  132,  129,  131,  134,  130,  135,  131,  136,  135,  139,
			  140,  137,  133,  141,  142,  136,  144,  137,  143,  146,
			  192,  142,  143,  143,  439,  439,  149,  131,  149,  133,

			  138,  134,  151,  143,  131,  134,  143,  135,  131,  136,
			  135,  139,  140,  154,  133,  141,  142,  136,  144,  152,
			  143,  146,  147,  142,  143,  143,  147,  150,  149,  158,
			  149,  152,  153,  150,  151,  143,  155,  147,  143,  150,
			  147,  159,  156,  153,  157,  154,  155,  156,  160,  161,
			  157,  152,  163,  164,  147,  191,  163,  168,  147,  150,
			  190,  158,  170,  152,  153,  150,  168,  189,  155,  147,
			  185,  150,  147,  159,  156,  153,  157,  166,  155,  156,
			  160,  161,  157,  172,  163,  164,  165,  166,  163,  168,
			  166,  165,  166,  166,  170,  172,  165,  167,  168,  165,

			  167,  165,  165,  169,  167,  173,  171,  169,  174,  166,
			  171,   85,  177,  178,   79,  172,   78,  180,  165,  166,
			  182,  177,  166,  165,  166,  166,  179,  172,  165,  167,
			  179,  165,  167,  165,  165,  169,  167,  173,  171,  169,
			  174,  175,  171,  176,  177,  178,  175,  181,  176,  180,
			  441,  441,  182,  177,  184,  184,  181,  175,  179,  176,
			  211,  211,  179,   77,  215,  215,  217,  221,  217,  217,
			   76,  223,  211,  175,   50,  176,  215,  217,  175,  181,
			  176,  216,  218,  216,  218,  218,  216,  216,  181,  175,
			   29,  176,  184,  219,  219,  220,  224,  222,  211,  221,

			  220,  226,  215,  223,  211,  222,  217,  226,  215,  217,
			  227,  228,  229,  231,  233,  230,  232,  236,  234,  237,
			  235,  228,  218,  230,  235,  232,  239,  220,  224,  222,
			  234,  219,  220,  226,  238,  240,  243,  222,  238,  226,
			  246,  247,  227,  228,  229,  231,  233,  230,  232,  236,
			  234,  237,  235,  228,  246,  230,  235,  232,  239,  241,
			  245,  244,  234,  249,  245,  250,  238,  240,  243,  244,
			  238,  241,  246,  247,  248,  244,  250,  251,  255,  254,
			   24,  252,  254,    9,  248,  252,  246,  253,    8,  260,
			  256,  241,  245,  244,  256,  249,  245,  250,  252,  261,

			  253,  244,  262,  241,  263,  258,  248,  244,  250,  251,
			  255,  254,  258,  252,  254,  259,  248,  252,  265,  253,
			  257,  260,  256,  259,  257,  264,  256,  266,  268,  264,
			  252,  261,  253,  267,  262,  266,  263,  258,  269,  270,
			  267,  273,  272,  274,  258,  276,  277,  259,  272,  276,
			  265,  279,  257,  285,    7,  259,  257,  264,  278,  266,
			  268,  264,  280,  286,  278,  267,  280,  266,  281,  287,
			  269,  270,  267,  273,  272,  274,  281,  276,  277,  282,
			  272,  276,  289,  279,  284,  285,  283,  288,  292,  291,
			  278,  282,  283,  284,  280,  286,  278,  291,  280,  290,

			  281,  287,  293,  290,  283,  288,  294,  295,  281,  297,
			  296,  282,  299,  298,  289,  296,  284,  298,  283,  288,
			  292,  291,  300,  282,  283,  284,  300,  302,  303,  291,
			  304,  290,  301,  305,  293,  290,  283,  288,  294,  295,
			  301,  297,  296,  306,  299,  298,  307,  296,  308,  298,
			  309,  310,    6,  308,  300,  318,  318,  318,  300,  302,
			  303,    5,  304,    3,  301,  305,    0,  335,  335,  337,
			  337,  348,  301,  443,  443,  306,  339,  339,  307,  335,
			  308,  350,  309,  310,  340,  308,  340,  347,  339,  340,
			  340,  343,  343,  344,  352,  344,  344,  345,  347,  345,

			  345,  346,  346,  348,  344,  335,  349,  337,  351,  354,
			  351,  335,  353,  350,  339,  356,  349,  355,  358,  347,
			  339,  357,  353,  360,  362,  357,  352,  363,  355,  343,
			  347,  364,  359,  344,  359,    0,  344,  345,  349,  346,
			  351,  354,  351,  361,  353,  366,  367,  356,  349,  355,
			  358,  367,  361,  357,  353,  360,  362,  357,  365,  363,
			  355,  368,  369,  364,  359,  370,  359,  365,  372,  373,
			  368,  371,  374,  373,  375,  361,  376,  366,  367,  377,
			  371,  378,  380,  367,  361,  378,  375,  381,  382,  384,
			  365,  386,  383,  368,  369,  388,    0,  370,  390,  365,

			  372,  373,  368,  371,  374,  373,  375,  383,  376,  391,
			  394,  377,  371,  378,  380,  395,  385,  378,  375,  381,
			  382,  384,  387,  386,  383,  385,  387,  388,  389,  393,
			  390,  397,  393,  398,  397,  399,  402,  389,  401,  383,
			  403,  391,  394,  403,  404,  405,  406,  395,  385,  405,
			  401,  407,  408,  410,  387,  411,  410,  385,  387,  409,
			  389,  393,  412,  397,  393,  398,  397,  399,  402,  389,
			  401,  409,  403,  413,  414,  403,  404,  405,  406,  416,
			  415,  405,  401,  407,  408,  410,  415,  411,  410,  413,
			  417,  409,  418,  419,  412,  420,  421,  423,  425,  417,

			  419,  425,  426,  409,  427,  413,  414,  428,  430,  431,
			  429,  416,  415,  429,  432,  433,  427,  431,  415,  437,
			  437,  413,  417,    0,  418,  419,    0,  420,  421,  423,
			  425,  417,  419,  425,  426,  448,  427,  442,  442,  428,
			  430,  431,  429,  436,  436,  429,  432,  433,  427,  431,
			  440,  440,  444,  444,  450,  436,    0,  437,  445,  445,
			  446,  446,  440,  447,  452,  447,  447,  448,  454,  456,
			  457,    0,  446,  456,  457,  442,  458,  459,  460,  463,
			  462,  458,  464,  465,  467,  464,  450,  436,  440,  462,
			  444,  466,  468,  469,  440,  466,  452,  468,  471,    0,

			  454,  456,  457,  447,  446,  456,  457,  470,  458,  459,
			  460,  463,  462,  458,  464,  465,  467,  464,  470,  473,
			  474,  462,  477,  466,  468,  469,  472,  466,  476,  468,
			  471,  472,  479,  478,  481,  482,  480,  476,  478,  470,
			  480,  483,  484,  485,  487,  488,  489,  486,  490,  493,
			  470,  473,  474,  486,  477,  492,  495,  496,  472,  492,
			  476,  497,  494,  472,  479,  478,  481,  482,  480,  476,
			  478,  494,  480,  483,  484,  485,  487,  488,  489,  486,
			  490,  493,  498,  499,  501,  486,  498,  492,  495,  496,
			  500,  492,  502,  497,  494,  503,  502,  504,  505,  500,

			  506,  508,  509,  494,  511,  510,  512,  514,  504,  515,
			  517,  518,  508,  510,  498,  499,  501,  516,  498,  521,
			  520,  516,  500,  535,  502,  520,  538,  503,  502,  504,
			  505,  500,  506,  508,  509,    0,  511,  510,  512,  514,
			  504,  515,  517,  518,  508,  510,  524,  524,  526,  516,
			    0,  521,  520,  516,  523,  535,  523,  520,  538,  523,
			  523,  525,  525,  527,  527,  528,  528,  529,  529,  530,
			  530,  531,  531,  540,  526,  527,  532,  532,  534,  534,
			  526,  533,  536,  533,  524,  539,  533,  533,  536,  541,
			  534,  542,  543,  541,  545,  547,  539,  548,  549,  547,

			  551,  552,  553,  528,  554,  540,  553,  527,  551,  531,
			  555,  558,  591,  591,  536,  560,    0,  539,  562,  564,
			  536,  541,  534,  542,  543,  541,  545,  547,  539,  548,
			  549,  547,  551,  552,  553,  557,  554,  561,  553,  559,
			  551,  563,  555,  558,  559,  557,  565,  560,  561,  566,
			  562,  564,  563,  567,  565,  568,  569,  570,  571,  572,
			  573,  575,  576,  571,  567,  575,  569,  557,  577,  561,
			  579,  559,  581,  563,  584,  586,  559,  557,  565,  587,
			  561,  566,  590,    0,  563,  567,  565,  568,  569,  570,
			  571,  572,  573,  575,  576,  571,  567,  575,  569,  583,

			  577,  589,  579,  585,  581,    0,  584,  586,  585,    0,
			  583,  587,  589,  598,  590,  592,  592,  593,  593,  594,
			    0,  594,  596,  596,  594,  594,  597,  597,  599,  599,
			    0,  583,  595,  589,  595,  585,  605,  595,  595,  598,
			  585,  605,  583,  606,  589,  598,  600,  600,  601,  601,
			  603,  603,  604,  607,  604,  610,    0,  604,  604,  609,
			  596,  611,  603,  612,  609,  614,  611,  613,  605,  615,
			  613,  617,  619,  605,  619,  606,  620,  621,  623,  625,
			  626,  628,  627,  629,  625,  607,  627,  610,  603,  629,
			  630,  609,  632,  611,  603,  612,  609,  614,  611,  613,

			  633,  615,  613,  617,  619,  636,  619,  638,  620,  621,
			  623,  625,  626,  628,  627,  629,  625,  639,  627,  631,
			  652,  629,  630,  631,  632,  635,  637,  642,  642,  635,
			  637,  654,  633,  643,  643,  644,  644,  636,  656,  638,
			  645,  645,  646,  646,  649,  649,  650,  650,  647,  639,
			  647,  631,  652,  647,  647,  631,  649,  635,  637,  651,
			  651,  635,  637,  654,  658,    0,  660,  662,  663,  664,
			  656,  643,  666,  667,  668,  670,  672,  679,  662,  674,
			  674,  666,  649,  676,  676,  677,  677,  681,  649,  678,
			  678,  683,  683,    0,    0,    0,  658,  651,  660,  662,

			  663,  664,    0,    0,  666,  667,  668,  670,  672,  679,
			  662,    0,    0,  666,    0,    0,    0,  674,    0,  681,
			    0,    0,    0,  677,    0,    0,    0,  678,    0,  683,
			  685,  685,    0,  685,  685,  685,  685,  685,  685,  685,
			  685,  685,  685,  686,  689,  689,  689,  689,  689,  686,
			  686,  686,  686,  686,  686,  686,  687,  687,    0,  687,
			  687,  687,  687,  687,  687,  687,  687,  687,  687,  688,
			  688,    0,  688,  688,    0,    0,  688,  688,  688,  688,
			  688,  688,  690,  690,    0,  690,  690,  690,  690,  690,
			  690,  690,  690,  690,  690,  691,  691,  691,  691,  691,

			  691,  691,    0,  691,  691,  691,  691,  691,  692,  692,
			  692,  692,  692,  692,  692,    0,  692,  692,  692,  692,
			  692,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

			  684,  684,  684,  684,  684,  684,  684,  684,  684>>)
		end

	yy_base_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    0,    0, 1063, 2021, 1059, 1049,  950,  883,  877,
			   81,    0, 2021,   79, 2021, 2021, 2021, 2021, 2021,   75,
			   75,   75,   84,   88,  855, 2021,   73, 2021,   85,  765,
			  127,  193,  244,  249,  254,  271,   63,  268,   76,  252,
			  313,  251,   71,  298,  308,   81,  319,   84,  264, 2021,
			  719, 2021, 2021,   95,    0,  322,  147,  325,  325,  362,
			  366,    0,  374,  323,  142,  377,  141,  185,  372,  382,
			  179,  222,  251,  255, 2021, 2021,  768,  760,  712,  709,
			 2021,  114, 2021,  116,    0,  700,  453,    0, 2021, 2021,
			 2021,  448, 2021, 2021,  389,  475,  453, 2021,  161, 2021,

			 2021, 2021, 2021, 2021, 2021,  314,  376,  419,  393,  315,
			    0,  393,  439,  445,    0,  467,  438,  473,  485,  483,
			  480,  459,  490,  488,  477,  495,  490,  501,    0,  493,
			  496,  529,  492,  536,  526,  539,  549,  513,  529,  551,
			  538,  547,  548,  557,  550,    0,  546,  591,    0,  560,
			  597,  564,  589,  596,  566,  600,  611,  614,  593,  595,
			  617,  619,    0,  620,  621,  655,  646,  661,  621,  664,
			  617,  674,  647,  673,  660,  710,  712,  676,  668,  694,
			  685,  711,  675, 2021,  734,  659,  118, 2021, 2021,  656,
			  649,  644,  579,  529,  109,  478,  459,  456,  451,  426,

			  423,  417,  412,  369,  367,  358,  299,  291,  287,  273,
			  132,  740,  117,  120, 2021,  744,  766,  748,  764,  773,
			  759,  726,  769,  735,  768,    0,  771,  780,  775,  766,
			  787,  785,  780,  769,  782,  788,  769,  787,  802,  794,
			  799,  823,    0,  788,  833,  828,  812,  809,  838,  817,
			  829,  830,  845,  847,  843,  839,  858,  888,  869,  887,
			  857,  867,  859,  876,  893,  886,  899,  897,  900,  895,
			  903,    0,  906,  899,  907,    0,  913,  914,  928,  921,
			  930,  940,  943,  956,  948,  921,  935,  921,  957,  937,
			  967,  961,  956,  974,  970,  971,  974,  968,  981,  980,

			  990,  996,  991,  996,  986,  997, 1007, 1010, 1012, 1009,
			 1015,    0, 2021, 2021, 2021, 2021, 2021, 2021, 1036, 2021,
			 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021, 2021,
			 2021, 2021, 2021, 2021, 2021, 1047,  227, 1049,  351, 1056,
			 1069,  411,  421, 1071, 1075, 1079, 1081, 1051, 1024, 1070,
			 1035, 1072, 1056, 1076, 1063, 1081, 1068, 1089, 1086, 1098,
			 1089, 1107, 1079, 1091, 1095, 1122, 1100, 1110, 1125, 1121,
			 1120, 1135, 1123, 1137, 1140, 1138, 1128, 1143, 1149,    0,
			 1150, 1151, 1152, 1156, 1138, 1180, 1146, 1190, 1163, 1192,
			 1153, 1173,    0, 1193, 1171, 1179,    0, 1195, 1194, 1199,

			    0, 1202, 1188, 1207, 1211, 1209, 1206, 1215, 1216, 1223,
			 1217, 1207, 1223, 1237, 1222, 1250, 1249, 1254, 1247, 1257,
			 1252, 1260,    0, 1261,    0, 1265, 1269, 1268, 1259, 1274,
			 1269, 1281, 1286, 1279,    0,  125, 1323, 1299,  523,  574,
			 1330,  730, 1317, 1053, 1332, 1338, 1340, 1345, 1299,    0,
			 1318,    0, 1328,    0, 1332,    0, 1337, 1338, 1340, 1336,
			 1342,    0, 1344, 1334, 1349, 1350, 1359, 1352, 1361, 1362,
			 1371, 1351, 1390, 1378, 1384,    0, 1392, 1377, 1397, 1391,
			 1404, 1402, 1399, 1405, 1406, 1407, 1417, 1414, 1409, 1410,
			 1412,    0, 1423, 1417, 1426, 1411, 1421, 1425, 1450, 1451,

			 1454, 1439, 1460, 1463, 1461, 1451, 1464,    0, 1465, 1455,
			 1477, 1476, 1470,    0, 1471, 1473, 1485, 1478, 1475,    0,
			 1484, 1478, 2021, 1539, 1526, 1541, 1516, 1543, 1545, 1547,
			 1549, 1551, 1556, 1566, 1558, 1487, 1546,    0, 1484, 1549,
			 1526, 1557, 1559, 1556,    0, 1558,    0, 1563, 1565, 1562,
			    0, 1572, 1573, 1570, 1572, 1574,    0, 1599, 1565, 1603,
			 1574, 1601, 1571, 1605, 1572, 1618, 1621, 1617, 1608, 1620,
			 1611, 1622, 1618, 1624,    0, 1629, 1630, 1632,    0, 1634,
			    0, 1636,    0, 1663, 1627, 1667, 1634, 1643,    0, 1665,
			 1635, 1592, 1695, 1697, 1704, 1717, 1702, 1706, 1681, 1708,

			 1726, 1728, 2021, 1730, 1737, 1700, 1702, 1717,    0, 1728,
			 1724, 1730, 1732, 1731, 1726, 1733,    0, 1735,    0, 1738,
			 1742, 1741,    0, 1742,    0, 1743, 1739, 1750, 1749, 1747,
			 1748, 1787, 1760, 1764,    0, 1793, 1773, 1794, 1775, 1781,
			    0,   75, 1807, 1813, 1815, 1820, 1822, 1833,   69, 1824,
			 1826, 1839, 1784,    0, 1795,    0, 1802,    0, 1828,    0,
			 1830,    0, 1831, 1821, 1833,    0, 1836, 1828, 1838,    0,
			 1839,    0, 1840,    0, 1859,   56, 1863, 1865, 1869, 1841,
			    0, 1851,    0, 1871, 2021, 1929, 1942, 1955, 1968, 1935,
			 1981, 1994, 2007>>)
		end

	yy_def_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,  684,    1,  684,  684,  684,  684,  684,  684,  684,
			  685,  686,  684,  687,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,   31,   31,   31,   31,   31,   31,   31,   31,
			   31,   31,   31,   31,   31,   31,   31,   31,   31,  684,
			  684,  684,  684,  684,  688,  689,  689,  689,  689,  689,
			  689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
			  689,  689,  689,  689,  684,  684,  684,  684,  684,  684,
			  684,  685,  684,  685,  686,  690,  690,  690,  684,  684,
			  684,  684,  684,  684,  691,  684,  684,  684,  684,  684,

			  684,  684,  684,  684,  684,   31,   31,   31,   31,   31,
			  689,  689,  689,  689,  689,   31,  689,   31,   31,   31,
			   31,  689,  689,  689,  689,   31,   31,  689,  689,   31,
			   31,   31,  689,  689,  689,   31,   31,   31,  689,  689,
			  689,   31,   31,   31,   31,  689,  689,  689,  689,   31,
			   31,  689,  689,   31,  689,   31,   31,   31,   31,  689,
			  689,  689,  689,   31,  689,   31,  689,   31,   31,  689,
			  689,   31,   31,  689,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,  684,  684,  688,  685,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			   31,  689,   31,   31,  689,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,   31,  689,  689,   31,  689,
			   31,   31,  689,  689,   31,   31,  689,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,   31,   31,   31,
			  689,  689,  689,  689,   31,  689,   31,   31,  689,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,   31,   31,   31,   31,  689,  689,  689,  689,  689,
			   31,   31,  689,  689,   31,  689,   31,  689,   31,  689,

			   31,   31,   31,  689,  689,  689,   31,  689,   31,  689,
			   31,  689,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  684,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,   31,  689,
			  689,   31,  689,   31,  689,   31,  689,   31,   31,  689,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,

			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			   31,  689,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  684,  684,  691,  684,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,

			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,  684,  684,  692,   31,   31,  689,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,  684,  684,  684,  684,  684,  684,  684,  684,  684,

			  684,  684,  684,  684,  684,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,   31,  689,   31,  689,   31,  689,   31,  689,   31,
			  689,  684,  684,  684,  684,  684,  684,  684,  684,  684,
			  684,  684,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,   31,  689,   31,  689,   31,  689,
			   31,  689,   31,  689,  684,  684,  684,  684,  684,   31,
			  689,   31,  689,  684,    0,  684,  684,  684,  684,  684,
			  684,  684,  684>>)
		end

	yy_ec_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    1,    1,    1,    1,    1,    1,    1,    1,    2,
			    3,    1,    1,    4,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    5,    6,    7,    8,    9,   10,    8,   11,
			   12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
			   21,   21,   21,   21,   21,   21,   21,   21,   22,   23,
			   24,   25,   26,   27,    8,   28,   29,   30,   31,   32,
			   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
			   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
			   53,   54,   55,   56,   57,   58,   59,   60,   61,   62,

			   63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
			   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
			   83,   84,   85,   86,    8,   87,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1>>)
		end

	yy_meta_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    1,    2,    3,    2,    4,    1,    5,    1,    1,
			    6,    7,    1,    1,    1,    1,    1,    1,    8,    1,
			    9,   10,    1,    1,    1,    1,    1,    1,    9,    9,
			    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
			    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
			    9,    9,    9,   11,    1,    1,    1,    1,   12,    1,
			    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
			    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
			    9,    9,    9,    9,    9,   13,    1,    1>>)
		end

	yy_accept_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yy_fixed_array (<<
			    0,    0,    0,  137,  135,    3,    4,    1,    2,   10,
			  123,   96,   17,  135,   11,   12,   31,   30,    8,   29,
			    6,   32,  125,  125,    9,    7,   36,   34,   35,  135,
			   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
			   94,   94,   94,   94,   94,   94,   94,   94,   94,   15,
			  135,   16,   33,  127,  135,   95,   95,   95,   95,   95,
			   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
			   95,   95,   95,   95,   13,   14,    3,    4,    1,    2,
			   37,  123,  122,  122,   96,  120,  120,  120,    5,   23,
			   24,  130,   18,   20,    0,  125,  125,  124,  127,   28,

			   25,   22,   21,   26,   27,   94,   94,   94,   94,   43,
			   95,   95,   95,   95,   43,   94,   95,   94,   94,   94,
			   94,   95,   95,   95,   95,   94,   49,   95,   49,   94,
			   94,   94,   95,   95,   95,   94,   94,   94,   95,   95,
			   95,   61,   94,   94,   67,   61,   95,   95,   67,   94,
			   94,   95,   95,   94,   95,   94,   94,   94,   75,   95,
			   95,   95,   75,   94,   95,   94,   95,   94,   94,   95,
			   95,   94,   94,   95,   95,   94,   95,   94,   95,   94,
			   95,   94,   95,   19,  127,    0,  122,  120,   97,  120,
			  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

			  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
			  120,  130,    0,    0,  128,  130,  128,  125,  125,  127,
			   94,   95,   94,   42,   95,   42,   94,   95,   94,   95,
			   94,   95,   94,   95,   94,   94,   95,   95,   94,   95,
			   52,   94,   52,   95,   94,   94,   95,   95,   94,   95,
			   94,   95,   94,   95,   94,   95,   94,   94,   94,   94,
			   95,   95,   95,   95,   94,   95,   94,   94,   95,   95,
			   71,   71,   94,   95,   73,   73,   94,   95,   94,   95,
			   94,   94,   94,   94,   94,   95,   95,   95,   95,   95,
			   94,   94,   95,   95,   94,   95,   94,   95,   94,   95,

			   94,   94,   94,   95,   95,   95,   94,   95,   94,   95,
			   93,   93,  134,  114,  112,  113,  115,  116,  121,  117,
			  118,   98,   99,  100,  101,  102,  103,  104,  105,  106,
			  107,  108,  109,  110,  111,  130,    0,  130,    0,  130,
			    0,    0,    0,  129,  125,  125,  127,   94,   95,   94,
			   95,   94,   95,   94,   95,   94,   95,   94,   95,   94,
			   95,   94,   95,   50,   50,   94,   95,   94,   94,   95,
			   95,   94,   95,   94,   95,   94,   95,   59,   94,   59,
			   95,   94,   95,   94,   95,   94,   95,   94,   95,   94,
			   95,   68,   68,   94,   95,   70,   70,   94,   95,   74,

			   74,   94,   95,   94,   95,   94,   95,   94,   95,   94,
			   94,   95,   95,   94,   95,   94,   95,   94,   95,   94,
			   95,   86,   86,   87,   87,   94,   95,   94,   95,   94,
			   95,   94,   95,   92,   92,  121,  130,  130,    0,    0,
			  130,    0,  129,    0,  129,    0,    0,  126,   40,   40,
			   41,   41,   44,   44,   45,   45,   94,   95,   94,   95,
			   47,   47,   94,   95,   94,   95,   94,   95,   94,   95,
			   94,   95,   94,   95,   57,   57,   94,   95,   94,   95,
			   94,   95,   94,   95,   94,   95,   94,   95,   94,   95,
			   69,   69,   94,   95,   94,   95,   94,   95,   94,   95,

			   94,   95,   94,   95,   94,   95,   82,   82,   94,   95,
			   94,   95,   85,   85,   94,   95,   94,   95,   90,   90,
			   94,   95,  119,    0,  130,    0,  133,  130,  129,    0,
			    0,  129,    0,  128,    0,   39,   94,   39,   95,   94,
			   95,   94,   95,   51,   51,   53,   53,   94,   95,   55,
			   55,   94,   95,   94,   95,   60,   60,   94,   95,   94,
			   95,   94,   95,   94,   95,   94,   95,   94,   95,   94,
			   95,   94,   95,   78,   78,   94,   95,   80,   80,   81,
			   81,   83,   83,   94,   95,   94,   95,   89,   89,   94,
			   95,    0,  130,    0,    0,    0,  129,    0,  133,  129,

			    0,    0,  131,  133,  131,   94,   95,   46,   46,   94,
			   95,   94,   95,   94,   95,   58,   58,   62,   62,   94,
			   95,   64,   64,   65,   65,   94,   95,   94,   95,   94,
			   95,   94,   95,   79,   79,   94,   95,   94,   95,   91,
			   91,  133,    0,  133,    0,  129,    0,    0,  132,  133,
			    0,  132,   38,   38,   48,   48,   54,   54,   56,   56,
			   63,   63,   94,   95,   72,   72,   94,   95,   77,   77,
			   84,   84,   88,   88,  133,  132,    0,  132,  132,   66,
			   66,   76,   76,  132,    0>>)
		end

feature {NONE} -- Constants

	yyJam_base: INTEGER is 2021
			-- Position in `yy_nxt'/`yy_chk' tables
			-- where default jam table starts

	yyJam_state: INTEGER is 684
			-- State id corresponding to jam state

	yyTemplate_mark: INTEGER is 685
			-- Mark between normal states and templates

	yyNull_equiv_class: INTEGER is 1
			-- Equivalence code for NULL character

	yyReject_used: BOOLEAN is false
			-- Is `reject' called?

	yyVariable_trail_context: BOOLEAN is false
			-- Is there a regular expression with
			-- both leading and trailing parts having
			-- variable length?

	yyReject_or_variable_trail_context: BOOLEAN is false
			-- Is `reject' called or is there a
			-- regular expression with both leading
			-- and trailing parts having variable length?

	yyNb_rules: INTEGER is 136
			-- Number of rules

	yyEnd_of_buffer: INTEGER is 137
			-- End of buffer rule code

	INITIAL: INTEGER is 0
			-- Start condition codes

feature -- User-defined features


end -- EDITOR_EIFFEL_SCANNER
