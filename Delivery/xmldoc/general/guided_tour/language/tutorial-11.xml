<document title="10 Other Mechanisms">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>91</envision_pseudo_name>
				<envision_title>Other Mechanisms</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>We now examine a few important mechanisms that complement the preceding picture: shared objects; constants; instructions; and lexical conventions. </paragraph>
		<heading>
			<size>2</size>
			<content>Once routines and shared objects</content>
		</heading>
		<paragraph>The Eiffel's method obsession with extendibility, reusability and maintainability yields, as has been seen, modular and decentralized architectures, where inter-module coupling is limited to the strictly necessary, interfaces are clearly delimited, and all the temptations to introduce obscure dependencies, in particular global variables, have been removed. There is a need, however, to let various components of a system access common objects, without requiring their routines to pass these objects around as arguments (which would only be slightly better than global variables). For example various classes may need to perform output to a common "console window", represented by a shared object. </paragraph>
		<paragraph>Eiffel addresses this need through an original mechanism that also takes care of another important issue, poorly addressed by many design and programming approaches: initialization. The idea is simple: if instead of 
			<code>
				<keyword>do</keyword>
			</code> the implementation of an effective routine starts with the keyword 
			<code>
				<keyword>once</keyword>
			</code>, it will only be executed the first time the routine is called during a system execution (or, in a multi-threaded environment, the first time in each thread), regardless of what the caller was. Subsequent calls from the same caller or others will have no effect; if the routine is a function, it will always return the result computed by the first call -- object if an expanded type, reference otherwise.
		</paragraph>
		<paragraph>In the case of procedures, this provides a convenient initialization mechanism. A delicate problem in the absence of a 
			<code>
				<keyword>once</keyword>
			</code> mechanism is how to provide the users of a library with a set of routines which they can call in any order, but which all need, to function properly, the guarantee that some context had been properly set up. Asking the library clients to precede the first call with a call to an initialization procedure 
			<code>
				<feature_name>setup</feature_name>
			</code> is not only user-unfriendly but silly: in a well-engineered system we will want to check proper set-up in every of the routines, and report an error if necessary; but then if we were able to detect improper set-up we might as well shut up and set up ourselves (by calling 
			<code>
				<feature_name>setup</feature_name>
			</code>). This is not easy, however, since the object on which we call 
			<code>
				<feature_name>setup</feature_name>
			</code> must itself be properly initialized, so we are only pushing the problem further. Making 
			<code>
				<feature_name>setup</feature_name>
			</code> a 
			<code>
				<keyword>once</keyword>
			</code> procedure solves it: we can simply include a call
		</paragraph>
<code_block>
<feature_name>setup</feature_name>
</code_block>
		<paragraph>at the beginning of each affected routine; the first one to come in will perform the needed initializations; subsequent calls will have, as desired, no effect.</paragraph>
		<paragraph>Once functions will give us shared objects. A common scheme is</paragraph>
<code_block>
<feature_name>console</feature_name><symbol>:</symbol> <class_name>WINDOW</class_name> <keyword>is</keyword>
		<comment>-- Shared console window</comment>
	<keyword>once</keyword>
		<keyword>create</keyword> <keyword>Result</keyword>.<feature_name>make</feature_name> <symbol>(</symbol>...<symbol>)</symbol>
	<keyword>end</keyword>
</code_block>
		<paragraph>Whatever client first calls this function will create the appropriate window and return a reference to it. Subsequent calls, from anywhere in the system, will return that same reference. The simplest way to make this function available to a set of classes is to include it in a class 
			<code>
				<class_name>SHARED_STRUCTURES</class_name>
			</code> which the classes needing a set of related shared objects will simply inherit.
		</paragraph>
		<paragraph>For the classes using it, 
			<code>
				<feature_name>console</feature_name>
			</code>, although a function, looks very much as if it were an attribute -- only one referring to a shared object.
		</paragraph>
		<paragraph>The "Hello World" system at the beginning of this discussion (section 
			<link>
				<url>tutorial-05.xml</url><anchor_name>35212</anchor_name>
				<label>4</label>
			</link>) used an output instruction of the form 
			<code>
				<feature_name>io</feature_name>
			</code>.
			<code>
				<feature_name>put_string</feature_name> 
				<symbol>(</symbol>
				<string>Some string</string>
				<symbol>)</symbol>
			</code>. This is another example of the general scheme illustrated by 
			<code>
				<feature_name>console</feature_name>
			</code>. Feature 
			<code>
				<feature_name>io</feature_name>
			</code>, declared in 
			<code>
				<class_name>ANY</class_name>
			</code> and hence usable by all classes, is a once function that returns an object of type 
			<code>
				<class_name>STANDARD_FILES</class_name>
			</code> (another Kernel Library class) providing access to basic input and output features, one of which is procedure 
			<code>
				<feature_name>put_string</feature_name>
			</code>. Because basic input and output must all work on the same files, 
			<code>
				<feature_name>io</feature_name>
			</code> should clearly be a 
			<code>
				<keyword>once</keyword>
			</code> function, shared by all classes that need these mechanisms.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Constant and unique attributes</content>
		</heading>
		<paragraph>The attributes studied earlier were variable: each represents a field present in each instance of the class and changeable by its routines. </paragraph>
		<paragraph>It is also possible to declare constant attributes, as in</paragraph>
<code_block>
<feature_name>Solar_system_planet_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword> <number>9</number>
</code_block>
		<paragraph>These will have the same value for every instance and hence do not need to occupy any space in objects at execution time. (In other approaches similar needs would be addressed by symbolic constants, as in Pascal or Ada, or macros, as in C.)</paragraph>
		<paragraph>What comes after the 
			<code>
				<keyword>is</keyword>
			</code> is a manifest constant: a self-denoting value of the appropriate type. Manifest constants are available for integers, reals (also used for doubles), booleans (
			<code>
				<keyword>True</keyword>
			</code> and 
			<code>
				<keyword>False</keyword>
			</code>), characters (in single quotes, as 
			<code>
				<string>'A'</string>
			</code>, with special characters expressed using a percent sign as in 
			<code>
				<string>'%N'</string>
			</code> for new line, 
			<code>
				<string>'%B'</string>
			</code> for backspace and 
			<code>
				<string>'%U'</string>
			</code> for null).
		</paragraph>
		<paragraph>For integer constants, it is also possible to avoid specifying the values. A declaration of the form</paragraph>
<code_block>
<feature_name>a</feature_name>, <feature_name>b</feature_name>, <feature_name>c</feature_name>, ... <feature_name>n</feature_name> <symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword> <keyword>unique</keyword>
</code_block>
		<paragraph>introduces 
			<code>
				<local_variable>a</local_variable>
			</code>, 
			<code>
				<local_variable>b</local_variable>
			</code>, 
			<code>
				<local_variable>c</local_variable>
			</code>, ... 
			<code>
				<local_variable>n</local_variable>
			</code> as constant integer attributes, whose value are assigned by the Eiffel compiler rather than explicitly by the programmer. The values are different for all 
			<code>
				<keyword>unique</keyword>
			</code> attributes in a system; they are all positive, and, in a single declaration such as the above, guaranteed to be consecutive (so that you may use an invariant property of the form 
			<code>
				<feature_name>code</feature_name> 
				<symbol>&gt;</symbol> 
				<local_variable>a</local_variable> 
				<keyword>and</keyword> 
				<feature_name>code</feature_name> 
				<symbol>&lt;</symbol> 
				<local_variable>n</local_variable>
			</code> to express that 
			<code>
				<feature_name>code</feature_name>
			</code> should be one of the values). This mechanism replaces the "enumerated types" found in many languages, without suffering from the same problems. (Enumerated types have an ill-defined place in the type system; and it is not clear what operations are permitted.)
		</paragraph>
		<paragraph>You may use Unique values in conjunction with the 
			<code>
				<keyword>inspect</keyword>
			</code> multi-branch instruction studied in the next section. They are only appropriate for codes that can take on a fixed number of well-defined values -- not as a way to program operations with many variants, a need better addressed by the object-oriented technique studied earlier and relying on inheritance, polymorphism, redeclaration and dynamic binding.
		</paragraph>
		<paragraph>Manifest constants are also available for strings, using double quotes as in</paragraph>
<code_block>
<feature_name>User_friendly_error_message</feature_name><symbol>:</symbol> <class_name>STRING</class_name> <keyword>is</keyword> <string>"Go get a life !"</string>
</code_block>
		<paragraph>with special characters again using the 
			<code>
				<symbol>%</symbol>
			</code> codes. It is also possible to declare manifest arrays using double angle brackets:
		</paragraph>
<code_block>
<symbol>&lt;&lt;</symbol><number>1</number>, <number>2</number>, <number>3</number>, <number>5</number>, <number>7</number>, <number>11</number>, <number>13</number>, <number>17</number>, <number>19</number><symbol>&gt;&gt;</symbol>
</code_block>
		<paragraph>which is an expression of type 
			<code>
				<class_name>ARRAY</class_name> <symbol>[</symbol><class_name>INTEGER</class_name><symbol>]</symbol>
			</code>. Manifest arrays and strings are not atomic, but denote instances of the Kernel Library classes 
			<code>
				<class_name>STRING</class_name>
			</code> and 
			<code>
				<class_name>ARRAY</class_name>
			</code>, as can be produced by once functions.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Instructions</content>
		</heading>
		<paragraph>Eiffel has a remarkably small set of instructions. The basic computational instructions have been seen: creation, assignment, assignment attempt, procedure call,  retry. They are complemented by control structures: conditional, multi-branch, loop, as well as debug and check.	</paragraph>
		<paragraph>A conditional instruction has the form 
			<code>
				<keyword>if</keyword>
			</code>  ... 
			<code>
				<keyword>then</keyword>
			</code> ... 
			<code>
				<keyword>elseif</keyword>
			</code> ... 
			<code>
				<keyword>then</keyword>
			</code> ... 
			<code>
				<keyword>else</keyword>
			</code> ... 
			<code>
				<keyword>end</keyword>
			</code>. The 
			<code>
				<keyword>elseif</keyword>
			</code> ... 
			<code>
				<keyword>then</keyword>
			</code> ... part (of which there may be more than one) and the 
			<code>
				<keyword>else</keyword>
			</code> ... part are optional. After 
			<code>
				<keyword>if</keyword>
			</code> and 
			<code>
				<keyword>elseif</keyword>
			</code> comes a boolean expression; after 
			<code>
				<keyword>then</keyword>
			</code>, 
			<code>
				<keyword>elseif</keyword>
			</code> and 
			<code>
				<keyword>else</keyword>
			</code> come zero or more instructions.
		</paragraph>
		<paragraph>A multi-branch instruction has the form</paragraph>
<code_block>
<keyword>inspect</keyword>
	<italic>exp</italic>
<keyword>when</keyword> <italic>v1</italic> <keyword>then</keyword>
	<italic>inst1</italic>
<keyword>when</keyword> <italic>v2</italic> <keyword>then</keyword>
	<italic>inst2</italic>
...
<keyword>else</keyword>
	<italic>inst0</italic>
<keyword>end</keyword>
</code_block>
		<paragraph>where the 
			<code>
				<keyword>else</keyword>
			</code> <italic>inst0</italic> part is optional, 
			<code>
				<local_variable>exp</local_variable>
			</code> is a character or integer expression, <italic>v1</italic>, <italic>v1</italic>,  ... are constant values of the same type as 
			<code>
				<local_variable>exp</local_variable>
			</code>, all different, and <italic>inst0</italic>, <italic>inst1</italic>, <italic>inst2</italic>,  ... are sequences of zero or more instructions. In the integer case, it is often convenient to use 
			<code>
				<keyword>unique</keyword>
			</code> values for the <italic>vi</italic>
		</paragraph>
		<paragraph>The effect of such a multi-branch instruction, if the value of 
			<code>
				<local_variable>exp</local_variable>
			</code> is one of the <italic>vi</italic>, is to execute the corresponding <italic>insti</italic>. If none of the <italic>vi</italic>  matches, the instruction executes <italic>inst0</italic>, unless there is no 
			<code>
				<keyword>else</keyword>
			</code> part, in which case it triggers an exception.
		</paragraph>
		<note>Raising an exception is the proper behavior, since the absence of an 
			<code>
				<keyword>else</keyword>
			</code> indicates that the author asserts that one of the values will match. If you want an instruction that does nothing in this case, rather than cause an exception, use an 
			<code>
				<keyword>else</keyword>
			</code> part with an empty <italic>inst0</italic>. In contrast, 
			<code>
				<keyword>if</keyword> 
				<local_variable>c</local_variable> 
				<keyword>then</keyword>
			</code> <italic>inst</italic> 
			<code>
				<keyword>end</keyword>
			</code> with no 
			<code>
				<keyword>else</keyword>
			</code> part does nothing in the absence of an 
			<code>
				<keyword>else</keyword>
			</code> part, since in this case there is no implied claim that 
			<code>
				<local_variable>c</local_variable>
			</code> must hold.
		</note>
		<paragraph>The loop construct has the form</paragraph>
		<code_block>
<keyword>from</keyword>
	<italic>initialization</italic>
<keyword>invariant</keyword>
	<italic>inv</italic>
<keyword>variant</keyword>
	<italic>var</italic>
<keyword>until</keyword>
	<italic>exit</italic>
<keyword>loop</keyword>
	<italic>body</italic>
<keyword>end</keyword>
</code_block>
		<paragraph>where the 
			<code>
				<keyword>invariant</keyword>
			</code> <italic>inv</italic> and 
			<code>
				<keyword>variant</keyword>
			</code> <italic>var</italic> parts are optional, the others required. <italic>initialization</italic> and <italic>body</italic> are sequences of zero or more instructions; <italic>exit</italic> and <italic>inv</italic> are boolean expressions (more precisely, <italic>inv</italic> is an assertion); <italic>var</italic> is an integer expression.</paragraph>
		<paragraph>The effect is to execute <italic>initialization</italic>, then, zero or more times until <italic>exit</italic> is satisfied, to execute <italic>body</italic>. (If after <italic>initialization</italic> the value of <italic>exit</italic> is already true,  <italic>body</italic> will not be executed at all.) Note that the syntax of loops always includes an initialization, as most loops require some preparation. If not, just leave <italic>initialization</italic>> empty, while including the 
			<code>
				<keyword>from</keyword>
			</code> since it is a required component.
		</paragraph>
		<paragraph>The assertion <italic>inv</italic>, if present, expresses a 
			<bold>loop invariant</bold>  (not to be confused with class invariants). For the loop to be correct, <italic>initialization</italic> must ensure <italic>inv</italic>, and then every iteration of <italic>body</italic> executed when <italic>exit</italic> is false must preserve the invariant; so the effect of the loop is to yield a state in which both <italic>inv</italic> and <italic>exit</italic> are true. The loop must terminate after a finite number of iterations, of course; this can be guaranteed by using a <bold>loop variant</bold> <italic>var</italic>. It must be an integer expression whose value is non-negative after execution of <italic>initialization</italic>, and decreased by at least one, while remain non-negative, by any execution of <italic>body</italic> when <italic>exit</italic> is false; since a non-negative integer cannot be decreased forever, this ensures termination. The assertion monitoring mode, if turned on at the highest level, will check these properties of the invariant and variant after initialization and after each loop iteration, triggering an exception if the invariant does not hold or the variant is negative or does not decrease. </paragraph>
		<paragraph>An occasionally useful instruction is 
			<code>
				<keyword>debug</keyword>
			</code> 
			<code>
				<symbol>(</symbol>
			</code><italic>Debug_key</italic>,  ...
			<code>
				<symbol>)</symbol>
			</code> <italic>instructions</italic> 
			<code>
				<keyword>end</keyword>
			</code> where <italic>instructions</italic> is a sequence of zero or more instructions and the part in parentheses is optional, containing if present one or more strings, called debug keys. The EiffelStudio compiler lets you specify the corresponding 
			<code>
				<keyword>debug</keyword>
			</code> compilation option: 
			<code>
				<keyword>yes</keyword>
			</code>, 
			<code>
				<keyword>no</keyword>
			</code>, or an explicit debug key. The <italic>instructions</italic>will be executed if and only if the corresponding option is on. The obvious use is for instructions that should be part of the system but executed only in some circumstances, for example to provide extra debugging information.
		</paragraph>
		<paragraph>The final instruction is connected with Design by Contract&#153;. The instruction 
			<code>
				<keyword>check</keyword>
			</code> <italic>Assertion</italic> 
			<code>
				<keyword>end</keyword>
			</code>, where <italic>Assertion</italic> is a sequence of zero or more assertions, will have no effect unless assertion monitoring is turned on at the 
			<code>
				<keyword>Check</keyword>
			</code> level or higher. If so it will evaluate all the assertions listed, having no further effect if they are all satisfied; if any one of them does not hold, the instruction will trigger an exception.
		</paragraph>
		<paragraph>This instruction serves to state properties that are expected to be satisfied at some stages of the computation -- other than the specific stages, such as routine entry and exit, already covered by the other assertion mechanisms such as preconditions, postconditions and invariants. A recommended use of 
			<code>
				<keyword>check</keyword>
			</code> involves calling a routine with a precondition, where the call, for good reason, does not explicitly test for the precondition. Consider a routine of the form
		</paragraph>
<code_block>
<feature_name>r</feature_name> <symbol>(</symbol><local_variable>ref</local_variable><symbol>:</symbol> <class_name>SOME_REFERENCE_TYPE</class_name><symbol>)</symbol> <keyword>is</keyword>
	<keyword>require</keyword>
		not_void<symbol>:</symbol> <local_variable>ref</local_variable> <symbol>/=</symbol> <keyword>Void</keyword>
	<keyword>do</keyword>
		<local_variable>ref</local_variable>.<feature_name>some_feature</feature_name>
		...
	<keyword>end</keyword>
</code_block>
		<paragraph>Because of the call to 
			<code>
				<feature_name>some_feature</feature_name>
			</code>, the routine will only work if its precondition is satisfied on entry. To guarantee this precondition, the caller may protect it by the corresponding test, as in
		</paragraph>
<code_block>
<keyword>if</keyword> <local_variable>x</local_variable> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword> <feature_name>a</feature_name>.<feature_name>r</feature_name> <symbol>(</symbol><local_variable>x</local_variable><symbol>)</symbol> <keyword>end</keyword>
</code_block>
		<paragraph>but this is not the only possible scheme; for example if an 
			<code>
				<keyword>create</keyword> 
				<local_variable>x</local_variable>
			</code> appears shortly before the call we know 
			<code>
				<local_variable>x</local_variable>
			</code> is not void and do not need the protection. It is a good idea in such cases to use a 
			<code>
				<keyword>check</keyword>
			</code> instruction to document this property, if only to make sure that a reader of the code will realize that the omission of an explicit test (justified or not) was not a mistake. This is particularly appropriate if the justification for not testing the precondition is less obvious. For example 
			<code>
				<local_variable>x</local_variable>
			</code> could have been obtained, somewhere else in the algorithm, as 
			<code>
				<feature_name>clone</feature_name> <symbol>(</symbol><local_variable>y</local_variable><symbol>)</symbol>
			</code> for some 
			<code>
				<local_variable>y</local_variable>
			</code> that you know is not void. You should document this knowledge by writing the call as
		</paragraph>
<code_block>
<keyword>check</keyword>
	x_not_void<symbol>:</symbol> <local_variable>x</local_variable> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>end</keyword>
		<comment>-- Because x was obtained as a clone of y,</comment>
		<comment>-- and y is not void because [etc.]</comment>
<keyword>end</keyword>
<feature_name>a</feature_name>.<feature_name>r</feature_name> <symbol>(</symbol><local_variable>x</local_variable><symbol>)</symbol>
</code_block>
		<note>Note the recommended convention: extra indentation of the 
			<code>
				<keyword>check</keyword>
			</code> part to separate it from the algorithm proper; and inclusion of a comment listing the rationale behind the developer's decision not to check explicitly for the precondition.
		</note>
		<paragraph>In production mode with assertion monitoring turned off, this instruction will have no effect. But it will be precious for a maintainer of the software who is trying to figure out what it does, and in the process to reconstruct the original developer's reasoning. (The maintainer might of course be the same person as the developer, six months later.) And if the rationale is wrong somewhere, turning assertion checking on will immediately uncover the bug. </paragraph>
		<heading>
			<size>2</size>
			<content>Obsolete features and classes</content>
		</heading>
		<paragraph>One of the conditions for producing truly great reusable software is to recognize that although you should try to get everything right the first time around you won't always succeed. But if "good enough" may be good enough for application software, it's not good enough, in the long term, for reusable software. The aim is to get ever closer to the asymptote of perfection. If you find a better way, you must implement it. The activity of generalization, discussed as part of the lifecycle, doesn't stop at the first release of a reusable library.
		</paragraph>
		<paragraph>This raises the issue of backward compatibility: how to move forward with a better design, without compromising existing applications that used the previous version?</paragraph>
		<paragraph>The notion of obsolete class and feature helps address this issue. By declaring a feature as 
			<code>
				<keyword>obsolete</keyword>
			</code>, using the syntax
		</paragraph>
<code_block>
<feature_name>enter</feature_name> <symbol>(</symbol><local_variable>i</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name>; <local_variable>x</local_variable><symbol>:</symbol> <class_name>G</class_name><symbol>)</symbol> <keyword>is</keyword>
	<keyword>obsolete</keyword>
		<string>"Use ` put (x, i)' instead "</string>
	<keyword>require</keyword>
		...
	<keyword>do</keyword>
		<feature_name>put</feature_name> <symbol>(</symbol><local_variable>x</local_variable>, <local_variable>i</local_variable><symbol>)</symbol>
	<keyword>end</keyword>
</code_block>
		<paragraph>you state that you are now advising against using it, and suggest a replacement through the message that follows the keyword 
			<code>
				<keyword>obsolete</keyword>
			</code>, a mere string. The obsolete feature is still there, however; using it will cause no other harm than a warning message when someone compiles a system that includes a call to it. Indeed, you don't want to hold a gun to your client authors' forehead (<italic>"Upgrade now or die !"</italic>); but you do want to let them know that there is a new version and that they should upgrade at their leisure.
		</paragraph>
		<paragraph>Besides routines, you may also mark classes as obsolete. </paragraph>
		<paragraph>The example above is a historical one, involving an early change of interface for the EiffelBase library class 
			<code>
				<class_name>ARRAY</class_name>
			</code>; the change affected both the feature's name, with a new name ensuring better consistency with other classes, and the order of arguments, again for consistency. It shows the recommended style for using 
			<code>
				<keyword>obsolete</keyword>
			</code>:
			<line_break/>
			<list ordered="false">
				<item>In the message following the keyword, explain the recommended replacement. This message will be part of the warning produced by the compiler for a system that includes the obsolete element.</item>
				<item>In the body of the routine, it is usually appropriate, as here, to replace the original implementation by a call to the new version. This may imply a small performance overhead, but simplifies maintenance and avoids errors.</item>
			</list>
		</paragraph>
		<paragraph>It is good discipline not to let obsolete elements linger around for too long. The next major new release, after a suitable grace period, should remove them. </paragraph>
		<paragraph>The design flexibility afforded by the 
			<code>
				<keyword>obsolete</keyword>
			</code> keyword is critical to ensure the harmonious long-term development of ambitious reusable software.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Creation variants</content>
		</heading>
		<paragraph>The basic forms of creation instruction, and the one most commonly used, are the two illustrated earlier (see 
			<link>
				<url>tutorial-07.xml</url><anchor_name>59651</anchor_name>
				<label>Chapter 6, "The Dynamic Structure: Execution Model"</label>
			</link>):
		</paragraph>
<code_block>
<keyword>create</keyword> <local_variable>x</local_variable>.<feature_name>make</feature_name> <symbol>(</symbol><number>2000</number><symbol>)</symbol>
<keyword>create</keyword> <local_variable>x</local_variable>
</code_block>
		<paragraph>the first one if the corresponding class has a 
			<code>
				<keyword>create</keyword>
			</code> clause, the second one if not. In either form you may include a type name in braces, as in
		</paragraph>
<code_block>
<keyword>create</keyword> <symbol>{</symbol><class_name>SAVINGS_ACCOUNT</class_name><symbol>}</symbol> <local_variable>x</local_variable>.<feature_name>make</feature_name> <symbol>(</symbol><number>2000</number><symbol>)</symbol>
</code_block>
		<paragraph>which is valid only if the type listed, here 
			<code>
				<class_name>SAVINGS_ACCOUNT</class_name>
			</code>, conforms to the type of 
			<code>
				<local_variable>x</local_variable>
			</code>, assumed here to be 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>. This avoids introducing a local entity, as in
		</paragraph>
<code_block>
<keyword>local</keyword>
	<local_variable>xs</local_variable><symbol>:</symbol> <class_name>SAVINGS_ACCOUNT</class_name>
<keyword>do</keyword>
	<keyword>create</keyword> <local_variable>xs</local_variable>.<feature_name>make</feature_name> <symbol>(</symbol><number>2000</number><symbol>)</symbol>
	<local_variable>x</local_variable> <symbol>:=</symbol> <local_variable>xs</local_variable>
	...
</code_block>
		<paragraph>and has exactly the same effect. Another variant is the <bold>creation expression</bold>, which always lists the type, but returns a value instead of being an instruction. It is useful in the following context:
		</paragraph>
<code_block>
<feature_name>some_routine</feature_name> <symbol>(</symbol><keyword>create</keyword> <symbol>{</symbol><class_name>ACCOUNT</class_name><symbol>}</symbol><feature_name/>.<feature_name>make</feature_name> <symbol>(</symbol><number>2000</number><symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>which you may again view as an abbreviation for a more verbose form that would need a local entity, using a creation instruction:</paragraph>
<code_block>
<keyword>local</keyword>
 	<local_variable>x</local_variable><symbol>:</symbol> <class_name>ACCOUNT</class_name>
<keyword>do</keyword>
	<keyword>create</keyword> <local_variable>x</local_variable>.<feature_name>make</feature_name> <symbol>(</symbol><number>2000</number><symbol>)</symbol>
	<feature_name>some_routine</feature_name> <symbol>(</symbol><local_variable>x</local_variable><symbol>)</symbol>
	...
</code_block>
		<paragraph>Unlike creation instructions, creation expressions must always list the type explicitly, 
			<code>
				<symbol>{</symbol><class_name>ACCOUNT</class_name><symbol>}</symbol>
			</code> in the example. They are useful in the case shown: creating an object that only serves as an argument to be passed to a routine. If you need to retain access to the object through an entity, the instruction 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>
			</code> ... is the appropriate construct.
		</paragraph>
		<paragraph>The creation mechanism gets an extra degree of flexibility through the notion of 
			<code>
				<feature_name>default_create</feature_name>
			</code>. The simplest form of creation instruction, 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>
			</code> without an explicit creation procedure, is actually an abbreviation for 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>.<string>default_create</string>
			</code>, where 
			<code>
				<feature_name>default_create</feature_name>
			</code> is a procedure defined in class 
			<code>
				<class_name>ANY</class_name>
			</code> to do nothing. By redefining 
			<code>
				<feature_name>default_create</feature_name>
			</code> in one of your classes, you can ensure that 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>
			</code> will take care of non-default initialization (and ensure the invariant if needed). When a class has no 
			<code>
				<keyword>create</keyword>
			</code> clause, it's considered to have one that lists only 
			<code>
				<feature_name>default_create</feature_name>
			</code>. If you want to allow 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>
			</code> as well as the use of some explicit creation procedures, simply list 
			<code>
				<feature_name>default_create</feature_name>
			</code> along with these procedures in the 
			<code>
				<keyword>create</keyword>
			</code> clause. To disallow creation altogether, include an empty 
			<code>
				<keyword>create</keyword>
			</code> clause, although this technique is seldom needed since most non-creatable classes are deferred, and one can't instantiate a deferred class.
		</paragraph>
		<paragraph>One final twist is the mechanism for creating instances of formal generic parameters. For 
			<code>
				<local_variable>x</local_variable>
			</code> of type 
			<code>
				<class_name>G</class_name>
			</code> in a class 
			<code>
				<class_name>C</class_name> <symbol>[</symbol><class_name>G</class_name><symbol>]</symbol>
			</code>, it wouldn't be safe to allow 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>
			</code>, since 
			<code>
				<class_name>G</class_name>
			</code> stands for many possible types, all of which may have their own creation procedures. To allow such creation instructions, we rely on constrained genericity. You may declare a class as
		</paragraph>
<code_block>
<symbol>[</symbol><generics>G</generics> <symbol>-&gt;</symbol> <class_name>T</class_name> <keyword>create</keyword> cp <keyword>end</keyword><symbol>]</symbol>
</code_block>
		<paragraph>to make 
			<code>
				<class_name>G</class_name>
			</code> constrained by 
			<code>
				<class_name>T</class_name>
			</code>, as we learned before, and specify that any actual generic parameter must have 
			<code>
				<feature_name>cp</feature_name>
			</code> among its creation procedures. Then it's permitted to use 
			<code>
				<keyword>create</keyword> <local_variable>x</local_variable>.<feature_name>cp</feature_name>
			</code>, with arguments if required by 
			<code>
				<feature_name>cp</feature_name>
			</code>, since it is guaranteed to be safe. The mechanism is very general since you may use 
			<code>
				<class_name>ANY</class_name>
			</code> for 
			<code>
				<class_name>T</class_name>
			</code> and 
			<code>
				<feature_name>default_create</feature_name>
			</code> for 
			<code>
				<feature_name>cp</feature_name>
			</code>. The only requirement on 
			<code>
				<feature_name>cp</feature_name>
			</code> is that it must be a 
			procedure of 
			<code>
				<class_name>T</class_name>
			</code>, not necessarily a creation procedure; this permits using the mechanism even if 
			<code>
				<class_name>T</class_name>
			</code> is deferred, a common occurrence. It's only descendants of 
			<code>
				<class_name>T</class_name>
			</code> that must make 
			<code>
				<feature_name>cp</feature_name>
			</code> a creation procedure, by listing it in the 
			<code>
				<keyword>create</keyword>
			</code> clause, if they want to serve as actual generic parameters for 
			<code>
				<class_name>C</class_name>
			</code>.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Tuple types</content>
		</heading>
		<paragraph>The study of genericity described arrays. Another common kind of container objects bears some resemblance to arrays: sequences, or "tuples", of elements of specified types. The difference is that all elements of an array were of the same type, or a conforming one, whereas for tuples you will specify the types we want for each relevant element. A typical tuple type is of the form</paragraph>
<code_block>
<class_name>TUPLE</class_name> <symbol>[</symbol><class_name>X</class_name>, <class_name>Y</class_name>, <class_name>Z</class_name><symbol>]</symbol>
</code_block>
		<paragraph>denoting a tuple of least three elements, such that the type of the first conforms to 
			<code>
				<class_name>X</class_name>
			</code>, the second to 
			<code>
				<class_name>Y</class_name>
			</code>, and the third to 
			<code>
				<class_name>Z</class_name>
			</code>.
		</paragraph>
		<paragraph>You may list any number of types in brackets, including none at all: 
			<code>
				<class_name>TUPLE</class_name>
			</code>, with no types in brackets, denotes tuples of arbitrary length.
		</paragraph>
		<info>The syntax, with brackets, is intentionally reminiscent of generic classes, but 
			<code>
				<class_name>TUPLE</class_name>
			</code> is a reserved word, not the name of a class; making it a class would not work since a generic class has a fixed number of generic parameters. You may indeed use 
			<code>
				<class_name>TUPLE</class_name>
			</code> to obtain the effect of a generic class with a variable number of parameters.
		</info>
		<paragraph>To write the tuples themselves -- the sequences of elements, instances of a tuple type -- you will also use square brackets; for example</paragraph>
<code_block>
<symbol>[</symbol><local_variable>x1</local_variable>, <local_variable>y1</local_variable>, <local_variable>z1</local_variable><symbol>]</symbol>
</code_block>
		<paragraph>with 
			<code>
				<local_variable>x1</local_variable>
			</code> of type 
			<code>
				<class_name>X</class_name>
			</code> and so on is a tuple of type 
			<code>
				<class_name>TUPLE</class_name> <symbol>[</symbol><class_name>X</class_name>, <class_name>Y</class_name>, <class_name>Z</class_name><symbol>]</symbol>
			</code>.
		</paragraph>
		<paragraph>The definition of tuple types states that 
			<code>
				<class_name>TUPLE</class_name> <symbol>[</symbol><class_name>X1</class_name> ... <class_name>Xn</class_name><symbol>]</symbol>
			</code> denotes sequences of at least 
			<code>
				<local_variable>n</local_variable>
			</code> elements, of which the first 
			<code>
				<local_variable>n</local_variable>
			</code> have types respectively conforming to 
			<code>
				<class_name>X1</class_name>, ..., <class_name>Xn</class_name>
			</code>. Such a sequence may have more than 
			<code>
				<local_variable>n</local_variable>
			</code> elements.
		</paragraph>
		<paragraph>Features available on tuple types include 
			<code>
				<feature_name>count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
			</code>, yielding the number of elements in a tuple, 
			<code>
				<feature_name>item</feature_name> <symbol>(</symbol><local_variable>i</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol><symbol>: </symbol><class_name>ANY</class_name>
			</code> which returns the 
			<code>
				<local_variable>i</local_variable>
			</code>-th element, and 
			<code>
				<feature_name>put</feature_name>
			</code> which replaces an element.
		</paragraph>
		<paragraph>Tuples are appropriate when these are the only operations you need, that is to say, you are using sequences with no further structure or properties. Tuples give you "anonymous classes" with predefined features 
			<code>
				<feature_name>count</feature_name>
			</code>, 
			<code>
				<feature_name>item</feature_name>
			</code> and 
			<code>
				<feature_name>put</feature_name>
			</code>. A typical example is a general-purpose output procedure that takes an arbitrary sequence of values, of arbitrary types, and prints them. It may simply take an argument of type 
			<code>
				<class_name>TUPLE</class_name>
			</code>, so that clients can call it under the form
		</paragraph>
<code_block>
<feature_name>write</feature_name> <symbol>(</symbol><symbol>[</symbol> <italic>your_integer</italic> , <italic>your_real</italic>, <italic>your_account</italic><symbol>]</symbol><symbol>) </symbol>
</code_block>
		<paragraph>As soon as you need a type with more specific features, you should define a class. </paragraph>
	</paragraph></document>
