Terminals which are not used:

	TOK_CASE
	TOK_DEFAULT
	TOK_IF
	TOK_ELSE
	TOK_SWITCH
	TOK_WHILE
	TOK_DO
	TOK_FOR
	TOK_GOTO
	TOK_CONTINUE
	TOK_BREAK
	TOK_RETURN


Grammar

rule 1 primary_expression -> TOK_IDENTIFIER
rule 2 primary_expression -> TOK_CONSTANT
rule 3 primary_expression -> TOK_STRING_LITERAL
rule 4 primary_expression -> '(' expression ')'
rule 5 postfix_expression -> primary_expression
rule 6 postfix_expression -> postfix_expression '[' expression ']'
rule 7 postfix_expression -> postfix_expression '(' ')'
rule 8 postfix_expression -> postfix_expression '(' argument_expression_list ')'
rule 9 postfix_expression -> postfix_expression '.' TOK_IDENTIFIER
rule 10 postfix_expression -> postfix_expression TOK_PTR_OP TOK_IDENTIFIER
rule 11 postfix_expression -> postfix_expression TOK_INC_OP
rule 12 postfix_expression -> postfix_expression TOK_DEC_OP
rule 13 argument_expression_list -> assignment_expression
rule 14 argument_expression_list -> argument_expression_list ',' assignment_expression
rule 15 unary_expression -> postfix_expression
rule 16 unary_expression -> TOK_INC_OP unary_expression
rule 17 unary_expression -> TOK_DEC_OP unary_expression
rule 18 unary_expression -> unary_operator cast_expression
rule 19 unary_expression -> TOK_SIZEOF unary_expression
rule 20 unary_expression -> TOK_SIZEOF '(' type_name pop_type_name_scope ')'
rule 21 unary_operator -> '&'
rule 22 unary_operator -> '*'
rule 23 unary_operator -> '+'
rule 24 unary_operator -> '-'
rule 25 unary_operator -> '~'
rule 26 unary_operator -> '!'
rule 27 cast_expression -> unary_expression
rule 28 cast_expression -> '(' type_name pop_type_name_scope ')' cast_expression
rule 29 multiplicative_expression -> cast_expression
rule 30 multiplicative_expression -> multiplicative_expression '*' cast_expression
rule 31 multiplicative_expression -> multiplicative_expression '/' cast_expression
rule 32 multiplicative_expression -> multiplicative_expression '%' cast_expression
rule 33 additive_expression -> multiplicative_expression
rule 34 additive_expression -> additive_expression '+' multiplicative_expression
rule 35 additive_expression -> additive_expression '-' multiplicative_expression
rule 36 shift_expression -> additive_expression
rule 37 shift_expression -> shift_expression TOK_LEFT_OP additive_expression
rule 38 shift_expression -> shift_expression TOK_RIGHT_OP additive_expression
rule 39 relational_expression -> shift_expression
rule 40 relational_expression -> relational_expression '<' shift_expression
rule 41 relational_expression -> relational_expression '>' shift_expression
rule 42 relational_expression -> relational_expression TOK_LE_OP shift_expression
rule 43 relational_expression -> relational_expression TOK_GE_OP shift_expression
rule 44 equality_expression -> relational_expression
rule 45 equality_expression -> equality_expression TOK_EQ_OP relational_expression
rule 46 equality_expression -> equality_expression TOK_NE_OP relational_expression
rule 47 and_expression -> equality_expression
rule 48 and_expression -> and_expression '&' equality_expression
rule 49 exclusive_or_expression -> and_expression
rule 50 exclusive_or_expression -> exclusive_or_expression '^' and_expression
rule 51 inclusive_or_expression -> exclusive_or_expression
rule 52 inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
rule 53 logical_and_expression -> inclusive_or_expression
rule 54 logical_and_expression -> logical_and_expression TOK_AND_OP inclusive_or_expression
rule 55 logical_or_expression -> logical_and_expression
rule 56 logical_or_expression -> logical_or_expression TOK_OR_OP logical_and_expression
rule 57 conditional_expression -> logical_or_expression
rule 58 conditional_expression -> logical_or_expression '?' expression ':' conditional_expression
rule 59 assignment_expression -> conditional_expression
rule 60 assignment_expression -> unary_expression assignment_operator assignment_expression
rule 61 assignment_operator -> '='
rule 62 assignment_operator -> TOK_MUL_ASSIGN
rule 63 assignment_operator -> TOK_DIV_ASSIGN
rule 64 assignment_operator -> TOK_MOD_ASSIGN
rule 65 assignment_operator -> TOK_ADD_ASSIGN
rule 66 assignment_operator -> TOK_SUB_ASSIGN
rule 67 assignment_operator -> TOK_LEFT_ASSIGN
rule 68 assignment_operator -> TOK_RIGHT_ASSIGN
rule 69 assignment_operator -> TOK_AND_ASSIGN
rule 70 assignment_operator -> TOK_XOR_ASSIGN
rule 71 assignment_operator -> TOK_OR_ASSIGN
rule 72 expression -> assignment_expression
rule 73 expression -> expression ',' assignment_expression
rule 74 constant_expression -> conditional_expression
rule 75 attribute_sequence -> attribute
rule 76 attribute_sequence -> attribute attribute_sequence
rule 77 attribute -> TOK_CL_ASM
rule 78 attribute -> TOK_CL_FASTCALL
rule 79 attribute -> TOK_CL_BASED
rule 80 attribute -> TOK_CL_INLINE
rule 81 attribute -> TOK_CL_CDECL
rule 82 attribute -> TOK_CL_STDCALL
rule 83 declaration -> declaration_specifiers pop_type_name_scope ';'
rule 84 declaration -> declaration_specifiers init_declarator_list pop_type_name_scope ';'
rule 85 declaration_specifiers -> push_reporting_type_name_scope non_wrapped_declaration_specifiers
rule 86 declaration_specifiers -> attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers
rule 87 non_wrapped_declaration_specifiers -> storage_class_specifier
rule 88 non_wrapped_declaration_specifiers -> storage_class_specifier non_wrapped_declaration_specifiers
rule 89 non_wrapped_declaration_specifiers -> type_specifier
rule 90 non_wrapped_declaration_specifiers -> type_specifier non_wrapped_declaration_specifiers
rule 91 non_wrapped_declaration_specifiers -> type_qualifier
rule 92 non_wrapped_declaration_specifiers -> type_qualifier non_wrapped_declaration_specifiers
rule 93 init_declarator_list -> init_declarator
rule 94 init_declarator_list -> init_declarator_list ',' init_declarator
rule 95 init_declarator -> declarator
rule 96 init_declarator -> declarator '=' initializer
rule 97 storage_class_specifier -> TOK_TYPEDEF
rule 98 storage_class_specifier -> TOK_EXTERN
rule 99 storage_class_specifier -> TOK_STATIC
rule 100 storage_class_specifier -> TOK_AUTO
rule 101 storage_class_specifier -> TOK_REGISTER
rule 102 storage_class_specifier -> TOK_INLINE
rule 103 type_specifier -> disable_type_name_reporting_for_this_scope type_specifier_no_type_name
rule 104 type_specifier -> disable_type_name_reporting_for_this_scope type_specifier_type_name
rule 105 type_specifier_no_type_name -> TOK_VOID
rule 106 type_specifier_no_type_name -> TOK_CHAR
rule 107 type_specifier_no_type_name -> TOK_SHORT
rule 108 type_specifier_no_type_name -> TOK_INT
rule 109 type_specifier_no_type_name -> TOK_CL_INT_8
rule 110 type_specifier_no_type_name -> TOK_CL_INT_16
rule 111 type_specifier_no_type_name -> TOK_CL_INT_32
rule 112 type_specifier_no_type_name -> TOK_CL_INT_64
rule 113 type_specifier_no_type_name -> TOK_LONG
rule 114 type_specifier_no_type_name -> TOK_FLOAT
rule 115 type_specifier_no_type_name -> TOK_DOUBLE
rule 116 type_specifier_no_type_name -> TOK_SIGNED
rule 117 type_specifier_no_type_name -> TOK_UNSIGNED
rule 118 type_specifier_type_name -> struct_or_union_specifier
rule 119 type_specifier_type_name -> enum_specifier
rule 120 type_specifier_type_name -> TOK_TYPE_NAME
rule 121 struct_or_union_specifier -> struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'
rule 122 struct_or_union_specifier -> struct_or_union push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'
rule 123 struct_or_union_specifier -> struct_or_union TOK_IDENTIFIER
rule 124 struct_or_union_specifier -> struct_or_union TOK_TYPE_NAME
rule 125 struct_or_union -> TOK_STRUCT
rule 126 struct_or_union -> TOK_UNION
rule 127 struct_declaration_list -> struct_declaration
rule 128 struct_declaration_list -> struct_declaration_list struct_declaration
rule 129 struct_declaration -> specifier_qualifier_list struct_declarator_list pop_type_name_scope ';'
rule 130 struct_declaration -> specifier_qualifier_list pop_type_name_scope ';'
rule 131 specifier_qualifier_list -> push_reporting_type_name_scope non_wrapped_specifier_qualifier_list
rule 132 non_wrapped_specifier_qualifier_list -> type_specifier non_wrapped_specifier_qualifier_list
rule 133 non_wrapped_specifier_qualifier_list -> type_specifier
rule 134 non_wrapped_specifier_qualifier_list -> type_qualifier non_wrapped_specifier_qualifier_list
rule 135 non_wrapped_specifier_qualifier_list -> type_qualifier
rule 136 struct_declarator_list -> struct_declarator
rule 137 struct_declarator_list -> struct_declarator_list ',' struct_declarator
rule 138 struct_declarator -> declarator
rule 139 struct_declarator -> ':' constant_expression
rule 140 struct_declarator -> declarator ':' constant_expression
rule 141 enum_specifier -> TOK_ENUM '{' enumerator_list_with_opt_comma '}'
rule 142 enum_specifier -> TOK_ENUM TOK_IDENTIFIER '{' enumerator_list_with_opt_comma '}'
rule 143 enum_specifier -> TOK_ENUM TOK_IDENTIFIER
rule 144 enumerator_list_with_opt_comma -> enumerator_list opt_comma
rule 145 enumerator_list -> enumerator
rule 146 enumerator_list -> enumerator_list ',' enumerator
rule 147 opt_comma -> -- Empty
rule 148 opt_comma -> ','
rule 149 enumerator -> TOK_IDENTIFIER
rule 150 enumerator -> TOK_IDENTIFIER '=' constant_expression
rule 151 type_qualifier -> TOK_CONST
rule 152 type_qualifier -> TOK_VOLATILE
rule 153 declarator -> pointer direct_declarator
rule 154 declarator -> direct_declarator
rule 155 declarator -> pointer attribute_sequence direct_declarator
rule 156 declarator -> attribute_sequence pointer direct_declarator
rule 157 declarator -> attribute_sequence direct_declarator
rule 158 direct_declarator -> TOK_IDENTIFIER
rule 159 direct_declarator -> '(' declarator ')'
rule 160 direct_declarator -> direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'
rule 161 direct_declarator -> direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'
rule 162 direct_declarator -> direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'
rule 163 direct_declarator -> direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'
rule 164 direct_declarator -> direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'
rule 165 pointer -> '*'
rule 166 pointer -> '*' type_qualifier_list
rule 167 pointer -> '*' pointer
rule 168 pointer -> '*' type_qualifier_list pointer
rule 169 type_qualifier_list -> type_qualifier
rule 170 type_qualifier_list -> type_qualifier_list type_qualifier
rule 171 parameter_type_list -> parameter_list
rule 172 parameter_type_list -> parameter_list ',' TOK_ELLIPSIS
rule 173 parameter_list -> parameter_declaration
rule 174 parameter_list -> parameter_list ',' parameter_declaration
rule 175 parameter_declaration -> declaration_specifiers declarator pop_type_name_scope
rule 176 parameter_declaration -> declaration_specifiers abstract_declarator pop_type_name_scope
rule 177 parameter_declaration -> declaration_specifiers pop_type_name_scope
rule 178 identifier_list -> TOK_IDENTIFIER
rule 179 identifier_list -> identifier_list ',' TOK_IDENTIFIER
rule 180 type_name -> specifier_qualifier_list
rule 181 type_name -> specifier_qualifier_list abstract_declarator
rule 182 abstract_declarator -> pointer
rule 183 abstract_declarator -> direct_abstract_declarator
rule 184 abstract_declarator -> pointer direct_abstract_declarator
rule 185 abstract_declarator -> pointer attribute_sequence direct_abstract_declarator
rule 186 abstract_declarator -> attribute_sequence pointer direct_abstract_declarator
rule 187 abstract_declarator -> attribute_sequence direct_abstract_declarator
rule 188 abstract_declarator -> attribute_sequence pointer
rule 189 direct_abstract_declarator -> '(' abstract_declarator ')'
rule 190 direct_abstract_declarator -> push_reporting_type_name_scope '[' pop_type_name_scope ']'
rule 191 direct_abstract_declarator -> push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'
rule 192 direct_abstract_declarator -> direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'
rule 193 direct_abstract_declarator -> direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'
rule 194 direct_abstract_declarator -> '(' ')'
rule 195 direct_abstract_declarator -> '(' parameter_type_list ')'
rule 196 direct_abstract_declarator -> direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'
rule 197 direct_abstract_declarator -> direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'
rule 198 initializer -> assignment_expression
rule 199 initializer -> '{' initializer_list '}'
rule 200 initializer -> '{' initializer_list ',' '}'
rule 201 initializer_list -> initializer
rule 202 initializer_list -> initializer_list ',' initializer
rule 203 compound_statement -> '{' '}'
rule 204 declaration_list -> declaration
rule 205 declaration_list -> declaration_list declaration
rule 206 translation_unit -> external_declaration
rule 207 translation_unit -> translation_unit external_declaration
rule 208 external_declaration -> function_definition
rule 209 external_declaration -> declaration
rule 210 function_definition -> declaration_specifiers declarator pop_type_name_scope declaration_list @67 compound_statement
rule 211 @67 -> -- Empty
rule 212 function_definition -> declaration_specifiers declarator pop_type_name_scope @68 compound_statement
rule 213 @68 -> -- Empty
rule 214 function_definition -> declarator declaration_list @69 compound_statement
rule 215 @69 -> -- Empty
rule 216 function_definition -> declarator @70 compound_statement
rule 217 @70 -> -- Empty
rule 218 push_reporting_type_name_scope -> -- Empty
rule 219 disable_type_name_reporting_for_this_scope -> -- Empty
rule 220 pop_type_name_scope -> -- Empty

Terminals, with rules where they appear

$ (token 0)
error (token 256)
$undefined. (token 257)
TOK_IDENTIFIER (token 258) 1 9 10 121 123 142 143 149 150 158 178 179
TOK_CONSTANT (token 259) 2
TOK_STRING_LITERAL (token 260) 3
TOK_SIZEOF (token 261) 19 20
TOK_PTR_OP (token 262) 10
TOK_INC_OP (token 263) 11 16
TOK_DEC_OP (token 264) 12 17
TOK_LEFT_OP (token 265) 37
TOK_RIGHT_OP (token 266) 38
TOK_LE_OP (token 267) 42
TOK_GE_OP (token 268) 43
TOK_EQ_OP (token 269) 45
TOK_NE_OP (token 270) 46
TOK_AND_OP (token 271) 54
TOK_OR_OP (token 272) 56
TOK_MUL_ASSIGN (token 273) 62
TOK_DIV_ASSIGN (token 274) 63
TOK_MOD_ASSIGN (token 275) 64
TOK_ADD_ASSIGN (token 276) 65
TOK_SUB_ASSIGN (token 277) 66
TOK_LEFT_ASSIGN (token 278) 67
TOK_RIGHT_ASSIGN (token 279) 68
TOK_AND_ASSIGN (token 280) 69
TOK_XOR_ASSIGN (token 281) 70
TOK_OR_ASSIGN (token 282) 71
TOK_TYPE_NAME (token 283) 120 124
TOK_TYPEDEF (token 284) 97
TOK_EXTERN (token 285) 98
TOK_STATIC (token 286) 99
TOK_AUTO (token 287) 100
TOK_REGISTER (token 288) 101
TOK_CHAR (token 289) 106
TOK_SHORT (token 290) 107
TOK_INT (token 291) 108
TOK_LONG (token 292) 113
TOK_SIGNED (token 293) 116
TOK_UNSIGNED (token 294) 117
TOK_FLOAT (token 295) 114
TOK_DOUBLE (token 296) 115
TOK_CONST (token 297) 151
TOK_VOLATILE (token 298) 152
TOK_VOID (token 299) 105
TOK_STRUCT (token 300) 125
TOK_UNION (token 301) 126
TOK_ENUM (token 302) 141 142 143
TOK_ELLIPSIS (token 303) 172
TOK_CASE (token 304)
TOK_DEFAULT (token 305)
TOK_IF (token 306)
TOK_ELSE (token 307)
TOK_SWITCH (token 308)
TOK_WHILE (token 309)
TOK_DO (token 310)
TOK_FOR (token 311)
TOK_GOTO (token 312)
TOK_CONTINUE (token 313)
TOK_BREAK (token 314)
TOK_RETURN (token 315)
TOK_INLINE (token 316) 102
TOK_CL_INT_8 (token 317) 109
TOK_CL_INT_16 (token 318) 110
TOK_CL_INT_32 (token 319) 111
TOK_CL_INT_64 (token 320) 112
TOK_CL_FASTCALL (token 321) 78
TOK_CL_BASED (token 322) 79
TOK_CL_CDECL (token 323) 81
TOK_CL_STDCALL (token 324) 82
TOK_CL_INLINE (token 325) 80
TOK_CL_ASM (token 326) 77
'(' (token 40) 4 7 8 20 28 159 162 163 164 189 194 195 196 197
')' (token 41) 4 7 8 20 28 159 162 163 164 189 194 195 196 197
'[' (token 91) 6 160 161 190 191 192 193
']' (token 93) 6 160 161 190 191 192 193
'.' (token 46) 9
',' (token 44) 14 73 94 137 146 148 172 174 179 200 202
'&' (token 38) 21 48
'*' (token 42) 22 30 165 166 167 168
'+' (token 43) 23 34
'-' (token 45) 24 35
'~' (token 126) 25
'!' (token 33) 26
'/' (token 47) 31
'%' (token 37) 32
'<' (token 60) 40
'>' (token 62) 41
'^' (token 94) 50
'|' (token 124) 52
'?' (token 63) 58
':' (token 58) 58 139 140
'=' (token 61) 61 96 150
';' (token 59) 83 84 129 130
'{' (token 123) 121 122 141 142 199 200 203
'}' (token 125) 121 122 141 142 199 200 203

Nonterminals, with rules where they appear

declaration (0) on left: 83 84, on right: 204 205 209
init_declarator_list (1) on left: 93 94, on right: 84 94
init_declarator (2) on left: 95 96, on right: 93 94
declarator (3) on left: 153 154 155 156 157, on right: 95 96 138 140 159 175 210 212 214 216
direct_declarator (4) on left: 158 159 160 161 162 163 164, on right: 153 154 155 156 157 160 161 162 163 164
abstract_declarator (5) on left: 182 183 184 185 186 187 188, on right: 176 181 189
direct_abstract_declarator (6) on left: 189 190 191 192 193 194 195 196 197, on right: 183 184 185 186 187 192 193 196 197
declaration_specifiers (7) on left: 85 86, on right: 83 84 175 176 177 210 212
type_qualifier_list (8) on left: 169 170, on right: 166 168 170
non_wrapped_declaration_specifiers (9) on left: 87 88 89 90 91 92, on right: 85 86 88 90 92
type_qualifier (10) on left: 151 152, on right: 91 92 134 135 169 170
type_specifier (11) on left: 103 104, on right: 89 90 132 133
type_specifier_no_type_name (12) on left: 105 106 107 108 109 110 111 112 113 114 115 116 117, on right: 103
type_specifier_type_name (13) on left: 118 119 120, on right: 104
storage_class_specifier (14) on left: 97 98 99 100 101 102, on right: 87 88
struct_or_union_specifier (15) on left: 121 122 123 124, on right: 118
struct_or_union (16) on left: 125 126, on right: 121 122 123 124
struct_declaration_list (17) on left: 127 128, on right: 121 122 128
struct_declaration (18) on left: 129 130, on right: 127 128
struct_declarator_list (19) on left: 136 137, on right: 129 137
struct_declarator (20) on left: 138 139 140, on right: 136 137
enum_specifier (21) on left: 141 142 143, on right: 119
enumerator (22) on left: 149 150, on right: 145 146
enumerator_list_with_opt_comma (23) on left: 144, on right: 141 142
enumerator_list (24) on left: 145 146, on right: 144 146
specifier_qualifier_list (25) on left: 131, on right: 129 130 180 181
non_wrapped_specifier_qualifier_list (26) on left: 132 133 134 135, on right: 131 132 134
pointer (27) on left: 165 166 167 168, on right: 153 155 156 167 168 182 184 185 186 188
parameter_type_list (28) on left: 171 172, on right: 162 195 197
parameter_list (29) on left: 173 174, on right: 171 172 174
parameter_declaration (30) on left: 175 176 177, on right: 173 174
attribute_sequence (31) on left: 75 76, on right: 76 86 155 156 157 185 186 187 188
attribute (32) on left: 77 78 79 80 81 82, on right: 75 76
constant_expression (33) on left: 74, on right: 139 140 150 160 191 193
conditional_expression (34) on left: 57 58, on right: 58 59 74
logical_or_expression (35) on left: 55 56, on right: 56 57 58
expression (36) on left: 72 73, on right: 4 6 58 73
assignment_expression (37) on left: 59 60, on right: 13 14 60 72 73 198
logical_and_expression (38) on left: 53 54, on right: 54 55 56
inclusive_or_expression (39) on left: 51 52, on right: 52 53 54
exclusive_or_expression (40) on left: 49 50, on right: 50 51 52
and_expression (41) on left: 47 48, on right: 48 49 50
equality_expression (42) on left: 44 45 46, on right: 45 46 47 48
relational_expression (43) on left: 39 40 41 42 43, on right: 40 41 42 43 44 45 46
shift_expression (44) on left: 36 37 38, on right: 37 38 39 40 41 42 43
additive_expression (45) on left: 33 34 35, on right: 34 35 36 37 38
multiplicative_expression (46) on left: 29 30 31 32, on right: 30 31 32 33 34 35
cast_expression (47) on left: 27 28, on right: 18 28 29 30 31 32
unary_expression (48) on left: 15 16 17 18 19 20, on right: 16 17 19 27 60
postfix_expression (49) on left: 5 6 7 8 9 10 11 12, on right: 6 7 8 9 10 11 12 15
primary_expression (50) on left: 1 2 3 4, on right: 5
argument_expression_list (51) on left: 13 14, on right: 8 14
assignment_operator (52) on left: 61 62 63 64 65 66 67 68 69 70 71, on right: 60
unary_operator (53) on left: 21 22 23 24 25 26, on right: 18
type_name (54) on left: 180 181, on right: 20 28
pop_type_name_scope (55) on left: 220, on right: 20 28 83 84 121 122 129 130 160 161 162 163 164 175 176 177 190 191 192 193 196 197 210 212
push_reporting_type_name_scope (56) on left: 218, on right: 85 86 121 122 131 160 161 162 163 164 190 191 192 193 196 197
initializer (57) on left: 198 199 200, on right: 96 201 202
disable_type_name_reporting_for_this_scope (58) on left: 219, on right: 103 104
opt_comma (59) on left: 147 148, on right: 144
identifier_list (60) on left: 178 179, on right: 163 179
initializer_list (61) on left: 201 202, on right: 199 200 202
compound_statement (62) on left: 203, on right: 210 212 214 216
declaration_list (63) on left: 204 205, on right: 205 210 214
translation_unit (64) on left: 206 207, on right: 207
external_declaration (65) on left: 208 209, on right: 206 207
function_definition (66) on left: 210 212 214 216, on right: 208
@67 (67) on left: 211, on right: 210
@68 (68) on left: 213, on right: 212
@69 (69) on left: 215, on right: 214
@70 (70) on left: 217, on right: 216


state 0

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	translation_unit  ->  . external_declaration   (rule 206)
	translation_unit  ->  . translation_unit external_declaration   (rule 207)
	external_declaration  ->  . function_definition   (rule 208)
	external_declaration  ->  . declaration   (rule 209)
	function_definition  ->  . declaration_specifiers declarator pop_type_name_scope declaration_list @67 compound_statement   (rule 210)
	function_definition  ->  . declaration_specifiers declarator pop_type_name_scope @68 compound_statement   (rule 212)
	function_definition  ->  . declarator declaration_list @69 compound_statement   (rule 214)
	function_definition  ->  . declarator @70 compound_statement   (rule 216)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declaration	go to state 10
	declarator	go to state 11
	direct_declarator	go to state 12
	declaration_specifiers	go to state 13
	pointer	go to state 14
	attribute_sequence	go to state 15
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	translation_unit	go to state 18
	external_declaration	go to state 19
	function_definition	go to state 20



state 1

	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  '*' .   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  '*' . type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  '*' . pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	pointer  ->  '*' . type_qualifier_list pointer   (rule 168)
	type_qualifier_list  ->  . type_qualifier   (rule 169)
	type_qualifier_list  ->  . type_qualifier_list type_qualifier   (rule 170)

	'*'	shift, and go to state 1
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22

	$default	reduce using rule 165 (pointer)

	type_qualifier_list	go to state 23
	type_qualifier	go to state 24
	pointer	go to state 25



state 2

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  '(' . declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	declarator	go to state 26
	direct_declarator	go to state 12
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16



state 3

	attribute  ->  TOK_CL_ASM .   (rule 77)

	$default	reduce using rule 77 (attribute)



state 4

	attribute  ->  TOK_CL_INLINE .   (rule 80)

	$default	reduce using rule 80 (attribute)



state 5

	attribute  ->  TOK_CL_STDCALL .   (rule 82)

	$default	reduce using rule 82 (attribute)



state 6

	attribute  ->  TOK_CL_CDECL .   (rule 81)

	$default	reduce using rule 81 (attribute)



state 7

	attribute  ->  TOK_CL_BASED .   (rule 79)

	$default	reduce using rule 79 (attribute)



state 8

	attribute  ->  TOK_CL_FASTCALL .   (rule 78)

	$default	reduce using rule 78 (attribute)



state 9

	direct_declarator  ->  TOK_IDENTIFIER .   (rule 158)

	$default	reduce using rule 158 (direct_declarator)



state 10

	external_declaration  ->  declaration .   (rule 209)

	$default	reduce using rule 209 (external_declaration)



state 11

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declaration_list  ->  . declaration   (rule 204)
	declaration_list  ->  . declaration_list declaration   (rule 205)
	function_definition  ->  declarator . declaration_list @69 compound_statement   (rule 214)
	function_definition  ->  declarator . @70 compound_statement   (rule 216)
	@70  ->  .   (rule 217)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	TOK_TYPEDEF	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_EXTERN	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STATIC	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_AUTO	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_REGISTER	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CONST	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOLATILE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INLINE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_TYPE_NAME	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CHAR	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SHORT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_LONG	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNSIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_FLOAT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_DOUBLE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOID	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STRUCT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNION	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_ENUM	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_8	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_16	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_32	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_64	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 217 (@70)

	declaration	go to state 28
	declaration_specifiers	go to state 29
	attribute_sequence	go to state 30
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	declaration_list	go to state 31
	@70	go to state 32



state 12

	declarator  ->  direct_declarator .   (rule 154)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 154 (declarator)

	push_reporting_type_name_scope	go to state 33



state 13

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  declaration_specifiers . pop_type_name_scope ';'   (rule 83)
	declaration  ->  declaration_specifiers . init_declarator_list pop_type_name_scope ';'   (rule 84)
	init_declarator_list  ->  . init_declarator   (rule 93)
	init_declarator_list  ->  . init_declarator_list ',' init_declarator   (rule 94)
	init_declarator  ->  . declarator   (rule 95)
	init_declarator  ->  . declarator '=' initializer   (rule 96)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	function_definition  ->  declaration_specifiers . declarator pop_type_name_scope declaration_list @67 compound_statement   (rule 210)
	function_definition  ->  declaration_specifiers . declarator pop_type_name_scope @68 compound_statement   (rule 212)
	pop_type_name_scope  ->  .   (rule 220)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 220 (pop_type_name_scope)

	init_declarator_list	go to state 34
	init_declarator	go to state 35
	declarator	go to state 36
	direct_declarator	go to state 12
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16
	pop_type_name_scope	go to state 37



state 14

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declarator  ->  pointer . direct_declarator   (rule 153)
	declarator  ->  pointer . attribute_sequence direct_declarator   (rule 155)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)

	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	direct_declarator	go to state 38
	attribute_sequence	go to state 39
	attribute	go to state 16



state 15

	declaration_specifiers  ->  attribute_sequence . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declarator  ->  attribute_sequence . pointer direct_declarator   (rule 156)
	declarator  ->  attribute_sequence . direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_declarator	go to state 40
	pointer	go to state 41
	push_reporting_type_name_scope	go to state 42



state 16

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  attribute .   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute_sequence  ->  attribute . attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	$default	reduce using rule 75 (attribute_sequence)

	attribute_sequence	go to state 43
	attribute	go to state 16



state 17

	declaration_specifiers  ->  push_reporting_type_name_scope . non_wrapped_declaration_specifiers   (rule 85)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	$default	reduce using rule 219 (disable_type_name_reporting_for_this_scope)

	non_wrapped_declaration_specifiers	go to state 50
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 18

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	translation_unit  ->  translation_unit . external_declaration   (rule 207)
	external_declaration  ->  . function_definition   (rule 208)
	external_declaration  ->  . declaration   (rule 209)
	function_definition  ->  . declaration_specifiers declarator pop_type_name_scope declaration_list @67 compound_statement   (rule 210)
	function_definition  ->  . declaration_specifiers declarator pop_type_name_scope @68 compound_statement   (rule 212)
	function_definition  ->  . declarator declaration_list @69 compound_statement   (rule 214)
	function_definition  ->  . declarator @70 compound_statement   (rule 216)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9
	$	go to state 357

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declaration	go to state 10
	declarator	go to state 11
	direct_declarator	go to state 12
	declaration_specifiers	go to state 13
	pointer	go to state 14
	attribute_sequence	go to state 15
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	external_declaration	go to state 55
	function_definition	go to state 20



state 19

	translation_unit  ->  external_declaration .   (rule 206)

	$default	reduce using rule 206 (translation_unit)



state 20

	external_declaration  ->  function_definition .   (rule 208)

	$default	reduce using rule 208 (external_declaration)



state 21

	type_qualifier  ->  TOK_VOLATILE .   (rule 152)

	$default	reduce using rule 152 (type_qualifier)



state 22

	type_qualifier  ->  TOK_CONST .   (rule 151)

	$default	reduce using rule 151 (type_qualifier)



state 23

	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  '*' type_qualifier_list .   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	pointer  ->  '*' type_qualifier_list . pointer   (rule 168)
	type_qualifier_list  ->  type_qualifier_list . type_qualifier   (rule 170)

	'*'	shift, and go to state 1
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22

	$default	reduce using rule 166 (pointer)

	type_qualifier	go to state 56
	pointer	go to state 57



state 24

	type_qualifier_list  ->  type_qualifier .   (rule 169)

	$default	reduce using rule 169 (type_qualifier_list)



state 25

	pointer  ->  '*' pointer .   (rule 167)

	$default	reduce using rule 167 (pointer)



state 26

	direct_declarator  ->  '(' declarator . ')'   (rule 159)

	')'	shift, and go to state 58



state 27

	declarator  ->  attribute_sequence . pointer direct_declarator   (rule 156)
	declarator  ->  attribute_sequence . direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_IDENTIFIER	shift, and go to state 9

	direct_declarator	go to state 40
	pointer	go to state 41



state 28

	declaration_list  ->  declaration .   (rule 204)

	$default	reduce using rule 204 (declaration_list)



state 29

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  declaration_specifiers . pop_type_name_scope ';'   (rule 83)
	declaration  ->  declaration_specifiers . init_declarator_list pop_type_name_scope ';'   (rule 84)
	init_declarator_list  ->  . init_declarator   (rule 93)
	init_declarator_list  ->  . init_declarator_list ',' init_declarator   (rule 94)
	init_declarator  ->  . declarator   (rule 95)
	init_declarator  ->  . declarator '=' initializer   (rule 96)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	pop_type_name_scope  ->  .   (rule 220)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 220 (pop_type_name_scope)

	init_declarator_list	go to state 34
	init_declarator	go to state 35
	declarator	go to state 59
	direct_declarator	go to state 12
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16
	pop_type_name_scope	go to state 37



state 30

	declaration_specifiers  ->  attribute_sequence . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	push_reporting_type_name_scope  ->  .   (rule 218)

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	push_reporting_type_name_scope	go to state 42



state 31

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declaration_list  ->  declaration_list . declaration   (rule 205)
	function_definition  ->  declarator declaration_list . @69 compound_statement   (rule 214)
	@69  ->  .   (rule 215)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	TOK_TYPEDEF	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_EXTERN	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STATIC	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_AUTO	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_REGISTER	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CONST	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOLATILE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INLINE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_TYPE_NAME	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CHAR	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SHORT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_LONG	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNSIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_FLOAT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_DOUBLE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOID	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STRUCT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNION	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_ENUM	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_8	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_16	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_32	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_64	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 215 (@69)

	declaration	go to state 60
	declaration_specifiers	go to state 29
	attribute_sequence	go to state 30
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	@69	go to state 61



state 32

	compound_statement  ->  . '{' '}'   (rule 203)
	function_definition  ->  declarator @70 . compound_statement   (rule 216)

	'{'	shift, and go to state 62

	compound_statement	go to state 63



state 33

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope . '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope . '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope . '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope . '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope . '(' pop_type_name_scope ')'   (rule 164)

	'['	shift, and go to state 64
	'('	shift, and go to state 65



state 34

	declaration  ->  declaration_specifiers init_declarator_list . pop_type_name_scope ';'   (rule 84)
	init_declarator_list  ->  init_declarator_list . ',' init_declarator   (rule 94)
	pop_type_name_scope  ->  .   (rule 220)

	','	shift, and go to state 66

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 67



state 35

	init_declarator_list  ->  init_declarator .   (rule 93)

	$default	reduce using rule 93 (init_declarator_list)



state 36

	init_declarator  ->  declarator .   (rule 95)
	init_declarator  ->  declarator . '=' initializer   (rule 96)
	function_definition  ->  declaration_specifiers declarator . pop_type_name_scope declaration_list @67 compound_statement   (rule 210)
	function_definition  ->  declaration_specifiers declarator . pop_type_name_scope @68 compound_statement   (rule 212)
	pop_type_name_scope  ->  .   (rule 220)

	'='	shift, and go to state 68

	TOK_CL_FASTCALL	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_BASED	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_CDECL	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_STDCALL	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_INLINE	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_ASM	reduce using rule 220 (pop_type_name_scope)
	'{'	reduce using rule 220 (pop_type_name_scope)
	TOK_TYPEDEF	reduce using rule 220 (pop_type_name_scope)
	TOK_EXTERN	reduce using rule 220 (pop_type_name_scope)
	TOK_STATIC	reduce using rule 220 (pop_type_name_scope)
	TOK_AUTO	reduce using rule 220 (pop_type_name_scope)
	TOK_REGISTER	reduce using rule 220 (pop_type_name_scope)
	TOK_CONST	reduce using rule 220 (pop_type_name_scope)
	TOK_VOLATILE	reduce using rule 220 (pop_type_name_scope)
	TOK_INLINE	reduce using rule 220 (pop_type_name_scope)
	TOK_TYPE_NAME	reduce using rule 220 (pop_type_name_scope)
	TOK_CHAR	reduce using rule 220 (pop_type_name_scope)
	TOK_SHORT	reduce using rule 220 (pop_type_name_scope)
	TOK_INT	reduce using rule 220 (pop_type_name_scope)
	TOK_LONG	reduce using rule 220 (pop_type_name_scope)
	TOK_SIGNED	reduce using rule 220 (pop_type_name_scope)
	TOK_UNSIGNED	reduce using rule 220 (pop_type_name_scope)
	TOK_FLOAT	reduce using rule 220 (pop_type_name_scope)
	TOK_DOUBLE	reduce using rule 220 (pop_type_name_scope)
	TOK_VOID	reduce using rule 220 (pop_type_name_scope)
	TOK_STRUCT	reduce using rule 220 (pop_type_name_scope)
	TOK_UNION	reduce using rule 220 (pop_type_name_scope)
	TOK_ENUM	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_INT_8	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_INT_16	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_INT_32	reduce using rule 220 (pop_type_name_scope)
	TOK_CL_INT_64	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 95 (init_declarator)

	pop_type_name_scope	go to state 69



state 37

	declaration  ->  declaration_specifiers pop_type_name_scope . ';'   (rule 83)

	';'	shift, and go to state 70



state 38

	declarator  ->  pointer direct_declarator .   (rule 153)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 153 (declarator)

	push_reporting_type_name_scope	go to state 33



state 39

	declarator  ->  pointer attribute_sequence . direct_declarator   (rule 155)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)

	'('	shift, and go to state 2
	TOK_IDENTIFIER	shift, and go to state 9

	direct_declarator	go to state 71



state 40

	declarator  ->  attribute_sequence direct_declarator .   (rule 157)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 157 (declarator)

	push_reporting_type_name_scope	go to state 33



state 41

	declarator  ->  attribute_sequence pointer . direct_declarator   (rule 156)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)

	'('	shift, and go to state 2
	TOK_IDENTIFIER	shift, and go to state 9

	direct_declarator	go to state 72



state 42

	declaration_specifiers  ->  attribute_sequence push_reporting_type_name_scope . non_wrapped_declaration_specifiers   (rule 86)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	$default	reduce using rule 219 (disable_type_name_reporting_for_this_scope)

	non_wrapped_declaration_specifiers	go to state 73
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 43

	attribute_sequence  ->  attribute attribute_sequence .   (rule 76)

	$default	reduce using rule 76 (attribute_sequence)



state 44

	storage_class_specifier  ->  TOK_INLINE .   (rule 102)

	$default	reduce using rule 102 (storage_class_specifier)



state 45

	storage_class_specifier  ->  TOK_REGISTER .   (rule 101)

	$default	reduce using rule 101 (storage_class_specifier)



state 46

	storage_class_specifier  ->  TOK_AUTO .   (rule 100)

	$default	reduce using rule 100 (storage_class_specifier)



state 47

	storage_class_specifier  ->  TOK_STATIC .   (rule 99)

	$default	reduce using rule 99 (storage_class_specifier)



state 48

	storage_class_specifier  ->  TOK_EXTERN .   (rule 98)

	$default	reduce using rule 98 (storage_class_specifier)



state 49

	storage_class_specifier  ->  TOK_TYPEDEF .   (rule 97)

	$default	reduce using rule 97 (storage_class_specifier)



state 50

	declaration_specifiers  ->  push_reporting_type_name_scope non_wrapped_declaration_specifiers .   (rule 85)

	$default	reduce using rule 85 (declaration_specifiers)



state 51

	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  type_qualifier .   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	non_wrapped_declaration_specifiers  ->  type_qualifier . non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	TOK_TYPE_NAME	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CHAR	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SHORT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_INT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_LONG	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNSIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_FLOAT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_DOUBLE	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_VOID	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_STRUCT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNION	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_ENUM	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_8	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_16	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_32	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_64	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	$default	reduce using rule 91 (non_wrapped_declaration_specifiers)

	non_wrapped_declaration_specifiers	go to state 74
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 52

	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  type_specifier .   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  type_specifier . non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	TOK_TYPE_NAME	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CHAR	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SHORT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_INT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_LONG	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNSIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_FLOAT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_DOUBLE	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_VOID	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_STRUCT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNION	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_ENUM	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_8	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_16	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_32	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_64	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	$default	reduce using rule 89 (non_wrapped_declaration_specifiers)

	non_wrapped_declaration_specifiers	go to state 75
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 53

	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  storage_class_specifier .   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  storage_class_specifier . non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	TOK_TYPE_NAME	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CHAR	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SHORT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_INT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_LONG	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNSIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_FLOAT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_DOUBLE	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_VOID	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_STRUCT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNION	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_ENUM	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_8	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_16	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_32	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_64	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	$default	reduce using rule 87 (non_wrapped_declaration_specifiers)

	non_wrapped_declaration_specifiers	go to state 76
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 54

	type_specifier  ->  disable_type_name_reporting_for_this_scope . type_specifier_no_type_name   (rule 103)
	type_specifier  ->  disable_type_name_reporting_for_this_scope . type_specifier_type_name   (rule 104)
	type_specifier_no_type_name  ->  . TOK_VOID   (rule 105)
	type_specifier_no_type_name  ->  . TOK_CHAR   (rule 106)
	type_specifier_no_type_name  ->  . TOK_SHORT   (rule 107)
	type_specifier_no_type_name  ->  . TOK_INT   (rule 108)
	type_specifier_no_type_name  ->  . TOK_CL_INT_8   (rule 109)
	type_specifier_no_type_name  ->  . TOK_CL_INT_16   (rule 110)
	type_specifier_no_type_name  ->  . TOK_CL_INT_32   (rule 111)
	type_specifier_no_type_name  ->  . TOK_CL_INT_64   (rule 112)
	type_specifier_no_type_name  ->  . TOK_LONG   (rule 113)
	type_specifier_no_type_name  ->  . TOK_FLOAT   (rule 114)
	type_specifier_no_type_name  ->  . TOK_DOUBLE   (rule 115)
	type_specifier_no_type_name  ->  . TOK_SIGNED   (rule 116)
	type_specifier_no_type_name  ->  . TOK_UNSIGNED   (rule 117)
	type_specifier_type_name  ->  . struct_or_union_specifier   (rule 118)
	type_specifier_type_name  ->  . enum_specifier   (rule 119)
	type_specifier_type_name  ->  . TOK_TYPE_NAME   (rule 120)
	struct_or_union_specifier  ->  . struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'   (rule 121)
	struct_or_union_specifier  ->  . struct_or_union push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'   (rule 122)
	struct_or_union_specifier  ->  . struct_or_union TOK_IDENTIFIER   (rule 123)
	struct_or_union_specifier  ->  . struct_or_union TOK_TYPE_NAME   (rule 124)
	struct_or_union  ->  . TOK_STRUCT   (rule 125)
	struct_or_union  ->  . TOK_UNION   (rule 126)
	enum_specifier  ->  . TOK_ENUM '{' enumerator_list_with_opt_comma '}'   (rule 141)
	enum_specifier  ->  . TOK_ENUM TOK_IDENTIFIER '{' enumerator_list_with_opt_comma '}'   (rule 142)
	enum_specifier  ->  . TOK_ENUM TOK_IDENTIFIER   (rule 143)

	TOK_CL_INT_64	shift, and go to state 77
	TOK_CL_INT_32	shift, and go to state 78
	TOK_CL_INT_16	shift, and go to state 79
	TOK_CL_INT_8	shift, and go to state 80
	TOK_ENUM	shift, and go to state 81
	TOK_UNION	shift, and go to state 82
	TOK_STRUCT	shift, and go to state 83
	TOK_VOID	shift, and go to state 84
	TOK_DOUBLE	shift, and go to state 85
	TOK_FLOAT	shift, and go to state 86
	TOK_UNSIGNED	shift, and go to state 87
	TOK_SIGNED	shift, and go to state 88
	TOK_LONG	shift, and go to state 89
	TOK_INT	shift, and go to state 90
	TOK_SHORT	shift, and go to state 91
	TOK_CHAR	shift, and go to state 92
	TOK_TYPE_NAME	shift, and go to state 93

	type_specifier_no_type_name	go to state 94
	type_specifier_type_name	go to state 95
	struct_or_union_specifier	go to state 96
	struct_or_union	go to state 97
	enum_specifier	go to state 98



state 55

	translation_unit  ->  translation_unit external_declaration .   (rule 207)

	$default	reduce using rule 207 (translation_unit)



state 56

	type_qualifier_list  ->  type_qualifier_list type_qualifier .   (rule 170)

	$default	reduce using rule 170 (type_qualifier_list)



state 57

	pointer  ->  '*' type_qualifier_list pointer .   (rule 168)

	$default	reduce using rule 168 (pointer)



state 58

	direct_declarator  ->  '(' declarator ')' .   (rule 159)

	$default	reduce using rule 159 (direct_declarator)



state 59

	init_declarator  ->  declarator .   (rule 95)
	init_declarator  ->  declarator . '=' initializer   (rule 96)

	'='	shift, and go to state 68

	$default	reduce using rule 95 (init_declarator)



state 60

	declaration_list  ->  declaration_list declaration .   (rule 205)

	$default	reduce using rule 205 (declaration_list)



state 61

	compound_statement  ->  . '{' '}'   (rule 203)
	function_definition  ->  declarator declaration_list @69 . compound_statement   (rule 214)

	'{'	shift, and go to state 62

	compound_statement	go to state 99



state 62

	compound_statement  ->  '{' . '}'   (rule 203)

	'}'	shift, and go to state 100



state 63

	function_definition  ->  declarator @70 compound_statement .   (rule 216)

	$default	reduce using rule 216 (function_definition)



state 64

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' . constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' . pop_type_name_scope ']'   (rule 161)
	pop_type_name_scope  ->  .   (rule 220)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	$default	reduce using rule 220 (pop_type_name_scope)

	constant_expression	go to state 114
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	pop_type_name_scope	go to state 131



state 65

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' . parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' . identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' . pop_type_name_scope ')'   (rule 164)
	parameter_type_list  ->  . parameter_list   (rule 171)
	parameter_type_list  ->  . parameter_list ',' TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  . parameter_declaration   (rule 173)
	parameter_list  ->  . parameter_list ',' parameter_declaration   (rule 174)
	parameter_declaration  ->  . declaration_specifiers declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  . declaration_specifiers abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  . declaration_specifiers pop_type_name_scope   (rule 177)
	identifier_list  ->  . TOK_IDENTIFIER   (rule 178)
	identifier_list  ->  . identifier_list ',' TOK_IDENTIFIER   (rule 179)
	push_reporting_type_name_scope  ->  .   (rule 218)
	pop_type_name_scope  ->  .   (rule 220)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 132

	')'	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declaration_specifiers	go to state 133
	parameter_type_list	go to state 134
	parameter_list	go to state 135
	parameter_declaration	go to state 136
	attribute_sequence	go to state 30
	attribute	go to state 16
	pop_type_name_scope	go to state 137
	push_reporting_type_name_scope	go to state 17
	identifier_list	go to state 138



state 66

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	init_declarator_list  ->  init_declarator_list ',' . init_declarator   (rule 94)
	init_declarator  ->  . declarator   (rule 95)
	init_declarator  ->  . declarator '=' initializer   (rule 96)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)

	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	init_declarator	go to state 139
	declarator	go to state 59
	direct_declarator	go to state 12
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16



state 67

	declaration  ->  declaration_specifiers init_declarator_list pop_type_name_scope . ';'   (rule 84)

	';'	shift, and go to state 140



state 68

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	init_declarator  ->  declarator '=' . initializer   (rule 96)
	initializer  ->  . assignment_expression   (rule 198)
	initializer  ->  . '{' initializer_list '}'   (rule 199)
	initializer  ->  . '{' initializer_list ',' '}'   (rule 200)

	'{'	shift, and go to state 141
	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 143
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	initializer	go to state 145



state 69

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declaration_list  ->  . declaration   (rule 204)
	declaration_list  ->  . declaration_list declaration   (rule 205)
	function_definition  ->  declaration_specifiers declarator pop_type_name_scope . declaration_list @67 compound_statement   (rule 210)
	function_definition  ->  declaration_specifiers declarator pop_type_name_scope . @68 compound_statement   (rule 212)
	@68  ->  .   (rule 213)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	TOK_TYPEDEF	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_EXTERN	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STATIC	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_AUTO	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_REGISTER	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CONST	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOLATILE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INLINE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_TYPE_NAME	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CHAR	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SHORT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_LONG	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNSIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_FLOAT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_DOUBLE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOID	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STRUCT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNION	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_ENUM	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_8	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_16	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_32	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_64	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 213 (@68)

	declaration	go to state 28
	declaration_specifiers	go to state 29
	attribute_sequence	go to state 30
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	declaration_list	go to state 146
	@68	go to state 147



state 70

	declaration  ->  declaration_specifiers pop_type_name_scope ';' .   (rule 83)

	$default	reduce using rule 83 (declaration)



state 71

	declarator  ->  pointer attribute_sequence direct_declarator .   (rule 155)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 155 (declarator)

	push_reporting_type_name_scope	go to state 33



state 72

	declarator  ->  attribute_sequence pointer direct_declarator .   (rule 156)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  direct_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 156 (declarator)

	push_reporting_type_name_scope	go to state 33



state 73

	declaration_specifiers  ->  attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers .   (rule 86)

	$default	reduce using rule 86 (declaration_specifiers)



state 74

	non_wrapped_declaration_specifiers  ->  type_qualifier non_wrapped_declaration_specifiers .   (rule 92)

	$default	reduce using rule 92 (non_wrapped_declaration_specifiers)



state 75

	non_wrapped_declaration_specifiers  ->  type_specifier non_wrapped_declaration_specifiers .   (rule 90)

	$default	reduce using rule 90 (non_wrapped_declaration_specifiers)



state 76

	non_wrapped_declaration_specifiers  ->  storage_class_specifier non_wrapped_declaration_specifiers .   (rule 88)

	$default	reduce using rule 88 (non_wrapped_declaration_specifiers)



state 77

	type_specifier_no_type_name  ->  TOK_CL_INT_64 .   (rule 112)

	$default	reduce using rule 112 (type_specifier_no_type_name)



state 78

	type_specifier_no_type_name  ->  TOK_CL_INT_32 .   (rule 111)

	$default	reduce using rule 111 (type_specifier_no_type_name)



state 79

	type_specifier_no_type_name  ->  TOK_CL_INT_16 .   (rule 110)

	$default	reduce using rule 110 (type_specifier_no_type_name)



state 80

	type_specifier_no_type_name  ->  TOK_CL_INT_8 .   (rule 109)

	$default	reduce using rule 109 (type_specifier_no_type_name)



state 81

	enum_specifier  ->  TOK_ENUM . '{' enumerator_list_with_opt_comma '}'   (rule 141)
	enum_specifier  ->  TOK_ENUM . TOK_IDENTIFIER '{' enumerator_list_with_opt_comma '}'   (rule 142)
	enum_specifier  ->  TOK_ENUM . TOK_IDENTIFIER   (rule 143)

	'{'	shift, and go to state 148
	TOK_IDENTIFIER	shift, and go to state 149



state 82

	struct_or_union  ->  TOK_UNION .   (rule 126)

	$default	reduce using rule 126 (struct_or_union)



state 83

	struct_or_union  ->  TOK_STRUCT .   (rule 125)

	$default	reduce using rule 125 (struct_or_union)



state 84

	type_specifier_no_type_name  ->  TOK_VOID .   (rule 105)

	$default	reduce using rule 105 (type_specifier_no_type_name)



state 85

	type_specifier_no_type_name  ->  TOK_DOUBLE .   (rule 115)

	$default	reduce using rule 115 (type_specifier_no_type_name)



state 86

	type_specifier_no_type_name  ->  TOK_FLOAT .   (rule 114)

	$default	reduce using rule 114 (type_specifier_no_type_name)



state 87

	type_specifier_no_type_name  ->  TOK_UNSIGNED .   (rule 117)

	$default	reduce using rule 117 (type_specifier_no_type_name)



state 88

	type_specifier_no_type_name  ->  TOK_SIGNED .   (rule 116)

	$default	reduce using rule 116 (type_specifier_no_type_name)



state 89

	type_specifier_no_type_name  ->  TOK_LONG .   (rule 113)

	$default	reduce using rule 113 (type_specifier_no_type_name)



state 90

	type_specifier_no_type_name  ->  TOK_INT .   (rule 108)

	$default	reduce using rule 108 (type_specifier_no_type_name)



state 91

	type_specifier_no_type_name  ->  TOK_SHORT .   (rule 107)

	$default	reduce using rule 107 (type_specifier_no_type_name)



state 92

	type_specifier_no_type_name  ->  TOK_CHAR .   (rule 106)

	$default	reduce using rule 106 (type_specifier_no_type_name)



state 93

	type_specifier_type_name  ->  TOK_TYPE_NAME .   (rule 120)

	$default	reduce using rule 120 (type_specifier_type_name)



state 94

	type_specifier  ->  disable_type_name_reporting_for_this_scope type_specifier_no_type_name .   (rule 103)

	$default	reduce using rule 103 (type_specifier)



state 95

	type_specifier  ->  disable_type_name_reporting_for_this_scope type_specifier_type_name .   (rule 104)

	$default	reduce using rule 104 (type_specifier)



state 96

	type_specifier_type_name  ->  struct_or_union_specifier .   (rule 118)

	$default	reduce using rule 118 (type_specifier_type_name)



state 97

	struct_or_union_specifier  ->  struct_or_union . TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'   (rule 121)
	struct_or_union_specifier  ->  struct_or_union . push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'   (rule 122)
	struct_or_union_specifier  ->  struct_or_union . TOK_IDENTIFIER   (rule 123)
	struct_or_union_specifier  ->  struct_or_union . TOK_TYPE_NAME   (rule 124)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_TYPE_NAME	shift, and go to state 150
	TOK_IDENTIFIER	shift, and go to state 151

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	push_reporting_type_name_scope	go to state 152



state 98

	type_specifier_type_name  ->  enum_specifier .   (rule 119)

	$default	reduce using rule 119 (type_specifier_type_name)



state 99

	function_definition  ->  declarator declaration_list @69 compound_statement .   (rule 214)

	$default	reduce using rule 214 (function_definition)



state 100

	compound_statement  ->  '{' '}' .   (rule 203)

	$default	reduce using rule 203 (compound_statement)



state 101

	unary_operator  ->  '!' .   (rule 26)

	$default	reduce using rule 26 (unary_operator)



state 102

	unary_operator  ->  '~' .   (rule 25)

	$default	reduce using rule 25 (unary_operator)



state 103

	unary_operator  ->  '-' .   (rule 24)

	$default	reduce using rule 24 (unary_operator)



state 104

	unary_operator  ->  '+' .   (rule 23)

	$default	reduce using rule 23 (unary_operator)



state 105

	unary_operator  ->  '*' .   (rule 22)

	$default	reduce using rule 22 (unary_operator)



state 106

	unary_operator  ->  '&' .   (rule 21)

	$default	reduce using rule 21 (unary_operator)



state 107

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	primary_expression  ->  '(' . expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	cast_expression  ->  '(' . type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  . assignment_expression   (rule 72)
	expression  ->  . expression ',' assignment_expression   (rule 73)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	type_name  ->  . specifier_qualifier_list   (rule 180)
	type_name  ->  . specifier_qualifier_list abstract_declarator   (rule 181)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	specifier_qualifier_list	go to state 153
	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	expression	go to state 154
	assignment_expression	go to state 155
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	type_name	go to state 156
	push_reporting_type_name_scope	go to state 157



state 108

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  TOK_DEC_OP . unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 158
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	unary_expression	go to state 159
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 109

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  TOK_INC_OP . unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 158
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	unary_expression	go to state 160
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 110

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  TOK_SIZEOF . unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_expression  ->  TOK_SIZEOF . '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 161
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	unary_expression	go to state 162
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 111

	primary_expression  ->  TOK_STRING_LITERAL .   (rule 3)

	$default	reduce using rule 3 (primary_expression)



state 112

	primary_expression  ->  TOK_CONSTANT .   (rule 2)

	$default	reduce using rule 2 (primary_expression)



state 113

	primary_expression  ->  TOK_IDENTIFIER .   (rule 1)

	$default	reduce using rule 1 (primary_expression)



state 114

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' constant_expression . pop_type_name_scope ']'   (rule 160)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 163



state 115

	constant_expression  ->  conditional_expression .   (rule 74)

	$default	reduce using rule 74 (constant_expression)



state 116

	logical_or_expression  ->  logical_or_expression . TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  logical_or_expression .   (rule 57)
	conditional_expression  ->  logical_or_expression . '?' expression ':' conditional_expression   (rule 58)

	'?'	shift, and go to state 164
	TOK_OR_OP	shift, and go to state 165

	$default	reduce using rule 57 (conditional_expression)



state 117

	logical_and_expression  ->  logical_and_expression . TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  logical_and_expression .   (rule 55)

	TOK_AND_OP	shift, and go to state 166

	$default	reduce using rule 55 (logical_or_expression)



state 118

	inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  inclusive_or_expression .   (rule 53)

	'|'	shift, and go to state 167

	$default	reduce using rule 53 (logical_and_expression)



state 119

	exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 50)
	inclusive_or_expression  ->  exclusive_or_expression .   (rule 51)

	'^'	shift, and go to state 168

	$default	reduce using rule 51 (inclusive_or_expression)



state 120

	and_expression  ->  and_expression . '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  and_expression .   (rule 49)

	'&'	shift, and go to state 169

	$default	reduce using rule 49 (exclusive_or_expression)



state 121

	equality_expression  ->  equality_expression . TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  equality_expression . TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  equality_expression .   (rule 47)

	TOK_NE_OP	shift, and go to state 170
	TOK_EQ_OP	shift, and go to state 171

	$default	reduce using rule 47 (and_expression)



state 122

	relational_expression  ->  relational_expression . '<' shift_expression   (rule 40)
	relational_expression  ->  relational_expression . '>' shift_expression   (rule 41)
	relational_expression  ->  relational_expression . TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  relational_expression . TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  relational_expression .   (rule 44)

	'>'	shift, and go to state 172
	'<'	shift, and go to state 173
	TOK_GE_OP	shift, and go to state 174
	TOK_LE_OP	shift, and go to state 175

	$default	reduce using rule 44 (equality_expression)



state 123

	shift_expression  ->  shift_expression . TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  shift_expression . TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  shift_expression .   (rule 39)

	TOK_RIGHT_OP	shift, and go to state 176
	TOK_LEFT_OP	shift, and go to state 177

	$default	reduce using rule 39 (relational_expression)



state 124

	additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 34)
	additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 35)
	shift_expression  ->  additive_expression .   (rule 36)

	'-'	shift, and go to state 178
	'+'	shift, and go to state 179

	$default	reduce using rule 36 (shift_expression)



state 125

	multiplicative_expression  ->  multiplicative_expression . '*' cast_expression   (rule 30)
	multiplicative_expression  ->  multiplicative_expression . '/' cast_expression   (rule 31)
	multiplicative_expression  ->  multiplicative_expression . '%' cast_expression   (rule 32)
	additive_expression  ->  multiplicative_expression .   (rule 33)

	'%'	shift, and go to state 180
	'/'	shift, and go to state 181
	'*'	shift, and go to state 182

	$default	reduce using rule 33 (additive_expression)



state 126

	multiplicative_expression  ->  cast_expression .   (rule 29)

	$default	reduce using rule 29 (multiplicative_expression)



state 127

	cast_expression  ->  unary_expression .   (rule 27)

	$default	reduce using rule 27 (cast_expression)



state 128

	postfix_expression  ->  postfix_expression . '[' expression ']'   (rule 6)
	postfix_expression  ->  postfix_expression . '(' ')'   (rule 7)
	postfix_expression  ->  postfix_expression . '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  postfix_expression . '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  postfix_expression . TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  postfix_expression . TOK_INC_OP   (rule 11)
	postfix_expression  ->  postfix_expression . TOK_DEC_OP   (rule 12)
	unary_expression  ->  postfix_expression .   (rule 15)

	'.'	shift, and go to state 183
	'['	shift, and go to state 184
	'('	shift, and go to state 185
	TOK_DEC_OP	shift, and go to state 186
	TOK_INC_OP	shift, and go to state 187
	TOK_PTR_OP	shift, and go to state 188

	$default	reduce using rule 15 (unary_expression)



state 129

	postfix_expression  ->  primary_expression .   (rule 5)

	$default	reduce using rule 5 (postfix_expression)



state 130

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  unary_operator . cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	cast_expression	go to state 189
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 131

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope . ']'   (rule 161)

	']'	shift, and go to state 190



state 132

	identifier_list  ->  TOK_IDENTIFIER .   (rule 178)

	$default	reduce using rule 178 (identifier_list)



state 133

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	parameter_declaration  ->  declaration_specifiers . declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  declaration_specifiers . abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  declaration_specifiers . pop_type_name_scope   (rule 177)
	abstract_declarator  ->  . pointer   (rule 182)
	abstract_declarator  ->  . direct_abstract_declarator   (rule 183)
	abstract_declarator  ->  . pointer direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  . pointer attribute_sequence direct_abstract_declarator   (rule 185)
	abstract_declarator  ->  . attribute_sequence pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  . attribute_sequence direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  . attribute_sequence pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)
	pop_type_name_scope  ->  .   (rule 220)

	'*'	shift, and go to state 1
	'('	shift, and go to state 191
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	','	reduce using rule 220 (pop_type_name_scope)
	')'	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declarator	go to state 192
	direct_declarator	go to state 12
	abstract_declarator	go to state 193
	direct_abstract_declarator	go to state 194
	pointer	go to state 195
	attribute_sequence	go to state 196
	attribute	go to state 16
	pop_type_name_scope	go to state 197
	push_reporting_type_name_scope	go to state 198



state 134

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' parameter_type_list . pop_type_name_scope ')'   (rule 162)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 199



state 135

	parameter_type_list  ->  parameter_list .   (rule 171)
	parameter_type_list  ->  parameter_list . ',' TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  parameter_list . ',' parameter_declaration   (rule 174)

	','	shift, and go to state 200

	$default	reduce using rule 171 (parameter_type_list)



state 136

	parameter_list  ->  parameter_declaration .   (rule 173)

	$default	reduce using rule 173 (parameter_list)



state 137

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope . ')'   (rule 164)

	')'	shift, and go to state 201



state 138

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' identifier_list . pop_type_name_scope ')'   (rule 163)
	identifier_list  ->  identifier_list . ',' TOK_IDENTIFIER   (rule 179)
	pop_type_name_scope  ->  .   (rule 220)

	','	shift, and go to state 202

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 203



state 139

	init_declarator_list  ->  init_declarator_list ',' init_declarator .   (rule 94)

	$default	reduce using rule 94 (init_declarator_list)



state 140

	declaration  ->  declaration_specifiers init_declarator_list pop_type_name_scope ';' .   (rule 84)

	$default	reduce using rule 84 (declaration)



state 141

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	initializer  ->  . assignment_expression   (rule 198)
	initializer  ->  . '{' initializer_list '}'   (rule 199)
	initializer  ->  '{' . initializer_list '}'   (rule 199)
	initializer  ->  . '{' initializer_list ',' '}'   (rule 200)
	initializer  ->  '{' . initializer_list ',' '}'   (rule 200)
	initializer_list  ->  . initializer   (rule 201)
	initializer_list  ->  . initializer_list ',' initializer   (rule 202)

	'{'	shift, and go to state 141
	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 143
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	initializer	go to state 204
	initializer_list	go to state 205



state 142

	assignment_expression  ->  conditional_expression .   (rule 59)

	$default	reduce using rule 59 (assignment_expression)



state 143

	initializer  ->  assignment_expression .   (rule 198)

	$default	reduce using rule 198 (initializer)



state 144

	cast_expression  ->  unary_expression .   (rule 27)
	assignment_expression  ->  unary_expression . assignment_operator assignment_expression   (rule 60)
	assignment_operator  ->  . '='   (rule 61)
	assignment_operator  ->  . TOK_MUL_ASSIGN   (rule 62)
	assignment_operator  ->  . TOK_DIV_ASSIGN   (rule 63)
	assignment_operator  ->  . TOK_MOD_ASSIGN   (rule 64)
	assignment_operator  ->  . TOK_ADD_ASSIGN   (rule 65)
	assignment_operator  ->  . TOK_SUB_ASSIGN   (rule 66)
	assignment_operator  ->  . TOK_LEFT_ASSIGN   (rule 67)
	assignment_operator  ->  . TOK_RIGHT_ASSIGN   (rule 68)
	assignment_operator  ->  . TOK_AND_ASSIGN   (rule 69)
	assignment_operator  ->  . TOK_XOR_ASSIGN   (rule 70)
	assignment_operator  ->  . TOK_OR_ASSIGN   (rule 71)

	'='	shift, and go to state 206
	TOK_OR_ASSIGN	shift, and go to state 207
	TOK_XOR_ASSIGN	shift, and go to state 208
	TOK_AND_ASSIGN	shift, and go to state 209
	TOK_RIGHT_ASSIGN	shift, and go to state 210
	TOK_LEFT_ASSIGN	shift, and go to state 211
	TOK_SUB_ASSIGN	shift, and go to state 212
	TOK_ADD_ASSIGN	shift, and go to state 213
	TOK_MOD_ASSIGN	shift, and go to state 214
	TOK_DIV_ASSIGN	shift, and go to state 215
	TOK_MUL_ASSIGN	shift, and go to state 216

	$default	reduce using rule 27 (cast_expression)

	assignment_operator	go to state 217



state 145

	init_declarator  ->  declarator '=' initializer .   (rule 96)

	$default	reduce using rule 96 (init_declarator)



state 146

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration  ->  . declaration_specifiers pop_type_name_scope ';'   (rule 83)
	declaration  ->  . declaration_specifiers init_declarator_list pop_type_name_scope ';'   (rule 84)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declaration_list  ->  declaration_list . declaration   (rule 205)
	function_definition  ->  declaration_specifiers declarator pop_type_name_scope declaration_list . @67 compound_statement   (rule 210)
	@67  ->  .   (rule 211)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	TOK_TYPEDEF	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_EXTERN	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STATIC	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_AUTO	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_REGISTER	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CONST	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOLATILE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INLINE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_TYPE_NAME	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CHAR	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SHORT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_INT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_LONG	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_SIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNSIGNED	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_FLOAT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_DOUBLE	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_VOID	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_STRUCT	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_UNION	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_ENUM	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_8	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_16	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_32	reduce using rule 218 (push_reporting_type_name_scope)
	TOK_CL_INT_64	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 211 (@67)

	declaration	go to state 60
	declaration_specifiers	go to state 29
	attribute_sequence	go to state 30
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17
	@67	go to state 218



state 147

	compound_statement  ->  . '{' '}'   (rule 203)
	function_definition  ->  declaration_specifiers declarator pop_type_name_scope @68 . compound_statement   (rule 212)

	'{'	shift, and go to state 62

	compound_statement	go to state 219



state 148

	enum_specifier  ->  TOK_ENUM '{' . enumerator_list_with_opt_comma '}'   (rule 141)
	enumerator_list_with_opt_comma  ->  . enumerator_list opt_comma   (rule 144)
	enumerator_list  ->  . enumerator   (rule 145)
	enumerator_list  ->  . enumerator_list ',' enumerator   (rule 146)
	enumerator  ->  . TOK_IDENTIFIER   (rule 149)
	enumerator  ->  . TOK_IDENTIFIER '=' constant_expression   (rule 150)

	TOK_IDENTIFIER	shift, and go to state 220

	enumerator	go to state 221
	enumerator_list_with_opt_comma	go to state 222
	enumerator_list	go to state 223



state 149

	enum_specifier  ->  TOK_ENUM TOK_IDENTIFIER . '{' enumerator_list_with_opt_comma '}'   (rule 142)
	enum_specifier  ->  TOK_ENUM TOK_IDENTIFIER .   (rule 143)

	'{'	shift, and go to state 224

	$default	reduce using rule 143 (enum_specifier)



state 150

	struct_or_union_specifier  ->  struct_or_union TOK_TYPE_NAME .   (rule 124)

	$default	reduce using rule 124 (struct_or_union_specifier)



state 151

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER . push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}'   (rule 121)
	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER .   (rule 123)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'{'	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 123 (struct_or_union_specifier)

	push_reporting_type_name_scope	go to state 225



state 152

	struct_or_union_specifier  ->  struct_or_union push_reporting_type_name_scope . '{' struct_declaration_list pop_type_name_scope '}'   (rule 122)

	'{'	shift, and go to state 226



state 153

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	type_name  ->  specifier_qualifier_list .   (rule 180)
	type_name  ->  specifier_qualifier_list . abstract_declarator   (rule 181)
	abstract_declarator  ->  . pointer   (rule 182)
	abstract_declarator  ->  . direct_abstract_declarator   (rule 183)
	abstract_declarator  ->  . pointer direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  . pointer attribute_sequence direct_abstract_declarator   (rule 185)
	abstract_declarator  ->  . attribute_sequence pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  . attribute_sequence direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  . attribute_sequence pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 227
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 180 (type_name)

	abstract_declarator	go to state 228
	direct_abstract_declarator	go to state 194
	pointer	go to state 229
	attribute_sequence	go to state 230
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 198



state 154

	primary_expression  ->  '(' expression . ')'   (rule 4)
	expression  ->  expression . ',' assignment_expression   (rule 73)

	','	shift, and go to state 231
	')'	shift, and go to state 232



state 155

	expression  ->  assignment_expression .   (rule 72)

	$default	reduce using rule 72 (expression)



state 156

	cast_expression  ->  '(' type_name . pop_type_name_scope ')' cast_expression   (rule 28)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 233



state 157

	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	specifier_qualifier_list  ->  push_reporting_type_name_scope . non_wrapped_specifier_qualifier_list   (rule 131)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier non_wrapped_specifier_qualifier_list   (rule 132)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier   (rule 133)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier non_wrapped_specifier_qualifier_list   (rule 134)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier   (rule 135)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22

	$default	reduce using rule 219 (disable_type_name_reporting_for_this_scope)

	type_qualifier	go to state 234
	type_specifier	go to state 235
	non_wrapped_specifier_qualifier_list	go to state 236
	disable_type_name_reporting_for_this_scope	go to state 54



state 158

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	primary_expression  ->  '(' . expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  . assignment_expression   (rule 72)
	expression  ->  . expression ',' assignment_expression   (rule 73)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	expression	go to state 154
	assignment_expression	go to state 155
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 159

	unary_expression  ->  TOK_DEC_OP unary_expression .   (rule 17)

	$default	reduce using rule 17 (unary_expression)



state 160

	unary_expression  ->  TOK_INC_OP unary_expression .   (rule 16)

	$default	reduce using rule 16 (unary_expression)



state 161

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	primary_expression  ->  '(' . expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_expression  ->  TOK_SIZEOF '(' . type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  . assignment_expression   (rule 72)
	expression  ->  . expression ',' assignment_expression   (rule 73)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	type_name  ->  . specifier_qualifier_list   (rule 180)
	type_name  ->  . specifier_qualifier_list abstract_declarator   (rule 181)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	specifier_qualifier_list	go to state 153
	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	expression	go to state 154
	assignment_expression	go to state 155
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	type_name	go to state 237
	push_reporting_type_name_scope	go to state 157



state 162

	unary_expression  ->  TOK_SIZEOF unary_expression .   (rule 19)

	$default	reduce using rule 19 (unary_expression)



state 163

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope . ']'   (rule 160)

	']'	shift, and go to state 238



state 164

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	conditional_expression  ->  logical_or_expression '?' . expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  . assignment_expression   (rule 72)
	expression  ->  . expression ',' assignment_expression   (rule 73)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	expression	go to state 239
	assignment_expression	go to state 155
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 165

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  logical_or_expression TOK_OR_OP . logical_and_expression   (rule 56)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	logical_and_expression	go to state 240
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 166

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  logical_and_expression TOK_AND_OP . inclusive_or_expression   (rule 54)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	inclusive_or_expression	go to state 241
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 167

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  inclusive_or_expression '|' . exclusive_or_expression   (rule 52)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	exclusive_or_expression	go to state 242
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 168

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  exclusive_or_expression '^' . and_expression   (rule 50)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	and_expression	go to state 243
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 169

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  and_expression '&' . equality_expression   (rule 48)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	equality_expression	go to state 244
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 170

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  equality_expression TOK_NE_OP . relational_expression   (rule 46)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	relational_expression	go to state 245
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 171

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  equality_expression TOK_EQ_OP . relational_expression   (rule 45)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	relational_expression	go to state 246
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 172

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression '>' . shift_expression   (rule 41)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	shift_expression	go to state 247
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 173

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression '<' . shift_expression   (rule 40)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	shift_expression	go to state 248
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 174

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression TOK_GE_OP . shift_expression   (rule 43)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	shift_expression	go to state 249
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 175

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression TOK_LE_OP . shift_expression   (rule 42)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	shift_expression	go to state 250
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 176

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  shift_expression TOK_RIGHT_OP . additive_expression   (rule 38)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	additive_expression	go to state 251
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 177

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  shift_expression TOK_LEFT_OP . additive_expression   (rule 37)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	additive_expression	go to state 252
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 178

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  additive_expression '-' . multiplicative_expression   (rule 35)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	multiplicative_expression	go to state 253
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 179

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  additive_expression '+' . multiplicative_expression   (rule 34)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	multiplicative_expression	go to state 254
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 180

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  multiplicative_expression '%' . cast_expression   (rule 32)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	cast_expression	go to state 255
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 181

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  multiplicative_expression '/' . cast_expression   (rule 31)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	cast_expression	go to state 256
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 182

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  multiplicative_expression '*' . cast_expression   (rule 30)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	cast_expression	go to state 257
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 183

	postfix_expression  ->  postfix_expression '.' . TOK_IDENTIFIER   (rule 9)

	TOK_IDENTIFIER	shift, and go to state 258



state 184

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  postfix_expression '[' . expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  . assignment_expression   (rule 72)
	expression  ->  . expression ',' assignment_expression   (rule 73)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	expression	go to state 259
	assignment_expression	go to state 155
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 185

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  postfix_expression '(' . ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  postfix_expression '(' . argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	argument_expression_list  ->  . assignment_expression   (rule 13)
	argument_expression_list  ->  . argument_expression_list ',' assignment_expression   (rule 14)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	')'	shift, and go to state 260
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 261
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	argument_expression_list	go to state 262
	unary_operator	go to state 130



state 186

	postfix_expression  ->  postfix_expression TOK_DEC_OP .   (rule 12)

	$default	reduce using rule 12 (postfix_expression)



state 187

	postfix_expression  ->  postfix_expression TOK_INC_OP .   (rule 11)

	$default	reduce using rule 11 (postfix_expression)



state 188

	postfix_expression  ->  postfix_expression TOK_PTR_OP . TOK_IDENTIFIER   (rule 10)

	TOK_IDENTIFIER	shift, and go to state 263



state 189

	unary_expression  ->  unary_operator cast_expression .   (rule 18)

	$default	reduce using rule 18 (unary_expression)



state 190

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']' .   (rule 161)

	$default	reduce using rule 161 (direct_declarator)



state 191

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  '(' . declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	parameter_type_list  ->  . parameter_list   (rule 171)
	parameter_type_list  ->  . parameter_list ',' TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  . parameter_declaration   (rule 173)
	parameter_list  ->  . parameter_list ',' parameter_declaration   (rule 174)
	parameter_declaration  ->  . declaration_specifiers declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  . declaration_specifiers abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  . declaration_specifiers pop_type_name_scope   (rule 177)
	abstract_declarator  ->  . pointer   (rule 182)
	abstract_declarator  ->  . direct_abstract_declarator   (rule 183)
	abstract_declarator  ->  . pointer direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  . pointer attribute_sequence direct_abstract_declarator   (rule 185)
	abstract_declarator  ->  . attribute_sequence pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  . attribute_sequence direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  . attribute_sequence pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  '(' . abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  '(' . ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  '(' . parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	')'	shift, and go to state 264
	'('	shift, and go to state 191
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declarator	go to state 26
	direct_declarator	go to state 12
	abstract_declarator	go to state 265
	direct_abstract_declarator	go to state 194
	declaration_specifiers	go to state 133
	pointer	go to state 195
	parameter_type_list	go to state 266
	parameter_list	go to state 135
	parameter_declaration	go to state 136
	attribute_sequence	go to state 267
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 268



state 192

	parameter_declaration  ->  declaration_specifiers declarator . pop_type_name_scope   (rule 175)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 269



state 193

	parameter_declaration  ->  declaration_specifiers abstract_declarator . pop_type_name_scope   (rule 176)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 270



state 194

	abstract_declarator  ->  direct_abstract_declarator .   (rule 183)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 183 (abstract_declarator)

	push_reporting_type_name_scope	go to state 271



state 195

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declarator  ->  pointer . direct_declarator   (rule 153)
	declarator  ->  pointer . attribute_sequence direct_declarator   (rule 155)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	abstract_declarator  ->  pointer .   (rule 182)
	abstract_declarator  ->  pointer . direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  pointer . attribute_sequence direct_abstract_declarator   (rule 185)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 191
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 182 (abstract_declarator)

	direct_declarator	go to state 38
	direct_abstract_declarator	go to state 272
	attribute_sequence	go to state 273
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 198



state 196

	declarator  ->  attribute_sequence . pointer direct_declarator   (rule 156)
	declarator  ->  attribute_sequence . direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	abstract_declarator  ->  attribute_sequence . pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence . direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  attribute_sequence . pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 191
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_declarator	go to state 40
	direct_abstract_declarator	go to state 274
	pointer	go to state 275
	push_reporting_type_name_scope	go to state 198



state 197

	parameter_declaration  ->  declaration_specifiers pop_type_name_scope .   (rule 177)

	$default	reduce using rule 177 (parameter_declaration)



state 198

	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' constant_expression pop_type_name_scope ']'   (rule 191)

	'['	shift, and go to state 276



state 199

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope . ')'   (rule 162)

	')'	shift, and go to state 277



state 200

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	parameter_type_list  ->  parameter_list ',' . TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  parameter_list ',' . parameter_declaration   (rule 174)
	parameter_declaration  ->  . declaration_specifiers declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  . declaration_specifiers abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  . declaration_specifiers pop_type_name_scope   (rule 177)
	push_reporting_type_name_scope  ->  .   (rule 218)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_ELLIPSIS	shift, and go to state 278

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declaration_specifiers	go to state 133
	parameter_declaration	go to state 279
	attribute_sequence	go to state 30
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 17



state 201

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')' .   (rule 164)

	$default	reduce using rule 164 (direct_declarator)



state 202

	identifier_list  ->  identifier_list ',' . TOK_IDENTIFIER   (rule 179)

	TOK_IDENTIFIER	shift, and go to state 280



state 203

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope . ')'   (rule 163)

	')'	shift, and go to state 281



state 204

	initializer_list  ->  initializer .   (rule 201)

	$default	reduce using rule 201 (initializer_list)



state 205

	initializer  ->  '{' initializer_list . '}'   (rule 199)
	initializer  ->  '{' initializer_list . ',' '}'   (rule 200)
	initializer_list  ->  initializer_list . ',' initializer   (rule 202)

	'}'	shift, and go to state 282
	','	shift, and go to state 283



state 206

	assignment_operator  ->  '=' .   (rule 61)

	$default	reduce using rule 61 (assignment_operator)



state 207

	assignment_operator  ->  TOK_OR_ASSIGN .   (rule 71)

	$default	reduce using rule 71 (assignment_operator)



state 208

	assignment_operator  ->  TOK_XOR_ASSIGN .   (rule 70)

	$default	reduce using rule 70 (assignment_operator)



state 209

	assignment_operator  ->  TOK_AND_ASSIGN .   (rule 69)

	$default	reduce using rule 69 (assignment_operator)



state 210

	assignment_operator  ->  TOK_RIGHT_ASSIGN .   (rule 68)

	$default	reduce using rule 68 (assignment_operator)



state 211

	assignment_operator  ->  TOK_LEFT_ASSIGN .   (rule 67)

	$default	reduce using rule 67 (assignment_operator)



state 212

	assignment_operator  ->  TOK_SUB_ASSIGN .   (rule 66)

	$default	reduce using rule 66 (assignment_operator)



state 213

	assignment_operator  ->  TOK_ADD_ASSIGN .   (rule 65)

	$default	reduce using rule 65 (assignment_operator)



state 214

	assignment_operator  ->  TOK_MOD_ASSIGN .   (rule 64)

	$default	reduce using rule 64 (assignment_operator)



state 215

	assignment_operator  ->  TOK_DIV_ASSIGN .   (rule 63)

	$default	reduce using rule 63 (assignment_operator)



state 216

	assignment_operator  ->  TOK_MUL_ASSIGN .   (rule 62)

	$default	reduce using rule 62 (assignment_operator)



state 217

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	assignment_expression  ->  unary_expression assignment_operator . assignment_expression   (rule 60)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 284
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 218

	compound_statement  ->  . '{' '}'   (rule 203)
	function_definition  ->  declaration_specifiers declarator pop_type_name_scope declaration_list @67 . compound_statement   (rule 210)

	'{'	shift, and go to state 62

	compound_statement	go to state 285



state 219

	function_definition  ->  declaration_specifiers declarator pop_type_name_scope @68 compound_statement .   (rule 212)

	$default	reduce using rule 212 (function_definition)



state 220

	enumerator  ->  TOK_IDENTIFIER .   (rule 149)
	enumerator  ->  TOK_IDENTIFIER . '=' constant_expression   (rule 150)

	'='	shift, and go to state 286

	$default	reduce using rule 149 (enumerator)



state 221

	enumerator_list  ->  enumerator .   (rule 145)

	$default	reduce using rule 145 (enumerator_list)



state 222

	enum_specifier  ->  TOK_ENUM '{' enumerator_list_with_opt_comma . '}'   (rule 141)

	'}'	shift, and go to state 287



state 223

	enumerator_list_with_opt_comma  ->  enumerator_list . opt_comma   (rule 144)
	enumerator_list  ->  enumerator_list . ',' enumerator   (rule 146)
	opt_comma  ->  .   (rule 147)
	opt_comma  ->  . ','   (rule 148)

	','	shift, and go to state 288

	$default	reduce using rule 147 (opt_comma)

	opt_comma	go to state 289



state 224

	enum_specifier  ->  TOK_ENUM TOK_IDENTIFIER '{' . enumerator_list_with_opt_comma '}'   (rule 142)
	enumerator_list_with_opt_comma  ->  . enumerator_list opt_comma   (rule 144)
	enumerator_list  ->  . enumerator   (rule 145)
	enumerator_list  ->  . enumerator_list ',' enumerator   (rule 146)
	enumerator  ->  . TOK_IDENTIFIER   (rule 149)
	enumerator  ->  . TOK_IDENTIFIER '=' constant_expression   (rule 150)

	TOK_IDENTIFIER	shift, and go to state 220

	enumerator	go to state 221
	enumerator_list_with_opt_comma	go to state 290
	enumerator_list	go to state 223



state 225

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope . '{' struct_declaration_list pop_type_name_scope '}'   (rule 121)

	'{'	shift, and go to state 291



state 226

	struct_or_union_specifier  ->  struct_or_union push_reporting_type_name_scope '{' . struct_declaration_list pop_type_name_scope '}'   (rule 122)
	struct_declaration_list  ->  . struct_declaration   (rule 127)
	struct_declaration_list  ->  . struct_declaration_list struct_declaration   (rule 128)
	struct_declaration  ->  . specifier_qualifier_list struct_declarator_list pop_type_name_scope ';'   (rule 129)
	struct_declaration  ->  . specifier_qualifier_list pop_type_name_scope ';'   (rule 130)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	push_reporting_type_name_scope  ->  .   (rule 218)

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	struct_declaration_list	go to state 292
	struct_declaration	go to state 293
	specifier_qualifier_list	go to state 294
	push_reporting_type_name_scope	go to state 157



state 227

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	parameter_type_list  ->  . parameter_list   (rule 171)
	parameter_type_list  ->  . parameter_list ',' TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  . parameter_declaration   (rule 173)
	parameter_list  ->  . parameter_list ',' parameter_declaration   (rule 174)
	parameter_declaration  ->  . declaration_specifiers declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  . declaration_specifiers abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  . declaration_specifiers pop_type_name_scope   (rule 177)
	abstract_declarator  ->  . pointer   (rule 182)
	abstract_declarator  ->  . direct_abstract_declarator   (rule 183)
	abstract_declarator  ->  . pointer direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  . pointer attribute_sequence direct_abstract_declarator   (rule 185)
	abstract_declarator  ->  . attribute_sequence pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  . attribute_sequence direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  . attribute_sequence pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  '(' . abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  '(' . ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  '(' . parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	')'	shift, and go to state 264
	'('	shift, and go to state 227
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	abstract_declarator	go to state 265
	direct_abstract_declarator	go to state 194
	declaration_specifiers	go to state 133
	pointer	go to state 229
	parameter_type_list	go to state 266
	parameter_list	go to state 135
	parameter_declaration	go to state 136
	attribute_sequence	go to state 295
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 268



state 228

	type_name  ->  specifier_qualifier_list abstract_declarator .   (rule 181)

	$default	reduce using rule 181 (type_name)



state 229

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	abstract_declarator  ->  pointer .   (rule 182)
	abstract_declarator  ->  pointer . direct_abstract_declarator   (rule 184)
	abstract_declarator  ->  pointer . attribute_sequence direct_abstract_declarator   (rule 185)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 227
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 182 (abstract_declarator)

	direct_abstract_declarator	go to state 272
	attribute_sequence	go to state 296
	attribute	go to state 16
	push_reporting_type_name_scope	go to state 198



state 230

	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	abstract_declarator  ->  attribute_sequence . pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence . direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  attribute_sequence . pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 227

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_abstract_declarator	go to state 274
	pointer	go to state 297
	push_reporting_type_name_scope	go to state 198



state 231

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	expression  ->  expression ',' . assignment_expression   (rule 73)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 298
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 232

	primary_expression  ->  '(' expression ')' .   (rule 4)

	$default	reduce using rule 4 (primary_expression)



state 233

	cast_expression  ->  '(' type_name pop_type_name_scope . ')' cast_expression   (rule 28)

	')'	shift, and go to state 299



state 234

	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier non_wrapped_specifier_qualifier_list   (rule 132)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier   (rule 133)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier non_wrapped_specifier_qualifier_list   (rule 134)
	non_wrapped_specifier_qualifier_list  ->  type_qualifier . non_wrapped_specifier_qualifier_list   (rule 134)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier   (rule 135)
	non_wrapped_specifier_qualifier_list  ->  type_qualifier .   (rule 135)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22

	TOK_TYPE_NAME	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CHAR	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SHORT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_INT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_LONG	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNSIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_FLOAT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_DOUBLE	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_VOID	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_STRUCT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNION	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_ENUM	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_8	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_16	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_32	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_64	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	$default	reduce using rule 135 (non_wrapped_specifier_qualifier_list)

	type_qualifier	go to state 234
	type_specifier	go to state 235
	non_wrapped_specifier_qualifier_list	go to state 300
	disable_type_name_reporting_for_this_scope	go to state 54



state 235

	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier non_wrapped_specifier_qualifier_list   (rule 132)
	non_wrapped_specifier_qualifier_list  ->  type_specifier . non_wrapped_specifier_qualifier_list   (rule 132)
	non_wrapped_specifier_qualifier_list  ->  . type_specifier   (rule 133)
	non_wrapped_specifier_qualifier_list  ->  type_specifier .   (rule 133)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier non_wrapped_specifier_qualifier_list   (rule 134)
	non_wrapped_specifier_qualifier_list  ->  . type_qualifier   (rule 135)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22

	TOK_TYPE_NAME	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CHAR	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SHORT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_INT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_LONG	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_SIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNSIGNED	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_FLOAT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_DOUBLE	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_VOID	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_STRUCT	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_UNION	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_ENUM	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_8	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_16	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_32	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	TOK_CL_INT_64	reduce using rule 219 (disable_type_name_reporting_for_this_scope)
	$default	reduce using rule 133 (non_wrapped_specifier_qualifier_list)

	type_qualifier	go to state 234
	type_specifier	go to state 235
	non_wrapped_specifier_qualifier_list	go to state 301
	disable_type_name_reporting_for_this_scope	go to state 54



state 236

	specifier_qualifier_list  ->  push_reporting_type_name_scope non_wrapped_specifier_qualifier_list .   (rule 131)

	$default	reduce using rule 131 (specifier_qualifier_list)



state 237

	unary_expression  ->  TOK_SIZEOF '(' type_name . pop_type_name_scope ')'   (rule 20)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 302



state 238

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']' .   (rule 160)

	$default	reduce using rule 160 (direct_declarator)



state 239

	conditional_expression  ->  logical_or_expression '?' expression . ':' conditional_expression   (rule 58)
	expression  ->  expression . ',' assignment_expression   (rule 73)

	':'	shift, and go to state 303
	','	shift, and go to state 231



state 240

	logical_and_expression  ->  logical_and_expression . TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  logical_or_expression TOK_OR_OP logical_and_expression .   (rule 56)

	TOK_AND_OP	shift, and go to state 166

	$default	reduce using rule 56 (logical_or_expression)



state 241

	inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  logical_and_expression TOK_AND_OP inclusive_or_expression .   (rule 54)

	'|'	shift, and go to state 167

	$default	reduce using rule 54 (logical_and_expression)



state 242

	exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 50)
	inclusive_or_expression  ->  inclusive_or_expression '|' exclusive_or_expression .   (rule 52)

	'^'	shift, and go to state 168

	$default	reduce using rule 52 (inclusive_or_expression)



state 243

	and_expression  ->  and_expression . '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  exclusive_or_expression '^' and_expression .   (rule 50)

	'&'	shift, and go to state 169

	$default	reduce using rule 50 (exclusive_or_expression)



state 244

	equality_expression  ->  equality_expression . TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  equality_expression . TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  and_expression '&' equality_expression .   (rule 48)

	TOK_NE_OP	shift, and go to state 170
	TOK_EQ_OP	shift, and go to state 171

	$default	reduce using rule 48 (and_expression)



state 245

	relational_expression  ->  relational_expression . '<' shift_expression   (rule 40)
	relational_expression  ->  relational_expression . '>' shift_expression   (rule 41)
	relational_expression  ->  relational_expression . TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  relational_expression . TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  equality_expression TOK_NE_OP relational_expression .   (rule 46)

	'>'	shift, and go to state 172
	'<'	shift, and go to state 173
	TOK_GE_OP	shift, and go to state 174
	TOK_LE_OP	shift, and go to state 175

	$default	reduce using rule 46 (equality_expression)



state 246

	relational_expression  ->  relational_expression . '<' shift_expression   (rule 40)
	relational_expression  ->  relational_expression . '>' shift_expression   (rule 41)
	relational_expression  ->  relational_expression . TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  relational_expression . TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  equality_expression TOK_EQ_OP relational_expression .   (rule 45)

	'>'	shift, and go to state 172
	'<'	shift, and go to state 173
	TOK_GE_OP	shift, and go to state 174
	TOK_LE_OP	shift, and go to state 175

	$default	reduce using rule 45 (equality_expression)



state 247

	shift_expression  ->  shift_expression . TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  shift_expression . TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression '>' shift_expression .   (rule 41)

	TOK_RIGHT_OP	shift, and go to state 176
	TOK_LEFT_OP	shift, and go to state 177

	$default	reduce using rule 41 (relational_expression)



state 248

	shift_expression  ->  shift_expression . TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  shift_expression . TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression '<' shift_expression .   (rule 40)

	TOK_RIGHT_OP	shift, and go to state 176
	TOK_LEFT_OP	shift, and go to state 177

	$default	reduce using rule 40 (relational_expression)



state 249

	shift_expression  ->  shift_expression . TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  shift_expression . TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression TOK_GE_OP shift_expression .   (rule 43)

	TOK_RIGHT_OP	shift, and go to state 176
	TOK_LEFT_OP	shift, and go to state 177

	$default	reduce using rule 43 (relational_expression)



state 250

	shift_expression  ->  shift_expression . TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  shift_expression . TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  relational_expression TOK_LE_OP shift_expression .   (rule 42)

	TOK_RIGHT_OP	shift, and go to state 176
	TOK_LEFT_OP	shift, and go to state 177

	$default	reduce using rule 42 (relational_expression)



state 251

	additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 34)
	additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 35)
	shift_expression  ->  shift_expression TOK_RIGHT_OP additive_expression .   (rule 38)

	'-'	shift, and go to state 178
	'+'	shift, and go to state 179

	$default	reduce using rule 38 (shift_expression)



state 252

	additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 34)
	additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 35)
	shift_expression  ->  shift_expression TOK_LEFT_OP additive_expression .   (rule 37)

	'-'	shift, and go to state 178
	'+'	shift, and go to state 179

	$default	reduce using rule 37 (shift_expression)



state 253

	multiplicative_expression  ->  multiplicative_expression . '*' cast_expression   (rule 30)
	multiplicative_expression  ->  multiplicative_expression . '/' cast_expression   (rule 31)
	multiplicative_expression  ->  multiplicative_expression . '%' cast_expression   (rule 32)
	additive_expression  ->  additive_expression '-' multiplicative_expression .   (rule 35)

	'%'	shift, and go to state 180
	'/'	shift, and go to state 181
	'*'	shift, and go to state 182

	$default	reduce using rule 35 (additive_expression)



state 254

	multiplicative_expression  ->  multiplicative_expression . '*' cast_expression   (rule 30)
	multiplicative_expression  ->  multiplicative_expression . '/' cast_expression   (rule 31)
	multiplicative_expression  ->  multiplicative_expression . '%' cast_expression   (rule 32)
	additive_expression  ->  additive_expression '+' multiplicative_expression .   (rule 34)

	'%'	shift, and go to state 180
	'/'	shift, and go to state 181
	'*'	shift, and go to state 182

	$default	reduce using rule 34 (additive_expression)



state 255

	multiplicative_expression  ->  multiplicative_expression '%' cast_expression .   (rule 32)

	$default	reduce using rule 32 (multiplicative_expression)



state 256

	multiplicative_expression  ->  multiplicative_expression '/' cast_expression .   (rule 31)

	$default	reduce using rule 31 (multiplicative_expression)



state 257

	multiplicative_expression  ->  multiplicative_expression '*' cast_expression .   (rule 30)

	$default	reduce using rule 30 (multiplicative_expression)



state 258

	postfix_expression  ->  postfix_expression '.' TOK_IDENTIFIER .   (rule 9)

	$default	reduce using rule 9 (postfix_expression)



state 259

	postfix_expression  ->  postfix_expression '[' expression . ']'   (rule 6)
	expression  ->  expression . ',' assignment_expression   (rule 73)

	','	shift, and go to state 231
	']'	shift, and go to state 304



state 260

	postfix_expression  ->  postfix_expression '(' ')' .   (rule 7)

	$default	reduce using rule 7 (postfix_expression)



state 261

	argument_expression_list  ->  assignment_expression .   (rule 13)

	$default	reduce using rule 13 (argument_expression_list)



state 262

	postfix_expression  ->  postfix_expression '(' argument_expression_list . ')'   (rule 8)
	argument_expression_list  ->  argument_expression_list . ',' assignment_expression   (rule 14)

	','	shift, and go to state 305
	')'	shift, and go to state 306



state 263

	postfix_expression  ->  postfix_expression TOK_PTR_OP TOK_IDENTIFIER .   (rule 10)

	$default	reduce using rule 10 (postfix_expression)



state 264

	direct_abstract_declarator  ->  '(' ')' .   (rule 194)

	$default	reduce using rule 194 (direct_abstract_declarator)



state 265

	direct_abstract_declarator  ->  '(' abstract_declarator . ')'   (rule 189)

	')'	shift, and go to state 307



state 266

	direct_abstract_declarator  ->  '(' parameter_type_list . ')'   (rule 195)

	')'	shift, and go to state 308



state 267

	declaration_specifiers  ->  attribute_sequence . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	declarator  ->  attribute_sequence . pointer direct_declarator   (rule 156)
	declarator  ->  attribute_sequence . direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	abstract_declarator  ->  attribute_sequence . pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence . direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  attribute_sequence . pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 191
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_declarator	go to state 40
	direct_abstract_declarator	go to state 274
	pointer	go to state 275
	push_reporting_type_name_scope	go to state 309



state 268

	declaration_specifiers  ->  push_reporting_type_name_scope . non_wrapped_declaration_specifiers   (rule 85)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' constant_expression pop_type_name_scope ']'   (rule 191)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	'['	shift, and go to state 276
	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	$default	reduce using rule 219 (disable_type_name_reporting_for_this_scope)

	non_wrapped_declaration_specifiers	go to state 50
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 269

	parameter_declaration  ->  declaration_specifiers declarator pop_type_name_scope .   (rule 175)

	$default	reduce using rule 175 (parameter_declaration)



state 270

	parameter_declaration  ->  declaration_specifiers abstract_declarator pop_type_name_scope .   (rule 176)

	$default	reduce using rule 176 (parameter_declaration)



state 271

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope . '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope . '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope . '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope . '(' parameter_type_list pop_type_name_scope ')'   (rule 197)

	'['	shift, and go to state 310
	'('	shift, and go to state 311



state 272

	abstract_declarator  ->  pointer direct_abstract_declarator .   (rule 184)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 184 (abstract_declarator)

	push_reporting_type_name_scope	go to state 271



state 273

	declarator  ->  pointer attribute_sequence . direct_declarator   (rule 155)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	abstract_declarator  ->  pointer attribute_sequence . direct_abstract_declarator   (rule 185)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 191
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_declarator	go to state 71
	direct_abstract_declarator	go to state 312
	push_reporting_type_name_scope	go to state 198



state 274

	abstract_declarator  ->  attribute_sequence direct_abstract_declarator .   (rule 187)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 187 (abstract_declarator)

	push_reporting_type_name_scope	go to state 271



state 275

	declarator  ->  attribute_sequence pointer . direct_declarator   (rule 156)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	abstract_declarator  ->  attribute_sequence pointer . direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence pointer .   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 191
	TOK_IDENTIFIER	shift, and go to state 9

	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 188 (abstract_declarator)

	direct_declarator	go to state 72
	direct_abstract_declarator	go to state 313
	push_reporting_type_name_scope	go to state 198



state 276

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' . pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' . constant_expression pop_type_name_scope ']'   (rule 191)
	pop_type_name_scope  ->  .   (rule 220)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	$default	reduce using rule 220 (pop_type_name_scope)

	constant_expression	go to state 314
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	pop_type_name_scope	go to state 315



state 277

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')' .   (rule 162)

	$default	reduce using rule 162 (direct_declarator)



state 278

	parameter_type_list  ->  parameter_list ',' TOK_ELLIPSIS .   (rule 172)

	$default	reduce using rule 172 (parameter_type_list)



state 279

	parameter_list  ->  parameter_list ',' parameter_declaration .   (rule 174)

	$default	reduce using rule 174 (parameter_list)



state 280

	identifier_list  ->  identifier_list ',' TOK_IDENTIFIER .   (rule 179)

	$default	reduce using rule 179 (identifier_list)



state 281

	direct_declarator  ->  direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')' .   (rule 163)

	$default	reduce using rule 163 (direct_declarator)



state 282

	initializer  ->  '{' initializer_list '}' .   (rule 199)

	$default	reduce using rule 199 (initializer)



state 283

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)
	initializer  ->  . assignment_expression   (rule 198)
	initializer  ->  . '{' initializer_list '}'   (rule 199)
	initializer  ->  . '{' initializer_list ',' '}'   (rule 200)
	initializer  ->  '{' initializer_list ',' . '}'   (rule 200)
	initializer_list  ->  initializer_list ',' . initializer   (rule 202)

	'}'	shift, and go to state 316
	'{'	shift, and go to state 141
	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 143
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	initializer	go to state 317



state 284

	assignment_expression  ->  unary_expression assignment_operator assignment_expression .   (rule 60)

	$default	reduce using rule 60 (assignment_expression)



state 285

	function_definition  ->  declaration_specifiers declarator pop_type_name_scope declaration_list @67 compound_statement .   (rule 210)

	$default	reduce using rule 210 (function_definition)



state 286

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	enumerator  ->  TOK_IDENTIFIER '=' . constant_expression   (rule 150)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	constant_expression	go to state 318
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 287

	enum_specifier  ->  TOK_ENUM '{' enumerator_list_with_opt_comma '}' .   (rule 141)

	$default	reduce using rule 141 (enum_specifier)



state 288

	enumerator_list  ->  enumerator_list ',' . enumerator   (rule 146)
	opt_comma  ->  ',' .   (rule 148)
	enumerator  ->  . TOK_IDENTIFIER   (rule 149)
	enumerator  ->  . TOK_IDENTIFIER '=' constant_expression   (rule 150)

	TOK_IDENTIFIER	shift, and go to state 220

	$default	reduce using rule 148 (opt_comma)

	enumerator	go to state 319



state 289

	enumerator_list_with_opt_comma  ->  enumerator_list opt_comma .   (rule 144)

	$default	reduce using rule 144 (enumerator_list_with_opt_comma)



state 290

	enum_specifier  ->  TOK_ENUM TOK_IDENTIFIER '{' enumerator_list_with_opt_comma . '}'   (rule 142)

	'}'	shift, and go to state 320



state 291

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' . struct_declaration_list pop_type_name_scope '}'   (rule 121)
	struct_declaration_list  ->  . struct_declaration   (rule 127)
	struct_declaration_list  ->  . struct_declaration_list struct_declaration   (rule 128)
	struct_declaration  ->  . specifier_qualifier_list struct_declarator_list pop_type_name_scope ';'   (rule 129)
	struct_declaration  ->  . specifier_qualifier_list pop_type_name_scope ';'   (rule 130)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	push_reporting_type_name_scope  ->  .   (rule 218)

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	struct_declaration_list	go to state 321
	struct_declaration	go to state 293
	specifier_qualifier_list	go to state 294
	push_reporting_type_name_scope	go to state 157



state 292

	struct_or_union_specifier  ->  struct_or_union push_reporting_type_name_scope '{' struct_declaration_list . pop_type_name_scope '}'   (rule 122)
	struct_declaration_list  ->  struct_declaration_list . struct_declaration   (rule 128)
	struct_declaration  ->  . specifier_qualifier_list struct_declarator_list pop_type_name_scope ';'   (rule 129)
	struct_declaration  ->  . specifier_qualifier_list pop_type_name_scope ';'   (rule 130)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	push_reporting_type_name_scope  ->  .   (rule 218)
	pop_type_name_scope  ->  .   (rule 220)

	'}'	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 218 (push_reporting_type_name_scope)

	struct_declaration	go to state 322
	specifier_qualifier_list	go to state 294
	pop_type_name_scope	go to state 323
	push_reporting_type_name_scope	go to state 157



state 293

	struct_declaration_list  ->  struct_declaration .   (rule 127)

	$default	reduce using rule 127 (struct_declaration_list)



state 294

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	struct_declaration  ->  specifier_qualifier_list . struct_declarator_list pop_type_name_scope ';'   (rule 129)
	struct_declaration  ->  specifier_qualifier_list . pop_type_name_scope ';'   (rule 130)
	struct_declarator_list  ->  . struct_declarator   (rule 136)
	struct_declarator_list  ->  . struct_declarator_list ',' struct_declarator   (rule 137)
	struct_declarator  ->  . declarator   (rule 138)
	struct_declarator  ->  . ':' constant_expression   (rule 139)
	struct_declarator  ->  . declarator ':' constant_expression   (rule 140)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	pop_type_name_scope  ->  .   (rule 220)

	':'	shift, and go to state 324
	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	$default	reduce using rule 220 (pop_type_name_scope)

	declarator	go to state 325
	direct_declarator	go to state 12
	struct_declarator_list	go to state 326
	struct_declarator	go to state 327
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16
	pop_type_name_scope	go to state 328



state 295

	declaration_specifiers  ->  attribute_sequence . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)
	abstract_declarator  ->  attribute_sequence . pointer direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence . direct_abstract_declarator   (rule 187)
	abstract_declarator  ->  attribute_sequence . pointer   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'*'	shift, and go to state 1
	'('	shift, and go to state 227

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_abstract_declarator	go to state 274
	pointer	go to state 297
	push_reporting_type_name_scope	go to state 309



state 296

	abstract_declarator  ->  pointer attribute_sequence . direct_abstract_declarator   (rule 185)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 227

	$default	reduce using rule 218 (push_reporting_type_name_scope)

	direct_abstract_declarator	go to state 312
	push_reporting_type_name_scope	go to state 198



state 297

	abstract_declarator  ->  attribute_sequence pointer . direct_abstract_declarator   (rule 186)
	abstract_declarator  ->  attribute_sequence pointer .   (rule 188)
	direct_abstract_declarator  ->  . '(' abstract_declarator ')'   (rule 189)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 191)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  . '(' ')'   (rule 194)
	direct_abstract_declarator  ->  . '(' parameter_type_list ')'   (rule 195)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  . direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	shift, and go to state 227

	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 188 (abstract_declarator)

	direct_abstract_declarator	go to state 313
	push_reporting_type_name_scope	go to state 198



state 298

	expression  ->  expression ',' assignment_expression .   (rule 73)

	$default	reduce using rule 73 (expression)



state 299

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	cast_expression  ->  '(' type_name pop_type_name_scope ')' . cast_expression   (rule 28)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	cast_expression	go to state 329
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 300

	non_wrapped_specifier_qualifier_list  ->  type_qualifier non_wrapped_specifier_qualifier_list .   (rule 134)

	$default	reduce using rule 134 (non_wrapped_specifier_qualifier_list)



state 301

	non_wrapped_specifier_qualifier_list  ->  type_specifier non_wrapped_specifier_qualifier_list .   (rule 132)

	$default	reduce using rule 132 (non_wrapped_specifier_qualifier_list)



state 302

	unary_expression  ->  TOK_SIZEOF '(' type_name pop_type_name_scope . ')'   (rule 20)

	')'	shift, and go to state 330



state 303

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	conditional_expression  ->  logical_or_expression '?' expression ':' . conditional_expression   (rule 58)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 331
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 304

	postfix_expression  ->  postfix_expression '[' expression ']' .   (rule 6)

	$default	reduce using rule 6 (postfix_expression)



state 305

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	argument_expression_list  ->  argument_expression_list ',' . assignment_expression   (rule 14)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	assignment_expression  ->  . conditional_expression   (rule 59)
	assignment_expression  ->  . unary_expression assignment_operator assignment_expression   (rule 60)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	conditional_expression	go to state 142
	logical_or_expression	go to state 116
	assignment_expression	go to state 332
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 144
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 306

	postfix_expression  ->  postfix_expression '(' argument_expression_list ')' .   (rule 8)

	$default	reduce using rule 8 (postfix_expression)



state 307

	direct_abstract_declarator  ->  '(' abstract_declarator ')' .   (rule 189)

	$default	reduce using rule 189 (direct_abstract_declarator)



state 308

	direct_abstract_declarator  ->  '(' parameter_type_list ')' .   (rule 195)

	$default	reduce using rule 195 (direct_abstract_declarator)



state 309

	declaration_specifiers  ->  attribute_sequence push_reporting_type_name_scope . non_wrapped_declaration_specifiers   (rule 86)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier   (rule 87)
	non_wrapped_declaration_specifiers  ->  . storage_class_specifier non_wrapped_declaration_specifiers   (rule 88)
	non_wrapped_declaration_specifiers  ->  . type_specifier   (rule 89)
	non_wrapped_declaration_specifiers  ->  . type_specifier non_wrapped_declaration_specifiers   (rule 90)
	non_wrapped_declaration_specifiers  ->  . type_qualifier   (rule 91)
	non_wrapped_declaration_specifiers  ->  . type_qualifier non_wrapped_declaration_specifiers   (rule 92)
	storage_class_specifier  ->  . TOK_TYPEDEF   (rule 97)
	storage_class_specifier  ->  . TOK_EXTERN   (rule 98)
	storage_class_specifier  ->  . TOK_STATIC   (rule 99)
	storage_class_specifier  ->  . TOK_AUTO   (rule 100)
	storage_class_specifier  ->  . TOK_REGISTER   (rule 101)
	storage_class_specifier  ->  . TOK_INLINE   (rule 102)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_no_type_name   (rule 103)
	type_specifier  ->  . disable_type_name_reporting_for_this_scope type_specifier_type_name   (rule 104)
	type_qualifier  ->  . TOK_CONST   (rule 151)
	type_qualifier  ->  . TOK_VOLATILE   (rule 152)
	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' pop_type_name_scope ']'   (rule 190)
	direct_abstract_declarator  ->  push_reporting_type_name_scope . '[' constant_expression pop_type_name_scope ']'   (rule 191)
	disable_type_name_reporting_for_this_scope  ->  .   (rule 219)

	'['	shift, and go to state 276
	TOK_INLINE	shift, and go to state 44
	TOK_VOLATILE	shift, and go to state 21
	TOK_CONST	shift, and go to state 22
	TOK_REGISTER	shift, and go to state 45
	TOK_AUTO	shift, and go to state 46
	TOK_STATIC	shift, and go to state 47
	TOK_EXTERN	shift, and go to state 48
	TOK_TYPEDEF	shift, and go to state 49

	$default	reduce using rule 219 (disable_type_name_reporting_for_this_scope)

	non_wrapped_declaration_specifiers	go to state 73
	type_qualifier	go to state 51
	type_specifier	go to state 52
	storage_class_specifier	go to state 53
	disable_type_name_reporting_for_this_scope	go to state 54



state 310

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' . pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' . constant_expression pop_type_name_scope ']'   (rule 193)
	pop_type_name_scope  ->  .   (rule 220)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	$default	reduce using rule 220 (pop_type_name_scope)

	constant_expression	go to state 333
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130
	pop_type_name_scope	go to state 334



state 311

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	declaration_specifiers  ->  . push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 85)
	declaration_specifiers  ->  . attribute_sequence push_reporting_type_name_scope non_wrapped_declaration_specifiers   (rule 86)
	parameter_type_list  ->  . parameter_list   (rule 171)
	parameter_type_list  ->  . parameter_list ',' TOK_ELLIPSIS   (rule 172)
	parameter_list  ->  . parameter_declaration   (rule 173)
	parameter_list  ->  . parameter_list ',' parameter_declaration   (rule 174)
	parameter_declaration  ->  . declaration_specifiers declarator pop_type_name_scope   (rule 175)
	parameter_declaration  ->  . declaration_specifiers abstract_declarator pop_type_name_scope   (rule 176)
	parameter_declaration  ->  . declaration_specifiers pop_type_name_scope   (rule 177)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' . pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' . parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)
	pop_type_name_scope  ->  .   (rule 220)

	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8

	')'	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 218 (push_reporting_type_name_scope)

	declaration_specifiers	go to state 133
	parameter_type_list	go to state 335
	parameter_list	go to state 135
	parameter_declaration	go to state 136
	attribute_sequence	go to state 30
	attribute	go to state 16
	pop_type_name_scope	go to state 336
	push_reporting_type_name_scope	go to state 17



state 312

	abstract_declarator  ->  pointer attribute_sequence direct_abstract_declarator .   (rule 185)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 185 (abstract_declarator)

	push_reporting_type_name_scope	go to state 271



state 313

	abstract_declarator  ->  attribute_sequence pointer direct_abstract_declarator .   (rule 186)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 192)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 193)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 196)
	direct_abstract_declarator  ->  direct_abstract_declarator . push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 197)
	push_reporting_type_name_scope  ->  .   (rule 218)

	'('	reduce using rule 218 (push_reporting_type_name_scope)
	'['	reduce using rule 218 (push_reporting_type_name_scope)
	$default	reduce using rule 186 (abstract_declarator)

	push_reporting_type_name_scope	go to state 271



state 314

	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' constant_expression . pop_type_name_scope ']'   (rule 191)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 337



state 315

	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' pop_type_name_scope . ']'   (rule 190)

	']'	shift, and go to state 338



state 316

	initializer  ->  '{' initializer_list ',' '}' .   (rule 200)

	$default	reduce using rule 200 (initializer)



state 317

	initializer_list  ->  initializer_list ',' initializer .   (rule 202)

	$default	reduce using rule 202 (initializer_list)



state 318

	enumerator  ->  TOK_IDENTIFIER '=' constant_expression .   (rule 150)

	$default	reduce using rule 150 (enumerator)



state 319

	enumerator_list  ->  enumerator_list ',' enumerator .   (rule 146)

	$default	reduce using rule 146 (enumerator_list)



state 320

	enum_specifier  ->  TOK_ENUM TOK_IDENTIFIER '{' enumerator_list_with_opt_comma '}' .   (rule 142)

	$default	reduce using rule 142 (enum_specifier)



state 321

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list . pop_type_name_scope '}'   (rule 121)
	struct_declaration_list  ->  struct_declaration_list . struct_declaration   (rule 128)
	struct_declaration  ->  . specifier_qualifier_list struct_declarator_list pop_type_name_scope ';'   (rule 129)
	struct_declaration  ->  . specifier_qualifier_list pop_type_name_scope ';'   (rule 130)
	specifier_qualifier_list  ->  . push_reporting_type_name_scope non_wrapped_specifier_qualifier_list   (rule 131)
	push_reporting_type_name_scope  ->  .   (rule 218)
	pop_type_name_scope  ->  .   (rule 220)

	'}'	reduce using rule 220 (pop_type_name_scope)
	$default	reduce using rule 218 (push_reporting_type_name_scope)

	struct_declaration	go to state 322
	specifier_qualifier_list	go to state 294
	pop_type_name_scope	go to state 339
	push_reporting_type_name_scope	go to state 157



state 322

	struct_declaration_list  ->  struct_declaration_list struct_declaration .   (rule 128)

	$default	reduce using rule 128 (struct_declaration_list)



state 323

	struct_or_union_specifier  ->  struct_or_union push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope . '}'   (rule 122)

	'}'	shift, and go to state 340



state 324

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	struct_declarator  ->  ':' . constant_expression   (rule 139)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	constant_expression	go to state 341
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 325

	struct_declarator  ->  declarator .   (rule 138)
	struct_declarator  ->  declarator . ':' constant_expression   (rule 140)

	':'	shift, and go to state 342

	$default	reduce using rule 138 (struct_declarator)



state 326

	struct_declaration  ->  specifier_qualifier_list struct_declarator_list . pop_type_name_scope ';'   (rule 129)
	struct_declarator_list  ->  struct_declarator_list . ',' struct_declarator   (rule 137)
	pop_type_name_scope  ->  .   (rule 220)

	','	shift, and go to state 343

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 344



state 327

	struct_declarator_list  ->  struct_declarator .   (rule 136)

	$default	reduce using rule 136 (struct_declarator_list)



state 328

	struct_declaration  ->  specifier_qualifier_list pop_type_name_scope . ';'   (rule 130)

	';'	shift, and go to state 345



state 329

	cast_expression  ->  '(' type_name pop_type_name_scope ')' cast_expression .   (rule 28)

	$default	reduce using rule 28 (cast_expression)



state 330

	unary_expression  ->  TOK_SIZEOF '(' type_name pop_type_name_scope ')' .   (rule 20)

	$default	reduce using rule 20 (unary_expression)



state 331

	conditional_expression  ->  logical_or_expression '?' expression ':' conditional_expression .   (rule 58)

	$default	reduce using rule 58 (conditional_expression)



state 332

	argument_expression_list  ->  argument_expression_list ',' assignment_expression .   (rule 14)

	$default	reduce using rule 14 (argument_expression_list)



state 333

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression . pop_type_name_scope ']'   (rule 193)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 346



state 334

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope . ']'   (rule 192)

	']'	shift, and go to state 347



state 335

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list . pop_type_name_scope ')'   (rule 197)
	pop_type_name_scope  ->  .   (rule 220)

	$default	reduce using rule 220 (pop_type_name_scope)

	pop_type_name_scope	go to state 348



state 336

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope . ')'   (rule 196)

	')'	shift, and go to state 349



state 337

	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' constant_expression pop_type_name_scope . ']'   (rule 191)

	']'	shift, and go to state 350



state 338

	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' pop_type_name_scope ']' .   (rule 190)

	$default	reduce using rule 190 (direct_abstract_declarator)



state 339

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope . '}'   (rule 121)

	'}'	shift, and go to state 351



state 340

	struct_or_union_specifier  ->  struct_or_union push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}' .   (rule 122)

	$default	reduce using rule 122 (struct_or_union_specifier)



state 341

	struct_declarator  ->  ':' constant_expression .   (rule 139)

	$default	reduce using rule 139 (struct_declarator)



state 342

	primary_expression  ->  . TOK_IDENTIFIER   (rule 1)
	primary_expression  ->  . TOK_CONSTANT   (rule 2)
	primary_expression  ->  . TOK_STRING_LITERAL   (rule 3)
	primary_expression  ->  . '(' expression ')'   (rule 4)
	postfix_expression  ->  . primary_expression   (rule 5)
	postfix_expression  ->  . postfix_expression '[' expression ']'   (rule 6)
	postfix_expression  ->  . postfix_expression '(' ')'   (rule 7)
	postfix_expression  ->  . postfix_expression '(' argument_expression_list ')'   (rule 8)
	postfix_expression  ->  . postfix_expression '.' TOK_IDENTIFIER   (rule 9)
	postfix_expression  ->  . postfix_expression TOK_PTR_OP TOK_IDENTIFIER   (rule 10)
	postfix_expression  ->  . postfix_expression TOK_INC_OP   (rule 11)
	postfix_expression  ->  . postfix_expression TOK_DEC_OP   (rule 12)
	unary_expression  ->  . postfix_expression   (rule 15)
	unary_expression  ->  . TOK_INC_OP unary_expression   (rule 16)
	unary_expression  ->  . TOK_DEC_OP unary_expression   (rule 17)
	unary_expression  ->  . unary_operator cast_expression   (rule 18)
	unary_expression  ->  . TOK_SIZEOF unary_expression   (rule 19)
	unary_expression  ->  . TOK_SIZEOF '(' type_name pop_type_name_scope ')'   (rule 20)
	unary_operator  ->  . '&'   (rule 21)
	unary_operator  ->  . '*'   (rule 22)
	unary_operator  ->  . '+'   (rule 23)
	unary_operator  ->  . '-'   (rule 24)
	unary_operator  ->  . '~'   (rule 25)
	unary_operator  ->  . '!'   (rule 26)
	cast_expression  ->  . unary_expression   (rule 27)
	cast_expression  ->  . '(' type_name pop_type_name_scope ')' cast_expression   (rule 28)
	multiplicative_expression  ->  . cast_expression   (rule 29)
	multiplicative_expression  ->  . multiplicative_expression '*' cast_expression   (rule 30)
	multiplicative_expression  ->  . multiplicative_expression '/' cast_expression   (rule 31)
	multiplicative_expression  ->  . multiplicative_expression '%' cast_expression   (rule 32)
	additive_expression  ->  . multiplicative_expression   (rule 33)
	additive_expression  ->  . additive_expression '+' multiplicative_expression   (rule 34)
	additive_expression  ->  . additive_expression '-' multiplicative_expression   (rule 35)
	shift_expression  ->  . additive_expression   (rule 36)
	shift_expression  ->  . shift_expression TOK_LEFT_OP additive_expression   (rule 37)
	shift_expression  ->  . shift_expression TOK_RIGHT_OP additive_expression   (rule 38)
	relational_expression  ->  . shift_expression   (rule 39)
	relational_expression  ->  . relational_expression '<' shift_expression   (rule 40)
	relational_expression  ->  . relational_expression '>' shift_expression   (rule 41)
	relational_expression  ->  . relational_expression TOK_LE_OP shift_expression   (rule 42)
	relational_expression  ->  . relational_expression TOK_GE_OP shift_expression   (rule 43)
	equality_expression  ->  . relational_expression   (rule 44)
	equality_expression  ->  . equality_expression TOK_EQ_OP relational_expression   (rule 45)
	equality_expression  ->  . equality_expression TOK_NE_OP relational_expression   (rule 46)
	and_expression  ->  . equality_expression   (rule 47)
	and_expression  ->  . and_expression '&' equality_expression   (rule 48)
	exclusive_or_expression  ->  . and_expression   (rule 49)
	exclusive_or_expression  ->  . exclusive_or_expression '^' and_expression   (rule 50)
	inclusive_or_expression  ->  . exclusive_or_expression   (rule 51)
	inclusive_or_expression  ->  . inclusive_or_expression '|' exclusive_or_expression   (rule 52)
	logical_and_expression  ->  . inclusive_or_expression   (rule 53)
	logical_and_expression  ->  . logical_and_expression TOK_AND_OP inclusive_or_expression   (rule 54)
	logical_or_expression  ->  . logical_and_expression   (rule 55)
	logical_or_expression  ->  . logical_or_expression TOK_OR_OP logical_and_expression   (rule 56)
	conditional_expression  ->  . logical_or_expression   (rule 57)
	conditional_expression  ->  . logical_or_expression '?' expression ':' conditional_expression   (rule 58)
	constant_expression  ->  . conditional_expression   (rule 74)
	struct_declarator  ->  declarator ':' . constant_expression   (rule 140)

	'!'	shift, and go to state 101
	'~'	shift, and go to state 102
	'-'	shift, and go to state 103
	'+'	shift, and go to state 104
	'*'	shift, and go to state 105
	'&'	shift, and go to state 106
	'('	shift, and go to state 107
	TOK_DEC_OP	shift, and go to state 108
	TOK_INC_OP	shift, and go to state 109
	TOK_SIZEOF	shift, and go to state 110
	TOK_STRING_LITERAL	shift, and go to state 111
	TOK_CONSTANT	shift, and go to state 112
	TOK_IDENTIFIER	shift, and go to state 113

	constant_expression	go to state 352
	conditional_expression	go to state 115
	logical_or_expression	go to state 116
	logical_and_expression	go to state 117
	inclusive_or_expression	go to state 118
	exclusive_or_expression	go to state 119
	and_expression	go to state 120
	equality_expression	go to state 121
	relational_expression	go to state 122
	shift_expression	go to state 123
	additive_expression	go to state 124
	multiplicative_expression	go to state 125
	cast_expression	go to state 126
	unary_expression	go to state 127
	postfix_expression	go to state 128
	primary_expression	go to state 129
	unary_operator	go to state 130



state 343

	attribute_sequence  ->  . attribute   (rule 75)
	attribute_sequence  ->  . attribute attribute_sequence   (rule 76)
	attribute  ->  . TOK_CL_ASM   (rule 77)
	attribute  ->  . TOK_CL_FASTCALL   (rule 78)
	attribute  ->  . TOK_CL_BASED   (rule 79)
	attribute  ->  . TOK_CL_INLINE   (rule 80)
	attribute  ->  . TOK_CL_CDECL   (rule 81)
	attribute  ->  . TOK_CL_STDCALL   (rule 82)
	struct_declarator_list  ->  struct_declarator_list ',' . struct_declarator   (rule 137)
	struct_declarator  ->  . declarator   (rule 138)
	struct_declarator  ->  . ':' constant_expression   (rule 139)
	struct_declarator  ->  . declarator ':' constant_expression   (rule 140)
	declarator  ->  . pointer direct_declarator   (rule 153)
	declarator  ->  . direct_declarator   (rule 154)
	declarator  ->  . pointer attribute_sequence direct_declarator   (rule 155)
	declarator  ->  . attribute_sequence pointer direct_declarator   (rule 156)
	declarator  ->  . attribute_sequence direct_declarator   (rule 157)
	direct_declarator  ->  . TOK_IDENTIFIER   (rule 158)
	direct_declarator  ->  . '(' declarator ')'   (rule 159)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']'   (rule 160)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']'   (rule 161)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')'   (rule 162)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' identifier_list pop_type_name_scope ')'   (rule 163)
	direct_declarator  ->  . direct_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')'   (rule 164)
	pointer  ->  . '*'   (rule 165)
	pointer  ->  . '*' type_qualifier_list   (rule 166)
	pointer  ->  . '*' pointer   (rule 167)
	pointer  ->  . '*' type_qualifier_list pointer   (rule 168)

	':'	shift, and go to state 324
	'*'	shift, and go to state 1
	'('	shift, and go to state 2
	TOK_CL_ASM	shift, and go to state 3
	TOK_CL_INLINE	shift, and go to state 4
	TOK_CL_STDCALL	shift, and go to state 5
	TOK_CL_CDECL	shift, and go to state 6
	TOK_CL_BASED	shift, and go to state 7
	TOK_CL_FASTCALL	shift, and go to state 8
	TOK_IDENTIFIER	shift, and go to state 9

	declarator	go to state 325
	direct_declarator	go to state 12
	struct_declarator	go to state 353
	pointer	go to state 14
	attribute_sequence	go to state 27
	attribute	go to state 16



state 344

	struct_declaration  ->  specifier_qualifier_list struct_declarator_list pop_type_name_scope . ';'   (rule 129)

	';'	shift, and go to state 354



state 345

	struct_declaration  ->  specifier_qualifier_list pop_type_name_scope ';' .   (rule 130)

	$default	reduce using rule 130 (struct_declaration)



state 346

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope . ']'   (rule 193)

	']'	shift, and go to state 355



state 347

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' pop_type_name_scope ']' .   (rule 192)

	$default	reduce using rule 192 (direct_abstract_declarator)



state 348

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope . ')'   (rule 197)

	')'	shift, and go to state 356



state 349

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' pop_type_name_scope ')' .   (rule 196)

	$default	reduce using rule 196 (direct_abstract_declarator)



state 350

	direct_abstract_declarator  ->  push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']' .   (rule 191)

	$default	reduce using rule 191 (direct_abstract_declarator)



state 351

	struct_or_union_specifier  ->  struct_or_union TOK_IDENTIFIER push_reporting_type_name_scope '{' struct_declaration_list pop_type_name_scope '}' .   (rule 121)

	$default	reduce using rule 121 (struct_or_union_specifier)



state 352

	struct_declarator  ->  declarator ':' constant_expression .   (rule 140)

	$default	reduce using rule 140 (struct_declarator)



state 353

	struct_declarator_list  ->  struct_declarator_list ',' struct_declarator .   (rule 137)

	$default	reduce using rule 137 (struct_declarator_list)



state 354

	struct_declaration  ->  specifier_qualifier_list struct_declarator_list pop_type_name_scope ';' .   (rule 129)

	$default	reduce using rule 129 (struct_declaration)



state 355

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '[' constant_expression pop_type_name_scope ']' .   (rule 193)

	$default	reduce using rule 193 (direct_abstract_declarator)



state 356

	direct_abstract_declarator  ->  direct_abstract_declarator push_reporting_type_name_scope '(' parameter_type_list pop_type_name_scope ')' .   (rule 197)

	$default	reduce using rule 197 (direct_abstract_declarator)



state 357


	$	go to state 358



state 358


	$default	accept
