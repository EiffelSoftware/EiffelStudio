note
	description: "Implemented `ITask' interface."
	generator: "Automatically generated by the EiffelCOM Wizard."

class
	ITASK_IMPL_STUB

inherit
	ITASK_INTERFACE

	ECOM_STUB

feature -- Basic Operations

	create_trigger (pi_new_trigger: INTEGER_REF; pp_trigger: CELL [ITASK_TRIGGER_INTERFACE])
			-- Creates a trigger using a work item object.
			-- `pi_new_trigger' [out].  
			-- `pp_trigger' [out].  
		do
			-- Put Implementation here.
		end

	delete_trigger (i_trigger: INTEGER)
			-- Deletes a trigger from a work item. 
			-- `i_trigger' [in].  
		do
			-- Put Implementation here.
		end

	get_trigger_count (pw_count: INTEGER_REF)
			-- Retrieves the number of triggers associated with a work item.
			-- `pw_count' [out].  
		do
			-- Put Implementation here.
		end

	get_trigger (i_trigger: INTEGER; pp_trigger: CELL [ITASK_TRIGGER_INTERFACE])
			-- Retrieves a trigger structure.
			-- `i_trigger' [in].  
			-- `pp_trigger' [out].  
		do
			-- Put Implementation here.
		end

	get_trigger_string (i_trigger: INTEGER; ppwsz_trigger: CELL [STRING])
			-- Retrieves a trigger string.
			-- `i_trigger' [in].  
			-- `ppwsz_trigger' [out].  
		do
			-- Put Implementation here.
		end

	get_run_times (pst_begin: X_SYSTEMTIME_RECORD; pst_end: X_SYSTEMTIME_RECORD; p_count: INTEGER_REF; rgst_task_times: CELL [X_SYSTEMTIME_RECORD])
			-- Retrieves the work item run times for a specified time period.
			-- `pst_begin' [in].  
			-- `pst_end' [in].  
			-- `p_count' [in, out].  
			-- `rgst_task_times' [out].  
		do
			-- Put Implementation here.
		end

	get_next_run_time (pst_next_run: X_SYSTEMTIME_RECORD)
			-- Retrieves the next time the work item will run.
			-- `pst_next_run' [in, out].  
		do
			-- Put Implementation here.
		end

	set_idle_wait (w_idle_minutes: INTEGER; w_deadline_minutes: INTEGER)
			-- Sets the idle wait time for the work item.
			-- `w_idle_minutes' [in].  
			-- `w_deadline_minutes' [in].  
		do
			-- Put Implementation here.
		end

	get_idle_wait (pw_idle_minutes: INTEGER_REF; pw_deadline_minutes: INTEGER_REF)
			-- Retrieves the idle wait time for the work item.
			-- `pw_idle_minutes' [out].  
			-- `pw_deadline_minutes' [out].  
		do
			-- Put Implementation here.
		end

	run
			-- Runs the work item.
		do
			-- Put Implementation here.
		end

	terminate
			-- Ends the execution of the work item.
		do
			-- Put Implementation here.
		end

	edit_work_item (h_parent: POINTER; dw_reserved: INTEGER)
			-- Opens the configuration properties for the work item.
			-- `h_parent' [in].  
			-- `dw_reserved' [in].  
		do
			-- Put Implementation here.
		end

	get_most_recent_run_time (pst_last_run: X_SYSTEMTIME_RECORD)
			-- Retrieves the most recent time the work item began running.
			-- `pst_last_run' [out].  
		do
			-- Put Implementation here.
		end

	get_status (phr_status: ECOM_HRESULT)
			-- Retrieves the status of the work item.
			-- `phr_status' [out].  
		do
			-- Put Implementation here.
		end

	get_exit_code (pdw_exit_code: INTEGER_REF)
			-- Retrieves the work item's last exit code.
			-- `pdw_exit_code' [out].  
		do
			-- Put Implementation here.
		end

	set_comment (pwsz_comment: STRING)
			-- Sets the comment for the work item.
			-- `pwsz_comment' [in].  
		do
			-- Put Implementation here.
		end

	get_comment (ppwsz_comment: CELL [STRING])
			-- Retrieves the comment for the work item.
			-- `ppwsz_comment' [out].  
		do
			-- Put Implementation here.
		end

	set_creator (pwsz_creator: STRING)
			-- Sets the creator of the work item.
			-- `pwsz_creator' [in].  
		do
			-- Put Implementation here.
		end

	get_creator (ppwsz_creator: CELL [STRING])
			-- Retrieves the creator of the work item.
			-- `ppwsz_creator' [out].  
		do
			-- Put Implementation here.
		end

	set_work_item_data (cb_data: INTEGER; rgb_data: CHARACTER_REF)
			-- Stores application-defined data associated with the work item.
			-- `cb_data' [in].  
			-- `rgb_data' [in].  
		do
			-- Put Implementation here.
		end

	get_work_item_data (pcb_data: INTEGER_REF; prgb_data: CELL [CHARACTER_REF])
			-- Retrieves application-defined data associated with the work item.
			-- `pcb_data' [out].  
			-- `prgb_data' [out].  
		do
			-- Put Implementation here.
		end

	set_error_retry_count (w_retry_count: INTEGER)
			-- Not currently implemented.
			-- `w_retry_count' [in].  
		do
			-- Put Implementation here.
		end

	get_error_retry_count (pw_retry_count: INTEGER_REF)
			-- Not currently implemented.
			-- `pw_retry_count' [out].  
		do
			-- Put Implementation here.
		end

	set_error_retry_interval (w_retry_interval: INTEGER)
			-- Not currently implemented.
			-- `w_retry_interval' [in].  
		do
			-- Put Implementation here.
		end

	get_error_retry_interval (pw_retry_interval: INTEGER_REF)
			-- Not currently implemented.
			-- `pw_retry_interval' [out].  
		do
			-- Put Implementation here.
		end

	set_flags (dw_flags: INTEGER)
			-- Sets the flags that modify the behavior of the work item.
			-- `dw_flags' [in].  
		do
			-- Put Implementation here.
		end

	get_flags (pdw_flags: INTEGER_REF)
			-- Retrieves the flags that modify the behavior of the work item.
			-- `pdw_flags' [out].  
		do
			-- Put Implementation here.
		end

	set_account_information (pwsz_account_name: STRING; pwsz_password: STRING)
			-- Sets the account name and password for the work item.
			-- `pwsz_account_name' [in].  
			-- `pwsz_password' [in].  
		do
			-- Put Implementation here.
		end

	get_account_information (ppwsz_account_name: CELL [STRING])
			-- Retrieves the account name for the work item.
			-- `ppwsz_account_name' [out].  
		do
			-- Put Implementation here.
		end

	set_application_name (pwsz_application_name: STRING)
			-- Assigns a specific application to the current task.
			-- `pwsz_application_name' [in].  
		do
			-- Put Implementation here.
		end

	get_application_name (ppwsz_application_name: CELL [STRING])
			-- Retrieves the name of the application that the task is associated with.
			-- `ppwsz_application_name' [out].  
		do
			-- Put Implementation here.
		end

	set_parameters (pwsz_parameters: STRING)
			-- Sets the command-line parameters for the task.
			-- `pwsz_parameters' [in].  
		do
			-- Put Implementation here.
		end

	get_parameters (ppwsz_parameters: CELL [STRING])
			-- Retrieves the command-line parameters of a task.
			-- `ppwsz_parameters' [out].  
		do
			-- Put Implementation here.
		end

	set_working_directory (pwsz_working_directory: STRING)
			-- Sets the working directory for the task.
			-- `pwsz_working_directory' [in].  
		do
			-- Put Implementation here.
		end

	get_working_directory (ppwsz_working_directory: CELL [STRING])
			-- Retrieves the working directory of the task.
			-- `ppwsz_working_directory' [out].  
		do
			-- Put Implementation here.
		end

	set_priority (dw_priority: INTEGER)
			-- Sets the priority for the task.
			-- `dw_priority' [in].  
		do
			-- Put Implementation here.
		end

	get_priority (pdw_priority: INTEGER_REF)
			-- Retrieves the priority for the task.
			-- `pdw_priority' [out].  
		do
			-- Put Implementation here.
		end

	set_task_flags (dw_flags: INTEGER)
			-- Sets the flags that modify the behavior of the task.
			-- `dw_flags' [in].  
		do
			-- Put Implementation here.
		end

	get_task_flags (pdw_flags: INTEGER_REF)
			-- Returns the flags used to modify the behavior of the task.
			-- `pdw_flags' [out].  
		do
			-- Put Implementation here.
		end

	set_max_run_time (dw_max_run_time_ms: INTEGER)
			-- Sets the maximum length of time the task can run.
			-- `dw_max_run_time_ms' [in].  
		do
			-- Put Implementation here.
		end

	get_max_run_time (pdw_max_run_time_ms: INTEGER_REF)
			-- Retrieves the maximum length of time the task can run.
			-- `pdw_max_run_time_ms' [out].  
		do
			-- Put Implementation here.
		end

	create_item
			-- Initialize `item'
		do
			item := ccom_create_item (Current)
		end

feature {NONE}  -- Externals

	ccom_create_item (eif_object: ITASK_IMPL_STUB): POINTER
			-- Initialize `item'
		external
			"C++ [new ecom_MS_TaskSched_lib::ITask_impl_stub %"ecom_MS_TaskSched_lib_ITask_impl_stub.h%"](EIF_OBJECT)"
		end

end -- ITASK_IMPL_STUB


