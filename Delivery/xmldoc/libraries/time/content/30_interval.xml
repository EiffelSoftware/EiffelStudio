<document output="studio" title="Interval">
	<meta_data/>
	<paragraph>
		<paragraph>Class INTERVAL deals with intervals between two instances of the same class which conform to ABSOLUTE ( 
			<code>
				<class_name>DATE</class_name>
			</code>, 
			<code>
				<class_name>TIME</class_name>
			</code>, 
			<code>
				<class_name>DATE_TIME</class_name>
			</code>). The notions of interval is directly linked with the notion of order.
		</paragraph>
		<paragraph>The start_bound must be before the end_bound.</paragraph>
		<heading>
			<size>4</size>Creation
		</heading>
		<paragraph>The features make, set_start_bound and set_end_bound take clones of their arguments, so that if these arguments are changed, the interval previously created is not.</paragraph>
		<paragraph>It would have been possible to create intervals with references to date or time, but a modification of the dates would have been effective in the interval so that only the invariant would have been able to check if the start_bound is still before the end_bound.</paragraph>
		<heading>
			<size>4</size>Interval measurement
		</heading>
		<paragraph>The measure of intervals is made by duration: the result is an instance of the class 
			<code>
				<class_name>DURATION</class_name>
			</code>. However, as 
			<code>
				<class_name>DURATION</class_name>
			</code> is the common parent of 
			<code>
				<class_name>TIME_DURATION</class_name>
			</code>, 
			<code>
				<class_name>DATE_DURATION</class_name>
			</code> and 
			<code>
				<class_name>DATE_TIME_DURATION</class_name>
			</code>, it does not have many features available. Some features in class 
			<code>
				<class_name>TIME</class_name>
			</code>, 
			<code>
				<class_name>DATE</class_name>
			</code>, 
			<code>
				<class_name>DATE_TIME</class_name>
			</code> return the same result and are more efficient to use. 
			<code>
				<class_name>DURATION</class_name>
			</code> has to be use as the last solution.
		</paragraph>
		<heading>
			<size>4</size>Comparison
		</heading>
		<paragraph>It includes intersection, inclusion and a special comparison.</paragraph>
		<list ordered="false">
			<item>is_equal is present and compare values, not references.</item>
			<item>Feature intersects returns the mathematical result of the intersection of two intervals.</item>
			<item>is_strict_included_by, strict_includes, is_included_by and includes are connected to the same notion of inclusion.</item>
			<item>&lt;, + &gt; and &gt;= use a special rule to compare intervals. int1 &lt;int2 is true if int1 starts and ends strictly before int2. The other features use the same rule and is_equal if needed.</item>
			<item>overlaps looks like intersects but the argument has to be after the current interval. is_overlapped is the opposite.</item>
			<item>meets and is_met are used to test if two intervals have a common bound.</item>
		</list>
		<heading>
			<size>4</size>Status Report
		</heading>
		<paragraph>The main part of the functions need an argument from the same generic typeand return a BOOLEAN value.</paragraph>
		<list ordered="false">
			<item>empty tests if the bounds are equal.</item>
			<item>has, strict_before, strict_after, before and after test the position of an element relatively to the current interval.</item>
		</list>
		<heading>
			<size>4</size>Element change
		</heading>
		<paragraph>set_start_bound and set_end_bound are available to change the bounds.</paragraph>
		<heading>
			<size>4</size>Operations
		</heading>
		<paragraph>Union and intersection are the mathematical functions. gather requires thattwo intervals meet each other and then yields the union.</paragraph>
	</paragraph></document>