indexing
	description	: "Main window for this application"
	status: "See notice at end of class."
	legal: "See notice at end of class."
	author		: "Generated by the New Vision2 Application Wizard."
	date		: "$Date$"
	revision	: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	initialize is
			-- Build the interface for this window.
		local
			l_acc: EV_ACCELERATOR
		do
			Precursor {EV_TITLED_WINDOW}

			create pixmap_window
			create code_producer

				-- Create and add the menu bar.

			build_tool_bar

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window
			set_title (Window_title)
			set_icon_pixmap ((create {SUN_ICON}.make).to_pixmap)

			create l_acc.make_with_key_combination (create {EV_KEY}.make_with_code ({EV_KEY_CONSTANTS}.key_a), true, false, false)
			l_acc.actions.extend (agent select_all)
			accelerators.extend (l_acc)

			create l_acc.make_with_key_combination (create {EV_KEY}.make_with_code ({EV_KEY_CONSTANTS}.key_s), true, false, false)
			l_acc.actions.extend (agent save)
			accelerators.extend (l_acc)

			saved := true
			toggle_save

			default_title := title

				-- Set the initial size of the window
			set_size (500, 600)
		end

	is_in_default_state: BOOLEAN is
			-- Is the window in its default state
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	tool_bar: EV_TOOL_BAR
			-- Tool bar

feature {NONE} -- Implementation, Close event

	request_close_window is
			-- The user wants to close the window
		do
			destroy;
			(create {EV_ENVIRONMENT}).application.destroy
		end

feature {NONE} -- Implementation

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window)

	build_main_container is
			-- Create and populate `main_container'.
		require
			main_container_not_yet_created: main_container = Void
		do
			create main_container

			main_container.extend (tool_bar)
			main_container.disable_item_expand (tool_bar)

			create text_panel
			text_panel.set_font (create {EV_FONT}.make_with_values ({EV_FONT_CONSTANTS}.family_screen, {EV_FONT_CONSTANTS}.weight_regular, {EV_FONT_CONSTANTS}.shape_regular, 12))
			text_panel.change_actions.extend (agent set_change (true))
			main_container.extend (text_panel)
		ensure
			main_container_created: main_container /= Void
		end

	build_tool_bar is
			-- Build tool bar
		local
			tool_bar_item: EV_TOOL_BAR_BUTTON
			l_color: EV_COLOR
			l_save_icon: SAVE_ICON
			l_image_icon: IMAGE_ICON
		do
			create l_save_icon.make_top_to_bottom (l_color)

			create l_image_icon.make_top_to_bottom (Void)
			create tool_bar

			tool_bar.extend (create {EV_TOOL_BAR_SEPARATOR})

			create tool_bar_item.make_with_text ("Open")
			tool_bar_item.set_pixmap (l_image_icon)
			tool_bar_item.select_actions.extend (agent open)
			tool_bar.extend (tool_bar_item)

			create save_button.make_with_text ("Save")
			save_button.set_pixmap (l_save_icon)
			save_button.select_actions.extend (agent save)
			tool_bar.extend (save_button)
		end

	open_file_dialog: EV_FILE_OPEN_DIALOG
			-- Dialog for selecting an image

	save_file_dialog: EV_FILE_SAVE_DIALOG
			-- Dialog for saving classes

	text_panel: EV_TEXT
			-- Text panel to present generated class.

	save_button: EV_TOOL_BAR_BUTTON
			-- Tool bar button for saving a class

	changed: BOOLEAN
			-- Text in `text_panel' changed?

	saved: BOOLEAN
			-- Current class text saved?

	open is
			-- Execute when push open button.
		local
		do
			create open_file_dialog.make_with_title ("Open Image")
			open_file_dialog.open_actions.extend (agent open_image)
			open_file_dialog.filters.extend (["*.png","PNG Image (*.png)"])
			open_file_dialog.filters.extend (["*.bmp","BMP Image (*.bmp)"])
			open_file_dialog.filters.extend (["*.jpg","JPG Image (*.jpg)"])
			open_file_dialog.filters.extend (["*.gif","GIF Image (*.gif)"])
			open_file_dialog.filters.extend (["*.*","All files"])
			open_file_dialog.show_modal_to_window (current)
		end

	save is
			-- Execute when push save button.
		local
			l_file: PLAIN_TEXT_FILE
		do
			if file_path /= Void then
				if not saved then
					create save_file_dialog.make_with_title ("Save created class")
					save_file_dialog.filters.extend (["*.e", "Eiffel class (*.e)"])
					save_file_dialog.filters.extend (["*", "All files (*.*)"])
					save_file_dialog.set_file_name (file_name.as_lower + ".e")
					save_file_dialog.save_actions.extend (agent save_file)
					save_file_dialog.show_modal_to_window (Current)
				else
					if changed then
						create l_file.make_open_write (file_path)
						l_file.put_string (class_file)
						l_file.close
						set_change (false)
					end
				end
			end
		end

	open_image is
			-- Excute when an image is selected in open dialog.
		local
			l_pixmap: EV_PIXEL_BUFFER
			prompt: EV_WARNING_DIALOG
			subfix: STRING
		do
			file_name := open_file_dialog.file_title
			if file_name.has ('.') then
				subfix := file_name.as_lower
				subfix.keep_tail (file_name.count - file_name.last_index_of ('.', file_name.count))

				create l_pixmap
				l_pixmap.set_with_named_file (open_file_dialog.file_name)

				pixmap_window.set_title (file_name)
				file_name.keep_head (file_name.last_index_of ('.', file_name.count) - 1)

				build_file (l_pixmap)
				saved := false
				toggle_save
				text_panel.set_text (class_file)
				file_path := open_file_dialog.file_name

				set_title (default_title + " -- (Text not saved)")

					-- Load picture and show in the window.
				pixmap_window.set_pixmap (l_pixmap)
				pixmap_window.show
				pixmap_window.set_size (l_pixmap.width + (pixmap_window.width - pixmap_window.client_width), l_pixmap.height + (pixmap_window.height - pixmap_window.client_height))
			else
				create prompt.make_with_text ("Is it an image file?")
				prompt.show_modal_to_window (Current)
			end
		end

	save_file is
			-- Excute when saving in save dialog.
		local
			l_file: PLAIN_TEXT_FILE
		do
			create l_file.make_open_write (save_file_dialog.file_name)
			l_file.put_string (class_file)
			l_file.close
			set_change (false)
			saved := true
			set_title (default_title + " -- " + save_file_dialog.file_name)
		end

	select_all is
			-- Select all text in `text_panel'.
		do
			text_panel.select_all
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING is "Image Eiffel Code"
			-- Title of the window.

	Window_width: INTEGER is 400
			-- Initial width for this window.

	Window_height: INTEGER is 400
			-- Initial height for this window.

	pixmap_window: PICTURE_WINDOW
			-- Window to show the actual pixmap.

	set_change (b: BOOLEAN) is
			-- Set `changed' with `b'.
		do
			if b then
				toggle_save
			end
			changed := b
		end

	toggle_save is
			-- toggle save button.
		do
			if saved then
				save_button.disable_sensitive
			else
				save_button.enable_sensitive
			end
		end

	build_file (a_pixmap: EV_PIXEL_BUFFER) is
			-- Build class file according to `a_pixmap'.
		require
			a_pixmap_attached: a_pixmap /= Void
		local
			i, j: INTEGER
			colors: ARRAYED_LIST [ARRAYED_LIST [NATURAL_32]]
			l_arrayed_list : ARRAYED_LIST [NATURAL_32]
			l_width: INTEGER
			l_iterator: EV_PIXEL_BUFFER_ITERATOR
			l_item: EV_PIXEL_BUFFER_PIXEL
		do
			l_width := a_pixmap.width
			create class_file.make_empty
			create colors.make (a_pixmap.width)
			from
				i := 1
				a_pixmap.lock
				l_iterator := a_pixmap.pixel_iterator
				l_iterator.start
			until
				i > a_pixmap.height

			loop
				create l_arrayed_list.make (l_width)
				colors.extend (l_arrayed_list)
				from
					j := 1
				until
					j > l_width
				loop
					l_item := l_iterator.item
					l_arrayed_list.extend (l_item.rgba_value)
					l_iterator.forth

					j := j + 1
				end
				i := i + 1
			end
			a_pixmap.unlock

			class_file.append (code_producer.build_top_code (file_name))
			class_file.append (code_producer.build_initialization_code (a_pixmap.width, a_pixmap.height))
			class_file.append (code_producer.build_c_external_data_code (a_pixmap))
			class_file.append (code_producer.build_colors_code)
			class_file.append (code_producer.new_line)
			class_file.append (code_producer.build_fill_memory_code (colors, a_pixmap.width, a_pixmap.height))
			class_file.append (code_producer.new_line)
			class_file.append ("end -- " + file_name.as_upper +"%N")
		end

	class_file: STRING
			-- String to contain class text to be generated

	file_name: STRING
			-- File name of the image

	file_path: STRING
			-- File path of the class generated

	default_title: STRING
			-- Current window title

	code_producer: CODE_PRODUCER;
			-- Source code generator.

indexing
	copyright: "Copyright (c) 1984-2007, Eiffel Software"
	license:   "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"

end -- class MAIN_WINDOW
