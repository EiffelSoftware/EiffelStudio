#!/bin/sh
set -e


if [ $# != 1 ]; then
    echo Usage: $0 platform
    exit 1
fi


# Define environment variables
. ./set_aliases
PLATFORM=$1
DOCS_DIR=/usr/share/doc/$PRODUCT/docs
RPMMACRO=~/.rpmmacros
export PACKAGING_DIR=`pwd`/packaging
export RPM_DIR=$PACKAGING_DIR/rpm
export PRODUCT
export VERSION


# Create RPM macro file in ./rpmmacros
if test -f $RPMMACRO; then
    move $RPMMACRO /tmp/.rpmmacros$$
fi
echo %_topdir  $RPM_DIR > $RPMMACRO
echo %_tmppath $RPM_DIR/tmp >> $RPMMACRO
echo %_use_internal_dependency_generator 0 >> $RPMMACRO


# Create unix layout in RPM BUILD directory
./make_unix_layout $PLATFORM $INSTALL_DIR $RPM_DIR/eiffelstudio


# Prepare spec files
sh $RPM_DIR/eiffelstudio.spec.sh


# If we have a $DOCS_DIR move it to a seperate
# directory and build noarch doc package
if test -d $RPM_DIR/eiffelstudio$DOCS_DIR; then
    sh $RPM_DIR/eiffelstudio-doc.spec.sh
    safe_md $RPM_DIR/eiffelstudio-doc$DOCS_DIR
    move $RPM_DIR/eiffelstudio$DOCS_DIR/* $RPM_DIR/eiffelstudio-doc$DOCS_DIR
    fullrd $RPM_DIR/eiffelstudio$DOCS_DIR
    rpmbuild -bb $RPM_DIR/eiffelstudio-doc.spec

    # Clean up documentation specific build files
    rm $RPM_DIR/eiffelstudio-doc.spec
    fullrd $RPM_DIR/eiffelstudio-doc
else
    echo "No $RPM_DIR/eiffelstudio$DOCS_DIR, $PRODUCT-doc package will not be created"
fi


# Build main package
rpmbuild -bb $RPM_DIR/eiffelstudio.spec


# Move all generated .rpm files to current directory
find $RPM_DIR/RPMS -type f | xargs mv -t ../


# Reset RPM macro file
rm $RPMMACRO
if test -f /tmp/.rpmmacros$$; then
    move /tmp/.rpmmacros$$ $RPMMACRO
fi


# Clean up RPM directory
rm $RPM_DIR/eiffelstudio.spec
fullrd $RPM_DIR/eiffelstudio
fullrd $RPM_DIR/tmp
fullrd $RPM_DIR/RPMS/*

