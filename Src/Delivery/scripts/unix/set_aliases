#!/bin/sh

if [ ! "$STUDIO_VERSION_MAJOR_MINOR" ]; then
	STUDIO_VERSION_MAJOR_MINOR=23.06
fi

if [ -z "$WORKINGDIR" ]; then
	WORKINGDIR=`pwd`
fi
if [ -z "$INIT_DIR" ]; then
	INIT_DIR=$WORKINGDIR
fi

if [ -f "$INIT_DIR/set_custom_aliases" ]; then
	. "$INIT_DIR/set_custom_aliases"
fi

# File in which the status of the installation generation is logged
INSTALL_LOG=$WORKINGDIR/install.log
# File in which the status of the installation compilation is logged
COMPILE_LOG=$WORKINGDIR/compile.log
# Where the new delivery is set up. Warning: this directory is erased!
INSTALL_DIR=$WORKINGDIR/Eiffel_$STUDIO_VERSION_MAJOR_MINOR
# Where the final delivery is set up (local machine). Warning: directory erased too!
FINAL_INSTALL_DIR=$WORKINGDIR/Eiffel_$STUDIO_VERSION_MAJOR_MINOR
# Where documentation will be generated
DOCUMENT_DIR=$WORKINGDIR
# Where all.tar.bz2 files should be stored
EXPORT_DIR=$WORKINGDIR/PorterPackage
# What tag to use to CVS export everything
if [ ! "$DEFAULT_ISE_SVN" ]; then
	DEFAULT_ISE_SVN=svn://$LOGNAME@svn.ise/ise_svn/trunk
fi
if [ ! "$DEFAULT_ORIGO_SVN_ROOT" ]; then
	DEFAULT_ORIGO_SVN_ROOT=https://svn.eiffel.com/eiffelstudio
fi
if [ ! "$DEFAULT_ORIGO_SVN" ]; then
	DEFAULT_ORIGO_SVN=$DEFAULT_ORIGO_SVN_ROOT/trunk
fi
# This section is commented out be cause it won't work on non-bash shell
# we use the other one while waiting for a better solution
#if [ ! "$ORIGO_SVN_REVISION" ]; then
#	mkdir -p /tmp/eiffelstudio_revision
#	svn checkout --config-option config:miscellany:use-commit-times=yes $DEFAULT_ORIGO_SVN_ROOT/revision /tmp/eiffelstudio_revision
#	ORIGO_SVN_REVISION=$(svnversion /tmp/eiffelstudio_revision)
#fi
if [ ! "$ORIGO_SVN_REVISION" ]; then
	ORIGO_SVN_REVISION=HEAD
fi

# Used to create the revision on the package.
FILE_SVN_REVISION=""
# Version of GTK to build "ec"
#GTK_DIR=gtk2
GTK_DIR=gtk3

if [ ! "$INCLUDE_GTK3" ]; then
	if [ "$GTK_DIR" = "gtk3" ]; then
		#By default include GTK3
		INCLUDE_GTK3="True"
	fi
fi
if [ ! "$INCLUDE_GTK3" = "True" ]; then
	unset INCLUDE_GTK3
fi

if [ ! "$INCLUDE_GTK2" ]; then
	if [ "$GTK_DIR" = "gtk2" ]; then
		#By default include GTK2
		INCLUDE_GTK2="True"
	fi
fi
if [ ! "$INCLUDE_GTK2" = "True" ]; then
	unset INCLUDE_GTK2
fi

if [ ! "$INCLUDE_GUI" ]; then
	INCLUDE_GUI="True"
fi

case "$ISE_PLATFORM" in
	*-x86)
		# on x86, no support for GTK >= 3.22
		unset INCLUDE_GTK3
		if [ -z "$INCLUDE_GTK2" ]; then
			unset INCLUDE_GUI
		fi
		;;
	*)
		;;
esac

# Update configuration
. $INIT_DIR/update_config

# Used only when making PorterPackage to checkout the sources
NEW_EIFFEL_SRC=$WORKINGDIR/tmpdev
NEW_ISE_SRC=$NEW_EIFFEL_SRC
NEW_ISE_LIBRARY=$NEW_EIFFEL_SRC
# The following directory is going to be used to compile the compiler
FINALIZATION_DIR=$WORKINGDIR/finalized

echo > $INSTALL_LOG

# OK, this is all for user-defined data. Leave me alone now, I'll do my magic :)

# File management
# Copy all files
copy ()
{
cp -r $*
}
move ()
{
mv $*
}
md ()
{
mkdir -p $*
}
# Compress a file and move it to $EXPORT_DIR
tgz ()
{
pax -w -f $1.tar $1
bzip2 $1.tar
}
# Completely remove a directory
fullrd ()
{
rm -rf $*
}
# Remove a file
fullrf ()
{
rm -f $*
}
# Retrieve a file from the old delivery and put it in the new one
quick_move ()
{
if [ $# -eq 1 ]; then
copy $ISE_EIFFEL/$1 $INSTALL_DIR/$1 >> $INSTALL_LOG
else
copy $1 $ISE_EIFFEL/$2 $INSTALL_DIR/$2 >> $INSTALL_LOG
fi
}
# Create a directory if it doesn't exist already
safe_md ()
{
if [ ! -d $1 ]; then
if [ -f $1 ]; then
fullrf $1
fi
md $1
fi
}
# Save current path into TMP_PATH
save_path ()
{
TMP_PATH=`pwd`
}

# Helpers for the script
# Give some info on what's happening, both in the log and on the screen
remtrace ()
{
echo $*
echo -------------------------------- >> $INSTALL_LOG
echo $* >> $INSTALL_LOG
}
# Clean exit
TERMINATE ()
{
echo Exiting...
remtrace final time:
remtrace `date +%c`
PATH=$OLD_PATH
cd $INIT_DIR
}
# Exit with an error
CANCEL()
{
TERMINATE
exit 1
}

# SVN Commands: checkout, export
co ()
{
until  svn checkout --config-option config:miscellany:use-commit-times=yes $* >> $INSTALL_LOG; do echo "svn checkout .. $* failed, retrying..."; done
}
exprt ()
{
until  svn --force export --config-option config:miscellany:use-commit-times=yes $* >> $INSTALL_LOG; do echo "svn export .. $* failed, retrying..."; done
}

# C Compilation
default_make ()
{
save_path
$INSTALL_DIR/studio/spec/$ISE_PLATFORM/bin/finish_freezing -library >> $COMPILE_LOG
cd $TMP_PATH
}
all_makes ()
{
save_path
# What should we do??? Compile for all platforms???
cd $TMP_PATH
}
#On MacOS X you need to run `ranlib' each time you move a library.
mac_ranlib ()
{
if [ ! -d $1 ]; then
if echo "$ISE_PLATFORM" | grep "macosx" >/dev/null 2>&1; then ranlib $1; fi
fi
}
# Eiffel Compilation
# Remove a project from the current directory, if any
clean_project ()
{
if [ -d EIFGENs ]; then fullrd EIFGENs; fi
}
# Create a portable compressed archive of the C code. Parameter: name of the compressed archive file
tgz_ccode ()
{
if [ -d EIFGENs/$1/F_code ]; then
cd EIFGENs/$1
# To workaround the eventual usage of ECF_CONFIG_PATH, let us replace the full path with relative path from $EIFFEL_SRC
find F_code -type f -name 'Makefile.SH' -exec sed -i 's+'$EIFFEL_SRC'+\\\$(EIFFEL_SRC)+g' {} \; || echo sed was not found
pax -w -f F_code.tar F_code >> $INSTALL_LOG
bzip2 F_code.tar
mv F_code.tar.bz2 ../../$2
cd ../..
fi
}
# Unzip the F_code of $1, compile it, clean up
untgz_ccode ()
{
if [ -d F_code ]; then
	fullrd F_code
fi
if [ ! -f $1.tar.bz2 ]; then
	remtrace "Couldnt find $1.tar.bz2"
	CANCEL
fi
bunzip2 -c $1.tar.bz2 | tar -xf -
if [ ! -d F_code ]; then
	remtrace "No F_code for $1"
	CANCEL
fi
cd F_code
$INSTALL_DIR/studio/spec/$ISE_PLATFORM/bin/finish_freezing -silent >> $COMPILE_LOG
if [ ! -f $1 ]; then
	remtrace Couldnt generate $1
	# Do not cancel if requested by providing a 2nd argument.
	if [ -z "$2" ]; then
		CANCEL
	fi
fi
mv $1 ..
cd ..
fullrf $1.tar
fullrd F_code
}
# Finalize at the Eiffel level only
finalize ()
{
$ISE_EIFFEL/studio/spec/$ISE_PLATFORM/bin/ecb -batch -finalize -config $1 -target $2 >> $INSTALL_LOG 2>&1
if [ ! -f EIFGENs/$2/F_code/Makefile.SH ]; then
echo "Couldn't finalize $1"
CANCEL
fi
}

# Tests....
testpar ()
{
	ls $*
}

