#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 13 "parser.y"
#include "eiffel_c.h"

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2

#line 37 "parser.y"
typedef union {
	char *node;
	int32  value;
	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
#line 40 "y.tab.c"
#define TE_DOTDOT 257
#define TE_IMPLIES 258
#define TE_OR 259
#define TE_XOR 260
#define TE_AND 261
#define TE_NE 262
#define TE_EQ 263
#define TE_LT 264
#define TE_GT 265
#define TE_LE 266
#define TE_GE 267
#define TE_PLUS 268
#define TE_MINUS 269
#define TE_STAR 270
#define TE_SLASH 271
#define TE_MOD 272
#define TE_DIV 273
#define TE_POWER 274
#define TE_FREE 275
#define TE_NOT 276
#define TE_STRIP 277
#define TE_OLD 278
#define TE_DOT 279
#define TE_LPARAN 280
#define TE_ALIAS 281
#define TE_ALL 282
#define TE_INTEGER 283
#define TE_CHAR 284
#define TE_REAL 285
#define TE_STRING 286
#define TE_ID 287
#define TE_A_BIT 288
#define TE_BANG 289
#define TE_BIT 290
#define TE_SEMICOLON 291
#define TE_COLON 292
#define TE_COMMA 293
#define TE_CREATION 294
#define TE_LARRAY 295
#define TE_RARRAY 296
#define TE_RPARAN 297
#define TE_LCURLY 298
#define TE_RCURLY 299
#define TE_LSQURE 300
#define TE_RSQURE 301
#define TE_CONSTRAIN 302
#define TE_FALSE 303
#define TE_TRUE 304
#define TE_ACCEPT 305
#define TE_ADDRESS 306
#define TE_AS 307
#define TE_ASSIGN 308
#define TE_CHECK 309
#define TE_CLASS 310
#define TE_CURRENT 311
#define TE_DEBUG 312
#define TE_DEFERRED 313
#define TE_DO 314
#define TE_ELSE 315
#define TE_ELSEIF 316
#define TE_END 317
#define TE_ENSURE 318
#define TE_EXPANDED 319
#define TE_EXPORT 320
#define TE_EXTERNAL 321
#define TE_FEATURE 322
#define TE_FROM 323
#define TE_FROZEN 324
#define TE_IF 325
#define TE_INDEXING 326
#define TE_IN_END 327
#define TE_INFIX 328
#define TE_INHERIT 329
#define TE_INSPECT 330
#define TE_INVARIANT 331
#define TE_IS 332
#define TE_LIKE 333
#define TE_LOCAL 334
#define TE_LOOP 335
#define TE_OBSOLETE 336
#define TE_ONCE 337
#define TE_PREFIX 338
#define TE_REDEFINE 339
#define TE_RENAME 340
#define TE_REQUIRE 341
#define TE_RESCUE 342
#define TE_RESULT 343
#define TE_RETRY 344
#define TE_SELECT 345
#define TE_SEPARATE 346
#define TE_THEN 347
#define TE_UNDEFINE 348
#define TE_UNIQUE 349
#define TE_UNTIL 350
#define TE_VARIANT 351
#define TE_WHEN 352
#define EIF_ERROR2 353
#define EIF_ERROR3 354
#define EIF_ERROR4 355
#define EIF_ERROR5 356
#define EIF_ERROR6 357
#define EIF_ERROR7 358
#define YYERRCODE 256
short yylhs[] = {                                        -1,
  107,    0,   96,    1,  109,    1,    1,  108,  108,  112,
    3,    2,    2,  111,  111,    5,    5,  106,  106,  106,
  106,   14,   14,   74,  113,   74,   16,   16,  114,  116,
   15,   17,   17,   88,  118,   88,  117,  117,  115,  115,
  110,  110,  119,  120,   18,  103,  103,   99,  121,  121,
  100,  100,  100,  101,  102,   97,   98,   19,  105,  105,
  104,  104,  104,   20,  123,   20,   20,  122,  122,   21,
   21,   21,   45,   45,   22,   22,  125,   22,  124,  124,
   75,   23,  127,   23,   23,  126,  126,   24,   25,  129,
   25,  128,  128,   26,   26,  130,   26,   27,   27,  131,
   27,   28,   28,  132,   28,   29,   29,  134,   29,  133,
  133,  136,  137,   76,  135,  135,  138,  138,   30,   30,
  139,   31,   32,   32,   32,   33,   34,   35,   35,  141,
   36,  142,   36,   37,  143,   37,  140,  140,  145,  145,
  144,  144,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   38,  146,   38,  147,   38,   40,  148,   40,
  149,   40,  151,   79,  150,  150,  152,  152,   41,   41,
   41,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   43,   43,   44,  154,   44,  153,  153,   46,  156,
   46,  155,  155,  155,  157,   47,   48,   48,  158,  159,
   49,   50,  161,   50,  160,  160,  162,   51,   94,  163,
   94,   52,  164,   52,  166,  167,   54,  165,  165,  169,
  170,  171,   53,  168,  168,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,  172,  173,  174,   55,   56,
   56,   91,  175,   91,   57,   57,   57,  176,   58,   59,
   59,  178,   59,  177,  177,   60,   61,  179,   61,   62,
   62,   63,   63,   64,  181,   64,  180,  180,   65,  182,
   65,   65,   66,   67,   67,   68,   68,   69,   69,   77,
   77,   77,   77,   77,   78,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,  183,   70,   71,   71,   71,   71,
   71,   92,   84,   84,   84,   84,   84,   84,   84,   82,
   81,   83,   93,   85,   85,   89,   89,   80,   90,   86,
   86,  185,   86,  184,  184,  186,  186,  187,  187,    4,
    6,    6,    6,    6,    6,    6,   87,   87,   87,   87,
   87,   87,    7,    7,    8,    9,   95,   95,   95,   10,
   11,   13,   13,   12,  188,   72,
};
short yylen[] = {                                         2,
    0,   12,    1,    0,    0,    3,    1,    1,    3,    0,
    3,    0,    2,    1,    3,    1,    1,    0,    1,    1,
    1,    0,    2,    0,    0,    2,    1,    2,    0,    0,
    5,    0,    1,    2,    0,    4,    1,    3,    0,    2,
    1,    0,    0,    0,    5,    1,    3,    2,    0,    1,
    1,    1,    1,    2,    2,    1,    1,    3,    0,    2,
    1,    1,    1,    0,    0,    3,    2,    2,    3,    2,
    3,    8,    0,    1,    0,    1,    0,    3,    1,    3,
    3,    0,    0,    3,    2,    2,    3,    2,    1,    0,
    2,    1,    3,    0,    1,    0,    3,    0,    1,    0,
    3,    0,    1,    0,    3,    0,    2,    0,    4,    0,
    2,    0,    0,    6,    1,    3,    0,    1,    0,    2,
    0,    8,    1,    1,    1,    3,    1,    0,    2,    0,
    3,    0,    3,    0,    0,    3,    3,    1,    2,    0,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    0,    3,    0,    4,    0,    0,    3,
    0,    4,    0,    2,    0,    1,    2,    3,    1,    3,
    2,    1,    2,    2,    3,    2,    3,    2,    2,    2,
    2,    1,    2,    2,    0,    4,    1,    3,    0,    0,
    4,    0,    1,    3,    0,    3,    0,    2,    0,    0,
    9,    0,    0,    2,    1,    2,    0,    5,    0,    0,
    3,    0,    0,    3,    0,    0,    7,    0,    2,    0,
    0,    0,    7,    1,    3,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    0,    0,    0,   12,    0,
    2,    0,    0,    3,    0,    4,    2,    0,    5,    0,
    2,    0,    4,    1,    3,    1,    0,    0,    3,    3,
    3,    3,    3,    0,    0,    2,    1,    2,    1,    0,
    4,    2,    5,    0,    1,    1,    1,    0,    3,    1,
    1,    1,    1,    1,    3,    1,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    4,    3,    4,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
    2,    2,    2,    2,    0,    5,    1,    2,    4,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    3,    3,    5,    1,    1,    3,    3,    2,    2,    0,
    2,    0,    4,    1,    3,    1,    3,    0,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    0,    1,    1,    2,
    1,    1,    1,    1,    0,    4,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,   19,   20,   21,    1,  350,   10,
    8,    0,    0,    0,    0,   13,   41,    0,    0,  368,
  369,  365,  372,  371,  363,  364,  373,   16,   14,   17,
  351,  352,  353,  354,  355,  356,    0,    0,    9,    3,
    0,  366,  370,    0,  190,    0,   15,    0,    0,    0,
  195,  193,    0,   23,    0,    0,    0,    0,  191,   67,
    0,    0,    0,    0,  196,  194,    0,    0,    0,    0,
    0,    0,  267,    0,  198,    0,   68,    0,   74,    0,
    0,  243,    0,   29,   27,    0,    0,  270,    0,  268,
  183,  184,    0,   71,    0,    0,   69,  163,    2,    0,
   28,   34,    0,    0,    0,    0,    0,    0,  187,    0,
    0,    0,    0,    0,  244,    0,   30,   33,   37,    0,
    0,    0,   51,   92,   52,   53,    0,  179,  178,    0,
    0,  181,  180,    0,  173,    0,  186,   79,    0,    0,
   85,    0,    0,    0,    0,    0,  322,    0,  315,    0,
    0,  359,  360,  375,    0,    0,    0,  357,  358,  361,
  362,    0,    0,  287,    0,  324,  323,  325,  288,  286,
    0,  329,  164,    0,   39,    0,   36,   56,   54,   57,
   55,    0,  175,  177,  188,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  311,  310,  312,    0,  313,    0,
    0,    0,    0,    0,    0,  338,  167,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  314,    0,    0,   38,
   93,   81,   80,   86,   89,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  330,  334,
    0,  331,  341,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  309,  332,  168,   40,    0,    0,
   87,    0,    0,   72,  115,    0,    0,    0,    0,  376,
  339,    0,    0,    0,  344,    0,    0,    0,   50,   46,
    0,    0,    0,    0,  316,  333,    0,  337,    0,    0,
  320,  321,  318,    0,  343,    0,    0,   48,  116,    0,
  345,   47,    0,    0,    0,  319,  107,  110,   45,    0,
    0,    0,  120,    0,   58,  109,  111,    0,   62,   61,
  121,   63,   60,    0,    0,    0,    0,    0,    0,  156,
  163,  135,    0,    0,  163,  155,  110,  125,  130,    0,
  132,    0,  124,  123,  114,  157,    0,  140,  374,  127,
    0,  140,    0,    0,  131,    0,    0,    0,  126,  133,
  161,  163,  258,    0,    0,    0,  163,    0,    0,  236,
    0,    0,    0,  256,    0,  140,  147,  148,  149,  150,
  152,  145,  146,  143,  144,  151,    0,  281,  283,  282,
  284,  139,  129,  163,  160,  140,  122,    0,  275,    0,
    0,    0,  248,  140,    0,    0,    0,    0,    0,    0,
    0,  162,  259,    0,    0,  285,  251,    0,  140,  237,
  199,    0,    0,    0,    0,    0,  277,  276,    0,  254,
    0,    0,    0,  140,  220,    0,  216,    0,  273,    0,
  253,  249,  163,    0,  200,    0,  219,    0,    0,  255,
  241,    0,    0,    0,    0,    0,    0,  224,    0,  210,
    0,  279,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  140,  217,    0,    0,  213,    0,    0,  205,
    0,  232,  234,  231,  235,  233,  230,  229,  225,  222,
  211,    0,  238,  140,  201,    0,  206,  140,  140,  214,
  207,  223,    0,  140,  239,  208,
};
short yydgoto[] = {                                       2,
    3,   10,   11,  194,   29,   30,  158,  159,   33,   34,
  160,  370,  161,   50,   85,   86,   88,  278,  324,   56,
   67,   96,  114,  188,  236,  144,  193,  242,  325,  331,
  342,  362,  363,  371,  379,  364,  353,  348,  396,  374,
  162,  109,   75,   79,   80,   46,   52,   65,  397,  486,
  500,  498,  456,  398,  399,  464,  473,  400,  423,  401,
  384,  402,  403,   62,   73,  404,  420,  449,  459,  163,
  295,  164,  478,   70,  138,  337,  405,  406,  115,  165,
  166,  167,  168,  169,  249,  206,  170,  189,  250,  251,
   83,  171,  172,  481,  130,  123,  179,  181,  300,  124,
  125,  126,  301,  343,  335,    8,   14,   13,    4,   18,
   38,   15,   71,  100,  229,  175,  120,  103,  279,  317,
  302,   69,   61,  140,  112,  190,  142,  127,  237,  191,
  240,  283,  332,  328,  286,  338,  346,  287,  345,  375,
  368,  372,  357,  376,  377,  351,  355,  382,  414,  173,
  116,  174,  111,   93,   53,   48,   57,  454,  474,  501,
  487,  524,  493,  514,  457,  442,  468,  479,  466,  492,
  518,  424,  453,  519,   98,  439,  451,  438,  416,   74,
   63,  104,  198,  296,  254,  246,  247,  201,
};
short yysindex[] = {                                   -287,
    0,    0, -162, -238,    0,    0,    0,    0,    0,    0,
    0, -210, -139, -215,   25,    0,    0, -238,  -97,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -49,  -21,    0,    0,
   19,    0,    0,   25,    0,  -44,    0,   84, -276,    1,
    0,    0, -185,    0, -139,    0,   72,   84,    0,    0,
  -97,    0,   86,  -97,    0,    0, -139,   83,  -97,   71,
  102,  135,    0,   86,    0,   83,    0,  137,    0, -130,
 -139,    0,  123,    0,    0,  102,  145,    0,    0,    0,
    0,    0, -263,    0,    0,  126,    0,    0,    0,  135,
    0,    0, -238, -173,   53,  -97, -209,  -97,    0,   83,
 -143, -173, -139,  103,    0, 3160,    0,    0,    0,  -30,
 -276, -276,    0,    0,    0,    0,  154,    0,    0,  167,
   83,    0,    0,   83,    0, -263,    0,    0,  150,  168,
    0,  135,    0,  130, 3160, 3160,    0, 3160,    0, 3160,
 3160,    0,    0,    0,  197,  202,  -74,    0,    0,    0,
    0, -139, 4275,    0,  203,    0,    0,    0,    0,    0,
 3160,    0,    0, 3160,    0, -238,    0,    0,    0,    0,
    0, -173,    0,    0,    0, -173, -173, -139,  207,  135,
 -173,    0,  147,  210,    0,    0,    0,  211,    0, 4199,
 3160, -238, -238,  196, 3160,    0,    0, 3160, 3014, 3160,
 3036, 3160, 3160, 3160, 3160, 3160, 3160, 3160, 3160, 3160,
 3160, 3160, 3160, 3160, 3160, -238,    0, -139,    0,    0,
    0,    0,    0,    0,    0,    0, -173, -139,  154, -173,
    0,  178, -238,  243, 4275,  227,  235,  210,    0,    0,
  254,    0,    0, 3058, 4275, 4238, 3160, 4295, 4310, 3160,
 4324, 2231, 2231, 2231, 2231, 2231, 2231, 1739, 1739,  -80,
  -80,  -80,  -80,  -80,    0,    0,    0,    0,  217,  154,
    0,  154, -173,    0,    0,  242,  246, -238, 3160,    0,
    0, -238, -259, 4275,    0,  -62, 4295, 4324,    0,    0,
  255, -173,  154, -238,    0,    0, 4275,    0,  254, 3160,
    0,    0,    0, 3058,    0,  217,  269,    0,    0, 4217,
    0,    0,  264, -139,  275,    0,    0,    0,    0, -263,
  236,  272,    0,  107,    0,    0,    0, -238,    0,    0,
    0,    0,    0,  242,  232,  282,  265,  247, -263,    0,
    0,    0,   -6, -139,    0,    0,    0,    0,    0,  296,
    0,  268,    0,    0,    0,    0,    0,    0,    0,    0,
  306,    0,  249,  252,    0, 3956,  298,  296,    0,    0,
    0,    0,    0,  273, 3160, -263,    0,  197,  315,    0,
 3160, 3160, -261,    0, -254,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  203,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4257,    0,  308,
  303,  325,    0,    0, 3219, 4275, 3160, 3160, 3160, 3160,
  298,    0,    0,  243, -268,    0,    0,  296,    0,    0,
    0,  279, 4275, 4275, 4275, 4275,    0,    0,  354,    0,
  -31,  318,  310,    0,    0,  279,    0, -238,    0,  296,
    0,    0,    0,  288,    0,   48,    0,  328,  210,    0,
    0, 3160,  297,    0,  391,  392,  404,    0,  374,    0,
  352,    0,    5, 4275, 3160,  358,  364,   48, -255,   53,
   48,  327,    0,    0, 3160, 3531,    0,  365, 3160,    0,
  364,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4275,    0,    0,    0, 3260,    0,    0,    0,    0,
    0,    0,  369,    0,    0,    0,
};
short yyrindex[] = {                                    -42,
 3305,    0,  371, -197,    0,    0,    0,    0,    0,    0,
    0,    0, 3317,    0,   18,    0,    0, -197,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3268,    0,    0,
 3034,    0,    0,   18,    0,  248,    0, -140,    0,  229,
    0,    0,    0,    0, -102,  329,   17,    0,    0,    0,
    0, -300,    0,    0,    0,    0,  148,  929,  346,  370,
    0, 2370,    0,   47,    0,  128,    0, -114,    0,  110,
  148,    0,    0,    0,    0,   50,  402,    0, 2938,    0,
    0,    0,    0,    0, -131,  422,    0,    0,    0, 3433,
    0,    0,    0,    0,  407,    0,    0,    0,    0, 4014,
    0,    0,   67,   75,    0,  146,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  348,    0,    0,    0,
 4066,    0,    0, 4118,    0,    0,    0,    0,    0,  403,
    0,    0,   51, -204,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  241,  341, 2690,    0,    0,    0,
    0, 2853, 3355,    0,  441,    0,    0,    0,    0,    0,
    0,    0,    0, 4027,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100, -169,  429,
    0, -271,  377,  541,    0,    0,    0,    0,    0,    0,
  399,    0,    0, 3119, 2841,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2853, 3492,    0,
    0,    0,    0,    0,    0,    0,    0,  100,   77,    0,
 -262,    0,  400,  641,  -15,  426,    0,  541,    0,    0,
  741,    0,    0,    0, 3431, 2768,    0, 2508, 2426,    0,
 2236, 1641, 1741, 1841, 1941, 2041, 2141, 1441, 1541,  941,
 1041, 1141, 1241, 1341,    0,    0,    0,    0, -145,  -75,
    0, -170,    0,    0,    0,  434,    0,    0,    0,    0,
    0,    0,    0,   80,    0,    0, 2590, 2331,    0,    0,
 3178,    0,  379,    0,    0,    0,   43,    0,  841,    0,
    0,    0,    0,    0,    0, -145, 2697,    0,    0,    0,
    0,    0,  446, 3995, 3362,    0,    0,    0,    0,    0,
 3408,  448,    0, 1626,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  449,  -39,    0, 2931,  226,    0,    0,
    0,    0,    0, 1376,    0,    0,    0,    0,    0,    0,
    0, -196,    0,    0,    0,    0,  -54,    0,    0,    0,
 -117,    0, 2953,  423,    0,    0, 3850,    0,    0,    0,
    0,    0,    0,    0,    0,  454,    0,    0, 3252,    0,
    0,    0,    0,    0, 3528,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  461,    0,    0,    0, -302,    0,    0,    0,    0,
 3896,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   88, 3620, 3666, 3712, 3758,    0,    0, 3804,    0,
    0,    0,   68,    0,    0,   88,    0,    0,    0,    0,
    0,    0,    0,  410,    0,  407,    0,  432, 3941,    0,
    0,    0,    0,  156, -251, -230, -199,    0,  416,    0,
    0,    0,   87,  415,    0,  452,    0,  407,    0,  407,
  407,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  430,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    0,    0,  755,   -4,  735,  447,  -10,  -14, -103,    0,
   -9, -298,  -11,  453,  696,    0,  686,    0,    0,    0,
  720,    0,    0,  600,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  620, -128,    0,   33,    0,    0,  737,    0,    0,    0,
  295,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  723,    0,    0,    0,    0,  -86,
  507,    0,  331,    0,  636,    0,    0,    0, -314,  455,
  457,  459,  463,    0, -183, -239,    0,   91,  548,  549,
    0,  -18,  466,    0,   -8,  -16,    0,    0,  527,  -89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -179,    0,    0,
    0,    0,  489,    0,  509,    0,    0,    0,    0, -228,
    0,    0,    0,    0,  464,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  393,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4599
short yytable[] = {                                      12,
   32,  129,   41,   36,   31,   35,   37,  185,  291,   23,
   28,  239,  215,   12,  215,  100,   24,  203,    9,  252,
  310,   25,  139,   40,  104,  204,  105,   40,   22,   32,
   24,    9,   36,   31,   35,   37,  356,   54,    1,   28,
  366,  228,  276,  427,   68,   99,  428,   76,    9,  215,
  429,  311,   68,  430,  103,  106,  100,  280,  195,  196,
  282,  197,  227,  199,  200,  104,  100,  415,  121,  107,
   12,   12,  421,   99,  447,  104,  110,    9,  122,  413,
   27,   16,  108,  312,  227,   12,   12,   12,   12,  131,
   12,  134,  231,  226,   19,  228,  232,  139,  119,  432,
  128,  132,  133,  303,  306,   12,   12,   58,   91,  178,
  180,  157,   98,   40,  245,   59,  227,   90,  255,  110,
  158,  256,  258,  259,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  450,
   98,   49,  135,  380,  225,  158,  101,  226,  471,  136,
    5,   17,  192,   60,  121,   77,    6,  137,   90,   12,
  192,  470,   89,  183,  122,   77,  184,  294,   90,  157,
  297,  230,  185,  298,  101,  185,  225,  225,  225,   97,
  225,  225,   49,    7,   65,   76,   94,  433,   76,   40,
  118,   42,   49,  224,  147,  440,   77,  248,  248,  128,
  128,  333,  307,  313,  185,  204,   77,   76,  225,   95,
  452,  141,  318,   76,   42,   91,   76,  205,  185,   42,
  354,  248,   91,  320,  128,  465,  225,  294,   42,  482,
  314,  185,  112,   42,  315,   43,  225,  225,  285,  225,
  225,   91,  225,  225,  225,  225,  225,  225,  225,  225,
  225,  225,  225,  225,  225,  225,  225,  419,  136,  136,
  207,  460,  176,   91,  511,  461,  136,    4,  177,   91,
    4,   44,   91,  153,  153,  225,    4,  346,  225,  225,
  346,  153,  136,  248,  204,  520,  234,  248,  225,  522,
  523,   49,   20,   21,  153,  526,  495,  153,  418,  319,
  367,  225,  367,    4,  425,  426,  358,  359,   22,  197,
   23,    9,   24,  110,  360,   20,   21,  197,   45,   32,
   20,   21,   36,   31,   35,   37,  277,   25,   26,   55,
  361,   22,  110,  285,    9,  347,  281,   96,  347,    9,
  443,  444,  445,  446,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  477,  266,   83,  340,   26,   95,  266,  110,
   51,  395,  317,   64,   20,   21,  317,  266,   96,   72,
   26,   27,   78,   42,  504,  484,  508,  477,   96,   95,
   22,   94,   23,   97,   24,   95,   70,   42,  496,  225,
   70,   82,  218,   70,  218,   42,  225,  225,  512,   25,
   26,   42,  516,   94,   42,   97,   42,  240,  240,   94,
  182,   97,  329,   84,  225,  225,  225,  225,  182,   75,
  448,   70,   87,  204,   42,  204,  340,   92,   42,   99,
   70,   42,   49,  102,   42,  113,  182,   42,   75,   42,
  143,  476,  365,  469,   75,  339,  186,   75,  165,  165,
  187,  475,  165,   27,   42,  225,  165,  483,  192,   42,
  202,  203,  202,  503,  506,  202,  476,  225,   42,  165,
  203,  226,  165,  502,  505,  507,  475,  165,  235,  204,
  243,  241,  253,  225,  284,  165,  165,  225,  326,  326,
  326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
  326,  326,  326,  326,  326,  326,  326,  326,  326,  289,
  326,  288,   64,  326,  326,  326,  326,  326,  326,  326,
  290,  326,  292,  326,  304,  326,  326,  326,  134,  134,
  299,   22,  305,  326,  326,   64,  134,  316,  323,  326,
   64,  326,  326,  326,  326,  326,  326,  326,  326,   64,
  327,  326,  134,  326,   22,  326,  330,  334,  336,   22,
  326,  326,  347,  349,  326,  326,   22,  326,   22,  350,
  352,  369,  326,  326,  326,  373,  378,  326,  412,  417,
  326,  326,  326,  383,  422,  381,  435,  326,  327,  327,
  327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
  327,  327,  327,  327,  327,  327,  327,  327,  327,  436,
  327,  437,  265,  327,  327,  327,  327,  327,  327,  327,
  455,  327,  458,  327,  462,  327,  327,  327,  472,   66,
  463,  271,  480,  327,  327,  264,  485,  488,  489,  327,
  264,  327,  327,  327,  327,  327,  327,  327,  327,  264,
  490,  327,   66,  327,  271,  327,  491,   66,  494,  271,
  327,  327,  497,  510,  327,  327,   66,  327,  271,  499,
   18,  515,  327,  327,  327,  525,  242,  327,   35,  367,
  327,  327,  327,  102,  348,  105,  117,  327,  328,  328,
  328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
  328,  328,  328,  328,  328,  328,  328,  328,  328,   78,
  328,  349,   78,  328,  328,  328,  328,  328,  328,  328,
  118,  328,  108,  328,  112,  328,  328,  328,   82,  257,
  113,   78,  274,  328,  328,   84,  252,   78,  209,  328,
   78,  328,  328,  328,  328,  328,  328,  328,  328,  245,
   82,  328,  221,  328,  247,  328,   82,   84,  212,   82,
  328,  328,   39,   84,  328,  328,   84,  328,   47,  246,
  340,  101,  328,  328,  328,  117,  341,  328,   81,  238,
  328,  328,  328,  228,   66,  517,   90,  328,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  321,  509,  233,  340,  340,  340,  340,  340,  340,  340,
  407,  340,  408,  340,  409,  340,  340,  340,  410,  308,
  309,  411,  322,  340,  340,  367,  344,    0,  467,  340,
    0,  340,  340,  340,  340,  340,  340,  340,  340,  431,
    0,  340,    0,  340,    0,  340,    0,    0,    0,    0,
  340,  340,    0,    0,  340,  340,    0,  340,    0,    0,
    0,    0,  340,  340,  340,    0,    0,  340,    0,    0,
  340,  340,  340,    0,    0,    0,    0,  340,  289,  289,
  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
  289,  289,  289,  289,  289,  289,  289,  289,  289,    0,
  289,    0,    0,  289,  289,  289,  289,  289,  289,  289,
    0,  289,    0,  289,    0,  289,  289,  289,    0,    0,
    0,    0,    0,  289,  289,    0,    0,    0,    0,  289,
    0,  289,  289,  289,  289,  289,  289,  289,  289,    0,
    0,  289,    0,  289,    0,  289,    0,    0,    0,    0,
  289,  289,    0,    0,  289,  289,    0,  289,    0,    0,
    0,    0,  289,  289,  289,    0,    0,  289,    0,    0,
  289,  289,  289,    0,    0,    0,    0,  289,  335,  335,
  335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
  335,  335,  335,  335,  335,  335,  335,  335,  335,    0,
  335,    0,    0,  335,  335,  335,  335,  335,  335,  335,
    0,  335,    0,  335,    0,  335,  335,  335,    0,    0,
    0,    0,    0,  335,  335,    0,    0,    0,    0,  335,
    0,  335,  335,  335,  335,  335,  335,  335,  335,    0,
    0,  335,    0,  335,    0,  335,    0,    0,    0,    0,
  335,  335,    0,    0,  335,  335,    0,  335,    0,    0,
    0,    0,  335,  335,  335,    0,    0,  335,    0,    0,
  335,  335,  335,    0,    0,    0,    0,  335,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
  336,  336,  336,  336,  336,  336,  336,  336,  336,    0,
  336,    0,    0,  336,  336,  336,  336,  336,  336,  336,
    0,  336,    0,  336,    0,  336,  336,  336,    0,    0,
    0,    0,    0,  336,  336,    0,    0,    0,    0,  336,
    0,  336,  336,  336,  336,  336,  336,  336,  336,    0,
    0,  336,    0,  336,    0,  336,    0,    0,    0,    0,
  336,  336,    0,    0,  336,  336,    0,  336,    0,    0,
    0,    0,  336,  336,  336,    0,    0,  336,    0,    0,
  336,  336,  336,    0,    0,    0,    0,  336,  292,  292,
  292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
  292,  292,  292,  292,    0,   73,  292,  292,  292,   73,
  292,    0,   73,  292,  292,  292,  292,  292,  292,  292,
    0,  292,    0,  292,    0,  292,  292,  292,    0,    0,
    0,    0,    0,  292,  292,   73,    0,    0,   73,  292,
   73,  292,  292,  292,  292,  292,  292,  292,  292,   73,
    0,  292,    0,  292,    0,  292,    0,   73,   73,    0,
  292,  292,    0,   73,  292,  292,   73,  292,    0,    0,
    0,    0,  292,  292,  292,    0,    0,  292,    0,    0,
  292,  292,  292,    0,    0,    0,    0,  292,  293,  293,
  293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
  293,  293,  293,  293,    0,    0,  293,  293,  293,    0,
  293,    0,    0,  293,  293,  293,  293,  293,  293,  293,
    0,  293,    0,  293,    0,  293,  293,  293,    0,    0,
    0,    0,    0,  293,  293,    0,    0,    0,    0,  293,
    0,  293,  293,  293,  293,  293,  293,  293,  293,    0,
    0,  293,    0,  293,    0,  293,    0,    0,    0,    0,
  293,  293,    0,    0,  293,  293,    0,  293,    0,    0,
    0,    0,  293,  293,  293,    0,    0,  293,    0,    0,
  293,  293,  293,    0,    0,    0,    0,  293,  294,  294,
  294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
  294,  294,  294,  294,    0,    0,  294,  294,  294,    0,
  294,    0,    0,  294,  294,  294,  294,  294,  294,  294,
    0,  294,    0,  294,    0,  294,  294,  294,    0,    0,
    0,    0,    0,  294,  294,    0,    0,    0,    0,  294,
    0,  294,  294,  294,  294,  294,  294,  294,  294,    0,
    0,  294,    0,  294,    0,  294,    0,    0,    0,    0,
  294,  294,    0,    0,  294,  294,    0,  294,    0,    0,
    0,    0,  294,  294,  294,    0,    0,  294,    0,    0,
  294,  294,  294,    0,    0,    0,    0,  294,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  295,  295,    0,    0,  295,  295,  295,    0,
  295,    0,    0,  295,  295,  295,  295,  295,  295,  295,
    0,  295,    0,  295,    0,  295,  295,  295,    0,    0,
    0,    0,    0,  295,  295,    0,    0,    0,    0,  295,
    0,  295,  295,  295,  295,  295,  295,  295,  295,    0,
    0,  295,    0,  295,    0,  295,    0,    0,    0,    0,
  295,  295,    0,    0,  295,  295,    0,  295,    0,    0,
    0,    0,  295,  295,  295,    0,    0,  295,    0,    0,
  295,  295,  295,    0,    0,    0,    0,  295,  296,  296,
  296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
  296,  296,  296,  296,    0,    0,  296,  296,  296,    0,
  296,    0,    0,  296,  296,  296,  296,  296,  296,  296,
    0,  296,    0,  296,    0,  296,  296,  296,    0,    0,
    0,    0,    0,  296,  296,    0,    0,    0,    0,  296,
    0,  296,  296,  296,  296,  296,  296,  296,  296,    0,
    0,  296,   42,  296,    0,  296,    0,    0,    0,    0,
  296,  296,   42,    0,  296,  296,    0,  296,    0,    0,
    0,    0,  296,  296,  296,    0,    0,  296,   42,   42,
  296,  296,  296,    0,    0,    0,   42,  296,  290,  290,
  290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
    0,    0,   42,    0,    0,    0,  290,  290,  290,    0,
  290,    0,    0,  290,  290,  290,  290,  290,  290,  290,
    0,  290,    0,  290,    0,  290,  290,  290,    0,    0,
    0,    0,    0,  290,  290,    0,    0,    0,    0,  290,
    0,  290,  290,  290,  290,  290,  290,  290,  290,    0,
    0,  290,    0,  290,    0,  290,    0,    0,    0,    0,
  290,  290,    0,    0,  290,  290,    0,  290,    0,    0,
    0,    0,  290,  290,  290,    0,    0,  290,    0,    0,
  290,  290,  290,    0,    0,    0,    0,  290,  291,  291,
  291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
    0,    0,    0,    0,    0,    0,  291,  291,  291,    0,
  291,    0,    0,  291,  291,  291,  291,  291,  291,  291,
    0,  291,    0,  291,    0,  291,  291,  291,    0,    0,
    0,    0,    0,  291,  291,    0,    0,    0,    0,  291,
    0,  291,  291,  291,  291,  291,  291,  291,  291,    0,
    0,  291,    0,  291,    0,  291,    0,    0,    0,    0,
  291,  291,    0,    0,  291,  291,    0,  291,    0,    0,
    0,    0,  291,  291,  291,    0,    0,  291,    0,    0,
  291,  291,  291,    0,    0,    0,    0,  291,  308,  308,
  308,  308,  308,  308,  308,  308,  308,  308,  367,    0,
  367,    0,    0,    0,    0,    0,  308,  308,  308,    0,
  308,    0,    0,  308,  308,  308,  308,  308,  308,  308,
    0,  308,    0,  308,    0,  308,  308,  308,   22,   22,
    0,    0,    0,  308,  308,    0,   22,    0,    0,  308,
    0,  308,  308,  308,  308,  308,  308,  308,  308,   22,
    0,  308,   22,  308,    0,  308,   22,    0,    0,    0,
  308,  308,    0,    0,  308,  308,    0,  308,    0,    0,
    0,    0,  308,  308,  308,    0,    0,  308,    0,    0,
  308,  308,  308,    0,    0,    0,    0,  308,  307,  307,
  307,  307,  307,  307,  307,  307,  307,  307,  220,  221,
  222,  223,  224,  147,    0,    0,  307,  307,  307,    0,
  307,    0,    0,  307,  307,  307,  307,  307,  307,  307,
    0,  307,    0,  307,    0,  307,  307,  307,    0,    0,
    0,    0,    0,  307,  307,    0,    0,    0,    0,  307,
    0,  307,  307,  307,  307,  307,  307,  307,  307,    0,
    0,  307,    0,  307,    0,  307,    0,    0,    0,    0,
  307,  307,    0,    0,  307,  307,    0,  307,    0,    0,
    0,    0,  307,  307,  307,    0,    0,  307,    0,    0,
  307,  307,  307,    0,    0,    0,    0,  307,  306,  306,
  306,  306,  306,  306,  306,  306,  306,  306,    0,    0,
    0,    0,    0,    0,    0,    0,  306,  306,  306,    0,
  306,    0,    0,  306,  306,  306,  306,  306,  306,  306,
    0,  306,    0,  306,    0,  306,  306,  306,    0,    0,
    0,    0,    0,  306,  306,    0,    0,    0,    0,  306,
    0,  306,  306,  306,  306,  306,  306,  306,  306,    0,
    0,  306,    0,  306,    0,  306,    0,    0,    0,    0,
  306,  306,    0,    0,  306,  306,    0,  306,    0,    0,
    0,    0,  306,  306,  306,    0,    0,  306,    0,    0,
  306,  306,  306,    0,    0,    0,    0,  306,  304,  304,
  304,  304,  304,  304,  304,  304,  304,  304,    0,    0,
    0,    0,    0,    0,    0,    0,  304,  304,  304,    0,
  304,    0,    0,  304,  304,  304,  304,  304,  304,  304,
    0,  304,    0,  304,    0,  304,  304,  304,    0,    0,
    0,    0,    0,  304,  304,    0,    0,    0,    0,  304,
    0,  304,  304,  304,  304,  304,  304,  304,  304,    0,
    0,  304,    0,  304,    0,  304,    0,    0,    0,    0,
  304,  304,    0,    0,  304,  304,    0,  304,    0,    0,
    0,    0,  304,  304,  304,    0,    0,  304,    0,    0,
  304,  304,  304,    0,    0,    0,    0,  304,  305,  305,
  305,  305,  305,  305,  305,  305,  305,  305,    0,    0,
    0,    0,    0,    0,    0,    0,  305,  305,  305,    0,
  305,    0,    0,  305,  305,  305,  305,  305,  305,  305,
    0,  305,    0,  305,    0,  305,  305,  305,    0,    0,
    0,    0,    0,  305,  305,    0,    0,    0,    0,  305,
    0,  305,  305,  305,  305,  305,  305,  305,  305,    0,
    0,  305,    0,  305,    0,  305,    0,    0,    0,    0,
  305,  305,    0,    0,  305,  305,    0,  305,    0,    0,
    0,    0,  305,  305,  305,    0,    0,  305,    0,    0,
  305,  305,  305,    0,    0,    0,    0,  305,  303,  303,
  303,  303,  303,  303,  303,  303,  303,  303,    0,    0,
    0,    0,    0,    0,    0,    0,  303,  303,  303,    0,
  303,    0,    0,  303,  303,  303,  303,  303,  303,  303,
    0,  303,    0,  303,    0,  303,  303,  303,    0,    0,
    0,    0,    0,  303,  303,    0,    0,    0,    0,  303,
    0,  303,  303,  303,  303,  303,  303,  303,  303,    0,
    0,  303,    0,  303,    0,  303,    0,    0,    0,    0,
  303,  303,    0,    0,  303,  303,    0,  303,    0,    0,
    0,    0,  303,  303,  303,    0,    0,  303,    0,    0,
  303,  303,  303,  297,  297,  297,  297,  303,  218,  219,
  220,  221,  222,  223,  224,  147,    0,    0,    0,    0,
    0,  297,  297,  297,    0,  297,    0,    0,  297,  297,
  297,  297,  297,  297,  297,    0,  297,    0,  297,    0,
  297,  297,  297,    0,    0,    0,    0,    0,  297,  297,
    0,    0,    0,    0,  297,    0,  297,  297,  297,  297,
  297,  297,  297,  297,    0,    0,  297,    0,  297,    0,
  297,    0,    0,    0,    0,  297,  297,    0,    0,  297,
  297,    0,  297,    0,    0,    0,    0,  297,  297,  297,
    0,    0,  297,    0,    0,  297,  297,  297,  298,  298,
  298,  298,  297,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  298,  298,  298,    0,
  298,    0,    0,  298,  298,  298,  298,  298,  298,  298,
    0,  298,    0,  298,    0,  298,  298,  298,    0,    0,
    0,    0,    0,  298,  298,    0,    0,    0,    0,  298,
    0,  298,  298,  298,  298,  298,  298,  298,  298,    0,
    0,  298,    0,  298,    0,  298,   32,    0,    0,    0,
  298,  298,    0,  269,  298,  298,    0,  298,    0,    0,
    0,    0,  298,  298,  298,    0,    0,  298,    0,    0,
  298,  298,  298,  302,  302,  302,  269,  298,    0,    0,
    0,  269,    0,    0,    0,    0,    0,   32,    0,    0,
  269,  302,  302,  302,    0,  302,    0,   32,  302,  302,
  302,  302,  302,  302,  302,    0,  302,    0,  302,    0,
  302,  302,  302,    0,    0,    0,    0,    0,  302,  302,
    0,    0,    0,    0,  302,    0,  302,  302,  302,  302,
  302,  302,  302,  302,    0,    0,  302,    0,  302,    0,
  302,    0,    0,    0,    0,  302,  302,    0,    0,  302,
  302,    0,  302,    0,    0,  299,  299,  302,  302,  302,
    0,    0,  302,    0,    0,  302,  302,  302,    0,    0,
    0,    0,  302,  299,  299,  299,    0,  299,    0,    0,
  299,  299,  299,  299,  299,  299,  299,    0,  299,    0,
  299,    0,  299,  299,  299,    0,    0,    0,    0,    0,
  299,  299,    0,    0,    0,    0,  299,    0,  299,  299,
  299,  299,  299,  299,  299,  299,    0,    0,  299,    0,
  299,    0,  299,    0,    0,    0,    0,  299,  299,    0,
    0,  299,  299,    0,  299,    0,    0,  300,  300,  299,
  299,  299,    0,    0,  299,    0,    0,  299,  299,  299,
    0,    0,    0,    0,  299,  300,  300,  300,    0,  300,
    0,    0,  300,  300,  300,  300,  300,  300,  300,    0,
  300,    0,  300,    0,  300,  300,  300,    0,    0,    0,
    0,    0,  300,  300,    0,    0,    0,    0,  300,    0,
  300,  300,  300,  300,  300,  300,  300,  300,    0,    0,
  300,    0,  300,    0,  300,    0,    0,    0,    0,  300,
  300,    0,    0,  300,  300,    0,  300,    0,    0,    0,
    0,  300,  300,  300,    0,    0,  300,    0,    0,  300,
  300,  300,    0,    0,    0,    0,  300,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,    0,
    0,    0,  340,  340,  340,  340,  340,  340,    0,    0,
  340,    0,    0,  106,  340,    0,    0,  106,  106,    0,
    0,    0,  340,  340,    0,    0,    0,    0,    0,    0,
  340,    0,  340,  340,    0,    0,  340,    0,    0,    0,
  340,    0,    0,  106,    0,    0,    0,    0,  106,    0,
  106,    0,    0,  340,  106,  301,  340,  106,  106,    0,
    0,  340,  340,    0,  106,    0,    0,    0,    0,  340,
  340,    0,    0,  301,  301,  301,  340,  301,    0,    0,
  301,  301,  301,  301,  301,  301,  301,    0,  301,    0,
  301,    0,  301,  301,  301,    0,    0,    0,    0,    0,
  301,  301,    0,    0,    0,    0,  301,    0,  301,  301,
  301,  301,  301,  301,  301,  301,    0,    0,  301,    0,
  301,    0,  301,    0,    0,    0,    0,  301,  301,    0,
    0,  301,  301,    0,  301,    0,    0,    0,    0,  301,
  301,  301,    0,    0,  301,    0,    0,  301,  301,  301,
   42,   42,    0,    0,  301,    0,    0,   42,   42,   42,
   42,  171,   42,    0,    0,   42,   42,   42,   42,   42,
   42,    0,    0,    0,    0,    0,    0,   42,    0,    0,
    0,    0,    0,  171,  171,   42,   42,  171,    0,    0,
    0,  171,    0,   42,    0,   42,   42,    0,    0,   42,
    0,    0,    0,   42,  171,    0,    0,  171,    0,    0,
    0,    0,  171,    0,    0,    0,   42,    0,    0,   42,
  171,  171,    0,    0,   42,   42,    0,    0,  154,  154,
    0,    0,   42,   42,    0,  154,  154,  154,  154,   42,
  154,    0,    0,  154,  154,  154,  154,  154,  154,    0,
  159,  159,    0,    0,   33,  154,    0,  159,  159,  159,
  159,  272,  159,  154,  154,  159,  159,  159,  159,  159,
  159,  154,    0,  154,  154,    0,    0,  159,    0,    0,
    0,  154,    0,    0,  272,  159,  159,    0,    0,  272,
    0,    0,    0,  159,  154,   33,    0,  154,  272,  159,
    0,    0,    0,  154,    0,   33,    0,    0,    0,    0,
    0,  145,  146,    0,    0,    0,    0,  154,  147,  148,
  149,  150,    0,  151,  159,  159,  152,   22,  153,   23,
    9,   24,    0,  145,  146,    0,    0,    0,  154,  159,
  147,  148,  149,  150,    0,  151,   25,   26,  152,   22,
  153,   23,    9,   24,  155,  145,  146,  189,  257,    0,
  154,    0,  147,  148,  149,  150,    0,  151,   25,   26,
  152,   22,  153,   23,    9,   24,  155,    0,    0,    0,
  189,    0,  154,    0,    0,  189,  156,    0,    0,    0,
   25,   26,  189,  293,  189,    0,    0,    0,  155,  189,
   27,    0,    0,    0,    0,    0,    0,    0,  156,    0,
    0,    0,  260,    0,    0,    0,  342,  342,    0,    0,
    0,    0,   27,  342,  342,  342,  342,    0,  342,    0,
  156,  342,  342,  342,  342,  342,  342,    0,    0,    0,
    0,    0,    0,  342,   27,    0,    0,    0,    0,    0,
    0,  342,  342,    0,  342,    0,    0,  145,  146,  342,
    0,    0,    0,    0,  147,  148,  149,  150,    0,  151,
    0,    0,  152,   22,  153,   23,    9,   24,    0,    0,
    0,    0,    0,    0,  154,    0,    0,   44,    0,    0,
    0,  342,   25,   26,   44,    0,    0,    0,   44,   44,
  155,    0,    0,    0,    0,  342,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
  222,  223,  224,  147,   44,    0,    0,    0,    0,   44,
    0,   44,  156,    0,    0,   44,    0,    0,   44,   44,
    0,    0,    0,    0,    0,   44,   27,  208,  209,  210,
  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
  221,  222,  223,  224,  147,   11,   11,    0,  250,    0,
  250,    0,  250,    0,    0,    0,    0,    0,    0,    0,
   11,   11,   11,   11,   11,   11,    0,    0,   11,    0,
  250,    0,  250,  250,    0,  441,    0,    0,  250,    0,
   11,   11,    5,    5,  250,    0,  250,   11,    0,    0,
   11,  250,    0,    0,   42,   42,   11,    5,    5,    5,
    5,    5,    5,    0,  250,  250,    0,    0,    0,   42,
   42,   42,   42,   42,   42,    0,  521,    5,    5,    0,
    0,    0,    0,   11,    7,    0,    0,    7,    0,   42,
   42,    0,    0,    7,   11,    0,    6,    0,    0,    6,
  169,  169,  169,    0,  169,    6,    0,  169,  169,  169,
  169,  169,  169,    0,    0,  169,    0,    0,  119,  169,
    7,    0,  119,    0,    0,    0,    0,  169,  169,    0,
    0,    5,    6,    0,    0,  169,    0,  169,  169,    0,
    0,  169,    0,   42,    0,  169,    0,    0,  119,    0,
    0,    0,    0,  119,    0,  119,    0,    0,  169,  119,
    0,  169,  119,  119,   59,    0,  169,  169,   59,  119,
    0,    0,    0,    0,  169,  169,  170,  170,  170,    0,
  170,  169,    0,  170,  170,  170,  170,  170,  170,   32,
    0,  170,    0,    0,   59,  170,    0,    0,    0,   59,
    0,   59,    0,  170,  170,   59,    0,    0,   59,    0,
    0,  170,    0,  170,  170,   59,    0,  170,    0,   32,
    0,  170,    0,    0,   32,    0,   32,    0,    0,    0,
   32,    0,    0,   32,  170,    0,    0,  170,    0,    0,
   32,    0,  170,  170,    0,    0,    0,    0,   43,    0,
  170,  170,    0,    0,    0,    0,    0,  170,  208,  209,
  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
  220,  221,  222,  223,  224,  147,  340,    0,   31,    0,
    0,    0,    0,   31,  340,   43,  340,    0,  340,   43,
    0,    0,   31,    0,    0,    0,    0,    0,    0,   43,
    0,    0,    0,    0,    0,    0,  340,    0,  340,  340,
    0,    0,  340,  340,  340,  340,    0,    0,    0,    0,
  340,    0,  340,  280,    0,    0,    0,  340,  340,    0,
  280,    0,  280,    0,  280,  513,    0,    0,    0,  340,
  340,  340,    0,    0,    0,    0,    0,  340,  340,  340,
    0,    0,  280,    0,  280,  280,    0,    0,  280,  280,
  280,  280,    0,    0,    0,    0,  280,    0,  280,  263,
    0,    0,    0,  280,  280,    0,  263,    0,  263,    0,
  263,    0,    0,    0,    0,  280,  280,  280,    0,    0,
    0,    0,    0,  280,  280,  280,    0,    0,  263,    0,
  263,  263,    0,    0,  263,  263,  263,  263,    0,    0,
    0,    0,  263,    0,  263,  261,    0,    0,    0,  263,
  263,    0,  261,    0,  261,    0,  261,    0,    0,    0,
    0,  263,  263,  263,    0,    0,    0,    0,    0,  263,
  263,  263,    0,    0,  261,    0,  261,  261,    0,    0,
  261,  261,  261,  261,    0,    0,    0,    0,  261,    0,
  261,  262,    0,    0,    0,  261,  261,    0,  262,    0,
  262,    0,  262,    0,    0,    0,    0,  261,  261,  261,
    0,    0,    0,    0,    0,  261,  261,  261,    0,    0,
  262,    0,  262,  262,    0,    0,  262,  262,  262,  262,
    0,    0,    0,    0,  262,    0,  262,  260,    0,    0,
    0,  262,  262,    0,  260,    0,  260,    0,  260,    0,
    0,    0,    0,  262,  262,  262,    0,    0,    0,    0,
    0,  262,  262,  262,    0,    0,  260,    0,  260,  260,
    0,    0,  260,  260,  260,  260,    0,    0,    0,    0,
  260,    0,  260,  278,    0,    0,    0,  260,  260,    0,
  278,    0,  278,    0,  278,    0,    0,    0,    0,  260,
  260,  260,    0,    0,    0,    0,    0,  260,  260,  260,
    0,    0,  278,    0,  278,  278,    0,    0,  278,  278,
  278,  278,    0,    0,    0,    0,  278,    0,  278,  142,
    0,    0,    0,  278,  278,    0,  142,    0,  142,    0,
    0,    0,    0,    0,    0,  278,  278,  278,    0,    0,
    0,    0,    0,  278,  278,  278,    0,    0,  142,    0,
  142,  142,    0,    0,  138,  138,  138,  138,    0,    0,
    0,    0,  142,    0,  142,  141,    0,    0,    0,  142,
  138,    0,  141,    0,  141,    0,    0,    0,    0,    0,
    0,  138,  142,  142,    0,    0,    0,    0,    0,  138,
  138,  138,    0,    0,  141,    0,  141,  141,    0,    0,
  137,  137,  137,  137,    0,    0,    0,    0,  141,    0,
  141,    0,    0,    0,    0,  141,  137,  340,    0,  340,
    0,  340,    0,    0,    0,  385,    0,  137,  141,  141,
    0,    0,    9,    0,  386,  137,  137,  137,    0,  340,
    0,  340,  340,    0,    0,  340,  340,  340,  340,    0,
    0,    0,    0,  340,  387,  340,  388,  389,    0,    0,
  340,  340,    0,    0,    0,    0,    0,    0,  390,    0,
  391,   42,  340,  340,  340,  392,    0,    0,    0,    0,
  340,  340,  340,    0,    0,    0,    0,    0,  393,  394,
  172,    0,  172,    0,  172,    0,  172,    0,    0,    0,
  172,   42,    0,    0,  172,    0,   42,    0,   42,    0,
    0,    0,   42,    0,    0,   42,  172,  172,    0,    0,
  172,    0,   42,    0,  172,  172,    0,  172,    0,  166,
  166,  172,    0,  166,  172,  172,    0,  166,    0,    0,
  172,  172,  174,    0,  174,    0,  174,    0,  174,    0,
  166,    0,  174,  166,    0,    0,  174,    0,  166,    0,
    0,    0,    0,    0,    0,    0,  166,  166,  174,  174,
    0,    0,  174,    0,    0,    0,  174,  174,    0,  174,
    0,    0,    0,  174,    0,    0,  174,  174,    0,    0,
    0,    0,  174,  174,  176,    0,  176,    0,  176,    0,
  176,    0,    0,    0,  176,    0,    0,    0,  176,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  176,  176,    0,    0,  176,    0,    0,    0,  176,  176,
    0,  176,    0,    0,    0,  176,    0,    0,  176,  176,
    0,    0,    0,    0,  176,  176,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
  222,  223,  224,  147,  208,  209,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
  224,  147,    0,    0,    0,  244,  209,  210,  211,  212,
  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
  223,  224,  147,  326,  208,  209,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
  224,  147,  208,  209,  210,  211,  212,  213,  214,  215,
  216,  217,  218,  219,  220,  221,  222,  223,  224,  147,
    0,    0,    0,  434,  210,  211,  212,  213,  214,  215,
  216,  217,  218,  219,  220,  221,  222,  223,  224,  147,
  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
  221,  222,  223,  224,  147,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  221,  222,  223,  224,  147,
};
short yycheck[] = {                                       4,
   15,  105,   19,   15,   15,   15,   15,  136,  248,  286,
   15,  191,  315,   18,  317,  287,  317,  279,  287,  203,
  280,  322,  112,  287,  287,  280,  290,  287,  284,   44,
  331,  287,   44,   44,   44,   44,  351,   49,  326,   44,
  355,  293,  226,  305,   61,  317,  308,   64,  287,  352,
  305,  311,   69,  308,  317,  319,  328,  237,  145,  146,
  240,  148,  293,  150,  151,  328,  338,  382,  328,  333,
  268,  269,  387,  345,  343,  338,   93,  287,  338,  378,
  357,  292,  346,  343,  171,  283,  284,  285,  286,  106,
  288,  108,  182,  293,  310,  347,  186,  187,  103,  414,
  105,  311,  107,  283,  288,  303,  304,  293,   76,  121,
  122,  116,  317,  287,  201,  301,  347,  287,  205,  136,
  317,  208,  209,  210,  211,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  221,  222,  223,  224,  225,  438,
  345,  287,  110,  372,  163,  342,  317,  347,  463,  293,
  313,  291,  293,   55,  328,  287,  319,  301,  328,  357,
  301,  460,   72,  131,  338,   67,  134,  254,  338,  174,
  257,  176,  287,  260,  345,  290,  195,  196,  197,   81,
  199,  200,  328,  346,  287,  317,  317,  416,  320,  287,
  100,  294,  338,  274,  275,  424,  328,  202,  203,  317,
  318,  330,  289,  293,  319,  280,  338,  339,  227,  340,
  439,  113,  302,  345,  317,  291,  348,  292,  333,  322,
  349,  226,  298,  310,  342,  454,  245,  314,  331,  469,
  293,  346,  287,  283,  297,  285,  255,  256,  243,  258,
  259,  317,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  386,  313,  314,
  162,  293,  293,  339,  493,  297,  321,  310,  299,  345,
  313,  293,  348,  313,  314,  294,  319,  293,  297,  298,
  296,  321,  337,  288,  280,  514,  188,  292,  307,  518,
  519,  336,  268,  269,  334,  524,  292,  337,  385,  304,
  283,  320,  285,  346,  391,  392,  313,  314,  284,  293,
  286,  287,  288,  330,  321,  268,  269,  301,  300,  334,
  268,  269,  334,  334,  334,  334,  228,  303,  304,  329,
  337,  284,  349,  338,  287,  293,  238,  287,  296,  287,
  427,  428,  429,  430,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  466,  317,  298,  279,  317,  317,  322,  386,
  287,  376,  293,  302,  268,  269,  297,  331,  328,  294,
  331,  357,  300,  317,  488,  472,  490,  491,  338,  339,
  284,  317,  286,  317,  288,  345,  287,  298,  485,  418,
  291,  331,  315,  294,  317,  339,  425,  426,  495,  303,
  304,  345,  499,  339,  348,  339,  317,  350,  351,  345,
  293,  345,  324,  322,  443,  444,  445,  446,  301,  320,
  435,  322,  298,  315,  287,  317,  350,  301,  339,  317,
  331,  294,  336,  299,  345,  320,  293,  348,  339,  283,
  348,  466,  354,  458,  345,  349,  307,  348,  313,  314,
  293,  466,  317,  357,  317,  484,  321,  472,  339,  322,
  315,  316,  317,  488,  489,  279,  491,  496,  331,  334,
  279,  279,  337,  488,  489,  490,  491,  342,  282,  280,
  280,  345,  297,  512,  317,  350,  351,  516,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  293,
  280,  279,  294,  283,  284,  285,  286,  287,  288,  289,
  296,  291,  279,  293,  293,  295,  296,  297,  313,  314,
  324,  294,  297,  303,  304,  317,  321,  293,  280,  309,
  322,  311,  312,  313,  314,  315,  316,  317,  318,  331,
  297,  321,  337,  323,  317,  325,  292,  332,  297,  322,
  330,  331,  341,  292,  334,  335,  329,  337,  331,  315,
  334,  286,  342,  343,  344,  318,  281,  347,  291,  317,
  350,  351,  352,  342,  280,  347,  289,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  317,
  280,  297,  294,  283,  284,  285,  286,  287,  288,  289,
  352,  291,  279,  293,  317,  295,  296,  297,  351,  294,
  331,  294,  315,  303,  304,  317,  350,  257,  257,  309,
  322,  311,  312,  313,  314,  315,  316,  317,  318,  331,
  257,  321,  317,  323,  317,  325,  293,  322,  317,  322,
  330,  331,  315,  347,  334,  335,  331,  337,  331,  316,
  310,  317,  342,  343,  344,  317,  317,  347,  287,  283,
  350,  351,  352,  317,  296,  317,  297,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  317,
  280,  296,  320,  283,  284,  285,  286,  287,  288,  289,
  297,  291,  287,  293,  287,  295,  296,  297,  317,  317,
  292,  339,  289,  303,  304,  317,  286,  345,  317,  309,
  348,  311,  312,  313,  314,  315,  316,  317,  318,  350,
  339,  321,  347,  323,  350,  325,  345,  339,  317,  348,
  330,  331,   18,  345,  334,  335,  348,  337,   44,  350,
  334,   86,  342,  343,  344,  100,  334,  347,   69,  190,
  350,  351,  352,  174,   58,  501,   74,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  314,  491,  187,  283,  284,  285,  286,  287,  288,  289,
  376,  291,  376,  293,  376,  295,  296,  297,  376,  292,
  292,  376,  316,  303,  304,  357,  338,   -1,  456,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,  396,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,  287,  276,  277,  278,  291,
  280,   -1,  294,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,  317,   -1,   -1,  320,  309,
  322,  311,  312,  313,  314,  315,  316,  317,  318,  331,
   -1,  321,   -1,  323,   -1,  325,   -1,  339,  340,   -1,
  330,  331,   -1,  345,  334,  335,  348,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,  287,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,  297,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,  313,  314,
  350,  351,  352,   -1,   -1,   -1,  321,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   -1,   -1,  337,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  283,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,  313,  314,
   -1,   -1,   -1,  303,  304,   -1,  321,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,  334,
   -1,  321,  337,  323,   -1,  325,  341,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  270,  271,
  272,  273,  274,  275,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,  258,  259,  260,  261,  357,  268,  269,
  270,  271,  272,  273,  274,  275,   -1,   -1,   -1,   -1,
   -1,  276,  277,  278,   -1,  280,   -1,   -1,  283,  284,
  285,  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,   -1,   -1,   -1,  303,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,   -1,  321,   -1,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
  335,   -1,  337,   -1,   -1,   -1,   -1,  342,  343,  344,
   -1,   -1,  347,   -1,   -1,  350,  351,  352,  258,  259,
  260,  261,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
   -1,  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
   -1,   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,  321,   -1,  323,   -1,  325,  287,   -1,   -1,   -1,
  330,  331,   -1,  294,  334,  335,   -1,  337,   -1,   -1,
   -1,   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,
  350,  351,  352,  258,  259,  260,  317,  357,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,
  331,  276,  277,  278,   -1,  280,   -1,  338,  283,  284,
  285,  286,  287,  288,  289,   -1,  291,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,   -1,   -1,   -1,  303,  304,
   -1,   -1,   -1,   -1,  309,   -1,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,   -1,  321,   -1,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
  335,   -1,  337,   -1,   -1,  258,  259,  342,  343,  344,
   -1,   -1,  347,   -1,   -1,  350,  351,  352,   -1,   -1,
   -1,   -1,  357,  276,  277,  278,   -1,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,  289,   -1,  291,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,   -1,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,  314,  315,  316,  317,  318,   -1,   -1,  321,   -1,
  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,  335,   -1,  337,   -1,   -1,  258,  259,  342,
  343,  344,   -1,   -1,  347,   -1,   -1,  350,  351,  352,
   -1,   -1,   -1,   -1,  357,  276,  277,  278,   -1,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,  289,   -1,
  291,   -1,  293,   -1,  295,  296,  297,   -1,   -1,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,   -1,
  321,   -1,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,  335,   -1,  337,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,   -1,  347,   -1,   -1,  350,
  351,  352,   -1,   -1,   -1,   -1,  357,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,
  291,   -1,   -1,  287,  295,   -1,   -1,  291,  292,   -1,
   -1,   -1,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
  311,   -1,  313,  314,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,  317,   -1,   -1,   -1,   -1,  322,   -1,
  324,   -1,   -1,  334,  328,  258,  337,  331,  332,   -1,
   -1,  342,  343,   -1,  338,   -1,   -1,   -1,   -1,  350,
  351,   -1,   -1,  276,  277,  278,  357,  280,   -1,   -1,
  283,  284,  285,  286,  287,  288,  289,   -1,  291,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,   -1,   -1,   -1,
  303,  304,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
  313,  314,  315,  316,  317,  318,   -1,   -1,  321,   -1,
  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,
   -1,  334,  335,   -1,  337,   -1,   -1,   -1,   -1,  342,
  343,  344,   -1,   -1,  347,   -1,   -1,  350,  351,  352,
  268,  269,   -1,   -1,  357,   -1,   -1,  275,  276,  277,
  278,  291,  280,   -1,   -1,  283,  284,  285,  286,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,   -1,  313,  314,  303,  304,  317,   -1,   -1,
   -1,  321,   -1,  311,   -1,  313,  314,   -1,   -1,  317,
   -1,   -1,   -1,  321,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  342,   -1,   -1,   -1,  334,   -1,   -1,  337,
  350,  351,   -1,   -1,  342,  343,   -1,   -1,  268,  269,
   -1,   -1,  350,  351,   -1,  275,  276,  277,  278,  357,
  280,   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,
  268,  269,   -1,   -1,  287,  295,   -1,  275,  276,  277,
  278,  294,  280,  303,  304,  283,  284,  285,  286,  287,
  288,  311,   -1,  313,  314,   -1,   -1,  295,   -1,   -1,
   -1,  321,   -1,   -1,  317,  303,  304,   -1,   -1,  322,
   -1,   -1,   -1,  311,  334,  328,   -1,  337,  331,  317,
   -1,   -1,   -1,  343,   -1,  338,   -1,   -1,   -1,   -1,
   -1,  268,  269,   -1,   -1,   -1,   -1,  357,  275,  276,
  277,  278,   -1,  280,  342,  343,  283,  284,  285,  286,
  287,  288,   -1,  268,  269,   -1,   -1,   -1,  295,  357,
  275,  276,  277,  278,   -1,  280,  303,  304,  283,  284,
  285,  286,  287,  288,  311,  268,  269,  294,  315,   -1,
  295,   -1,  275,  276,  277,  278,   -1,  280,  303,  304,
  283,  284,  285,  286,  287,  288,  311,   -1,   -1,   -1,
  317,   -1,  295,   -1,   -1,  322,  343,   -1,   -1,   -1,
  303,  304,  329,  306,  331,   -1,   -1,   -1,  311,  336,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
   -1,   -1,  347,   -1,   -1,   -1,  268,  269,   -1,   -1,
   -1,   -1,  357,  275,  276,  277,  278,   -1,  280,   -1,
  343,  283,  284,  285,  286,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  357,   -1,   -1,   -1,   -1,   -1,
   -1,  303,  304,   -1,  306,   -1,   -1,  268,  269,  311,
   -1,   -1,   -1,   -1,  275,  276,  277,  278,   -1,  280,
   -1,   -1,  283,  284,  285,  286,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,  280,   -1,   -1,
   -1,  343,  303,  304,  287,   -1,   -1,   -1,  291,  292,
  311,   -1,   -1,   -1,   -1,  357,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  317,   -1,   -1,   -1,   -1,  322,
   -1,  324,  343,   -1,   -1,  328,   -1,   -1,  331,  332,
   -1,   -1,   -1,   -1,   -1,  338,  357,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  268,  269,   -1,  287,   -1,
  289,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,  288,   -1,   -1,  291,   -1,
  309,   -1,  311,  312,   -1,  347,   -1,   -1,  317,   -1,
  303,  304,  268,  269,  323,   -1,  325,  310,   -1,   -1,
  313,  330,   -1,   -1,  268,  269,  319,  283,  284,  285,
  286,  287,  288,   -1,  343,  344,   -1,   -1,   -1,  283,
  284,  285,  286,  287,  288,   -1,  347,  303,  304,   -1,
   -1,   -1,   -1,  346,  310,   -1,   -1,  313,   -1,  303,
  304,   -1,   -1,  319,  357,   -1,  310,   -1,   -1,  313,
  276,  277,  278,   -1,  280,  319,   -1,  283,  284,  285,
  286,  287,  288,   -1,   -1,  291,   -1,   -1,  287,  295,
  346,   -1,  291,   -1,   -1,   -1,   -1,  303,  304,   -1,
   -1,  357,  346,   -1,   -1,  311,   -1,  313,  314,   -1,
   -1,  317,   -1,  357,   -1,  321,   -1,   -1,  317,   -1,
   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,  334,  328,
   -1,  337,  331,  332,  287,   -1,  342,  343,  291,  338,
   -1,   -1,   -1,   -1,  350,  351,  276,  277,  278,   -1,
  280,  357,   -1,  283,  284,  285,  286,  287,  288,  287,
   -1,  291,   -1,   -1,  317,  295,   -1,   -1,   -1,  322,
   -1,  324,   -1,  303,  304,  328,   -1,   -1,  331,   -1,
   -1,  311,   -1,  313,  314,  338,   -1,  317,   -1,  317,
   -1,  321,   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,
  328,   -1,   -1,  331,  334,   -1,   -1,  337,   -1,   -1,
  338,   -1,  342,  343,   -1,   -1,   -1,   -1,  287,   -1,
  350,  351,   -1,   -1,   -1,   -1,   -1,  357,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  279,   -1,  317,   -1,
   -1,   -1,   -1,  322,  287,  324,  289,   -1,  291,  328,
   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,
  323,   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,
  287,   -1,  289,   -1,  291,  335,   -1,   -1,   -1,  342,
  343,  344,   -1,   -1,   -1,   -1,   -1,  350,  351,  352,
   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,
  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,
   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,
  291,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
   -1,   -1,   -1,  350,  351,  352,   -1,   -1,  309,   -1,
  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,
   -1,   -1,  323,   -1,  325,  280,   -1,   -1,   -1,  330,
  331,   -1,  287,   -1,  289,   -1,  291,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,   -1,   -1,   -1,   -1,  350,
  351,  352,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
  315,  316,  317,  318,   -1,   -1,   -1,   -1,  323,   -1,
  325,  280,   -1,   -1,   -1,  330,  331,   -1,  287,   -1,
  289,   -1,  291,   -1,   -1,   -1,   -1,  342,  343,  344,
   -1,   -1,   -1,   -1,   -1,  350,  351,  352,   -1,   -1,
  309,   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,  323,   -1,  325,  280,   -1,   -1,
   -1,  330,  331,   -1,  287,   -1,  289,   -1,  291,   -1,
   -1,   -1,   -1,  342,  343,  344,   -1,   -1,   -1,   -1,
   -1,  350,  351,  352,   -1,   -1,  309,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,   -1,   -1,   -1,
  323,   -1,  325,  280,   -1,   -1,   -1,  330,  331,   -1,
  287,   -1,  289,   -1,  291,   -1,   -1,   -1,   -1,  342,
  343,  344,   -1,   -1,   -1,   -1,   -1,  350,  351,  352,
   -1,   -1,  309,   -1,  311,  312,   -1,   -1,  315,  316,
  317,  318,   -1,   -1,   -1,   -1,  323,   -1,  325,  280,
   -1,   -1,   -1,  330,  331,   -1,  287,   -1,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  342,  343,  344,   -1,   -1,
   -1,   -1,   -1,  350,  351,  352,   -1,   -1,  309,   -1,
  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,   -1,
   -1,   -1,  323,   -1,  325,  280,   -1,   -1,   -1,  330,
  331,   -1,  287,   -1,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  342,  343,  344,   -1,   -1,   -1,   -1,   -1,  350,
  351,  352,   -1,   -1,  309,   -1,  311,  312,   -1,   -1,
  315,  316,  317,  318,   -1,   -1,   -1,   -1,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,  287,   -1,  289,
   -1,  291,   -1,   -1,   -1,  280,   -1,  342,  343,  344,
   -1,   -1,  287,   -1,  289,  350,  351,  352,   -1,  309,
   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
   -1,   -1,   -1,  323,  309,  325,  311,  312,   -1,   -1,
  330,  331,   -1,   -1,   -1,   -1,   -1,   -1,  323,   -1,
  325,  287,  342,  343,  344,  330,   -1,   -1,   -1,   -1,
  350,  351,  352,   -1,   -1,   -1,   -1,   -1,  343,  344,
  287,   -1,  289,   -1,  291,   -1,  293,   -1,   -1,   -1,
  297,  317,   -1,   -1,  301,   -1,  322,   -1,  324,   -1,
   -1,   -1,  328,   -1,   -1,  331,  313,  314,   -1,   -1,
  317,   -1,  338,   -1,  321,  322,   -1,  324,   -1,  313,
  314,  328,   -1,  317,  331,  332,   -1,  321,   -1,   -1,
  337,  338,  287,   -1,  289,   -1,  291,   -1,  293,   -1,
  334,   -1,  297,  337,   -1,   -1,  301,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  350,  351,  313,  314,
   -1,   -1,  317,   -1,   -1,   -1,  321,  322,   -1,  324,
   -1,   -1,   -1,  328,   -1,   -1,  331,  332,   -1,   -1,
   -1,   -1,  337,  338,  287,   -1,  289,   -1,  291,   -1,
  293,   -1,   -1,   -1,  297,   -1,   -1,   -1,  301,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,  314,   -1,   -1,  317,   -1,   -1,   -1,  321,  322,
   -1,  324,   -1,   -1,   -1,  328,   -1,   -1,  331,  332,
   -1,   -1,   -1,   -1,  337,  338,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,   -1,   -1,   -1,  297,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  297,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
   -1,   -1,   -1,  297,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,
};
#define YYFINAL 2
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 358
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"TE_DOTDOT","TE_IMPLIES","TE_OR",
"TE_XOR","TE_AND","TE_NE","TE_EQ","TE_LT","TE_GT","TE_LE","TE_GE","TE_PLUS",
"TE_MINUS","TE_STAR","TE_SLASH","TE_MOD","TE_DIV","TE_POWER","TE_FREE","TE_NOT",
"TE_STRIP","TE_OLD","TE_DOT","TE_LPARAN","TE_ALIAS","TE_ALL","TE_INTEGER",
"TE_CHAR","TE_REAL","TE_STRING","TE_ID","TE_A_BIT","TE_BANG","TE_BIT",
"TE_SEMICOLON","TE_COLON","TE_COMMA","TE_CREATION","TE_LARRAY","TE_RARRAY",
"TE_RPARAN","TE_LCURLY","TE_RCURLY","TE_LSQURE","TE_RSQURE","TE_CONSTRAIN",
"TE_FALSE","TE_TRUE","TE_ACCEPT","TE_ADDRESS","TE_AS","TE_ASSIGN","TE_CHECK",
"TE_CLASS","TE_CURRENT","TE_DEBUG","TE_DEFERRED","TE_DO","TE_ELSE","TE_ELSEIF",
"TE_END","TE_ENSURE","TE_EXPANDED","TE_EXPORT","TE_EXTERNAL","TE_FEATURE",
"TE_FROM","TE_FROZEN","TE_IF","TE_INDEXING","TE_IN_END","TE_INFIX","TE_INHERIT",
"TE_INSPECT","TE_INVARIANT","TE_IS","TE_LIKE","TE_LOCAL","TE_LOOP",
"TE_OBSOLETE","TE_ONCE","TE_PREFIX","TE_REDEFINE","TE_RENAME","TE_REQUIRE",
"TE_RESCUE","TE_RESULT","TE_RETRY","TE_SELECT","TE_SEPARATE","TE_THEN",
"TE_UNDEFINE","TE_UNIQUE","TE_UNTIL","TE_VARIANT","TE_WHEN","EIF_ERROR2",
"EIF_ERROR3","EIF_ERROR4","EIF_ERROR5","EIF_ERROR6","EIF_ERROR7",
};
char *yyrule[] = {
"$accept : Class_declaration",
"$$1 :",
"Class_declaration : Indexing Header_mark $$1 TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
"Pushing_id : TE_ID",
"Indexing :",
"$$2 :",
"Indexing : TE_INDEXING $$2 Index_list",
"Indexing : TE_INDEXING",
"Index_list : Index_clause",
"Index_list : Index_list ASemi Index_clause",
"$$3 :",
"Index_clause : Index $$3 Index_terms",
"Index :",
"Index : Identifier TE_COLON",
"Index_terms : Index_value",
"Index_terms : Index_terms TE_COMMA Index_value",
"Index_value : Identifier",
"Index_value : Manifest_constant",
"Header_mark :",
"Header_mark : TE_DEFERRED",
"Header_mark : TE_EXPANDED",
"Header_mark : TE_SEPARATE",
"Obsolete :",
"Obsolete : TE_OBSOLETE Manifest_string",
"Features :",
"$$4 :",
"Features : $$4 Feature_clause_list",
"Feature_clause_list : Feature_clause",
"Feature_clause_list : Feature_clause_list Feature_clause",
"$$5 :",
"$$6 :",
"Feature_clause : TE_FEATURE $$5 Clients $$6 Feature_declaration_list",
"Clients :",
"Clients : Client_list",
"Client_list : TE_LCURLY TE_RCURLY",
"$$7 :",
"Client_list : TE_LCURLY $$7 Class_list TE_RCURLY",
"Class_list : Identifier",
"Class_list : Class_list TE_COMMA Identifier",
"Feature_declaration_list :",
"Feature_declaration_list : Feature_declaration_list Feature_declaration",
"ASemi : TE_SEMICOLON",
"ASemi :",
"$$8 :",
"$$9 :",
"Feature_declaration : $$8 New_feature_list $$9 Declaration_body ASemi",
"New_feature_list : New_feature",
"New_feature_list : New_feature_list TE_COMMA New_feature",
"New_feature : Feature_name_mark Feature_name",
"Feature_name_mark :",
"Feature_name_mark : TE_FROZEN",
"Feature_name : Pushing_id",
"Feature_name : Infix",
"Feature_name : Prefix",
"Infix : TE_INFIX Infix_operator",
"Prefix : TE_PREFIX Prefix_operator",
"Infix_operator : Manifest_string",
"Prefix_operator : Manifest_string",
"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
"Constant_or_routine :",
"Constant_or_routine : TE_IS Feature_value",
"Feature_value : Manifest_constant",
"Feature_value : TE_UNIQUE",
"Feature_value : Routine",
"Inheritance :",
"$$10 :",
"Inheritance : TE_INHERIT $$10 Parent_list",
"Inheritance : TE_INHERIT ASemi",
"Parent_list : Parent ASemi",
"Parent_list : Parent_list Parent ASemi",
"Parent : Pushing_id Actual_generics",
"Parent : Pushing_id Actual_generics TE_END",
"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
"Actual_generics :",
"Actual_generics : Existing_generics",
"Rename :",
"Rename : TE_RENAME",
"$$11 :",
"Rename : TE_RENAME $$11 Rename_list",
"Rename_list : Rename_pair",
"Rename_list : Rename_list TE_COMMA Rename_pair",
"Rename_pair : Feature_name TE_AS Feature_name",
"New_exports :",
"$$12 :",
"New_exports : TE_EXPORT $$12 New_export_list",
"New_exports : TE_EXPORT ASemi",
"New_export_list : New_export_item ASemi",
"New_export_list : New_export_list New_export_item ASemi",
"New_export_item : Client_list Feature_set",
"Feature_set : TE_ALL",
"$$13 :",
"Feature_set : $$13 Feature_list",
"Feature_list : Feature_name",
"Feature_list : Feature_list TE_COMMA Feature_name",
"Undefine :",
"Undefine : TE_UNDEFINE",
"$$14 :",
"Undefine : TE_UNDEFINE $$14 Feature_list",
"Redefine :",
"Redefine : TE_REDEFINE",
"$$15 :",
"Redefine : TE_REDEFINE $$15 Feature_list",
"Select :",
"Select : TE_SELECT",
"$$16 :",
"Select : TE_SELECT $$16 Feature_list",
"Formal_arguments :",
"Formal_arguments : TE_LPARAN TE_RPARAN",
"$$17 :",
"Formal_arguments : TE_LPARAN $$17 Entity_declaration_list TE_RPARAN",
"Entity_declaration_list :",
"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
"$$18 :",
"$$19 :",
"Entity_declaration_group : $$18 Identifier_list $$19 TE_COLON Type ASemi",
"Identifier_list : Identifier",
"Identifier_list : Identifier_list TE_COMMA Identifier",
"Strip_identifier_list :",
"Strip_identifier_list : Identifier_list",
"Type_mark :",
"Type_mark : TE_COLON Type",
"$$20 :",
"Routine : Obsolete $$20 Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
"Routine_body : Internal",
"Routine_body : External",
"Routine_body : TE_DEFERRED",
"External : TE_EXTERNAL External_language External_name",
"External_language : Non_empty_string",
"External_name :",
"External_name : TE_ALIAS Non_empty_string",
"$$21 :",
"Internal : TE_DO $$21 Compound",
"$$22 :",
"Internal : TE_ONCE $$22 Compound",
"Local_declarations :",
"$$23 :",
"Local_declarations : TE_LOCAL $$23 Entity_declaration_list",
"Compound : Instructionl Instruction1 Opt_Semi",
"Compound : Opt_Semi",
"Opt_Semi : Opt_Semi TE_SEMICOLON",
"Opt_Semi :",
"Instructionl : Instructionl Instruction1 Opt_Semi",
"Instructionl : Opt_Semi",
"Instruction1 : Creation",
"Instruction1 : Call",
"Instruction1 : Assignment",
"Instruction1 : Reverse_assignment",
"Instruction1 : Conditional",
"Instruction1 : Multi_branch",
"Instruction1 : Loop",
"Instruction1 : Debug",
"Instruction1 : Check",
"Instruction1 : Retry",
"Precondition :",
"$$24 :",
"Precondition : TE_REQUIRE $$24 Assertion",
"$$25 :",
"Precondition : TE_REQUIRE TE_ELSE $$25 Assertion",
"Postcondition :",
"$$26 :",
"Postcondition : TE_ENSURE $$26 Assertion",
"$$27 :",
"Postcondition : TE_ENSURE TE_THEN $$27 Assertion",
"$$28 :",
"Assertion : $$28 Assertion_list",
"Assertion_list :",
"Assertion_list : Assertion_list_non_empty",
"Assertion_list_non_empty : Assertion_clause ASemi",
"Assertion_list_non_empty : Assertion_list_non_empty Assertion_clause ASemi",
"Assertion_clause : Expression",
"Assertion_clause : Identifier TE_COLON Expression",
"Assertion_clause : Identifier TE_COLON",
"Type : Pushing_id",
"Type : Pushing_id Existing_generics",
"Type : TE_EXPANDED Pushing_id",
"Type : TE_EXPANDED Pushing_id Existing_generics",
"Type : TE_SEPARATE Pushing_id",
"Type : TE_SEPARATE Pushing_id Existing_generics",
"Type : TE_BIT Integer_constant",
"Type : TE_BIT Identifier",
"Type : TE_LIKE Identifier",
"Type : TE_LIKE TE_CURRENT",
"Class_type : Pushing_id",
"Class_type : Pushing_id Existing_generics",
"Existing_generics : TE_LSQURE TE_RSQURE",
"$$29 :",
"Existing_generics : TE_LSQURE $$29 Type_list TE_RSQURE",
"Type_list : Type",
"Type_list : Type_list TE_COMMA Type",
"Formal_generics :",
"$$30 :",
"Formal_generics : TE_LSQURE $$30 Formal_generic_list TE_RSQURE",
"Formal_generic_list :",
"Formal_generic_list : Formal_generic",
"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
"$$31 :",
"Formal_generic : TE_ID $$31 Constraint",
"Constraint :",
"Constraint : TE_CONSTRAIN Class_type",
"$$32 :",
"$$33 :",
"Conditional : TE_IF Expression TE_THEN $$32 Compound $$33 Elsif Else_part TE_END",
"Elsif :",
"$$34 :",
"Elsif : $$34 Elsif_list",
"Elsif_list : Elsif_part",
"Elsif_list : Elsif_list Elsif_part",
"$$35 :",
"Elsif_part : TE_ELSEIF Expression TE_THEN $$35 Compound",
"Inspect_default :",
"$$36 :",
"Inspect_default : TE_ELSE $$36 Compound",
"Else_part :",
"$$37 :",
"Else_part : TE_ELSE $$37 Compound",
"$$38 :",
"$$39 :",
"Multi_branch : TE_INSPECT Expression $$38 When_part_list $$39 Inspect_default TE_END",
"When_part_list :",
"When_part_list : When_part When_part_list",
"$$40 :",
"$$41 :",
"$$42 :",
"When_part : TE_WHEN $$40 Choices $$41 TE_THEN $$42 Compound",
"Choices : Choice",
"Choices : Choices TE_COMMA Choice",
"Choice : Integer_constant",
"Choice : Character_constant",
"Choice : Identifier",
"Choice : Integer_constant TE_DOTDOT Integer_constant",
"Choice : Integer_constant TE_DOTDOT Identifier",
"Choice : Identifier TE_DOTDOT Integer_constant",
"Choice : Identifier TE_DOTDOT Identifier",
"Choice : Character_constant TE_DOTDOT Character_constant",
"Choice : Identifier TE_DOTDOT Character_constant",
"Choice : Character_constant TE_DOTDOT Identifier",
"$$43 :",
"$$44 :",
"$$45 :",
"Loop : TE_FROM $$43 Compound $$44 Invariant Variant TE_UNTIL Expression TE_LOOP $$45 Compound TE_END",
"Invariant :",
"Invariant : TE_INVARIANT Assertion",
"Class_invariant :",
"$$46 :",
"Class_invariant : TE_INVARIANT $$46 Assertion",
"Variant :",
"Variant : TE_VARIANT Identifier TE_COLON Expression",
"Variant : TE_VARIANT Expression",
"$$47 :",
"Debug : TE_DEBUG Debug_keys $$47 Compound TE_END",
"Debug_keys :",
"Debug_keys : TE_LPARAN TE_RPARAN",
"$$48 :",
"Debug_keys : TE_LPARAN $$48 Debug_key_list TE_RPARAN",
"Debug_key_list : Non_empty_string",
"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
"Retry : TE_RETRY",
"Rescue :",
"$$49 :",
"Rescue : TE_RESCUE $$49 Compound",
"Assignment : Identifier TE_ASSIGN Expression",
"Assignment : TE_RESULT TE_ASSIGN Expression",
"Reverse_assignment : Identifier TE_ACCEPT Expression",
"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
"Creators :",
"$$50 :",
"Creators : $$50 Creation_clause_list",
"Creation_clause_list : Creation_clause",
"Creation_clause_list : Creation_clause_list Creation_clause",
"Creation_clause : TE_CREATION",
"$$51 :",
"Creation_clause : TE_CREATION Clients $$51 Feature_list",
"Creation_clause : TE_CREATION Client_list",
"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
"Creation_type :",
"Creation_type : Type",
"Creation_target : Identifier",
"Creation_target : TE_RESULT",
"Creation_call :",
"Creation_call : TE_DOT Identifier Parameters",
"Call : A_feature",
"Call : Call_on_result",
"Call : Call_on_feature",
"Call : Call_on_current",
"Call : Call_on_expression",
"Check : TE_CHECK Assertion TE_END",
"Expression : Expression_constant",
"Expression : Manifest_array",
"Expression : Feature_call",
"Expression : TE_LPARAN Expression TE_RPARAN",
"Expression : Expression TE_PLUS Expression",
"Expression : Expression TE_MINUS Expression",
"Expression : Expression TE_STAR Expression",
"Expression : Expression TE_SLASH Expression",
"Expression : Expression TE_MOD Expression",
"Expression : Expression TE_DIV Expression",
"Expression : Expression TE_POWER Expression",
"Expression : Expression TE_AND Expression",
"Expression : Expression TE_AND TE_THEN Expression",
"Expression : Expression TE_OR Expression",
"Expression : Expression TE_OR TE_ELSE Expression",
"Expression : Expression TE_IMPLIES Expression",
"Expression : Expression TE_XOR Expression",
"Expression : Expression TE_GE Expression",
"Expression : Expression TE_GT Expression",
"Expression : Expression TE_LE Expression",
"Expression : Expression TE_LT Expression",
"Expression : Expression TE_EQ Expression",
"Expression : Expression TE_NE Expression",
"Expression : Expression Free_operator Expression",
"Expression : TE_MINUS Expression",
"Expression : TE_PLUS Expression",
"Expression : TE_NOT Expression",
"Expression : TE_OLD Expression",
"Expression : Free_operator Expression",
"$$52 :",
"Expression : TE_STRIP $$52 TE_LPARAN Strip_identifier_list TE_RPARAN",
"Actual_parameter : Expression",
"Actual_parameter : TE_ADDRESS Feature_name",
"Actual_parameter : TE_ADDRESS TE_LPARAN Expression TE_RPARAN",
"Actual_parameter : TE_ADDRESS TE_CURRENT",
"Actual_parameter : TE_ADDRESS TE_RESULT",
"Free_operator : TE_FREE",
"Feature_call : Call_on_current",
"Feature_call : Call_on_result",
"Feature_call : Call_on_feature",
"Feature_call : TE_CURRENT",
"Feature_call : TE_RESULT",
"Feature_call : A_feature",
"Feature_call : Call_on_expression",
"Call_on_current : TE_CURRENT TE_DOT Remote_call",
"Call_on_result : TE_RESULT TE_DOT Remote_call",
"Call_on_feature : A_feature TE_DOT Remote_call",
"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
"Remote_call : Call_on_feature_access",
"Remote_call : Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Feature_access",
"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
"A_feature : Identifier Parameters",
"Feature_access : Identifier Parameters",
"Parameters :",
"Parameters : TE_LPARAN TE_RPARAN",
"$$53 :",
"Parameters : TE_LPARAN $$53 Parameter_list TE_RPARAN",
"Parameter_list : Actual_parameter",
"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
"Expression_list : Expression",
"Expression_list : Expression_list TE_COMMA Expression",
"Manifest_expression_list :",
"Manifest_expression_list : Expression_list",
"Identifier : TE_ID",
"Manifest_constant : Boolean_constant",
"Manifest_constant : Character_constant",
"Manifest_constant : Integer_constant",
"Manifest_constant : Real_constant",
"Manifest_constant : Bit_constant",
"Manifest_constant : Manifest_string",
"Expression_constant : Boolean_constant",
"Expression_constant : Character_constant",
"Expression_constant : TE_INTEGER",
"Expression_constant : TE_REAL",
"Expression_constant : Bit_constant",
"Expression_constant : Manifest_string",
"Boolean_constant : TE_FALSE",
"Boolean_constant : TE_TRUE",
"Character_constant : TE_CHAR",
"Integer_constant : Sign TE_INTEGER",
"Sign :",
"Sign : TE_PLUS",
"Sign : TE_MINUS",
"Real_constant : Sign TE_REAL",
"Bit_constant : TE_A_BIT",
"Manifest_string : TE_STRING",
"Manifest_string : EIF_ERROR6",
"Non_empty_string : TE_STRING",
"$$54 :",
"Manifest_array : TE_LARRAY $$54 Manifest_expression_list TE_RARRAY",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 1355 "parser.y"
char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char separate;					/* Boolean mark for separate class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap()
{
	return 1;
}
#line 1808 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 186 "parser.y"
{click_list_init();}
break;
case 2:
#line 188 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yyvsp[-7].value),deferred,expanded,separate,yyvsp[-11].node,yyvsp[-6].node,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,click_list_new(),
start_position);
		}
break;
case 3:
#line 197 "parser.y"
{
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		}
break;
case 4:
#line 208 "parser.y"
{yyval.node = NULL;}
break;
case 5:
#line 209 "parser.y"
{list_init();}
break;
case 6:
#line 210 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 7:
#line 212 "parser.y"
{yyval.node = NULL;}
break;
case 8:
#line 216 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 9:
#line 218 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 10:
#line 221 "parser.y"
{list_init();}
break;
case 11:
#line 222 "parser.y"
{yyval.node = create_node2(INDEX_AS,yyvsp[-2].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 12:
#line 226 "parser.y"
{yyval.node = NULL;}
break;
case 13:
#line 228 "parser.y"
{yyval.node = yyvsp[-1].node;}
break;
case 14:
#line 232 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 15:
#line 234 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 16:
#line 238 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 17:
#line 240 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 18:
#line 248 "parser.y"
{deferred = FALSE; expanded = FALSE; separate = FALSE;}
break;
case 19:
#line 250 "parser.y"
{deferred = TRUE; expanded = FALSE; separate = FALSE;}
break;
case 20:
#line 252 "parser.y"
{expanded = TRUE; deferred = FALSE; separate = FALSE;}
break;
case 21:
#line 254 "parser.y"
{expanded = FALSE; deferred = FALSE; separate = TRUE;}
break;
case 22:
#line 263 "parser.y"
{yyval.node = NULL;}
break;
case 23:
#line 265 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 24:
#line 274 "parser.y"
{yyval.node = NULL;}
break;
case 25:
#line 275 "parser.y"
{list_init();}
break;
case 26:
#line 276 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 27:
#line 281 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 28:
#line 283 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 29:
#line 287 "parser.y"
{yyval.value = start_position;}
break;
case 30:
#line 287 "parser.y"
{list_init();}
break;
case 31:
#line 288 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_fclause_as(yyvsp[-2].node,yyval.node,yyvsp[-3].value);
		}
break;
case 32:
#line 296 "parser.y"
{yyval.node = NULL;}
break;
case 33:
#line 298 "parser.y"
{yyval.node = create_node1(CLIENT_AS,yyvsp[0].node);}
break;
case 34:
#line 302 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							}
break;
case 35:
#line 306 "parser.y"
{list_init();}
break;
case 36:
#line 307 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 37:
#line 311 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 38:
#line 315 "parser.y"
{
							list_push(yyvsp[0].node);
							}
break;
case 40:
#line 322 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 43:
#line 329 "parser.y"
{list_init();}
break;
case 44:
#line 329 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 45:
#line 330 "parser.y"
{
		yyval.node = create_feature_as(yyvsp[-2].node,yyvsp[-1].node,click_list_start(yyvsp[-3].value),start_position);
		click_list_set (yyval.node, yyvsp[-3].value);
		}
break;
case 46:
#line 338 "parser.y"
{
		yyval.value = yyvsp[0].value;
		list_push(click_list_elem(yyval.value));
		}
break;
case 47:
#line 343 "parser.y"
{
		yyval.value = yyvsp[-2].value;
		list_push(click_list_elem(yyvsp[0].value));
		}
break;
case 48:
#line 351 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 49:
#line 357 "parser.y"
{
		is_frozen = FALSE;
		}
break;
case 50:
#line 361 "parser.y"
{
		is_frozen = TRUE;
		}
break;
case 51:
#line 368 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 52:
#line 373 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 53:
#line 377 "parser.y"
{
		yyval.value = yyvsp[0].value;
		}
break;
case 54:
#line 384 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 55:
#line 393 "parser.y"
{
		yyval.value = yyvsp[0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		}
break;
case 56:
#line 401 "parser.y"
{
		extern int is_infix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		}
break;
case 57:
#line 414 "parser.y"
{
		extern int is_prefix();

		yyval.value = click_list_push ();
		click_list_set (yyvsp[0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		}
break;
case 58:
#line 426 "parser.y"
{yyval.node = create_node3(BODY_AS,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yyvsp[-2].node == NULL) && (yyvsp[-1].node == NULL) && (yyvsp[0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yyvsp[0].cr_node.cr_type == CR_CONSTANT) && ((yyvsp[-2].node != NULL) || (yyvsp[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yyvsp[-2].node != NULL) && ((yyvsp[0].cr_node.cr_type != CR_ROUTINE) || (yyvsp[0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	}
break;
case 59:
#line 446 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;}
break;
case 60:
#line 448 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].cr_node.cr_node;yyval.cr_node.cr_type = yyvsp[0].cr_node.cr_type;}
break;
case 61:
#line 452 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yyvsp[0].node));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 62:
#line 454 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;}
break;
case 63:
#line 456 "parser.y"
{yyval.cr_node.cr_node = yyvsp[0].node;yyval.cr_node.cr_type = CR_ROUTINE;}
break;
case 64:
#line 465 "parser.y"
{yyval.node = NULL;}
break;
case 65:
#line 466 "parser.y"
{list_init();}
break;
case 66:
#line 467 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 67:
#line 471 "parser.y"
{ yyval.node = NULL;}
break;
case 68:
#line 476 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 69:
#line 478 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 70:
#line 483 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-1].value);
		}
break;
case 71:
#line 489 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-2].value),yyvsp[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yyvsp[-2].value);
		}
break;
case 72:
#line 496 "parser.y"
{
		inherit_context = (yyvsp[-5].node==NULL)&&(yyvsp[-4].node==NULL)&&(yyvsp[-3].node==NULL)&&(yyvsp[-2].node==NULL)&&(yyvsp[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yyvsp[-7].value),yyvsp[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);
		click_list_set (rn_ast, yyvsp[-7].value);
		}
break;
case 73:
#line 505 "parser.y"
{yyval.node = NULL;}
break;
case 74:
#line 507 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 75:
#line 511 "parser.y"
{yyval.node = NULL;}
break;
case 76:
#line 513 "parser.y"
{yyval.node = NULL;}
break;
case 77:
#line 514 "parser.y"
{list_init();}
break;
case 78:
#line 515 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 79:
#line 520 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 80:
#line 522 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 81:
#line 527 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yyvsp[-2].value),click_list_elem(yyvsp[0].value));
		click_list_set (click_list_elem(yyvsp[0].value), yyvsp[-2].value);
		}
break;
case 82:
#line 534 "parser.y"
{yyval.node = NULL;}
break;
case 83:
#line 535 "parser.y"
{list_init();}
break;
case 84:
#line 536 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 85:
#line 538 "parser.y"
{yyval.node = NULL;}
break;
case 86:
#line 543 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 87:
#line 545 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 88:
#line 549 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yyvsp[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yyvsp[0].node);
		}
break;
case 89:
#line 556 "parser.y"
{yyval.node = create_node(ALL_AS);}
break;
case 90:
#line 557 "parser.y"
{list_init();}
break;
case 91:
#line 558 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 92:
#line 563 "parser.y"
{list_push(click_list_elem(yyvsp[0].value));}
break;
case 93:
#line 565 "parser.y"
{list_push(click_list_elem(yyvsp[0].value));}
break;
case 94:
#line 569 "parser.y"
{yyval.node = NULL;}
break;
case 95:
#line 571 "parser.y"
{yyval.node = NULL;}
break;
case 96:
#line 572 "parser.y"
{list_init();}
break;
case 97:
#line 573 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 98:
#line 577 "parser.y"
{yyval.node = NULL;}
break;
case 99:
#line 579 "parser.y"
{yyval.node = NULL;}
break;
case 100:
#line 580 "parser.y"
{list_init();}
break;
case 101:
#line 581 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 102:
#line 585 "parser.y"
{yyval.node = NULL;}
break;
case 103:
#line 587 "parser.y"
{yyval.node = NULL;}
break;
case 104:
#line 588 "parser.y"
{list_init();}
break;
case 105:
#line 589 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 106:
#line 597 "parser.y"
{yyval.node = NULL;}
break;
case 107:
#line 599 "parser.y"
{yyerror((char *)0);}
break;
case 108:
#line 600 "parser.y"
{list_init();}
break;
case 109:
#line 601 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 111:
#line 606 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 112:
#line 609 "parser.y"
{list_init();}
break;
case 113:
#line 609 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 114:
#line 610 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yyvsp[-3].node,yyvsp[-1].node);}
break;
case 115:
#line 614 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 116:
#line 616 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 119:
#line 624 "parser.y"
{yyval.node = NULL;}
break;
case 120:
#line 626 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 121:
#line 630 "parser.y"
{yyval.value = start_position;}
break;
case 122:
#line 633 "parser.y"
{yyval.node = create_routine_as(yyvsp[-7].node,yyvsp[-6].value,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 123:
#line 637 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 124:
#line 639 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 125:
#line 641 "parser.y"
{yyval.node = create_node(DEFERRED_AS);}
break;
case 126:
#line 645 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 127:
#line 649 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yyvsp[0].node);}
break;
case 128:
#line 653 "parser.y"
{yyval.node = NULL;}
break;
case 129:
#line 655 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 130:
#line 658 "parser.y"
{list_init();}
break;
case 131:
#line 659 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 132:
#line 660 "parser.y"
{list_init();}
break;
case 133:
#line 661 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 134:
#line 667 "parser.y"
{yyval.node = NULL;}
break;
case 135:
#line 668 "parser.y"
{list_init();}
break;
case 136:
#line 669 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 137:
#line 673 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 141:
#line 680 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 143:
#line 685 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 144:
#line 687 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 145:
#line 689 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 146:
#line 691 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 147:
#line 693 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 148:
#line 695 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 149:
#line 697 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 150:
#line 699 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 151:
#line 701 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 152:
#line 703 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 153:
#line 707 "parser.y"
{yyval.node = NULL;}
break;
case 154:
#line 708 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 155:
#line 709 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yyvsp[0].node);
								}
break;
case 156:
#line 712 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 157:
#line 713 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yyvsp[0].node);
								}
break;
case 158:
#line 719 "parser.y"
{yyval.node = NULL;}
break;
case 159:
#line 720 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 160:
#line 721 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yyvsp[0].node);
								}
break;
case 161:
#line 724 "parser.y"
{id_level = ASSERT_LEVEL;}
break;
case 162:
#line 725 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yyvsp[0].node);
								}
break;
case 163:
#line 731 "parser.y"
{list_init();}
break;
case 164:
#line 732 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 167:
#line 739 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 168:
#line 741 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 169:
#line 745 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,NULL,yyvsp[0].node);
								}
break;
case 170:
#line 749 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,yyvsp[-2].node,yyvsp[0].node);
								}
break;
case 171:
#line 753 "parser.y"
{ yyval.node = NULL;}
break;
case 172:
#line 763 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 173:
#line 768 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 174:
#line 773 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 175:
#line 778 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 176:
#line 783 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yyvsp[0].value),NULL);
		click_list_set (yyval.node, yyvsp[0].value);
		}
break;
case 177:
#line 788 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
		click_list_set (yyval.node, yyvsp[-1].value);
		}
break;
case 178:
#line 793 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yyvsp[0].node);
		}
break;
case 179:
#line 797 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yyvsp[0].node);
		}
break;
case 180:
#line 801 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yyvsp[0].node);
		}
break;
case 181:
#line 805 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		}
break;
case 182:
#line 812 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yyvsp[0].value),NULL);
        click_list_set (yyval.node, yyvsp[0].value);
        }
break;
case 183:
#line 817 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yyvsp[-1].value),yyvsp[0].node);
        click_list_set (yyval.node, yyvsp[-1].value);
        }
break;
case 184:
#line 825 "parser.y"
{yyval.node = NULL;}
break;
case 185:
#line 826 "parser.y"
{list_init();}
break;
case 186:
#line 827 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 187:
#line 834 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 188:
#line 836 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 189:
#line 844 "parser.y"
{
		yyval.node = NULL;
		}
break;
case 190:
#line 847 "parser.y"
{list_init();}
break;
case 191:
#line 848 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		}
break;
case 193:
#line 856 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 194:
#line 858 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 195:
#line 862 "parser.y"
{strcpy(generic_name, token_str);}
break;
case 196:
#line 863 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yyvsp[0].node);}
break;
case 197:
#line 867 "parser.y"
{yyval.node = NULL;}
break;
case 198:
#line 869 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 199:
#line 876 "parser.y"
{list_init();}
break;
case 200:
#line 876 "parser.y"
{yyval.node =
list_new(CONSTRUCT_LIST_AS);}
break;
case 201:
#line 878 "parser.y"
{yyval.node = create_node4(IF_AS,yyvsp[-7].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 202:
#line 882 "parser.y"
{yyval.node = NULL;}
break;
case 203:
#line 883 "parser.y"
{list_init();}
break;
case 204:
#line 884 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 205:
#line 888 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 206:
#line 890 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 207:
#line 893 "parser.y"
{list_init();}
break;
case 208:
#line 894 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 209:
#line 898 "parser.y"
{yyval.node = NULL;}
break;
case 210:
#line 899 "parser.y"
{list_init();}
break;
case 211:
#line 900 "parser.y"
{yyval.node = inspect_else();}
break;
case 212:
#line 904 "parser.y"
{yyval.node = NULL;}
break;
case 213:
#line 905 "parser.y"
{list_init();}
break;
case 214:
#line 906 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 215:
#line 910 "parser.y"
{list_init();}
break;
case 216:
#line 910 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 217:
#line 912 "parser.y"
{yyval.node = create_node3(INSPECT_AS,yyvsp[-5].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 219:
#line 925 "parser.y"
{list_push(yyvsp[-1].node);}
break;
case 220:
#line 928 "parser.y"
{list_init();}
break;
case 221:
#line 928 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 222:
#line 928 "parser.y"
{list_init();}
break;
case 223:
#line 929 "parser.y"
{yyval.node = create_node2(CASE_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 224:
#line 933 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 225:
#line 935 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 226:
#line 939 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 227:
#line 941 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 228:
#line 943 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[0].node,NULL);}
break;
case 229:
#line 945 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 230:
#line 947 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 231:
#line 949 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 232:
#line 951 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 233:
#line 953 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 234:
#line 955 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 235:
#line 957 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 236:
#line 960 "parser.y"
{list_init();}
break;
case 237:
#line 960 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 238:
#line 960 "parser.y"
{list_init();}
break;
case 239:
#line 961 "parser.y"
{yyval.node = create_node5(LOOP_AS,yyvsp[-8].node,yyvsp[-7].node,yyvsp[-6].node,yyvsp[-4].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 240:
#line 965 "parser.y"
{yyval.node = NULL;}
break;
case 241:
#line 967 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 242:
#line 971 "parser.y"
{yyval.node = NULL;}
break;
case 243:
#line 972 "parser.y"
{id_level = INVARIANT_LEVEL;}
break;
case 244:
#line 973 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yyvsp[0].node);
		}
break;
case 245:
#line 981 "parser.y"
{yyval.node = NULL;}
break;
case 246:
#line 983 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 247:
#line 985 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yyvsp[0].node);}
break;
case 248:
#line 988 "parser.y"
{list_init();}
break;
case 249:
#line 989 "parser.y"
{yyval.node = create_node2(DEBUG_AS,yyvsp[-3].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 250:
#line 993 "parser.y"
{yyval.node = NULL;}
break;
case 251:
#line 995 "parser.y"
{yyval.node = NULL;}
break;
case 252:
#line 996 "parser.y"
{list_init();}
break;
case 253:
#line 997 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 254:
#line 1001 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 255:
#line 1003 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 256:
#line 1007 "parser.y"
{yyval.node = create_node(RETRY_AS);}
break;
case 257:
#line 1011 "parser.y"
{yyval.node = NULL;}
break;
case 258:
#line 1012 "parser.y"
{list_init();}
break;
case 259:
#line 1013 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 260:
#line 1017 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yyvsp[-2].node,NULL),yyvsp[0].node);}
break;
case 261:
#line 1019 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 262:
#line 1023 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yyvsp[-2].node,NULL),yyvsp[0].node);}
break;
case 263:
#line 1025 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 264:
#line 1029 "parser.y"
{yyval.node = NULL;}
break;
case 265:
#line 1030 "parser.y"
{list_init();}
break;
case 266:
#line 1031 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 267:
#line 1035 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 268:
#line 1037 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 269:
#line 1041 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);}
break;
case 270:
#line 1042 "parser.y"
{list_init();}
break;
case 271:
#line 1043 "parser.y"
{yyval.node = create_node2(CREATE_AS,yyvsp[-2].node,list_new(CONSTRUCT_LIST_AS));}
break;
case 272:
#line 1045 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yyvsp[0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);								}
break;
case 273:
#line 1051 "parser.y"
{yyval.node = create_node3(CREATION_AS,yyvsp[-3].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 274:
#line 1055 "parser.y"
{yyval.node = NULL;}
break;
case 275:
#line 1057 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 276:
#line 1061 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yyvsp[0].node,NULL);}
break;
case 277:
#line 1063 "parser.y"
{yyval.node = create_node(RESULT_AS);}
break;
case 278:
#line 1067 "parser.y"
{yyval.node = NULL;}
break;
case 279:
#line 1069 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 280:
#line 1077 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 281:
#line 1079 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 282:
#line 1081 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 283:
#line 1083 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 284:
#line 1085 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yyvsp[0].node);}
break;
case 285:
#line 1089 "parser.y"
{yyval.node = create_node1(CHECK_AS,yyvsp[-1].node);}
break;
case 286:
#line 1097 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yyvsp[0].node);}
break;
case 287:
#line 1099 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yyvsp[0].node);}
break;
case 288:
#line 1101 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yyvsp[0].node);}
break;
case 289:
#line 1103 "parser.y"
{yyval.node = create_node1(PARAN_AS, yyvsp[-1].node);}
break;
case 290:
#line 1105 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 291:
#line 1107 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 292:
#line 1109 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 293:
#line 1111 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 294:
#line 1113 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 295:
#line 1115 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 296:
#line 1117 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 297:
#line 1119 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 298:
#line 1121 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 299:
#line 1123 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 300:
#line 1125 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 301:
#line 1127 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 302:
#line 1129 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 303:
#line 1131 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 304:
#line 1133 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 305:
#line 1135 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 306:
#line 1137 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 307:
#line 1139 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 308:
#line 1141 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 309:
#line 1143 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 310:
#line 1146 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yyvsp[0].node);}
break;
case 311:
#line 1148 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yyvsp[0].node);}
break;
case 312:
#line 1150 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yyvsp[0].node);}
break;
case 313:
#line 1152 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yyvsp[0].node);}
break;
case 314:
#line 1154 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 315:
#line 1155 "parser.y"
{yyerrok;list_init();}
break;
case 316:
#line 1156 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));}
break;
case 317:
#line 1160 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 318:
#line 1162 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yyvsp[0].value));
								}
break;
case 319:
#line 1167 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(EXPR_ADDRESS_AS,yyvsp[-1].node);
								}
break;
case 320:
#line 1172 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);}
break;
case 321:
#line 1174 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);}
break;
case 322:
#line 1178 "parser.y"
{yyval.node = create_id(token_str);}
break;
case 323:
#line 1186 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 324:
#line 1188 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 325:
#line 1190 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 326:
#line 1192 "parser.y"
{yyval.node = create_node(CURRENT_AS);}
break;
case 327:
#line 1194 "parser.y"
{yyval.node = create_node(RESULT_AS);}
break;
case 328:
#line 1196 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 329:
#line 1198 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 330:
#line 1202 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yyvsp[0].node);}
break;
case 331:
#line 1206 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yyvsp[0].node);}
break;
case 332:
#line 1210 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 333:
#line 1214 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yyvsp[-3].node,yyvsp[0].node);}
break;
case 334:
#line 1218 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 335:
#line 1220 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 336:
#line 1224 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 337:
#line 1226 "parser.y"
{yyval.node = create_node2(NESTED_AS,yyvsp[-2].node,yyvsp[0].node);}
break;
case 338:
#line 1230 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yyvsp[-1].node,yyvsp[0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yyvsp[-1].node,yyvsp[0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yyvsp[-1].node,yyvsp[0].node);
								break;
							}
						}
break;
case 339:
#line 1245 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yyvsp[-1].node,yyvsp[0].node);}
break;
case 340:
#line 1249 "parser.y"
{yyval.node = NULL;}
break;
case 341:
#line 1251 "parser.y"
{yyval.node = NULL;}
break;
case 342:
#line 1252 "parser.y"
{list_init();}
break;
case 343:
#line 1253 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);}
break;
case 344:
#line 1257 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 345:
#line 1259 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 346:
#line 1263 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 347:
#line 1265 "parser.y"
{list_push(yyvsp[0].node);}
break;
case 350:
#line 1277 "parser.y"
{
				yyval.node = create_id(token_str);
				}
break;
case 351:
#line 1283 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 352:
#line 1285 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 353:
#line 1287 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 354:
#line 1289 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 355:
#line 1291 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 356:
#line 1293 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 357:
#line 1297 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 358:
#line 1299 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 359:
#line 1301 "parser.y"
{yyval.node = create_int(token_str,0);}
break;
case 360:
#line 1303 "parser.y"
{yyval.node = create_real(token_str,0);}
break;
case 361:
#line 1305 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 362:
#line 1307 "parser.y"
{yyval.node = yyvsp[0].node;}
break;
case 363:
#line 1311 "parser.y"
{yyval.node = create_bool(0);}
break;
case 364:
#line 1313 "parser.y"
{yyval.node = create_bool(1);}
break;
case 365:
#line 1317 "parser.y"
{yyval.node = create_char(token_str);}
break;
case 366:
#line 1321 "parser.y"
{yyval.node = create_int(token_str,yyvsp[-1].value);}
break;
case 367:
#line 1325 "parser.y"
{yyval.value = 0;}
break;
case 368:
#line 1327 "parser.y"
{yyval.value = 0;}
break;
case 369:
#line 1329 "parser.y"
{yyval.value = 1;}
break;
case 370:
#line 1333 "parser.y"
{yyval.node = create_real(token_str,yyvsp[-1].value);}
break;
case 371:
#line 1337 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));}
break;
case 372:
#line 1341 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 373:
#line 1343 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 374:
#line 1347 "parser.y"
{yyval.node = create_string(token_str);}
break;
case 375:
#line 1350 "parser.y"
{list_init();}
break;
case 376:
#line 1351 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));}
break;
#line 3562 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
