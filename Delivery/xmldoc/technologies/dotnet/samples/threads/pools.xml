<document title="Pools">
	<meta_data>
		<help>
			<toc>
				<envision_pseudo_name>20</envision_pseudo_name>
				<envision_location>Samples\.NET Framework Samples\Threading</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>This sample demonstrates use of the 
			<class_name>THREAD_POOL</class_name> (ThreadPool) class. The sample queues up an asynchronous method call that is executed by a thread from the thread pool managed by the Common Language Runtime. The method "does some work" and then sets an event indicating that the work has finished. The main thread waits on the event and then exits.
		</paragraph>
		<heading>
			<size>2</size>Compiling
		</heading>
		<paragraph>To compile the example:
			<output output="envision">
				<list ordered="true">
					<item>Start Visual Studio .NET</item>
					<item>Choose Open Project from the File menu.</item>
					<item>Navigate to <italic>&lt;Eiffel_ENViSioN!_installation_path&gt;\compiler\examples\(.net version)\threading\pools\</italic> and select <italic>pools.eifp</italic></item>
					<item>Clicking open loads the selected project</item>
				</list>
			</output>
			<output output="studio">
				<list ordered="true">
					<item>Launch EiffelStudio.</item>
					<item>Select <bold>Use existing Ace (control file)</bold> and click <bold>OK</bold></item>
					<item>Browse to <italic>$ISE_EIFFEL\examples\dotnet\threading\pools\</italic></item>
					<item>Choose the Ace file for the version of the .net framework you are running</item>
					<item>Choose the directory where the project will be compiled, by default the same directory containing the Ace file.</item>
					<item>Click <bold>OK</bold>.</item>
				</list>
			</output>
		</paragraph>
		<heading>
			<size>2</size>Running
		</heading>
		<paragraph>After you launch the sample, the following output appears: </paragraph>
		<code_block>
Main thread: Queuing an asynchronous operation.
Main thread: Performing other operations.
WorkItem thread: Performing asynchronous operation
Main thread: Waiting for asynchronous operation to complete.
</code_block>
		<paragraph>When the display is finished, the application wait for you to pressed the return key to finished the application.</paragraph>
		<heading>
			<size>2</size>Under the Hood
		</heading>
		<paragraph>This application shows how to use the thread 
			<class_name>THREAD_POOL</class_name>. An asynchronous thread is launched (
			<code>
				<keyword>feature</keyword>
			</code> { 
			<class_name>THREAD_POOL</class_name>}. 
			<feature_name>queue_user_work_item_wait_callback_object</feature_name>(
			<code>
				<keyword>create</keyword>
			</code> {
			<class_name>WAIT_CALLBACK</class_name>}. 
			<feature_name>make</feature_name> (
			<code>
				<keyword>Current</keyword>
			</code>, $ 
			<feature_name>my_async_operation</feature_name>), 
			<code>
				<local_variable>l_async_operation_done</local_variable>
			</code>)) and is associated to the local variable 
			<code>
				<local_variable>l_async_operation_done</local_variable>.
			</code>Both threads perform simultaneously some operations. The main thread wait for the asynchronous thread to complete his own operations ( 
			<code>
				<local_variable>l_async_operation_done</local_variable>
			</code>. 
			<feature_name>wait_one</feature_name>) to close the application.
		</paragraph>
		<paragraph>This sample contains the following class: </paragraph>
		<list ordered="false">
			<item>
				<class_name>THREAD_POOL</class_name>
			</item>
			<item>
				<class_name>WAIT_CALLBACK</class_name>
			</item>
			<item>
				<class_name>AUTO_RESET_EVENT</class_name>
			</item>
		</list>
		<heading>
			<size>2</size>Notes
		</heading>
		<paragraph>This sample is translated from the example located in the Samples\Technologies\Threading\Pools subdirectory of the .NET Framework SDK samples directory of Microsoft Visual Studio .NET. </paragraph>
	</paragraph></document>
