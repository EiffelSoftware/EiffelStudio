<document title="Timers">
	<meta_data>
		<help>
			<toc>
				<envision_pseudo_name>10</envision_pseudo_name>
				<envision_location>EiffelEnvision\Examples\.NET Framework\Threading</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>This sample consist in a command line demonstrating the use of the 
			<class_name>TIMER</class_name> (Timer) class to generate a periodic callback to a method. The sample creates a 
			<class_name>TIMER</class_name> object and passes to it a delegate object. When the 
			<class_name>TIMER</class_name> fires, the delegate is invoked, and a static method is called asynchronously by a worker thread in the thread pool.
		</paragraph>
		<heading>
			<size>2</size>Compiling
		</heading>
		<paragraph>To compile the example:
			<output output="envision">
				<list ordered="true">
					<item>Start Visual Studio .NET</item>
					<item>Choose Open Project from the File menu.</item>
					<item>Navigate to <italic>&lt;EiffelEnvision_installation_path&gt;\compiler\examples\(.net version)\threading\timers\</italic> and select <italic>timers.eifp</italic></item>
					<item>Clicking open loads the selected project</item>
				</list>
			</output>
			<output output="studio">
						<list ordered="true">
							<item>Launch EiffelStudio.</item>
							<item>Click <bold>Add project</bold></item>
							<item>Browse to <italic>$ISE_EIFFEL\examplesdotnet\threading\timers\</italic></item>
							<item>Choose <italic>timers.ecf</italic></item>
							<item>Choose the location where the project will be compiled, by default the same directory containing the configuration file.</item>
							<item>Click <bold>Open</bold>.</item>
						</list>
			</output>

		</paragraph>
		<heading>
			<size>2</size>Running
		</heading>
		<paragraph>After you launch the sample, the following output appears: </paragraph>
		<code_block>
Checking for status updates every two seconds
     &lt;Hit Enter to terminate the sample&gt;
Checking Status.
Checking Status.
Checking Status.
Checking Status.
Checking Status.
...
</code_block>
		<paragraph>When the display is finished, the application wait for you to pressed the return key to finished the application.</paragraph>
		<heading>
			<size>2</size>Under the Hood
		</heading>
		<paragraph>This application shows how to use the thread 
			<class_name>TIMER</class_name>. The timer is launched (
			<code>
				<keyword>create</keyword> 
			</code>
			<code>
				<local_variable>my_timer</local_variable>
			</code>. 
			<feature_name>make_with_callback</feature_name> (
			<code>
				<keyword>create</keyword>
			</code> {
			<class_name>TIMER_CALLBACK</class_name>}. 
			<feature_name>make</feature_name> (Current, $ 
			<feature_name>check_status</feature_name>), Void, 0, 2000)) and call the feature 
			<feature_name>check_status</feature_name> that displays the message 
			<code>
				<string>"Checking Status."</string>
			</code> every two seconds.
		</paragraph>
		<paragraph>This sample contains the following class: </paragraph>
		<list ordered="false">
			<item>
				<class_name>TIMER</class_name>
			</item>
			<item>
				<class_name>TIMER_CALLBACK</class_name>
			</item>
		</list>
		<heading>
			<size>2</size>Notes
		</heading>
		<paragraph>This sample is translated from the example located in the Samples\Technologies\Threading\Timers subdirectory of the .NET Framework SDK samples directory of Microsoft Visual Studio .NET.</paragraph>
	</paragraph></document>
