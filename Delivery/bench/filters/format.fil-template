-------------------------------------------------------------------------------
-- Filter example file for ISE EiffelBench project documentation.
-- $Revision$
-- $Date$
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- In a construct, * represents the image for that construct.
-- Several extra items may be defined and accessed through: $item$.
-- In every construct, the following items are defined:
--
-- $generator$		"ISE EiffelBench version x.x.x"
--
-- $html_meta$		HTML specific. Entire indexing clause defined as meta data.
--					Example: "<META NAME="keywords" CONTENT="eiffel, O-O">".
--
-- $class$			Classname in uppercase. If currently processed file does
--					not represent an Eiffel class, is empty.
--
-- $title$			Title for current document.
--					Example: "EV_ANY Text".
--
-- $root$			Relative base directory of generated documentation.
--					Example: "../../../../"
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Properties
-------------------------------------------------------------------------------

--suffix				|html
	-- Used to specify suffix used for this format.
	-- Examples: html, txt, ps, e, etc.

--file_separator		|/
	-- Specify when format requires a specific file separator.
	-- For HTML, specify '/'. If this symbol is omitted, the separator
	-- specific for the platform is used.

-------------------------------------------------------------------------------
-- Hyperlinking items
-------------------------------------------------------------------------------

menu_bar				|*
	-- Contains the different menu items.

menu_item				|*
	-- Any of the global menu items, "Classes", "Clusters", etc.
	-- If not specified, no text is processed, since without hyperlinking
	-- menu items are useless.
	-- Symbol: $file$

class_menu_item			|*
	-- A link to one of the specified class formats.
	-- If not specified, no text is processed.
	-- Symbol: $file$

menu_item_disabled		|*
	-- The current format.

class_menu_item_disabled|*
	-- The current format.

cluster_name			|*
	-- Symbol: $file$.

-------------------------------------------------------------------------------
-- Major syntactical constructs
-------------------------------------------------------------------------------

class_declaration		|*
	-- Contains entire document.
	-- HTML Example: <HTML><BODY>*</BODY></HTML>

indexing_clause			|*

class_header			|*
	-- Contains class header, not including formal generics.

formal_generics			|*

obsolete_clause			|*

inheritance				|*

creators				|*

feature_clause			|*

feature_declaration		|*
	-- Entire feature declaration. Symbol:
	-- $feature$ The name of the decalred feature.
	-- HTML example: <A NAME="$feature$">*</A>

invariant_clause		|*

class_end				|*

-------------------------------------------------------------------------------
-- Eiffel syntax items
-------------------------------------------------------------------------------

features				|*
	-- Eiffel feature reference. Symbols:
	-- $feature$ actual feature name of feature in class where it is written.
	-- $file$ link to class where feature is written.
	-- HTML example: <A HREF="$file$#$feature$">*</A>

keyword					|*
	-- Processed when a keyword is encountered but it is not explicitly specified.

keyword_feature			|*
	-- Operator keyword or "Precursor"
	-- If not specified, "keyword" is processed.
	-- $file$ and $feature$ are defined, like for "features".

symbol					|*
	-- Processed when a symbol is encountered but it is not explicitly specified.

symbol_feature			|*
	-- Operator symbol. If not specified, "symbol" is processed.
	-- $file$ and $feature$ are defined, like for "features".

reserved_word			|*
	-- `Result' or `Current'.

comment					|*
	-- Example.

comment_url				|*
	-- A URL in a comment. If not specified, "comment" is processed.
	-- Symbol $file$ contains the URL.

string					|*
	-- Eiffel literal string.

string_url				|*
	-- A URL inside an Eiffel string. If not specified, "string" is processed.
	-- Symbol $file$ contains the URL.

quoted					|*

character				|*

number					|*

local_symbol			|*

assertion_tag			|*

indexing_tag			|*

generic					|*
	-- Formal generic class.

-------------------------------------------------------------------------------
-- Whitespace processing
-------------------------------------------------------------------------------

tab						|*
	-- HTML Example: "&nbsp%;&nbsp%;&nbsp%;&nbsp%;".

new_line				|*
	-- HTML Example: "<BR>".

multiple_spaces			|*
	-- In case a sequence of spaces are encountered, this symbol is used for
	-- all subsequent spaces.
	-- HTML Example: "&nbsp%;".

-------------------------------------------------------------------------------
-- Eiffel keywords
-------------------------------------------------------------------------------

interface				|*
	-- Appended to keyword "class" in short and flat-short forms.

alias					|*
all						|*
as						|*
check					|*
class					|*
create					|*
debug					|*
deferred				|*
do						|*
else					|*
elseif					|*
end						|*
ensure					|*
expanded				|*
export					|*
external				|*
false					|*
feature					|*
from					|*
frozen					|*
if						|*
indexing				|*
infix					|*
inherit					|*
inspect					|*
invariant				|*
is						|*
like					|*
local					|*
loop					|*
obsolete				|*
old						|*
once					|*
precursor				|*
prefix					|*
redefine				|*
rename					|*
require					|*
rescue					|*
retry					|*
select					|*
separate				|*
strip					|*
then					|*
true					|*
undefine				|*
unique					|*
until					|*
variant					|*
when					|*

-- Operators:
and						|*
and then				|*
implies					|*
not						|*
or						|*
or else					|*
xor						|*

-------------------------------------------------------------------------------
-- Eiffel symbols
-------------------------------------------------------------------------------

:=						|*
:						|*
%,						|*
->						|*
%--						|*
$						|*
.						|*
..						|*
"						|*
=						|*
!						|*
>						|*
>=						|*
<<						|*
[						|*
{						|*
(						|*
<						|*
<=						|*
'						|*
>>						|*
]						|*
}						|*
)						|*
?=						|*
;						|*
~						|*

-- Operators:
+						|*
-						|*
%*						|*
/						|*
//						|*
\\						|*
^						|*
/=						|*

-------------------------------------------------------------------------------
-- Obsolete filter constructs
-------------------------------------------------------------------------------

!!						|*
creation				|*
cluster_declaration		|*
cluster_header			|*
