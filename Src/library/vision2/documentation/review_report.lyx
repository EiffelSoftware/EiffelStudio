#This file was created by <oconnor> Wed Sep  8 09:47:37 1999
#LyX 1.0 (C) 1995-1999 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass article
\language default
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Author

Vision II Code Review Report
\newline 
 
\size small 
Interactive Software Engineering
\size large 

\newline 

\size default 
Partial code review 19990908
\size large 

\newline 

\size small 
$Id$
\layout Author

Sam O'Connor, Andreas Leitner, Julian Rogers, Alex Buoy & Ian King
\layout Standard
\noindent 
Review held: 08 Sep 1999, ISE meeting room.
\newline 
Present at review: Manus Stapf, Sam O'Connor, Andreas Leitner, Julian Rogers,
 Alex Buoy & Ian King 
\layout Section

Agenda
\layout Standard

Conduct a full review of the source code of the vision 2 library.
 
\newline 
To evaluate aspects of the current quality of the source code and the programmin
g API it provides:
\layout Itemize

completness
\layout Itemize

feature naming consistency
\layout Itemize

consistent use of contracts
\layout Itemize

consistent indexing clauses and comments 
\layout Itemize

areas flaged as needing more attenetion in the code
\layout Standard

The review will not aim to correct these problems but simply take note of
 where they exist.
\newline 
The actions required to fix any problems found will only be decided on after
 the review.
\layout Section

Progress
\layout Standard

The review only covered a handfull of classes but many important general
 issues were raised.
 The group will meet again to decide on a more streamlined way to review
 the remaining classes.
 This will be facilitated by a set of standards emerging from the first
 meeting.
\layout Section

Report
\layout Standard

The report covers standards and actions decided on during the review as
 well as the basic report of the classes reviwed.
\layout Subsection

Standards
\layout Subsubsection

Comments
\layout Standard

All comments must:
\layout Enumerate

start with a capital letter and end with a full stop,
\layout Enumerate

be worded as a question for boolean features (with a question mark),
\layout Enumerate

use 
\begin_inset Quotes eld
\end_inset 

assign
\begin_inset Quotes erd
\end_inset 

 instead of 
\begin_inset Quotes eld
\end_inset 

set
\begin_inset Quotes erd
\end_inset 

,
\layout Enumerate

not use `the' (Check this),
\layout Enumerate

quote Current as `Current',
\layout Enumerate

quote True and False as `True' and `False'.
 (Check),
\layout Enumerate

read correctly from the `is'.
 (Check the book for guidelines) and
\layout Enumerate

have a descriptions of the units that apply to its arguments,
\layout Subsubsection

Indentation
\layout Enumerate

Tab stops in editors must be set to eight spaces.
\layout Enumerate

Indentation must be done with tabs only, never spaces.
\layout Subsubsection

Indexing clauses
\layout Standard

\begin_float margin 
\layout Standard

needs more work when propper standard is defined
\end_float 
\layout Enumerate

Always use the standard text provided for starting your class comments.
\layout Enumerate

No header should include author.
\layout Enumerate

A keywords field should be included even if empty.
\layout Enumerate

Use %N% to separate class description lines.
 (See new style in compiler RSN)
\layout Subsubsection

Features which take a boolean
\layout Enumerate

No feature should take a single boolean, it must be split into two features.
\layout Enumerate

Such feature pairs must use the enable_x/disable_x naming pattern.
\layout Subsubsection

Boolean features
\layout Enumerate

Use 
\family typewriter 
is_
\family default 
 at the start where possible (or 
\family typewriter 
has_
\family default 
 check this).
\layout Enumerate

Use positive names i.e.
 is_valid instead of is_invalid.
\layout Enumerate

Never include the reverse feature.
\layout Subsubsection

Creation style
\layout Enumerate

Replace !! with create.
\layout Enumerate

Replace creation with create.
\layout Enumerate

After create, each new valid routine must start on a new line.
\layout Subsubsection

Miscellaneous
\layout Enumerate

All magic numbers must be removed.
 Never use `variable := 5', use a pre-defined constant instead.
 (0 and 1 are somtimes magic numbers too so be careful)
\layout Enumerate

Only standard feature clauses should be used.
 
\layout Enumerate

\begin_float margin 
\layout Standard

we need a more detailed standard on contracts
\end_float 
Every feature should have a post condition, no matter how simple.
\layout Enumerate

Any inherited feature that are not used should be exported to none.
\layout Enumerate

All once functions should have a post condition of `ensure not Void'.
\layout Enumerate

Use --| for internal/sensitive comments.
\layout Enumerate

Use `fix me' in comments when required, along with date, author and problem
 description.
\layout Enumerate

Implementation should never be exported.
\layout Enumerate

Property descriptions should have `able' on the end of the name if applicable.
\layout Enumerate

For commands binding features, group adds together, also group removes together.
\layout Subsection

General Tasks
\layout Enumerate

Think about a way of enforcing critical feature calling in creation routines
 (such as calling widget_make in a widget creation routine).
 Mabey this can be achieved via the setting of a flag in the critical routine
 and having an invariant that it must be set.
\layout Enumerate

Create a new abstration class EV_DEVICE for I/O (and other?) devices, Mouse
 (infinite no of buttons), Screen, Printer.
\layout Enumerate

Create a slots abstraction for attaching commands to events.
\layout Subsection

Specific tasks
\layout Enumerate

Confirm currently correct copyright notice, find script for updating notices
 in the source or wirte a new one and update copyright notice at the end
 of every class.
 (the pipe `|' should be removed from the `comment out' out of the notice)
\layout Enumerate

Decide on standard indexing clauses, need to add some kind of keyword field.
 (See clauses generated by Case for ideas)
\layout Enumerate

Apply indexing clause standard to every class, descriptions need to be more
 descriptive.
\layout Enumerate

Check quotes in comments : 'cmd' should be `cmd' (First check in OOCS2 which
 things should be quoted)
\layout Enumerate

Insert full stops (.) at the end of every comment
\layout Enumerate

Change all instances of 
\family typewriter 
creation
\family default 
 to 
\family typewriter 
create
\layout Enumerate

Change all instances of !! (and !CLASS!) to create (see David for more details)
\layout Enumerate

Make sure all creation procedure declarations are on separate lines : 
\newline 
create
\newline 
make1,
\newline 
make2
\layout Enumerate

Check spellings in comments (American English)
\layout Enumerate

Define standard for feature clause categorisations.
 (Based on OOSC2 )
\layout Enumerate

Check all feature clause comments (Status Report, Access, Initialisation
 etc), make sure features are correctly categorised.
 
\layout Enumerate

Check that all inherited and localy defined features are set to 
\family typewriter 
export {NONE
\family default 
 unless they are a needed part of the interface.
 (eg Restrict export of 'implementation' feature)
\layout Enumerate

Add post conditions to 
\family typewriter 
\series bold 
\size large 
ALL
\family default 
\series default 
\size default 
 routines.
 
\layout Enumerate

Check all post conditions for maximum possible assertions.
\layout Enumerate

Make sure all contracts are as tight as possible
\layout Enumerate

Check 
\family typewriter 
\series bold 
\size large 
ALL
\family default 
\series default 
\size default 
 routines for postconditions.
\layout Enumerate

Re-word comments as though read directly from the 'is' (Check OOSC2 for
 the standard on this)
\layout Enumerate

Remove mutual boolean features, (is_hidden/is_shown), choosing only the
 positive one (is_shown)
\layout Enumerate

Chage every feature that takes a single boolean into two features.
 
\family typewriter 
set_enabled(BOOLEAN)
\family default 
 should be split to 
\family typewriter 
set_enabled
\family default 
 and 
\family typewriter 
set_disabled
\layout Enumerate

Create a tool that strips out piped comments (--|) used for internal/sensitive
 commenting not required in interface short-form and not to be shipped to
 clients.
 Make one of the pre delivery tests: grep for pipe comments == {}
\layout Enumerate

Define standard for 'fix-me' in --| comments then check all classes for
 other standards and convert them.
\layout Enumerate

Check that all features taking integer arguments clearly specify the units
 of the arguments in the comment.
 (ie pixels, points, miles, logical size, etc...)
\layout Enumerate

Make sure 'add' routines declarations are 'inline', the same applies to
 `set' routines.
\layout Enumerate

Re-implement EV_SPLIT_AREA in 100% pure Vision
\layout Enumerate

Separate viewport from scrolling window to allow viewport to be used without
 scrollbars.
\layout Enumerate

When a window is set to modal and shown, implement a mechanism that greys
 out all of the other windows governed by the application
\layout Enumerate

Look for needed invariants in the class text (such as exists: not destroyed)
 in EV_UNTITLED_WINDOW (I think)
\layout Enumerate

Revise the standards section above to ensure is accuratly captures all informati
on from the above tasks.
\the_end
