///////////////////////////////////////////////////////////////////////////////
// ISE.Compiler.IDL	    : Interface definitions for COM Compiler
//
// Last commit by		: $Author$
// Date					: $Date$
// Revision				: $Revision$
//
// Notes				: Interfaces, enums and structs relating to ENViSioN! 2.0

// GUID's for type library
#include "ise_compiler_guid.h"

// Depenancies
import "oaidl.idl";

// =========================================================================
//                                                                 Constants

#define EIFFEL_BASE_DISPID  10000

// =========================================================================
//                                                      Forward Declarations

interface IEiffelProject;
interface IEiffelCompletionInfo;
interface IEiffelCompletionEntry;
interface IEiffelCompiler;
interface IEiffelCompilerEvents;
interface IEiffelSystemBrowser;
interface IEiffelClusterDescriptor;
interface IEiffelClassDescriptor;
interface IEiffelFeatureDescriptor;
interface IEiffelProjectProperties;
interface IEiffelClusterProperties;
interface IEiffelSystemExternals;
interface IEiffelSystemAssemblies;
interface IEiffelAssemblyProperties;
interface IEiffelSystemClusters;
interface IEnumEiffelClass;
interface IEnumCluster;
interface IEnumFeature;
interface IEnumClusterProp;
interface IEnumClusterExcludes;
interface IEnumIncludePaths;
interface IEnumObjectFiles;
interface IEnumAssembly;
interface IEnumCompletionEntry;
interface IEnumParameter;
interface IEiffelParameterDescriptor;
interface IEiffelHtmlDocumentationGenerator;
interface IEiffelHtmlDocumentationEvents;
interface IEiffelException;
enum EIF_ENTITY_IMAGES;
enum EIF_FEATURE_TYPES;
enum EIF_EXCEPTIONS;
enum EIF_PROJECT_TYPES;
enum EIF_ASSERTIONS;
enum EIF_CLUSTER_NAMESPACE_GENERATION;
enum EIF_COMPILATION_MODE;


// =========================================================================
//															   Dispatch Id's

enum
{
    // IEiffelProjectProperties Dispatch ID's
    DISPID_system_name = EIFFEL_BASE_DISPID,
    DISPID_root_class_name,
    DISPID_creation_routine,
    DISPID_namespace_generation,
    DISPID_default_namespace,
    DISPID_project_type,
    DISPID_dot_net_naming_convention,
    DISPID_generate_debug_info,
    DISPID_precompiled_library,
    DISPID_assertions,
    DISPID_clusters,
    DISPID_externals,
    DISPID_assemblies,
    DISPID_title,
    DISPID_description,
    DISPID_company,
    DISPID_product,
    DISPID_version,
    DISPID_trademark,
    DISPID_copyright,
    DISPID_culture,
    DISPID_key_file_name,
    DISPID_working_directory,
    DISPID_Apply,
    DISPID_last_exception,

    // IEiffelSystemClusters Dispatch ID's
    DISPID_GetClusterTree,
    DISPID_GetAllClusters,
    DISPID_GetClusterProperties,
    DISPID_GetClusterPropertiesById,
	DISPID_GetClusterFullName,
	DISPID_ChangeClusterName,
    DISPID_AddCluster,
    DISPID_RemoveCluster,
	DISPID_StoreClusters,
	DISPID_IsClusterNameAvailable,
    DISPID_IsValidClusterName,

	DISPID_store,

    // IEiffelSystemAssemblies Dispatch ID's
    DISPID_add_assembly,
    DISPID_wipe_out,

    // IEiffelClusterProperties Dispatch ID's
    DISPID_name,
    DISPID_cluster_path,
    DISPID_override,
    DISPID_is_library,
    DISPID_all,
    DISPID_use_system_default,
    DISPID_evaluate_require_by_default,
    DISPID_evaluate_ensure_by_default,
    DISPID_evaluate_check_by_default,
    DISPID_evaluate_loop_by_default,
    DISPID_evaluate_invariant_by_default,
    DISPID_set_assertions,
    DISPID_excluded,
    DISPID_add_exclude,
    DISPID_remove_exclude,
    DISPID_parent_name,
    DISPID_has_parent,
    DISPID_subclusters,
    DISPID_has_children,
    DISPID_cluster_id,
    DISPID_is_eiffel_library,
    DISPID_expanded_cluster_path,
    DISPID_cluster_namespace,

    // IEiffelAssemblyProperties Dispatch ID's
    DISPID_assembly_name,
    DISPID_assembly_version,
    DISPID_assembly_culture,
    DISPID_assembly_public_key_token,
    DISPID_is_local,
    DISPID_assembly_cluster_name,
    DISPID_assembly_prefix,
    DISPID_is_prefix_read_only,

    // IEiffelSystemExternals Dispatch ID's
    DISPID_add_include_path,
    DISPID_remove_include_path,
    DISPID_replace_include_path,
    DISPID_include_paths,
    DISPID_add_object_file,
    DISPID_remove_object_file,
    DISPID_replace_object_file,
    DISPID_object_files
};



// =========================================================================
//                                                         Enum Declarations

[
    uuid (UUID_EnumEIF_EXCEPTIONS),
    helpstring ("Eiffel Exception Codes")
]
typedef enum EIF_EXCEPTIONS
{
    EIF_EXCEPTIONS_Unspecified = 0,
    EIF_EXCEPTIONS_Successful,
    
    // IEiffelProject Exceptions
    EIF_EXCEPTIONS_NoProjectLoaded,
    EIF_EXCEPTIONS_ProjectIncompatible,
    EIF_EXCEPTIONS_ProjectFileCorrupted,
    EIF_EXCEPTIONS_UnableToRemoveProject,
    EIF_EXCEPTIONS_UnableToCreateProject,
    EIF_EXCEPTIONS_InvalidAceFile,
    EIF_EXCEPTIONS_ProjectNotCompiled,
    EIF_EXCEPTIONS_AceFileDoesNotExists,
    EIF_EXCEPTIONS_ProjectAlreadyInitialized,
    EIF_EXCEPTIONS_ProjectIncomplete,
    EIF_EXCEPTIONS_IOError,
    EIF_EXCEPTIONS_NonDotnetProject,
    
    // IEiffelSystemAssemblies Exceptions
    EIF_EXCEPTIONS_AssemblyAlreadyAdded,
    EIF_EXCEPTIONS_InvalidAssemblyPrefix

} EIF_EXCEPTIONS;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_COMPILATION_MODE),
    helpstring ("Various modes of compilation.")
]
typedef enum EIF_COMPILATION_MODE
{
	EIF_COMPILATION_MODE_Workbench = 0,
	EIF_COMPILATION_MODE_Finalize = 1,
	EIF_COMPILATION_MODE_Precompile = 2
}EIF_COMPILATION_MODE;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_ASSERTIONS),
    helpstring ("Assertion levels for project settings.")
]
typedef enum EIF_ASSERTIONS
{
    EIF_ASSERTIONS_None = 0,
    EIF_ASSERTIONS_Require = 1,
    EIF_ASSERTIONS_Ensure = 2,
    EIF_ASSERTIONS_Check = 4,
    EIF_ASSERTIONS_Invariant = 8,
    EIF_ASSERTIONS_Loop = 16
}EIF_ASSERTIONS;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_CLUSTER_NAMESPACE_GENERATION),
    helpstring ("Type of cluster namespace generation.")
]
typedef enum EIF_CLUSTER_NAMESPACE_GENERATION
{
    EIF_CLUSTER_NAMESPACE_GENERATION_None = 0,
    EIF_CLUSTER_NAMESPACE_GENERATION_ClusterName = 1,
    EIF_CLUSTER_NAMESPACE_GENERATION_FullClusterName = 2
}EIF_CLUSTER_NAMESPACE_GENERATION;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_PROJECT_TYPES),
    helpstring ("Type of compilation for projects.")
]
typedef enum EIF_PROJECT_TYPES
{
    EIF_PROJECT_TYPES_ConsoleApplication = 0,
    EIF_PROJECT_TYPES_WindowsApplication,
    EIF_PROJECT_TYPES_ClassLibrary,
    EIF_PROJECT_TYPES_PrecompiledLibrary
}EIF_PROJECT_TYPES;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_ENTITY_IMAGES),
    helpstring ("Image indexes associated with a feature.")
]
typedef enum EIF_ENTITY_IMAGES{
    EIF_ENTITY_IMAGES_FrozenOnce = 24,
    EIF_ENTITY_IMAGES_Obsolete = 23,
    EIF_ENTITY_IMAGES_FrozenAttribute = 22,
    EIF_ENTITY_IMAGES_Attribute = 19,
    EIF_ENTITY_IMAGES_Once = 18,
    EIF_ENTITY_IMAGES_FrozenExternal = 25,
    EIF_ENTITY_IMAGES_FrozenFeature = 21,
    EIF_ENTITY_IMAGES_ExternalFeature = 17,
    EIF_ENTITY_IMAGES_Deferred = 16,
    EIF_ENTITY_IMAGES_Feature = 4,
    EIF_ENTITY_IMAGES_Variable = 26
} EIF_ENTITY_IMAGES;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_FEATURE_TYPES),
    helpstring ("Type of Eiffel feature.")
]
typedef enum EIF_FEATURE_TYPES
{
    EIF_FEATURE_TYPES_Attribute = 1,
    EIF_FEATURE_TYPES_Constant = 2,
    EIF_FEATURE_TYPES_Deferred = 4,
    EIF_FEATURE_TYPES_External = 8,
    EIF_FEATURE_TYPES_Frozen = 16,
    EIF_FEATURE_TYPES_Function = 32,
    EIF_FEATURE_TYPES_Infix = 64,
    EIF_FEATURE_TYPES_Obsolete = 128,
    EIF_FEATURE_TYPES_Once = 256,
    EIF_FEATURE_TYPES_Prefix = 512,
    EIF_FEATURE_TYPES_Procedure = 1024
} EIF_FEATURE_TYPES;

// =========================================================================
//                                                    Interface Declarations

[
    dual,
    object,
    uuid (UUID_IEiffelSystemClusters),
    helpstring ("Eiffel System Clusters.")
]
interface IEiffelSystemClusters: IDispatch
{
	[id( DISPID_GetClusterTree ), helpstring( "Retrieve enumerator of clusters in tree form." )]
	HRESULT GetClusterTree( [out, retval] IEnumClusterProp** ppIEnumClusterProp);
	
	[id( DISPID_GetAllClusters ), helpstring( "Retrieve enumerator of all defined clusters." )]
	HRESULT GetAllClusters( [out, retval] IEnumClusterProp** ppIEnumClusterProp);

	[id( DISPID_GetClusterFullName ), helpstring( "Get a clusters full name from its name." )]
	HRESULT GetClusterFullName( [in] BSTR bstrName, [out, retval] BSTR* pbstrFullName );

	[id( DISPID_GetClusterProperties ), helpstring( "Retrieve a clusters properties by its name." )]
    HRESULT GetClusterProperties( [in] BSTR bstrName, [out, retval] IEiffelClusterProperties** ppIEiffelClusterProperties );

	[id( DISPID_GetClusterPropertiesById ), helpstring( "Retrieve a clusters properties by its ID." )]
    HRESULT GetClusterPropertiesById( [in] ULONG nClusterId, [out, retval] IEiffelClusterProperties** ppIEiffelClusterProperties );

	[id( DISPID_ChangeClusterName ), helpstring( "Change a clusters name." )]
	HRESULT ChangeClusterName( [in] BSTR bstrName, [in] BSTR bstrNewName );

	[id( DISPID_AddCluster ), helpstring( "Add a cluster to system clusters." )]
    HRESULT AddCluster( [in] BSTR bstrName, [in] BSTR bstrParentName, [in] BSTR bstrPath);

	[id( DISPID_RemoveCluster ), helpstring( "Remove a cluster from system clusters." )]
    HRESULT RemoveCluster( [in] BSTR bstrName );

	[id( DISPID_StoreClusters ), helpstring( "Persist current changes to disk" )]
	HRESULT Store();

	[id( DISPID_IsClusterNameAvailable ), helpstring( "Determins if 'bstrName' is available as a cluster name" )]
    HRESULT IsClusterNameAvailable( [in] BSTR bstrName, [out, retval] VARIANT_BOOL* pvbAvailable );

	[id( DISPID_IsValidClusterName ), helpstring( "Validates a cluster name" )]
    HRESULT IsValidClusterName( [in] BSTR bstrName, [out, retval] VARIANT_BOOL* pvbValid );
};

//---------------------------------------------------------------------


[
    oleautomation,
    uuid (UUID_IEiffelException),
    helpstring ("A single exception object")
]
interface IEiffelException: IDispatch
{
    [helpstring ("Get inner exception"), propget]
    HRESULT InnerException ([out, retval] IEiffelException** ppIEiffelException);
    
    [helpstring ("Get exception message"), propget]
    HRESULT Message ([out, retval] BSTR* pbstrMessage);
    
    [helpstring ("Retrieve exception type"), propget]
    HRESULT ExceptionCode ([out, retval] EIF_EXCEPTIONS* pEIF_EXCEPTIONS);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelProject),
    helpstring ("Eiffel Project.")
]
interface IEiffelProject: IDispatch
{
    [helpstring ("Retrieve Eiffel Project")]
    HRESULT RetrieveEiffelProject ([in] BSTR bstrProjectFileName);

    [helpstring ("Create new Eiffel project from an existing ace file.")]
    HRESULT CreateEiffelProject ([in] BSTR bstrAceFileName, [in] BSTR bstrProjectDirectory);

    [helpstring ("Create new Eiffel project from scratch.")]
    HRESULT GenerateNewEiffelProject ([in] BSTR bstrProjectName, [in] BSTR bstrAceFileName, [in] BSTR bstrRootClassName, [in] BSTR bstrCreationRoutine, [in] BSTR bstrProjectDirectory);

    [helpstring ("Full path to .epr file."), propget]
    HRESULT ProjectFileName ([out, retval] BSTR* pbstrProjectFileName);

    [helpstring ("Full path to Ace file."), propget]
    HRESULT AceFileName ([out, retval] BSTR* pbstrAceFileName);

    [helpstring ("Project directory."), propget]
    HRESULT ProjectDirectory ([out, retval] BSTR* pbstrProjectDirectory);

    [helpstring ("Is project valid?"), propget]
    HRESULT IsValidProject ([out, retval] VARIANT_BOOL* pvbValid);

    [helpstring ("Last exception raised"), propget]
    HRESULT LastException ([out, retval] IEiffelException** ppIEiffelException);

    [helpstring ("Compiler."), propget]
    HRESULT Compiler ([out, retval] IEiffelCompiler** ppIEiffelCompiler);

    [helpstring ("Has system been compiled?"), propget]
    HRESULT IsCompiled ([out, retval] VARIANT_BOOL* pvbCompiled);

    [helpstring ("Has the project updated since last compilation?"), propget]
    HRESULT ProjectHasUpdated ([out, retval] VARIANT_BOOL* pvbUpdated);

    [helpstring ("System Browser."), propget]
    HRESULT SystemBrowser ([out, retval] IEiffelSystemBrowser** ppEiffelSystemBrowser);

    [helpstring ("Project Properties."), propget]
    HRESULT ProjectProperties ([out, retval] IEiffelProjectProperties** ppIEiffelProjectProperties);

    [helpstring ("Completion information"), propget]
    HRESULT CompletionInformation ([out, retval] IEiffelCompletionInfo** ppIEiffelCompletionInfo);

    [helpstring ("Help documentation generator"), propget]
    HRESULT HtmlDocumentationGenerator ([out, retval] IEiffelHtmlDocumentationGenerator** ppIEiffelHtmlDocumentationGenerator);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompletionInfo),
    helpstring ("Eiffel Completion info.")
]
interface IEiffelCompletionInfo: IDispatch
{
    [helpstring ("Add a local variable used for solving member completion list")]
    HRESULT AddLocal ([in] BSTR bstrName, [in] BSTR bstrType);

    [helpstring ("Add an argument used for solving member completion list")]
    HRESULT AddArgument ([in] BSTR bstrName, [in] BSTR bstrType);

    [helpstring ("Features accessible from target.")]
    HRESULT TargetFeatures ([in] BSTR bstrTarget, [in] BSTR bstrFeatureName, [in] BSTR bstrFileName, [out] VARIANT* pvarNames, [out] VARIANT* pvarSignatures, [out] VARIANT* pvarImageIndexes);

    [helpstring ("Feature information")]
    HRESULT TargetFeature ([in] BSTR bstrTarget, [in] BSTR bstrFeatureName, [in] BSTR bstrFileName, [out, retval] IEiffelFeatureDescriptor** ppIEiffelFeatureDescriptor);

    [helpstring ("Flush temporary completion features for a specific file")]
    HRESULT FlushCompletionFeatures ([in] BSTR bstrFileName);

    [helpstring ("Initialize a feature for completion without compiltation")]
    HRESULT InitializeFeature ([in] BSTR bstrName, [in] VARIANT varArguments, [in] VARIANT varArgumentTypes, [in] BSTR bstrReturnType, [in] ULONG ulFeatureType, [in] BSTR bstrFileName);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompiler),
    helpstring ("Eiffel Compiler.")
]
interface IEiffelCompiler: IDispatch
{
    [helpstring ("Compiler version."), propget]
    HRESULT CompilerVersion ([out, retval] BSTR* pbstrVersion);
    
    [helpstring ("Is the compiler a trial version."), propget]
    HRESULT HasSignableGeneration ([out, retval] VARIANT_BOOL* pvbSignable);

    [helpstring ("Can product be run? (i.e. is it activated or was run less than 10 times)")]
    HRESULT CanRun ([out, retval] VARIANT_BOOL* pvbCanRun);

    [helpstring ("Compile.")]
    HRESULT Compile (EIF_COMPILATION_MODE mode);
    
    [helpstring ("Compile to an already established named pipe.")]
    HRESULT CompileToPipe (EIF_COMPILATION_MODE mode, BSTR bstrPipeName);

    [helpstring ("Was last compilation successful?"), propget]
    HRESULT WasCompilationSuccessful ([out, retval] VARIANT_BOOL* pvbSuccess);

    [helpstring ("Did last compile warrant a call to finish_freezing?"), propget]
    HRESULT FreezingOccurred ([out, retval] VARIANT_BOOL* pvbDidFreeze);

    [helpstring ("Eiffel Freeze command name"), propget]
    HRESULT FreezeCommandName ([out, retval] BSTR* pbstrCmdName);

    [helpstring ("Eiffel Freeze command arguments"), propget]
    HRESULT FreezeCommandArguments ([out, retval] BSTR* pbstrCmdArgs);

    [helpstring ("Remove file locks")]
    HRESULT RemoveFileLocks ();
   
    [helpstring ("Should warning events be raised when compilation raises a warning?"), propput]
    HRESULT DisplayWarnings ([in] VARIANT_BOOL vbShowWarnings);
       
    [helpstring ("Takes a path and expands it using the env vars.")]
    HRESULT ExpandPath ([in] BSTR bstrPath, [out, retval] BSTR* pbstrFullPath);

    [helpstring ("Generate a cyrptographic key filename.")]
    HRESULT GenerateMsilKeyFileName ([in] BSTR bstrFileName);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompilerEvents),
    helpstring ("Eiffel Compiler Events.")
]
interface IEiffelCompilerEvents: IUnknown
{
    [helpstring ("Beginning compilation.")]
    HRESULT BeginCompile ();

    [helpstring ("Start of new degree phase in compilation.")]
    HRESULT BeginDegree ([in] LONG ulDegree);
    
    [helpstring ("Finished compilation.")]
    HRESULT EndCompile ([in] VARIANT_BOOL vbSucessful);

    [helpstring ("Should compilation continue.")]
    HRESULT ShouldContinue ([in, out] VARIANT_BOOL* pvbContinue);

    [helpstring ("Output string.")]
    HRESULT OutputString ([in] BSTR bstrOutput);

    [helpstring ("Last error.")]
    HRESULT OutputError ([in] BSTR bstrFullError, [in] BSTR bstrShortError, [in] BSTR bstrCode, [in] BSTR bstrFileName, [in] ULONG ulLine, [in] ULONG ulCol);
    
    [helpstring ("Last warning.")]
    HRESULT OutputWarning ([in] BSTR bstrFullWarning, [in] BSTR bstrShortWarning, [in] BSTR bstrCode, [in] BSTR bstrFileName, [in] ULONG ulLine, [in] ULONG ulCol);
};
//---------------------------------------------------------------------
[
    oleautomation,
    uuid (UUID_IEiffelHtmlDocumentationGenerator),
    helpstring ("Eiffel Project HTML Documentation Generator.")
]
interface IEiffelHtmlDocumentationGenerator: IDispatch
{
    [helpstring ("Exclude a cluster from being generated.")]
    HRESULT AddExcludedCluster ([in] BSTR bstrFullClusterName);

    [helpstring ("Include a cluster to be generated.")]
    HRESULT RemoveExcludedCluster ([in] BSTR bstrFullClusterName);

    [helpstring ("Generate the HTML documents into path.")]
    HRESULT StartGeneration ([in] BSTR bstrGenerationPath);
    
    [helpstring ("Add a callback interface.")]
    HRESULT AdviseStatusCallback ([in] IEiffelHtmlDocumentationEvents* pIEiffelHtmlDocumentationEvents);

    [helpstring ("Remove a callback interface.")]
    HRESULT UnadviseStatusCallback ([in] IEiffelHtmlDocumentationEvents* pIEiffelHtmlDocumentationEvents);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelHtmlDocumentationEvents),
    helpstring ("Callback interface for HTML Documentation Generator.")
]
interface IEiffelHtmlDocumentationEvents: IDispatch
{
    [helpstring ("Notify that documentation generating is initializing")]
    HRESULT NotifyInitalizingDocumentation ();

    [helpstring ("Notify that the percentage completed has changed")]
    HRESULT NotifyPercentageComplete ([in] ULONG ulPercent);

    [helpstring ("Put a header message to the output")]
    HRESULT OutputHeader ([in] BSTR bstrMsg);

    [helpstring ("Put a string to the output")]
    HRESULT OutputString ([in] BSTR bstrMsg);

    [helpstring ("Put a class name to the output")]
    HRESULT OutputClassDocumentMessage ([in] BSTR bstrMsg);
    
    [helpstring ("Should compilation continue.")]
    HRESULT ShouldContinue ([in, out] VARIANT_BOOL* pvbContinue);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumEiffelClass),
    helpstring ("Eiffel Class Enumeration.")
]
interface IEnumEiffelClass: IDispatch
{
    HRESULT Next([out] IEiffelClassDescriptor** ppIEiffelClassDescriptor, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumEiffelClass** ppIEnumEiffelClass);

    HRESULT IthItem ([in] ULONG ulIndex, [out] IEiffelClassDescriptor** ppIEiffelClassDescriptor);

	[propget]
    HRESULT Count ([out, retval] ULONG* pulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumCluster),
    helpstring ("Eiffel Cluster Enumeration.")
]
interface IEnumCluster: IDispatch
{
    HRESULT Next([out] IEiffelClusterDescriptor** ppIEiffelClusterDescriptor, [out] ULONG *pulCount);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumCluster** ppIEnumCluster);

    HRESULT IthItem ([in] ULONG ulIndex, [out] IEiffelClusterDescriptor** ppIEiffelClusterDescriptor);

	[propget]
    HRESULT Count ([out, retval] ULONG* pulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumFeature),
    helpstring ("Eiffel Feature Enumeration.")
]
interface IEnumFeature: IDispatch
{
    HRESULT Next([out] IEiffelFeatureDescriptor** ppIEiffelFeatureDescriptor, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumFeature** ppIEnumFeature);

    HRESULT IthItem ([in] ULONG ulIndex, [out] IEiffelFeatureDescriptor** ppIEiffelFeatureDescriptor);

	[propget]
    HRESULT Count ([out, retval] ULONG *ulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEnumParameter),
    helpstring ("Feature paramaters enumeration.")
]
interface IEnumParameter: IDispatch
{
    HRESULT Next([out] IEiffelParameterDescriptor** ppIEiffelParameterDescriptor , [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumParameter** ppIEnumParameter);

    HRESULT IthItem ([in] ULONG ulIndex, [out] IEiffelParameterDescriptor** ppIEiffelParameterDescriptor);

	[propget]
    HRESULT Count ([out, retval] ULONG *ulCount);
};

//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumClusterProp),
    helpstring ("Eiffel Cluster Properties Enumeration.")
]
interface IEnumClusterProp: IDispatch
{
    HRESULT Next([out] IEiffelClusterProperties** ppIEiffelClusterProperties,[out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumClusterProp** ppIEnumClusterProp);

    HRESULT IthItem ([in] ULONG ulIndex, [out] IEiffelClusterProperties** ppIEiffelClusterProperties);

	[propget]
    HRESULT Count ([out, retval] ULONG *pulCount0);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(CA8DB208-5E92-426e-953D-2660C131C618),
    helpstring ("Eiffel Cluster Exluded Directories Enumeration.")
]

interface IEnumClusterExcludes: IDispatch
{
    HRESULT Next([out] BSTR *pbstrExclude, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumClusterExcludes** ppIEnumClusterExcludes);

    HRESULT IthItem ([in] ULONG ulIndex, [out] BSTR *pbstrExclude);

	[propget]
    HRESULT Count ([out, retval] ULONG *pulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumAssembly),
    helpstring ("Eiffel Assembly Enumeration.")
]
interface IEnumAssembly: IDispatch
{
    HRESULT Next([out] IEiffelAssemblyProperties** ppIEiffelAssemblyProperties, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumAssembly** ppIEnumAssembly);

    HRESULT IthItem ([in] ULONG ulCount, [out] IEiffelAssemblyProperties** ppIEiffelAssemblyProperties);

	[propget]
    HRESULT Count ([out, retval] ULONG* pulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumIncludePaths),
    helpstring ("Include Path Enumeration.")
]
interface IEnumIncludePaths: IDispatch
{
    HRESULT Next([out] BSTR *pbstrIncludePath, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumIncludePaths** ppIEnumIncludePaths);

    HRESULT IthItem ([in] ULONG ulIndex, [out] BSTR *pbstrIncludePath);

	[propget]
    HRESULT Count ([out, retval] ULONG* pulCount);
};

//---------------------------------------------------------------------
[
    oleautomation,
    uuid(UUID_IEnumObjectFiles),
    helpstring ("Object File Enumeration.")
]
interface IEnumObjectFiles: IDispatch
{
    HRESULT Next([out] BSTR *pbstrObjectFile, [out] ULONG *pulFetched);

    HRESULT Skip([in] ULONG ulCount);

    HRESULT Reset();

    HRESULT Clone([out] IEnumObjectFiles** ppIEnumObjectFiles);

    HRESULT IthItem ([in] ULONG ulIndex, [out] BSTR *pbstrObjectFile);

	[propget]
    HRESULT Count ([out, retval] ULONG* pulCount);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelSystemBrowser),
    helpstring ("System Browser.")
]
interface IEiffelSystemBrowser: IDispatch
{
    [helpstring ("List of classes in system.")]
    HRESULT SystemClasses ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of classes in system.")]
    HRESULT ClassCount ([out, retval] ULONG* pulClassCount);

    [helpstring ("List of system's clusters.")]
    HRESULT SystemClusters ([out, retval] IEnumCluster** ppIEnumCluster);

    [helpstring ("List of system's external clusters.")]
    HRESULT ExternalClusters ([out, retval] IEnumCluster** ppIEnumCluster);

    [helpstring ("Returns all of the assemblies in an enumerator")]
    HRESULT Assemblies ([out, retval] IEnumAssembly** ppIEnumAssembly);

    [helpstring ("Number of top-level clusters in system.")]
    HRESULT ClusterCount ([out, retval] ULONG* pulClusterCount);

    [propget, helpstring ("Number of top-level clusters in system.")]
    HRESULT RootCluster ([out, retval] IEiffelClusterDescriptor** ppIEiffelClusterDescriptor);

    [helpstring ("Cluster descriptor.")]
    HRESULT ClusterDescriptor ([in] BSTR bstrClassName, [out, retval] IEiffelClusterDescriptor** ppIEiffelClusterDescriptor);

    [helpstring ("Class descriptor.")]
    HRESULT ClassDescriptor ([in] BSTR bstrClusterName, [out, retval] IEiffelClassDescriptor** ppIEiffelClassDescriptor);

    [helpstring ("Feature descriptor.")]
    HRESULT FeatureDescriptor ([in] BSTR bstrClassName, [in] BSTR bstrFeatureName, [out, retval] IEiffelFeatureDescriptor** ppIEiffelFeatureDescriptor);

    [helpstring ("Search classes with names matching `a_string'.")]
    HRESULT SearchClasses ([in] BSTR bstrSearchStr, [in] VARIANT_BOOL vbIsSubstring, [out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Search feature with names matching `a_string'.")]
    HRESULT SearchFeatures ([in] BSTR bstrSearchStr, [in] VARIANT_BOOL vbIsSubstring, [out, retval] IEnumFeature ** ppIEnumFeature);

    [helpstring ("Retrieve description from dotnet type")]
    HRESULT DescriptionFromDotnetType ([in] BSTR bstrAssemblyName, [in] BSTR bstrFullDotnetName, [out, retval] BSTR *pbstrDescription);

    [helpstring ("Retrieve description from dotnet feature")]
    HRESULT DescriptionFromDotnetFeature ([in] BSTR bstrAssemblyName, [in] BSTR bstrFullDotnetName, [in] BSTR bstrFeatureSignature, [out, retval] BSTR *pbstrDescription);

};
//---------------------------------------------------------------------


[
    oleautomation,
    uuid (UUID_IEiffelClusterDescriptor),
    helpstring ("Eiffel Cluster Descriptor.")
]
interface IEiffelClusterDescriptor: IDispatch
{
    [helpstring ("Cluster name."), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [helpstring ("Cluster description."), propget]
    HRESULT Description ([out, retval] BSTR* pbstrDescription);

    [helpstring ("Cluster Tool Tip."), propget]
    HRESULT ToolTip ([out, retval] BSTR* pbstrToolTop);

    [helpstring ("List of classes in cluster.")]
    HRESULT Classes ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of classes in cluster.")]
    HRESULT ClassCount ([out, retval] ULONG* pulClassCount);

    [helpstring ("List of subclusters in cluster.")]
    HRESULT Clusters ([out, retval] IEnumCluster** ppIEnumCluster);

    [helpstring ("Number of subclusters in cluster.")]
    HRESULT ClusterCount ([out, retval] ULONG* pulCount);

    [helpstring ("Full path to cluster."), propget]
    HRESULT ClusterPath ([out, retval] BSTR* pbstrPath);

    [helpstring ("Relative path to cluster.")]
    HRESULT RelativePath ([out, retval] BSTR* pbstrPath);

    [helpstring ("Should this cluster classes take priority over other classes with same name?"), propget]
    HRESULT IsOverrideCluster ([out, retval] VARIANT_BOOL* pvbOverride);

    [helpstring ("Should this cluster be treated as library?"), propget]
    HRESULT IsLibrary ([out, retval] VARIANT_BOOL* pvbLibrary);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelClassDescriptor),
    helpstring ("Eiffel Class Descriptor.")
]
interface IEiffelClassDescriptor: IDispatch
{
    [helpstring ("Class name."), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [helpstring ("Class description."), propget]
    HRESULT Description ([out, retval] BSTR* pbstrDescription);

    [helpstring ("Class external name."), propget]
    HRESULT ExternalName ([out, retval] BSTR* pbstrExternalName);

    [helpstring ("Class Tool Tip."), propget]
    HRESULT ToolTip ([out, retval] BSTR* pbstrToolTip);

    [helpstring ("Is class in system?"), propget]
    HRESULT IsInSystem ([out, retval] VARIANT_BOOL* pvbInSystem);

    [helpstring ("List of names of class features.")]
    HRESULT FeatureNames ([out, retval] SAFEARRAY (BSTR)* psabstrFeatureNames);

    [helpstring ("List of class features.")]
    HRESULT Features ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of class features.")]
    HRESULT FeatureCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of class features including ancestor features.")]
    HRESULT FlatFeatures ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of flat class features.")]
    HRESULT FlatFeatureCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of class inherited features.")]
    HRESULT InheritedFeatures ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of inherited features.")]
    HRESULT InheritedFeatureCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of class creation routines.")]
    HRESULT CreationRoutines ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of creation routines.")]
    HRESULT CreationRoutineCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of class clients.")]
    HRESULT Clients ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of class clients.")]
    HRESULT ClientCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of class suppliers.")]
    HRESULT Suppliers ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of class suppliers.")]
    HRESULT SupplierCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of direct ancestors of class.")]
    HRESULT Ancestors ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of direct ancestors.")]
    HRESULT AncestorCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of direct descendants of class.")]
    HRESULT Descendants ([out, retval] IEnumEiffelClass** ppIEnumEiffelClass);

    [helpstring ("Number of direct descendants.")]
    HRESULT DescendantCount ([out, retval] ULONG* pulCount);

    [helpstring ("Full path to file."), propget]
    HRESULT ClassPath ([out, retval] BSTR* pbstrPath);

    [helpstring ("Is class deferred?"), propget]
    HRESULT IsDeferred ([out, retval] VARIANT_BOOL* pvbDefferred);

    [helpstring ("Is class external?"), propget]
    HRESULT IsExternal ([out, retval] VARIANT_BOOL* pvbExternal);

    [helpstring ("Is class generic?"), propget]
    HRESULT IsGeneric ([out, retval] VARIANT_BOOL* pvbGeneric);

    [helpstring ("Is class part of a library?"), propget]
    HRESULT IsLibrary ([out, retval] VARIANT_BOOL* pvbLibrary);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelFeatureDescriptor),
    helpstring ("Eiffel Feature Descriptor.")
]
interface IEiffelFeatureDescriptor: IDispatch
{
    [helpstring ("Feature name."), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [helpstring ("Feature external name."), propget]
    HRESULT ExternalName ([out, retval] BSTR* pbstrExternalName);

    [helpstring ("Name of class where feature is written in."), propget]
    HRESULT WrittenClass ([out, retval] BSTR* pbstrClass);

    [helpstring ("Name of class where feature was evaluated in."), propget]
    HRESULT EvaluatedClass ([out, retval] BSTR* pbstrClass);

    [helpstring ("Feature signature."), propget]
    HRESULT Signature ([out, retval] BSTR* pbstrSignature);

    [helpstring ("Feature description."), propget]
    HRESULT Description ([out, retval] BSTR* pbstrDescription);

    [helpstring ("Feature parameters.")]
    HRESULT Parameters ([out, retval] IEnumParameter** ppIEnumParameter);

    [helpstring ("Feature return type."), propget]
    HRESULT ReturnType ([out, retval] BSTR* pbstrReturnType);

    [helpstring ("Feature location, full path to file and line number")]
    HRESULT FeatureLocation ([out] BSTR* pbstrPath, [out] ULONG* pulLine);

    [helpstring ("List of all feature callers, including callers of ancestor and descendant versions.")]
    HRESULT AllCallers ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of all callers.")]
    HRESULT AllCallersCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of feature callers.")]
    HRESULT LocalCallers ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of local callers.")]
    HRESULT LocalCallersCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of feature callers, including callers of descendant versions.")]
    HRESULT DescendantCallers ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of descendant callers.")]
    HRESULT DescendantCallersCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of implementers.")]
    HRESULT Implementers ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of feature implementers.")]
    HRESULT ImplementersCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of ancestor versions.")]
    HRESULT AncestorVersions ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of ancestor versions.")]
    HRESULT AncestorVersionsCount ([out, retval] ULONG* pulCount);

    [helpstring ("List of descendant versions.")]
    HRESULT DescendantVersions ([out, retval] IEnumFeature** ppIEnumFeature);

    [helpstring ("Number of descendant versions.")]
    HRESULT DescendantVersionsCount ([out, retval] ULONG* pulCount);

    [helpstring ("Is feature exported to all classes?"), propget]
    HRESULT ExportedToAll ([out, retval] VARIANT_BOOL* pvbExported);

    [helpstring ("Is once feature?"), propget]
    HRESULT IsOnce ([out, retval] VARIANT_BOOL* pvbOnce);

    [helpstring ("Is external feature?"), propget]
    HRESULT IsExternal ([out, retval] VARIANT_BOOL* pvbExternal);

    [helpstring ("Is deferred feature?"), propget]
    HRESULT IsDeferred ([out, retval] VARIANT_BOOL* pvbDeferred);

    [helpstring ("Is constant?"), propget]
    HRESULT IsConstant ([out, retval] VARIANT_BOOL* pvbConstant);

    [helpstring ("is frozen feature?"), propget]
    HRESULT IsFrozen ([out, retval] VARIANT_BOOL* pvbFroze);

    [helpstring ("Is infix?"), propget]
    HRESULT IsInfix ([out, retval] VARIANT_BOOL* pvbInfix);

    [helpstring ("Is prefix?"), propget]
    HRESULT IsPrefix ([out, retval] VARIANT_BOOL* pvbPrefix);

    [helpstring ("Is attribute?"), propget]
    HRESULT IsAttribute ([out, retval] VARIANT_BOOL* pvbAttribute);

    [helpstring ("Is procedure?"), propget]
    HRESULT IsProcedure ([out, retval] VARIANT_BOOL* pvbProcedure);

    [helpstring ("Is function?"), propget]
    HRESULT IsFunction ([out, retval] VARIANT_BOOL* pvbFunction);

    [helpstring ("Is unique?"), propget]
    HRESULT IsUnique ([out, retval] VARIANT_BOOL* pvbUnique);

    [helpstring ("Is obsolete feature?"), propget]
    HRESULT IsObsolete ([out, retval] VARIANT_BOOL* pvbObsolete);

    [helpstring ("Does feature have precondition?"), propget]
    HRESULT HasPrecondition([out, retval] VARIANT_BOOL* pvbPrecondition);

    [helpstring ("Does feature have postcondition?"), propget]
    HRESULT HasPostcondition([out, retval] VARIANT_BOOL* pvbPostcondition);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelParameterDescriptor),
    helpstring ("Feature parameter info.")
]
interface IEiffelParameterDescriptor: IDispatch
{
    [helpstring ("Parameter name"), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [helpstring ("Parameter display"), propget]
    HRESULT Display ([out, retval] BSTR* pbstrDisplay);
};

//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelProjectProperties),
    helpstring ("Eiffel Project Properties.")
]
interface IEiffelProjectProperties: IDispatch
{
    [id (DISPID_system_name), helpstring ("System name."), propget]
    HRESULT SystemName ([out, retval] BSTR* pbstrName);

    [id (DISPID_system_name), helpstring ("System name."), propput]
    HRESULT SystemName ([in] BSTR bstrName);

    [id (DISPID_root_class_name), helpstring ("Root class name."), propget]
    HRESULT RootClassName ([out, retval] BSTR* pbstrClassName);

    [id (DISPID_root_class_name), helpstring ("Root class name."), propput]
    HRESULT RootClassName ([in] BSTR bstrClassName);

    [id (DISPID_creation_routine), helpstring ("Creation routine name."), propget]
    HRESULT CreationRoutine ([out, retval] BSTR* pbstrRoutineName);

    [id (DISPID_creation_routine), helpstring ("Creation routine name."), propput]
    HRESULT CreationRoutine ([in] BSTR bstrRoutineName);

    [id (DISPID_namespace_generation), helpstring ("Namespace generation for cluster"), propget]
    HRESULT NamespaceGeneration ([out, retval] EIF_CLUSTER_NAMESPACE_GENERATION* penumClusterNamespaceGeneration);

    [id (DISPID_namespace_generation), helpstring ("Namespace generation for cluster"), propput]
    HRESULT NamespaceGeneration ([in] EIF_CLUSTER_NAMESPACE_GENERATION enumClusterNamespaceGeneration);

    [id (DISPID_default_namespace), helpstring ("Default namespace."), propget]
    HRESULT DefaultNamespace ([out, retval] BSTR* pbstrNamespace);

    [id (DISPID_default_namespace), helpstring ("Default namespace."), propput]
    HRESULT DefaultNamespace ([in] BSTR bstrNamespace);

    [id (DISPID_project_type), helpstring ("Project type"), propget]
    HRESULT ProjectType ([out, retval] EIF_PROJECT_TYPES* penumProjectType);

    [id (DISPID_project_type), helpstring ("Project type"), propput]
    HRESULT ProjectType ([in] EIF_PROJECT_TYPES enumProjectType);

    [id (DISPID_dot_net_naming_convention), helpstring (".NET Naming convention"), propget]
    HRESULT DotNetNamingConvention ([out, retval] VARIANT_BOOL* pvbNamingConvention);

    [id (DISPID_dot_net_naming_convention), helpstring (".NET Naming convention"), propput]
    HRESULT DotNetNamingConvention ([in] VARIANT_BOOL vbNamingConvention);

    [id (DISPID_generate_debug_info), helpstring ("Generate debug info?"), propget]
    HRESULT GenerateDebugInfo ([out, retval] VARIANT_BOOL* pvbGenerate);

    [id (DISPID_generate_debug_info), helpstring ("Generate debug info?"), propput]
    HRESULT GenerateDebugInfo ([in] VARIANT_BOOL vbGenerate);

    [id (DISPID_precompiled_library), helpstring ("Precompiled file."), propget]
    HRESULT PrecompiledLibrary ([out, retval] BSTR* pbstrPath);

    [id (DISPID_precompiled_library), helpstring ("Precompiled file."), propput]
    HRESULT PrecompiledLibrary ([in] BSTR bstrPath);

    [id (DISPID_assertions), helpstring ("Project assertions"), propget]
    HRESULT Assertions ([out, retval] ULONG* pulAssertions);

    [id (DISPID_assertions), helpstring ("Project assertions"), propput]
    HRESULT Assertions ([in] ULONG ulAssertions);

    [id (DISPID_clusters), helpstring ("Project Clusters."), propget]
    HRESULT Clusters ([out, retval] IEiffelSystemClusters** ppIEiffelSystemClusters);

    [id (DISPID_externals), helpstring ("Externals."), propget]
    HRESULT Externals ([out, retval] IEiffelSystemExternals** ppIEiffelSystemExternals);

    [id (DISPID_assemblies), helpstring ("Assemblies."), propget]
    HRESULT Assemblies ([out, retval] IEiffelSystemAssemblies** ppIEiffelSystemAssemblies);

    [id (DISPID_title), helpstring ("Project title."), propget]
    HRESULT Title ([out, retval] BSTR* pbstrTitle);

    [id (DISPID_title), helpstring ("Project title."), propput]
    HRESULT Title ([in] BSTR bstrTitle);

    [id (DISPID_description), helpstring ("Project description."), propget]
    HRESULT Description ([out, retval] BSTR* pbstrDescription);

    [id (DISPID_description), helpstring ("Project description."), propput]
    HRESULT Description ([in] BSTR bstrDescription);

    [id (DISPID_company), helpstring ("Project company."), propget]
    HRESULT Company ([out, retval] BSTR* pbstrCompany);

    [id (DISPID_company), helpstring ("Project company."), propput]
    HRESULT Company ([in] BSTR bstrCompany);

    [id (DISPID_product), helpstring ("Product."), propget]
    HRESULT Product ([out, retval] BSTR* ppbstrProduct);

    [id (DISPID_product), helpstring ("Product."), propput]
    HRESULT Product ([in] BSTR bstrProduct);

    [id (DISPID_version), helpstring ("Project version."), propget]
    HRESULT Version ([out, retval] BSTR* pbstrVersion);

    [id (DISPID_version), helpstring ("Project version."), propput]
    HRESULT Version ([in] BSTR bstrVersion);

    [id (DISPID_trademark), helpstring ("Project trademark."), propget]
    HRESULT Trademark ([out, retval] BSTR* pbstrTrademark);

    [id (DISPID_trademark), helpstring ("Project trademark."), propput]
    HRESULT Trademark ([in] BSTR bstrTrademark);

    [id (DISPID_copyright), helpstring ("Project copyright."), propget]
    HRESULT Copyright ([out, retval] BSTR* pbstrCopyright);

    [id (DISPID_copyright), helpstring ("Project copyright."), propput]
    HRESULT Copyright ([in] BSTR bstrCopyright);

    [id (DISPID_culture), helpstring ("Asembly culture."), propget]
    HRESULT Culture ([out, retval] BSTR* pbstrCultre);

    [id (DISPID_culture), helpstring ("Asssembly culture."), propput]
    HRESULT Culture ([in] BSTR bstrCultre);

    [id (DISPID_key_file_name), helpstring ("Asembly signing key file name."), propget]
    HRESULT KeyFileName ([out, retval] BSTR* pbstrFileName);

    [id (DISPID_key_file_name), helpstring ("Assembly signing key file name."), propput]
    HRESULT KeyFileName ([in] BSTR bstrFileName);

    [id (DISPID_working_directory), helpstring ("Project working directory"), propget]
    HRESULT WorkingDirectory ([out, retval] BSTR* pbstrWorkingDirectory);

    [id (DISPID_working_directory), helpstring ("Project working directory"), propput]
    HRESULT WorkingDirectory ([in] BSTR bstrWorkingDirectory);

    [id (DISPID_Apply), helpstring ("Apply changes")]
    HRESULT Apply ();
};
//---------------------------------------------------------------------
[
    dual,
    object,
    uuid (UUID_IEiffelSystemAssemblies),
    helpstring ("Eiffel System Assemblies.")
]
interface IEiffelSystemAssemblies: IDispatch
{
    [id (DISPID_wipe_out), helpstring ("Wipe out current list of assemblies")]
    HRESULT FlushAssemblies ();

    [id (DISPID_add_assembly), helpstring ("Add an assembly to the project.")]
    HRESULT AddAssembly ([in] BSTR bstrPrefix, [in] BSTR bstrClusterName, [in] BSTR bstrFileName, VARIANT_BOOL vbCopyLocally);

    [id (DISPID_last_exception), helpstring ("Last execption to occur"), propget]
    HRESULT LastException ([out, retval] IEiffelException** pException);

    [id (DISPID_store), helpstring ("Save changes.")]
    HRESULT Store ();
};

//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelClusterProperties),
    helpstring ("Eiffel Cluster Properties (for Ace file).")
]
interface IEiffelClusterProperties: IDispatch
{
    [id (DISPID_name), helpstring ("Cluster name."), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [id (DISPID_cluster_path), helpstring ("Full path to cluster."), propget]
    HRESULT ClusterPath ([out, retval] BSTR* pbstrPath);

    [id (DISPID_cluster_path), helpstring ("Full path to cluster."), propput]
    HRESULT ClusterPath ([in] BSTR bstrPath);

    [id (DISPID_override), helpstring ("Should this cluster classes take priority over other classes with same name?"), propget]
    HRESULT Override ([out, retval] VARIANT_BOOL* pvbOverride);

    [id (DISPID_override), helpstring ("Should this cluster classes take priority over other classes with same name?"), propput]
    HRESULT Override ([in] VARIANT_BOOL vbOverride);

    [id (DISPID_is_library), helpstring ("Should this cluster be treated as library?"), propget]
    HRESULT IsLibrary ([out, retval] VARIANT_BOOL* pvbLibrary);

    [id (DISPID_is_library), helpstring ("Should this cluster be treated as library?"), propput]
    HRESULT IsLibrary ([in] VARIANT_BOOL vbLibrary);

    [id (DISPID_all), helpstring ("Should all subclusters be included?"), propget]
    HRESULT All ([out, retval] VARIANT_BOOL* pvbAll);

    [id (DISPID_all), helpstring ("Should all subclusters be included?"), propput]
    HRESULT All ([in] VARIANT_BOOL vbAll);

    [id (DISPID_use_system_default), helpstring ("Should use system default?"), propget]
    HRESULT UseSystemDefault ([out, retval] VARIANT_BOOL* pvbUseDefaults);

    [id (DISPID_use_system_default), helpstring ("Should use system default?"), propput]
    HRESULT UseSystemDefault ([in] VARIANT_BOOL vbUseDefaults);

    [id (DISPID_evaluate_require_by_default), helpstring ("Should preconditions be evaluated by default?"), propget]
    HRESULT EvaluateRequireByDefault ([out, retval] VARIANT_BOOL* pvbRequire);

    [id (DISPID_evaluate_ensure_by_default), helpstring ("Should postconditions be evaluated by default?"), propget]
    HRESULT EvaluateEnsureByDefault ([out, retval] VARIANT_BOOL* pvbEnsure);

    [id (DISPID_evaluate_check_by_default), helpstring ("Should check assertions be evaluated by default?"), propget]
    HRESULT EvaluateCheckByDefault ([out, retval] VARIANT_BOOL* pvbCheck);

    [id (DISPID_evaluate_loop_by_default), helpstring ("Should loop assertions be evaluated by default?"), propget]
    HRESULT EvaluateLoopByDefault ([out, retval] VARIANT_BOOL* pvbLoop);

    [id (DISPID_evaluate_invariant_by_default), helpstring ("Should class invariants be evaluated by default?"), propget]
    HRESULT EvaluateInvariantByDefault ([out, retval] VARIANT_BOOL* pvbInvariant);

    [id (DISPID_set_assertions), helpstring ("Set assertions for cluster.")]
    HRESULT SetAssertions ([in] VARIANT_BOOL vbCheck, [in] VARIANT_BOOL vbRequire, [in] VARIANT_BOOL vbEnsure, [in] VARIANT_BOOL vbLoop, [in] VARIANT_BOOL vbInvariant);

    [id (DISPID_excluded), helpstring ("List of excluded directories.")]
    HRESULT Excluded ([out, retval] IEnumClusterExcludes** ppIEnumClusterExcludes);

    [id (DISPID_add_exclude), helpstring ("Add a item to exclude.")]
    HRESULT AddExclude ([in] BSTR bstrName);

    [id (DISPID_remove_exclude), helpstring ("Remove a item from being excluded.")]
    HRESULT RemoveExclude ([in] BSTR bstrName);

    [id (DISPID_parent_name), helpstring ("Name of the parent cluster."), propget]
    HRESULT ParentName ([out, retval] BSTR* pbstrParentName);

    [id (DISPID_has_parent), helpstring ("Does the current cluster have a parent cluster?"), propget]
    HRESULT HasParent ([out, retval] VARIANT_BOOL* pvbHasParent);

    [id (DISPID_subclusters), helpstring ("List subclusters (list of IEiffelClusterProperties*)."), propget]
    HRESULT Subclusters ([out, retval] IEnumClusterProp** ppIEnumClusterProp);

    [id (DISPID_has_children), helpstring ("Does the current cluster have children?"), propget]
    HRESULT HasChildren ([out, retval] VARIANT_BOOL* pvbHasChildren);

    [id (DISPID_cluster_id), helpstring ("Cluster identifier."), propget]
    HRESULT ClusterId ([out, retval] ULONG* pulId);

    [id (DISPID_is_eiffel_library), helpstring ("Is the cluster in the Eiffel library")]
    HRESULT IsEiffelLibrary ([out, retval] VARIANT_BOOL* pvbEiffelLibrary);

    [id (DISPID_expanded_cluster_path), helpstring ("Full path to cluster with ISE_EIFFEL env var expanded."), propget]
    HRESULT ExpandedClusterPath ([out, retval] BSTR* pbstrExpandedPath);

    [id (DISPID_cluster_namespace), helpstring ("Cluster namespace."), propget]
    HRESULT ClusterNamespace ([out, retval] BSTR* pbstrNamespace);

    [id (DISPID_cluster_namespace), helpstring ("Cluster namespace."), propput]
    HRESULT ClusterNamespace ([in] BSTR bstrNamespace);
};
//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelAssemblyProperties),
    helpstring ("Eiffel Assembly Properties (for Ace file).")
]
interface IEiffelAssemblyProperties: IDispatch
{
    [id (DISPID_assembly_name), helpstring ("Assembly name."), propget]
    HRESULT Name ([out, retval] BSTR* pbstrName);

    [id (DISPID_assembly_version), helpstring ("Assembly version."), propget]
    HRESULT Version ([out, retval] BSTR* pbstrVersion);

    [id (DISPID_assembly_culture), helpstring ("Assembly culture."), propget]
    HRESULT Culture ([out, retval] BSTR* pbstrVersion);

    [id (DISPID_assembly_public_key_token), helpstring ("Assembly public key token"), propget]
    HRESULT PublicKeyToken ([out, retval] BSTR* pvbPublicKeyToken);

    [id (DISPID_is_local), helpstring ("Is the assembly local"), propget]
    HRESULT IsLocal ([out, retval] VARIANT_BOOL* pvbIsLocal);

    [id (DISPID_assembly_cluster_name), helpstring ("Assembly cluster name."), propget]
    HRESULT ClusterName ([out, retval] BSTR* pbstrClusterName);

    [id (DISPID_assembly_prefix), helpstring ("Prefix."), propget]
    HRESULT Prefix ([out, retval] BSTR* pbstrPrefix);

    [id (DISPID_assembly_prefix), helpstring ("Prefix."), propput]
    HRESULT Prefix ([in] BSTR bstrPrefix);

    [id (DISPID_is_prefix_read_only), helpstring ("Is assembly prefix read only.")]
    HRESULT IsPrefixReadOnly ([out, retval] VARIANT_BOOL* pvbReadOnly);
};
//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelSystemExternals),
    helpstring ("Eiffel System Externals.")
]
interface IEiffelSystemExternals: IDispatch
{
    [id (DISPID_add_include_path), helpstring ("Add a include path to the project.")]
    HRESULT AddIncludePath ([in] BSTR bstrPath);

    [id (DISPID_remove_include_path), helpstring ("Remove a include path from the project.")]
    HRESULT RemoveIncludePath ([in] BSTR bstrPath);

    [id (DISPID_replace_include_path), helpstring ("Replace an include path in the project.")]
    HRESULT ReplaceIncludePath ([in] BSTR bstrPath, [in] BSTR bstrOldPath);

    [id (DISPID_include_paths), helpstring ("Include paths.")]
    HRESULT IncludePaths ([out, retval] IEnumIncludePaths** ppIEnumIncludePaths);

    [id (DISPID_add_object_file), helpstring ("Add a object file to the project.")]
    HRESULT AddObjectFile ([in] BSTR bstrFileName);

    [id (DISPID_remove_object_file), helpstring ("Remove a object file from the project.")]
    HRESULT RemoveObjectFile ([in] BSTR bstrFileName);

    [id (DISPID_replace_object_file), helpstring ("Replace an object file in the project.")]
    HRESULT ReplaceObjectFile ([in] BSTR bstrFileName, [in] BSTR bstrOldFileName);

    [id (DISPID_object_files), helpstring ("Object files.")]
    HRESULT ObjectFiles ([out, retval] IEnumObjectFiles** ppIEnumObjectFiles);

    [id (DISPID_store), helpstring ("Save changes.")]
    HRESULT Store ();
};


///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Library Declarations
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////


[
    uuid (UUID_LibEiffelCompiler),
    version(2.0),
    helpstring ("Eiffel language compiler library.")
]
library EiffelComCompiler
{
    //
    // Dendant IDL/Type libraries
    //
    importlib ("stdole2.tlb");
    importlib ("stdole2.tlb");
    
    //
    // Interfaces
    //
    interface IEiffelProject;
    interface IEiffelCompletionInfo;
    interface IEiffelCompletionEntry;
    interface IEiffelCompiler;
    interface IEiffelCompilerEvents;
    interface IEiffelSystemBrowser;
    interface IEiffelClusterDescriptor;
    interface IEiffelClassDescriptor;
    interface IEiffelFeatureDescriptor;
    interface IEiffelProjectProperties;
    interface IEiffelSystemClusters;
    interface IEiffelClusterProperties;
    interface IEiffelSystemExternals;
    interface IEiffelSystemAssemblies;
    interface IEiffelAssemblyProperties;
    interface IEnumEiffelClass;
    interface IEnumCluster;
    interface IEnumFeature;
    interface IEnumClusterProp;
    interface IEnumClusterExcludes;
    interface IEnumIncludePaths;
    interface IEnumObjectFiles;
    interface IEnumAssembly;
    interface IEnumCompletionEntry;
    interface IEnumParameter;
    interface IEiffelParameterDescriptor;
	interface IEiffelHtmlDocumentationGenerator;
	interface IEiffelHtmlDocumentationEvents;
    interface IEiffelException;
    
    //
    // Enums
    //
    enum EIF_ENTITY_IMAGES;
    enum EIF_FEATURE_TYPES;
    enum EIF_EXCEPTIONS;
    enum EIF_PROJECT_TYPES;
    enum EIF_ASSERTIONS;
    enum EIF_CLUSTER_NAMESPACE_GENERATION;
    enum EIF_COMPILATION_MODE;

    //
    // CoClasses
    //
    [uuid (UUID_CEiffelProject)]
    coclass CEiffelProject
    {
        [default] interface IEiffelProject;
    };

    [uuid (UUID_CEiffelCompiler), noncreatable]
    coclass CEiffelCompiler
    {
        [default] interface IEiffelCompiler;
        [default, source] interface IEiffelCompilerEvents;
    };

    [uuid (UUID_CEiffelCompletionInfo), noncreatable]
    coclass CEiffelCompletionInfo
    {
        [default] interface IEiffelCompletionInfo;
    };
};