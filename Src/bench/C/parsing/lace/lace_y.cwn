
# line 6 "lace_y.y"
#include "lace_c.h"
#undef NULL
#define NULL (char *) 0

# line 11 "lace_y.y"
typedef union
#ifdef __cplusplus
	YYSTYPE
#endif
 {
	char *node;
	int  value;
} YYSTYPE;
# define LAC_ADAPT 257
# define LAC_ALL 258
# define LAC_AS 259
# define LAC_ASSERTION 260
# define LAC_C 261
# define LAC_CHECK 262
# define LAC_CLUSTER 263
# define LAC_COLUMN 264
# define LAC_COMMA 265
# define LAC_COMMENT 266
# define LAC_CREATION 267
# define LAC_DEBUG 268
# define LAC_DEFAULT 269
# define LAC_END 270
# define LAC_ENSURE 271
# define LAC_EXCLUDE 272
# define LAC_EXECUTABLE 273
# define LAC_EXPORT 274
# define LAC_EXTERNAL 275
# define LAC_GENERATE 276
# define LAC_IDENTIFIER 277
# define LAC_IGNORE 278
# define LAC_INCLUDE 279
# define LAC_INCLUDE_PATH 280
# define LAC_INVARIANT 281
# define LAC_LEFT_PARAM 282
# define LAC_LOOP 283
# define LAC_MAKE 284
# define LAC_NO 285
# define LAC_OBJECT 286
# define LAC_OPTIMIZE 287
# define LAC_OPTION 288
# define LAC_PRECOMPILED 289
# define LAC_RENAME 290
# define LAC_REQUIRE 291
# define LAC_RIGHT_PARAM 292
# define LAC_ROOT 293
# define LAC_SEMICOLON 294
# define LAC_STRING 295
# define LAC_SYSTEM 296
# define LAC_TRACE 297
# define LAC_USE 298
# define LAC_VISIBLE 299
# define LAC_YES 300
# define LAC_WHITE 301
# define LAC_ERROR2 302
# define LAC_ERROR3 303
# define LAC_ERROR4 304
# define LAC_ERROR6 305
# define LAC_ERROR7 306

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

/* #include <values.h> */

#ifdef __cplusplus

#ifndef xxerror
	void xxerror(const char *);
#endif

#ifndef xxlex
#ifdef __EXTERN_C__
	extern "C" { int xxlex(void); }
#else
	int xxlex(void);
#endif
#endif
	int xxparse(void);

#endif
#define xxclearin xxchar = -1
#define xxerrok xxerrflag = 0
extern int xxchar;
extern int xxerrflag;
YYSTYPE xxlval;
YYSTYPE xxval;
typedef int xxtabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int xx_xxs[YYMAXDEPTH], *xxs = xx_xxs;
YYSTYPE xx_xxv[YYMAXDEPTH], *xxv = xx_xxv;
#else	/* user does initial allocation */
int *xxs;
YYSTYPE *xxv;
#endif
static int xxmaxdepth = YYMAXDEPTH;
# define YYERRCODE 256

# line 484 "lace_y.y"


xxwrap()
{
    return 1;
}
xxtabelem xxexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 11,
	277, 26,
	295, 26,
	-2, 149,
-1, 17,
	260, 55,
	268, 55,
	277, 55,
	287, 55,
	289, 55,
	295, 55,
	297, 55,
	-2, 149,
-1, 20,
	277, 30,
	295, 30,
	-2, 149,
-1, 26,
	277, 13,
	295, 13,
	-2, 149,
-1, 31,
	277, 41,
	295, 41,
	-2, 149,
-1, 37,
	270, 149,
	276, 149,
	-2, 97,
-1, 59,
	270, 149,
	-2, 111,
-1, 74,
	0, 149,
	270, 149,
	299, 149,
	-2, 59,
-1, 117,
	277, 122,
	295, 122,
	-2, 149,
-1, 149,
	270, 18,
	275, 18,
	276, 18,
	277, 18,
	295, 18,
	-2, 23,
-1, 156,
	267, 130,
	274, 130,
	290, 130,
	-2, 127,
	};
# define YYNPROD 151
# define YYLAST 408
xxtabelem xxact[]={

   108,    44,   165,   117,   113,     6,     7,     7,    14,    45,
    23,     9,    44,   110,   184,   150,   134,   164,    14,    14,
    45,   115,   141,   111,   101,   112,    15,   107,    46,    14,
    42,    74,    89,   109,   142,    68,    15,    15,    47,    46,
    99,   146,   106,    97,    93,    50,    11,    15,    14,    47,
    59,    90,    37,   198,    20,    91,   176,    92,   210,   186,
   101,   132,    83,    17,   212,   191,    15,   174,   213,   194,
   185,   170,   179,   162,   130,   129,   122,    71,    26,   195,
   171,    31,   207,   206,   205,   100,   181,   167,     3,   152,
    13,   155,    18,    63,   138,    24,    67,    88,   125,    87,
    76,    41,    43,    16,    35,   151,   133,   204,   199,   135,
    48,   124,    84,   148,    86,    55,    60,    56,   208,   200,
   137,    64,   118,    48,    40,    27,   180,   160,    75,    52,
   166,    54,    32,    72,    51,    79,    34,    80,    21,    62,
    69,    38,    65,    94,    29,    64,    12,   175,   197,   190,
   154,   105,   116,   163,   114,   145,    95,    58,    79,    36,
   104,   103,   102,   178,    73,    78,    77,    94,    30,    94,
    19,    10,     5,    96,    25,    70,   120,    49,     8,     4,
   131,     2,   126,     1,     0,     0,   127,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,     0,     0,    94,     0,     0,
     0,     0,     0,   149,     0,     0,   153,     0,   156,     0,
    48,   139,   126,   143,     0,     0,     0,     0,     0,     0,
     0,   168,   157,     0,    22,     0,   159,   156,   169,     0,
   139,     0,     0,   182,     0,   183,   172,     0,     0,     0,
     0,     0,    28,   153,   188,    33,     0,     0,     0,   192,
   187,    39,   193,     0,     0,     0,    53,     0,   168,     0,
    57,     0,    61,   196,     0,     0,    66,   182,   202,     0,
     0,   201,     0,   203,   209,     0,     0,     0,     0,   211,
    81,    82,     0,     0,    85,     0,   214,   215,     0,     0,
    98,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     0,   121,     0,     0,     0,   123,     0,     0,     0,     0,
     0,     0,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,     0,   140,     0,     0,     0,     0,
   144,     0,   147,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   158,     0,     0,     0,     0,   161,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   173,     0,   177,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   189 };
xxtabelem xxpact[]={

  -291,-10000000,-10000000,-10000000,  -282,  -233,-10000000,  -269,  -206,  -269,
  -218,  -284,  -269,-10000000,-10000000,-10000000,  -185,  -284,-10000000,  -176,
  -284,  -269,-10000000,-10000000,-10000000,  -223,  -284,  -259,-10000000,  -237,
  -206,  -284,  -269,-10000000,  -269,  -284,  -226,  -284,  -269,-10000000,
  -259,  -284,  -247,  -247,-10000000,-10000000,-10000000,-10000000,-10000000,  -187,
  -269,  -257,  -269,-10000000,  -269,  -284,  -284,-10000000,  -208,  -284,
  -229,-10000000,  -269,-10000000,  -239,  -284,-10000000,  -230,  -258,-10000000,
-10000000,  -269,  -271,  -296,  -284,  -269,  -284,-10000000,-10000000,  -188,
  -284,-10000000,-10000000,-10000000,  -229,-10000000,  -229,  -284,  -189,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -190,  -269,-10000000,-10000000,
  -209,-10000000,  -276,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -284,  -248,-10000000,
  -284,-10000000,  -256,-10000000,  -229,  -284,  -241,  -284,-10000000,-10000000,
  -269,  -277,-10000000,  -269,-10000000,  -269,-10000000,  -248,  -284,  -247,
-10000000,-10000000,-10000000,  -284,-10000000,  -191,  -283,-10000000,  -269,  -292,
-10000000,  -194,-10000000,  -179,  -269,  -284,  -203,  -284,-10000000,  -192,
  -269,-10000000,  -269,  -278,-10000000,-10000000,  -195,-10000000,-10000000,  -211,
  -269,  -269,  -284,-10000000,-10000000,  -202,  -269,-10000000,-10000000,  -269,
  -196,-10000000,  -180,-10000000,-10000000,  -269,-10000000,-10000000,-10000000,-10000000,
  -221,-10000000,-10000000,-10000000,  -269,  -269,-10000000,  -266,-10000000,  -269,
  -269,-10000000,-10000000,  -212,  -269,  -201,-10000000,-10000000,  -197,-10000000,
-10000000,  -201,  -269,  -269,-10000000,-10000000 };
xxtabelem xxpgo[]={

     0,   183,   181,   179,   178,   177,   175,   174,    93,   173,
   172,   171,   170,    87,   168,   100,   166,   165,    86,   103,
   164,   101,    94,   163,    83,    96,   162,   161,   160,   159,
    99,    97,   157,    98,   155,   153,   152,   150,    91,   149,
   148,    85,    89,    82,    88,   102,   147,   146,   144,   141,
   139,   234,   138,   136,   132,   131,   130,   129,   128,   127,
   126,   125,   124,   122,   120,   119,   118,   116,   114,   113,
   112,   111,   109,   108,    84,   107,   106,   105 };
xxtabelem xxr1[]={

     0,     1,     1,     2,    47,     3,    48,     4,     5,     5,
     6,     6,     7,    49,     7,     7,    50,    50,     8,     8,
     9,     9,    44,    10,    10,    11,    52,    11,    11,    12,
    54,    12,    12,    53,    53,    55,    55,    56,    56,    13,
    14,    57,    14,    14,    58,    58,    15,    15,    16,    59,
    17,    60,    60,    18,    19,    61,    19,    19,    20,    63,
    20,    20,    62,    62,    21,    21,    21,    21,    45,    45,
    45,    45,    45,    64,    64,    22,    23,    65,    23,    66,
    66,    24,    24,    25,    25,    26,    26,    26,    27,    27,
    27,    28,    28,    28,    28,    28,    29,    67,    29,    29,
    68,    68,    69,    30,    31,    31,    31,    31,    31,    31,
    32,    70,    32,    32,    71,    71,    33,    34,    34,    35,
    35,    36,    72,    36,    36,    37,    37,    38,    38,    38,
    46,    46,    39,    73,    39,    40,    75,    40,    74,    74,
    41,    76,    41,    77,    77,    42,    42,    43,    43,    51,
    51 };
xxtabelem xxr2[]={

     0,     3,     3,    15,     1,     7,     1,    11,     1,     7,
     1,     5,     1,     1,     7,     5,     3,     5,     9,    13,
     1,     7,    15,     1,     5,     1,     1,     7,     5,     1,
     1,     7,     5,     5,     7,     5,     7,     3,     7,     3,
     1,     1,     7,     5,     5,     7,     3,     3,     7,     1,
    11,     3,     7,     7,     1,     1,     7,     5,     1,     1,
     7,     5,     5,     7,     5,     7,     9,     5,     3,     3,
     3,     3,     3,     5,     7,     7,     1,     1,     9,     3,
     7,     1,     3,     1,     7,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     1,     1,     7,     5,
     5,     7,     1,     9,     3,     3,     3,     3,     3,     3,
     1,     1,     7,     5,     5,     7,     9,     1,     7,     3,
     3,     1,     1,     7,     5,     5,     7,     3,     5,    13,
     1,     5,     1,     1,     7,     1,     1,     7,     3,     7,
     1,     1,     7,     3,     7,     1,     7,     3,     3,     0,
     2 };
xxtabelem xxchk[]={

-10000000,    -1,    -2,   -44,    -3,   -10,   296,   298,    -4,   293,
   -11,   279,   -47,   -43,   277,   295,   -19,   269,   -43,   -12,
   272,   -52,   -51,   294,   -43,    -7,   263,   -61,   -51,   -48,
   -14,   257,   -54,   -51,   -53,   -43,   -29,   275,   -49,   -51,
   -62,   -21,   289,   -45,   260,   268,   287,   297,   -43,    -5,
   282,   -19,   -57,   -51,   -55,   -43,   -43,   -51,   -32,   276,
   -67,   -51,   -50,    -8,   -43,   -21,   -51,   -25,   282,   -25,
    -6,   264,   -43,   -20,   288,   -58,   -15,   -16,   -17,   -43,
   -43,   -51,   -51,   270,   -70,   -51,   -68,   -30,   -31,   261,
   280,   284,   286,   273,   -43,    -8,    -9,   282,   -51,   270,
   -41,   290,   -26,   -27,   -28,   -43,   300,   285,   258,   291,
   271,   281,   283,   262,   -43,   292,   -36,   299,   -63,   -51,
   -15,   -51,   264,   -51,   -71,   -33,   -31,   -30,   -51,   264,
   264,   -43,   270,   -76,   292,   -72,   -51,   -64,   -22,   -45,
   -51,   278,   290,   -33,   -51,   -34,   282,   -51,   -69,   -43,
   292,   -77,   -42,   -43,   -37,   -38,   -43,   -22,   -51,   -25,
   -59,   -51,   264,   -35,   300,   285,   -56,   -13,   -43,   -44,
   265,   259,   -38,   -51,   270,   -46,   259,   -51,   -23,   264,
   -60,   -18,   -43,   -43,   292,   265,   270,   -42,   -43,   -51,
   -39,   267,   -43,   -43,   265,   259,   -13,   -40,   274,   -73,
   -65,   -18,   -43,   -41,   -75,   -74,   -24,   -43,   -66,   -24,
   270,   -74,   265,   265,   -24,   -24 };
xxtabelem xxdef[]={

    23,    -2,     1,     2,     0,    25,     4,     0,    54,     0,
    29,    -2,     0,    24,   147,   148,    12,    -2,     6,    40,
    -2,     0,    28,   150,     5,    96,    -2,     0,    57,     8,
    54,    -2,     0,    32,    27,   149,   110,    -2,     0,    15,
    56,   149,    83,    83,    68,    69,    70,    71,    72,    10,
     0,    58,     0,    43,    31,   149,   149,    33,     0,    -2,
     0,    99,    14,    16,    20,   149,    62,    64,     0,    67,
     7,     0,     0,   121,    -2,    42,   149,    46,    47,     0,
   149,    35,    34,     3,     0,   113,    98,   149,     0,   104,
   105,   106,   107,   108,   109,    17,     0,     0,    63,    65,
     0,   141,     0,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    11,     9,    22,    -2,     0,    61,
   149,    44,     0,    36,   112,   149,   117,   149,   100,   102,
     0,     0,    66,   145,    84,     0,   124,    60,   149,    83,
    45,    48,    49,   149,   114,     0,     0,   101,     0,    -2,
    21,   142,   143,     0,   123,   149,    -2,   149,    73,    76,
     0,   115,     0,     0,   119,   120,   103,    37,    39,     0,
   145,     0,   149,   125,   128,   132,     0,    74,    75,     0,
    50,    51,     0,   116,   118,     0,    19,   144,   146,   126,
   135,   133,   131,    77,     0,     0,    38,   140,   136,    81,
    81,    52,    53,     0,    81,   134,   138,    82,    78,    79,
   129,   137,    81,    81,   139,    80 };
typedef struct
#ifdef __cplusplus
	xxtoktype
#endif
{ char *t_name; int t_val; } xxtoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

xxtoktype xxtoks[] =
{
	"LAC_ADAPT",	257,
	"LAC_ALL",	258,
	"LAC_AS",	259,
	"LAC_ASSERTION",	260,
	"LAC_C",	261,
	"LAC_CHECK",	262,
	"LAC_CLUSTER",	263,
	"LAC_COLUMN",	264,
	"LAC_COMMA",	265,
	"LAC_COMMENT",	266,
	"LAC_CREATION",	267,
	"LAC_DEBUG",	268,
	"LAC_DEFAULT",	269,
	"LAC_END",	270,
	"LAC_ENSURE",	271,
	"LAC_EXCLUDE",	272,
	"LAC_EXECUTABLE",	273,
	"LAC_EXPORT",	274,
	"LAC_EXTERNAL",	275,
	"LAC_GENERATE",	276,
	"LAC_IDENTIFIER",	277,
	"LAC_IGNORE",	278,
	"LAC_INCLUDE",	279,
	"LAC_INCLUDE_PATH",	280,
	"LAC_INVARIANT",	281,
	"LAC_LEFT_PARAM",	282,
	"LAC_LOOP",	283,
	"LAC_MAKE",	284,
	"LAC_NO",	285,
	"LAC_OBJECT",	286,
	"LAC_OPTIMIZE",	287,
	"LAC_OPTION",	288,
	"LAC_PRECOMPILED",	289,
	"LAC_RENAME",	290,
	"LAC_REQUIRE",	291,
	"LAC_RIGHT_PARAM",	292,
	"LAC_ROOT",	293,
	"LAC_SEMICOLON",	294,
	"LAC_STRING",	295,
	"LAC_SYSTEM",	296,
	"LAC_TRACE",	297,
	"LAC_USE",	298,
	"LAC_VISIBLE",	299,
	"LAC_YES",	300,
	"LAC_WHITE",	301,
	"LAC_ERROR2",	302,
	"LAC_ERROR3",	303,
	"LAC_ERROR4",	304,
	"LAC_ERROR6",	305,
	"LAC_ERROR7",	306,
	"-unknown-",	-1	/* ends search */
};

char * xxreds[] =
{
	"-no such reduction-",
	"Ace_or_Properties : Ace",
	"Ace_or_Properties : Cluster_properties",
	"Ace : System Root Defaults Clusters Externals Generation LAC_END",
	"System : LAC_SYSTEM",
	"System : LAC_SYSTEM Name",
	"Root : LAC_ROOT Name",
	"Root : LAC_ROOT Name Cluster_mark Creation_procedure",
	"Cluster_mark : /* empty */",
	"Cluster_mark : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
	"Creation_procedure : /* empty */",
	"Creation_procedure : LAC_COLUMN Name",
	"Clusters : /* empty */",
	"Clusters : LAC_CLUSTER",
	"Clusters : LAC_CLUSTER Cluster_clause_list",
	"Clusters : LAC_CLUSTER ASemi",
	"Cluster_clause_list : Cluster_clause",
	"Cluster_clause_list : Cluster_clause_list Cluster_clause",
	"Cluster_clause : Name Parent_tag LAC_COLUMN Name",
	"Cluster_clause : Name Parent_tag LAC_COLUMN Name Cluster_properties LAC_END",
	"Parent_tag : /* empty */",
	"Parent_tag : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
	"Cluster_properties : Use Include Exclude Name_adapt Defaults Options Visible",
	"Use : /* empty */",
	"Use : LAC_USE Name",
	"Include : /* empty */",
	"Include : LAC_INCLUDE",
	"Include : LAC_INCLUDE Include_file_list",
	"Include : LAC_INCLUDE ASemi",
	"Exclude : /* empty */",
	"Exclude : LAC_EXCLUDE",
	"Exclude : LAC_EXCLUDE Exclude_file_list",
	"Exclude : LAC_EXCLUDE ASemi",
	"Include_file_list : Name ASemi",
	"Include_file_list : Include_file_list Name ASemi",
	"Exclude_file_list : Name ASemi",
	"Exclude_file_list : Exclude_file_list Name ASemi",
	"File_list : File_clause",
	"File_list : File_list LAC_COMMA File_clause",
	"File_clause : Name",
	"Name_adapt : /* empty */",
	"Name_adapt : LAC_ADAPT",
	"Name_adapt : LAC_ADAPT Cluster_adapt_list",
	"Name_adapt : LAC_ADAPT ASemi",
	"Cluster_adapt_list : Cluster_adapt_clause ASemi",
	"Cluster_adapt_list : Cluster_adapt_list Cluster_adapt_clause ASemi",
	"Cluster_adapt_clause : Cluster_ignore",
	"Cluster_adapt_clause : Cluster_rename_clause",
	"Cluster_ignore : Name LAC_COLUMN LAC_IGNORE",
	"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME",
	"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME Class_rename_list",
	"Class_rename_list : Class_rename_pair",
	"Class_rename_list : Class_rename_list LAC_COMMA Class_rename_pair",
	"Class_rename_pair : Name LAC_AS Name",
	"Defaults : /* empty */",
	"Defaults : LAC_DEFAULT",
	"Defaults : LAC_DEFAULT D_option_clause_list",
	"Defaults : LAC_DEFAULT ASemi",
	"Options : /* empty */",
	"Options : LAC_OPTION",
	"Options : LAC_OPTION O_option_clause_list",
	"Options : LAC_OPTION ASemi",
	"D_option_clause_list : D_option_clause ASemi",
	"D_option_clause_list : D_option_clause_list D_option_clause ASemi",
	"D_option_clause : LAC_PRECOMPILED Option_mark",
	"D_option_clause : LAC_PRECOMPILED Option_mark LAC_END",
	"D_option_clause : LAC_PRECOMPILED Option_mark External_rename LAC_END",
	"D_option_clause : Option_name Option_mark",
	"Option_name : LAC_ASSERTION",
	"Option_name : LAC_DEBUG",
	"Option_name : LAC_OPTIMIZE",
	"Option_name : LAC_TRACE",
	"Option_name : Name",
	"O_option_clause_list : O_option_clause ASemi",
	"O_option_clause_list : O_option_clause_list O_option_clause ASemi",
	"O_option_clause : Option_name Option_mark Target_list",
	"Target_list : /* empty */",
	"Target_list : LAC_COLUMN Name",
	"Target_list : LAC_COLUMN Name Class_name_list",
	"Class_name_list : Name_star",
	"Class_name_list : Class_name_list LAC_COMMA Name_star",
	"Name_star : /* empty */",
	"Name_star : Name",
	"Option_mark : /* empty */",
	"Option_mark : LAC_LEFT_PARAM Option_value LAC_RIGHT_PARAM",
	"Option_value : Standard_value",
	"Option_value : Class_value",
	"Option_value : Name",
	"Standard_value : LAC_YES",
	"Standard_value : LAC_NO",
	"Standard_value : LAC_ALL",
	"Class_value : LAC_REQUIRE",
	"Class_value : LAC_ENSURE",
	"Class_value : LAC_INVARIANT",
	"Class_value : LAC_LOOP",
	"Class_value : LAC_CHECK",
	"Externals : /* empty */",
	"Externals : LAC_EXTERNAL",
	"Externals : LAC_EXTERNAL Language_contrib_list",
	"Externals : LAC_EXTERNAL ASemi",
	"Language_contrib_list : Language_contrib ASemi",
	"Language_contrib_list : Language_contrib_list Language_contrib ASemi",
	"Language_contrib : Language_name LAC_COLUMN",
	"Language_contrib : Language_name LAC_COLUMN File_list",
	"Language_name : LAC_C",
	"Language_name : LAC_INCLUDE_PATH",
	"Language_name : LAC_MAKE",
	"Language_name : LAC_OBJECT",
	"Language_name : LAC_EXECUTABLE",
	"Language_name : Name",
	"Generation : /* empty */",
	"Generation : LAC_GENERATE",
	"Generation : LAC_GENERATE Language_gen_list",
	"Generation : LAC_GENERATE ASemi",
	"Language_gen_list : Language_generation ASemi",
	"Language_gen_list : Language_gen_list Language_generation ASemi",
	"Language_generation : Language_name Generate_option LAC_COLUMN Name",
	"Generate_option : /* empty */",
	"Generate_option : LAC_LEFT_PARAM Generate_option_value LAC_RIGHT_PARAM",
	"Generate_option_value : LAC_YES",
	"Generate_option_value : LAC_NO",
	"Visible : /* empty */",
	"Visible : LAC_VISIBLE",
	"Visible : LAC_VISIBLE Class_visi_list",
	"Visible : LAC_VISIBLE ASemi",
	"Class_visi_list : Class_visibility ASemi",
	"Class_visi_list : Class_visi_list Class_visibility ASemi",
	"Class_visibility : Name",
	"Class_visibility : Name LAC_END",
	"Class_visibility : Name External_name Creation_restriction Export_restriction External_rename LAC_END",
	"External_name : /* empty */",
	"External_name : LAC_AS Name",
	"Creation_restriction : /* empty */",
	"Creation_restriction : LAC_CREATION",
	"Creation_restriction : LAC_CREATION Feature_name_list",
	"Export_restriction : /* empty */",
	"Export_restriction : LAC_EXPORT",
	"Export_restriction : LAC_EXPORT Feature_name_list",
	"Feature_name_list : Name_star",
	"Feature_name_list : Feature_name_list LAC_COMMA Name_star",
	"External_rename : /* empty */",
	"External_rename : LAC_RENAME",
	"External_rename : LAC_RENAME External_rename_list",
	"External_rename_list : ExternaL_rename_pair",
	"External_rename_list : External_rename_list LAC_COMMA ExternaL_rename_pair",
	"ExternaL_rename_pair : /* empty */",
	"ExternaL_rename_pair : Name LAC_AS Name",
	"Name : LAC_IDENTIFIER",
	"Name : LAC_STRING",
	"ASemi : /* empty */",
	"ASemi : LAC_SEMICOLON",
};
#endif /* YYDEBUG */
/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident	"@(#)yaccpar	6.12	93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto xxerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( xxchar >= 0 || ( xxr2[ xxtmp ] >> 1 ) != 1 )\
	{\
		xxerror( "syntax error - cannot backup" );\
		goto xxerrlab;\
	}\
	xxchar = newtoken;\
	xxstate = *xxps;\
	xxlval = newvalue;\
	goto xxnewstate;\
}
#define YYRECOVERING()	(!!xxerrflag)
#define YYNEW(type)	malloc(sizeof(type) * xxnewmax)
#define YYCOPY(to, from, type) \
	(type *) memcpy(to, (char *) from, xxnewmax * sizeof(type))
#define YYENLARGE( from, type) \
	(type *) realloc((char *) from, xxnewmax * sizeof(type))
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int xxdebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-10000000)

/*
** global variables used by the parser
*/
YYSTYPE *xxpv;			/* top of value stack */
int *xxps;			/* top of state stack */

int xxstate;			/* current state */
int xxtmp;			/* extra var (lasts between blocks) */

int xxnerrs;			/* number of errors */
int xxerrflag;			/* error recovery flag */
int xxchar;			/* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()		xxcvtok(xxlex())
/*
** xxcvtok - return a token if i is a wchar_t value that exceeds 255.
**	If i<255, i itself is the token.  If i>255 but the neither 
**	of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int xxcvtok(int i)
#else
int xxcvtok(i) int i;
#endif
{
	int first = 0;
	int last = YYNMBCHARS - 1;
	int mid;
	wchar_t j;

	if(i&0x60000000){/*Must convert to a token. */
		if( xxmbchars[last].character < i ){
			return i;/*Giving up*/
		}
		while ((last>=first)&&(first>=0)) {/*Binary search loop*/
			mid = (first+last)/2;
			j = xxmbchars[mid].character;
			if( j==i ){/*Found*/ 
				return xxmbchars[mid].tvalue;
			}else if( j<i ){
				first = mid + 1;
			}else{
				last = mid -1;
			}
		}
		/*No entry in the table.*/
		return i;/* Giving up.*/
	}else{/* i is already a token. */
		return i;
	}
}
#else/*!YYNMBCHARS*/
#define YYLEX()		xxlex()
#endif/*!YYNMBCHARS*/

/*
** xxparse - return 0 if worked, 1 if syntax error not recovered from
*/
#if defined(__STDC__) || defined(__cplusplus)
int xxparse(void)
#else
int xxparse()
#endif
{
	register YYSTYPE *xxpvt;	/* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
	hacks to please C++ and lint - goto's inside switch should never be
	executed; xxpvt is set to 0 to avoid "used before set" warning.
*/
	static int __yaccpar_lint_hack__ = 0;
	switch (__yaccpar_lint_hack__)
	{
		case 1: goto xxerrlab;
		case 2: goto xxnewstate;
	}
	xxpvt = 0;
#endif

	/*
	** Initialize externals - xxparse may be called more than once
	*/
	xxpv = &xxv[-1];
	xxps = &xxs[-1];
	xxstate = 0;
	xxtmp = 0;
	xxnerrs = 0;
	xxerrflag = 0;
	xxchar = -1;

#if YYMAXDEPTH <= 0
	if (xxmaxdepth <= 0)
	{
		if ((xxmaxdepth = YYEXPAND(0)) <= 0)
		{
			xxerror("yacc initialization error");
			YYABORT;
		}
	}
#endif

	{
		register YYSTYPE *xx_pv;	/* top of value stack */
		register int *xx_ps;		/* top of state stack */
		register int xx_state;		/* current state */
		register int  xx_n;		/* internal state number info */
	goto xxstack;	/* moved from 6 lines above to here to please C++ */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	xxnewstate:
		xx_pv = xxpv;
		xx_ps = xxps;
		xx_state = xxstate;
		goto xx_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	xxstack:
		xx_pv = xxpv;
		xx_ps = xxps;
		xx_state = xxstate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	xx_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( xxdebug )
		{
			register int xx_i;

			printf( "State %d, token ", xx_state );
			if ( xxchar == 0 )
				printf( "end-of-file\n" );
			else if ( xxchar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( xx_i = 0; xxtoks[xx_i].t_val >= 0;
					xx_i++ )
				{
					if ( xxtoks[xx_i].t_val == xxchar )
						break;
				}
				printf( "%s\n", xxtoks[xx_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++xx_ps >= &xxs[ xxmaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int xxps_index = (xx_ps - xxs);
			int xxpv_index = (xx_pv - xxv);
			int xxpvt_index = (xxpvt - xxv);
			int xxnewmax;
#ifdef YYEXPAND
			xxnewmax = YYEXPAND(xxmaxdepth);
#else
			xxnewmax = 2 * xxmaxdepth;	/* double table size */
			if (xxmaxdepth == YYMAXDEPTH)	/* first time growth */
			{
				char *newxxs = (char *)YYNEW(int);
				char *newxxv = (char *)YYNEW(YYSTYPE);
				if (newxxs != 0 && newxxv != 0)
				{
					xxs = YYCOPY(newxxs, xxs, int);
					xxv = YYCOPY(newxxv, xxv, YYSTYPE);
				}
				else
					xxnewmax = 0;	/* failed */
			}
			else				/* not first time */
			{
				xxs = YYENLARGE(xxs, int);
				xxv = YYENLARGE(xxv, YYSTYPE);
				if (xxs == 0 || xxv == 0)
					xxnewmax = 0;	/* failed */
			}
#endif
			if (xxnewmax <= xxmaxdepth)	/* tables not expanded */
			{
				xxerror( "yacc stack overflow" );
				YYABORT;
			}
			xxmaxdepth = xxnewmax;

			xx_ps = xxs + xxps_index;
			xx_pv = xxv + xxpv_index;
			xxpvt = xxv + xxpvt_index;
		}
		*xx_ps = xx_state;
		*++xx_pv = xxval;

		/*
		** we have a new state - find out what to do
		*/
	xx_newstate:
		if ( ( xx_n = xxpact[ xx_state ] ) <= YYFLAG )
			goto xxdefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		xxtmp = xxchar < 0;
#endif
		if ( ( xxchar < 0 ) && ( ( xxchar = YYLEX() ) < 0 ) )
			xxchar = 0;		/* reached EOF */
#if YYDEBUG
		if ( xxdebug && xxtmp )
		{
			register int xx_i;

			printf( "Received token " );
			if ( xxchar == 0 )
				printf( "end-of-file\n" );
			else if ( xxchar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( xx_i = 0; xxtoks[xx_i].t_val >= 0;
					xx_i++ )
				{
					if ( xxtoks[xx_i].t_val == xxchar )
						break;
				}
				printf( "%s\n", xxtoks[xx_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( xx_n += xxchar ) < 0 ) || ( xx_n >= YYLAST ) )
			goto xxdefault;
		if ( xxchk[ xx_n = xxact[ xx_n ] ] == xxchar )	/*valid shift*/
		{
			xxchar = -1;
			xxval = xxlval;
			xx_state = xx_n;
			if ( xxerrflag > 0 )
				xxerrflag--;
			goto xx_stack;
		}

	xxdefault:
		if ( ( xx_n = xxdef[ xx_state ] ) == -2 )
		{
#if YYDEBUG
			xxtmp = xxchar < 0;
#endif
			if ( ( xxchar < 0 ) && ( ( xxchar = YYLEX() ) < 0 ) )
				xxchar = 0;		/* reached EOF */
#if YYDEBUG
			if ( xxdebug && xxtmp )
			{
				register int xx_i;

				printf( "Received token " );
				if ( xxchar == 0 )
					printf( "end-of-file\n" );
				else if ( xxchar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( xx_i = 0;
						xxtoks[xx_i].t_val >= 0;
						xx_i++ )
					{
						if ( xxtoks[xx_i].t_val
							== xxchar )
						{
							break;
						}
					}
					printf( "%s\n", xxtoks[xx_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *xxxi = xxexca;

				while ( ( *xxxi != -1 ) ||
					( xxxi[1] != xx_state ) )
				{
					xxxi += 2;
				}
				while ( ( *(xxxi += 2) >= 0 ) &&
					( *xxxi != xxchar ) )
					;
				if ( ( xx_n = xxxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( xx_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( xxerrflag )
			{
			case 0:		/* new error */
				xxerror( "syntax error" );
				goto skip_init;
			xxerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				xx_pv = xxpv;
				xx_ps = xxps;
				xx_state = xxstate;
			skip_init:
				xxnerrs++;
				/* FALLTHRU */
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				xxerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( xx_ps >= xxs )
				{
					xx_n = xxpact[ *xx_ps ] + YYERRCODE;
					if ( xx_n >= 0 && xx_n < YYLAST &&
						xxchk[xxact[xx_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						xx_state = xxact[ xx_n ];
						goto xx_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( xxdebug )
						printf( _POP_, *xx_ps,
							xx_ps[-1] );
#	undef _POP_
#endif
					xx_ps--;
					xx_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( xxdebug )
				{
					register int xx_i;

					printf( "Error recovery discards " );
					if ( xxchar == 0 )
						printf( "token end-of-file\n" );
					else if ( xxchar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( xx_i = 0;
							xxtoks[xx_i].t_val >= 0;
							xx_i++ )
						{
							if ( xxtoks[xx_i].t_val
								== xxchar )
							{
								break;
							}
						}
						printf( "token %s\n",
							xxtoks[xx_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( xxchar == 0 )	/* reached EOF. quit */
					YYABORT;
				xxchar = -1;
				goto xx_newstate;
			}
		}/* end if ( xx_n == 0 ) */
		/*
		** reduction by production xx_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( xxdebug )
			printf( "Reduce by (%d) \"%s\"\n",
				xx_n, xxreds[ xx_n ] );
#endif
		xxtmp = xx_n;			/* value to switch over */
		xxpvt = xx_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using xx_state here as temporary
		** register variable, but why not, if it works...
		** If xxr2[ xx_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto xx_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int xx_len = xxr2[ xx_n ];

			if ( !( xx_len & 01 ) )
			{
				xx_len >>= 1;
				xxval = ( xx_pv -= xx_len )[1];	/* $$ = $1 */
				xx_state = xxpgo[ xx_n = xxr1[ xx_n ] ] +
					*( xx_ps -= xx_len ) + 1;
				if ( xx_state >= YYLAST ||
					xxchk[ xx_state =
					xxact[ xx_state ] ] != -xx_n )
				{
					xx_state = xxact[ xxpgo[ xx_n ] ];
				}
				goto xx_stack;
			}
			xx_len >>= 1;
			xxval = ( xx_pv -= xx_len )[1];	/* $$ = $1 */
			xx_state = xxpgo[ xx_n = xxr1[ xx_n ] ] +
				*( xx_ps -= xx_len ) + 1;
			if ( xx_state >= YYLAST ||
				xxchk[ xx_state = xxact[ xx_state ] ] != -xx_n )
			{
				xx_state = xxact[ xxpgo[ xx_n ] ];
			}
		}
					/* save until reenter driver code */
		xxstate = xx_state;
		xxps = xx_ps;
		xxpv = xx_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( xxtmp )
	{
		
case 1:
# line 87 "lace_y.y"
{rn_ast = xxpvt[-0].node;} break;
case 2:
# line 89 "lace_y.y"
{rn_ast = xxpvt[-0].node;} break;
case 3:
# line 93 "lace_y.y"
{
							xxval.node = create_node7 (ACE_SD,xxpvt[-6].node,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node,click_list_new());
							} break;
case 4:
# line 98 "lace_y.y"
{click_list_init();} break;
case 5:
# line 99 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 6:
# line 102 "lace_y.y"
{xxval.value = click_list_push ();} break;
case 7:
# line 104 "lace_y.y"
{
							xxval.node = create_node3 (ROOT_SD,xxpvt[-3].node,xxpvt[-1].node,xxpvt[-0].node);
							click_list_set (xxval.node, xxpvt[-2].value);
							} break;
case 8:
# line 111 "lace_y.y"
{xxval.node = NULL;} break;
case 9:
# line 113 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 10:
# line 117 "lace_y.y"
{xxval.node = NULL;} break;
case 11:
# line 119 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 12:
# line 123 "lace_y.y"
{xxval.node = NULL;} break;
case 13:
# line 124 "lace_y.y"
{list_init();} break;
case 14:
# line 125 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 15:
# line 127 "lace_y.y"
{xxval.node = NULL;} break;
case 16:
# line 131 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 17:
# line 133 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 18:
# line 137 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxpvt[-3].node,xxpvt[-0].node,NULL,xxpvt[-2].node);} break;
case 19:
# line 139 "lace_y.y"
{xxval.node = create_node4 (CLUSTER_SD,xxpvt[-5].node,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-4].node);} break;
case 20:
# line 143 "lace_y.y"
{xxval.node = NULL;} break;
case 21:
# line 145 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 22:
# line 149 "lace_y.y"
{xxval.node = create_node7 (CLUST_PROP_SD,xxpvt[-6].node,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-0].node);} break;
case 23:
# line 153 "lace_y.y"
{xxval.node = NULL;} break;
case 24:
# line 155 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 25:
# line 159 "lace_y.y"
{xxval.node = NULL;} break;
case 26:
# line 160 "lace_y.y"
{list_init();} break;
case 27:
# line 161 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 28:
# line 163 "lace_y.y"
{xxval.node = NULL;} break;
case 29:
# line 167 "lace_y.y"
{xxval.node = NULL;} break;
case 30:
# line 168 "lace_y.y"
{list_init();} break;
case 31:
# line 169 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 32:
# line 171 "lace_y.y"
{xxval.node = NULL;} break;
case 33:
# line 175 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxpvt[-1].node));} break;
case 34:
# line 177 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,xxpvt[-1].node));} break;
case 35:
# line 181 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxpvt[-1].node));} break;
case 36:
# line 183 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,xxpvt[-1].node));} break;
case 37:
# line 187 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 38:
# line 189 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 39:
# line 193 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 40:
# line 197 "lace_y.y"
{xxval.node = NULL;} break;
case 41:
# line 198 "lace_y.y"
{list_init();} break;
case 42:
# line 199 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 43:
# line 201 "lace_y.y"
{xxval.node = NULL;} break;
case 44:
# line 205 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 45:
# line 207 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 46:
# line 211 "lace_y.y"
{xxval.node = create_node1 (CLUST_IGN_SD,xxpvt[-0].node);} break;
case 47:
# line 213 "lace_y.y"
{xxval.node = create_node2 (CLUST_REN_SD,xxpvt[-0].node,list_new(CONSTRUCT_LIST_SD));} break;
case 48:
# line 217 "lace_y.y"
{xxval.node = xxpvt[-2].node;} break;
case 49:
# line 220 "lace_y.y"
{list_init();} break;
case 50:
# line 221 "lace_y.y"
{xxval.node = xxpvt[-4].node;} break;
case 51:
# line 225 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 52:
# line 227 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 53:
# line 231 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxpvt[-2].node,xxpvt[-0].node);} break;
case 54:
# line 235 "lace_y.y"
{xxval.node = NULL;} break;
case 55:
# line 236 "lace_y.y"
{list_init();} break;
case 56:
# line 237 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 57:
# line 239 "lace_y.y"
{xxval.node= NULL;} break;
case 58:
# line 243 "lace_y.y"
{xxval.node = NULL;} break;
case 59:
# line 244 "lace_y.y"
{list_init();} break;
case 60:
# line 245 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 61:
# line 247 "lace_y.y"
{xxval.node = NULL;} break;
case 62:
# line 251 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 63:
# line 253 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 64:
# line 257 "lace_y.y"
{xxval.node = create_node3(D_PRECOMPILED_SD,create_node(PRECOMPILED_SD),xxpvt[-0].node,NULL);} break;
case 65:
# line 259 "lace_y.y"
{xxval.node = create_node3(D_PRECOMPILED_SD,create_node(PRECOMPILED_SD),xxpvt[-1].node,NULL);} break;
case 66:
# line 261 "lace_y.y"
{xxval.node = create_node3(D_PRECOMPILED_SD,create_node(PRECOMPILED_SD),xxpvt[-2].node,xxpvt[-1].node);} break;
case 67:
# line 263 "lace_y.y"
{xxval.node = create_node2 (D_OPTION_SD,xxpvt[-1].node,xxpvt[-0].node);} break;
case 68:
# line 268 "lace_y.y"
{xxval.node = create_node(ASSERTION_SD);} break;
case 69:
# line 270 "lace_y.y"
{xxval.node = create_node(DEBUG_SD);} break;
case 70:
# line 272 "lace_y.y"
{xxval.node = create_node(OPTIMIZE_SD);} break;
case 71:
# line 274 "lace_y.y"
{xxval.node = create_node(TRACE_SD);} break;
case 72:
# line 276 "lace_y.y"
{xxval.node = create_node1(FREE_OPTION_SD,xxpvt[-0].node);} break;
case 73:
# line 280 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 74:
# line 282 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 75:
# line 286 "lace_y.y"
{xxval.node = create_node3 (O_OPTION_SD,xxpvt[-2].node,xxpvt[-1].node,xxpvt[-0].node);} break;
case 76:
# line 290 "lace_y.y"
{xxval.node = NULL;} break;
case 77:
# line 292 "lace_y.y"
{list_init(); list_push (xxpvt[-0].node);} break;
case 78:
# line 294 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 79:
# line 298 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 80:
# line 300 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 81:
# line 304 "lace_y.y"
{xxval.node = NULL;} break;
case 82:
# line 306 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 83:
# line 310 "lace_y.y"
{xxval.node = NULL;} break;
case 84:
# line 312 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 85:
# line 316 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 86:
# line 318 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 87:
# line 320 "lace_y.y"
{xxval.node = create_node1 (NAME_SD,xxpvt[-0].node);} break;
case 88:
# line 324 "lace_y.y"
{xxval.node = create_node1(YES_SD,lace_id("yes"));} break;
case 89:
# line 326 "lace_y.y"
{xxval.node = create_node1(NO_SD,lace_id("no"));} break;
case 90:
# line 328 "lace_y.y"
{xxval.node = create_node1(ALL_SD,lace_id("all"));} break;
case 91:
# line 332 "lace_y.y"
{xxval.node = create_node1(REQUIRE_SD,lace_id("require"));} break;
case 92:
# line 334 "lace_y.y"
{xxval.node = create_node1(ENSURE_SD,lace_id("ensure"));} break;
case 93:
# line 336 "lace_y.y"
{xxval.node = create_node1(INVARIANT_SD,lace_id("invariant"));} break;
case 94:
# line 338 "lace_y.y"
{xxval.node = create_node1(LOOP_SD,lace_id("loop"));} break;
case 95:
# line 340 "lace_y.y"
{xxval.node = create_node1(CHECK_SD,lace_id("check"));} break;
case 96:
# line 344 "lace_y.y"
{xxval.node = NULL;} break;
case 97:
# line 345 "lace_y.y"
{list_init();} break;
case 98:
# line 346 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 99:
# line 348 "lace_y.y"
{xxval.node = NULL;} break;
case 100:
# line 352 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 101:
# line 354 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 102:
# line 357 "lace_y.y"
{list_init();} break;
case 103:
# line 358 "lace_y.y"
{xxval.node = create_node2 (LANG_TRIB_SD,xxpvt[-3].node,list_new(CONSTRUCT_LIST_SD));} break;
case 104:
# line 362 "lace_y.y"
{xxval.node =
		create_node1(C_NAME_SD,lace_id("c"));} break;
case 105:
# line 365 "lace_y.y"
{xxval.node =
		create_node1(INCLUDE_PATH_NAME_SD,lace_id("include_path"));} break;
case 106:
# line 368 "lace_y.y"
{xxval.node =
		create_node1(MAKE_NAME_SD,lace_id("make"));} break;
case 107:
# line 371 "lace_y.y"
{xxval.node =
		create_node1(OBJECT_NAME_SD,lace_id("object"));} break;
case 108:
# line 374 "lace_y.y"
{xxval.node =
		create_node1(EXECUTABLE_NAME_SD,lace_id("executable"));} break;
case 109:
# line 377 "lace_y.y"
{xxval.node = create_node1(LANGUAGE_NAME_SD,xxpvt[-0].node);} break;
case 110:
# line 381 "lace_y.y"
{xxval.node = NULL;} break;
case 111:
# line 382 "lace_y.y"
{list_init();} break;
case 112:
# line 383 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 113:
# line 385 "lace_y.y"
{xxval.node = NULL;} break;
case 114:
# line 389 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 115:
# line 391 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 116:
# line 395 "lace_y.y"
{xxval.node = create_node3 (LANG_GEN_SD,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-0].node);} break;
case 117:
# line 399 "lace_y.y"
{xxval.node = NULL;} break;
case 118:
# line 401 "lace_y.y"
{xxval.node = xxpvt[-1].node;} break;
case 119:
# line 405 "lace_y.y"
{xxval.node = create_node (YES_SD);} break;
case 120:
# line 407 "lace_y.y"
{xxval.node = create_node (NO_SD);} break;
case 121:
# line 411 "lace_y.y"
{xxval.node = NULL;} break;
case 122:
# line 412 "lace_y.y"
{list_init();} break;
case 123:
# line 413 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 124:
# line 415 "lace_y.y"
{xxval.node = NULL;} break;
case 125:
# line 419 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 126:
# line 421 "lace_y.y"
{list_push(xxpvt[-1].node);} break;
case 127:
# line 425 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-0].node,NULL,NULL,NULL,NULL);} break;
case 128:
# line 427 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-1].node,NULL,NULL,NULL,NULL);} break;
case 129:
# line 429 "lace_y.y"
{xxval.node = create_node5 (CLAS_VISI_SD,xxpvt[-5].node,xxpvt[-4].node,xxpvt[-3].node,xxpvt[-2].node,xxpvt[-1].node);} break;
case 130:
# line 433 "lace_y.y"
{xxval.node = NULL;} break;
case 131:
# line 435 "lace_y.y"
{xxval.node = xxpvt[-0].node;} break;
case 132:
# line 439 "lace_y.y"
{xxval.node = NULL;} break;
case 133:
# line 440 "lace_y.y"
{list_init();} break;
case 134:
# line 441 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 135:
# line 445 "lace_y.y"
{xxval.node = NULL;} break;
case 136:
# line 446 "lace_y.y"
{list_init();} break;
case 137:
# line 447 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 138:
# line 451 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 139:
# line 453 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 140:
# line 457 "lace_y.y"
{xxval.node = NULL;} break;
case 141:
# line 458 "lace_y.y"
{list_init();} break;
case 142:
# line 459 "lace_y.y"
{xxval.node = list_new(CONSTRUCT_LIST_SD);} break;
case 143:
# line 463 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 144:
# line 465 "lace_y.y"
{list_push(xxpvt[-0].node);} break;
case 145:
# line 469 "lace_y.y"
{xxval.node = NULL;} break;
case 146:
# line 471 "lace_y.y"
{xxval.node = create_node2 (TWO_NAME_SD,xxpvt[-2].node,xxpvt[-0].node);} break;
case 147:
# line 475 "lace_y.y"
{xxval.node = lace_id (token_str);} break;
case 148:
# line 477 "lace_y.y"
{xxval.node = lace_id (token_str);} break;
	}
	goto xxstack;		/* reset registers in driver code */
}

