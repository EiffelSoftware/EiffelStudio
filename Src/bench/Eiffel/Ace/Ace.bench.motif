system es4

root
	 ewb_motif (main): "make"

default
	assertion (no);
	dead_code_removal (yes);
-- RTEA version
	exception_trace (yes);
-- Full optimized version
--	exception_trace (no);
--	array_optimization (yes);
--	inlining_size ("8");
--	inlining (yes);

	--trace(yes)
	--trace ("SERVER");
	--debug ("CACHE_SERVER");
	--debug ("Freeze_set");
	--debug ("SERVER");
	--debug ("DOCUMENT");
	--debug ("DEBUGGER_TRACE");
	--debug ("DRAWING")
	--debug ("PARSE")
	--debug ("FLAT_SHORT");
	--debug ("LOCAL_FEAT_ADAPTATION");
	--debug ("ACTIVITY")
	--debug ("DEBUG_RECV")
	--debug ("PASS3")
	--debug ("CACHE")
	--debug ("DEAD_CODE_REMOVAL")
	--debug ("SPLIT")

cluster

		-- EiffelBase:
	base:				"$EIFFEL_SRC/library/base";
	structures(base):		"$/structures";

	kernel(base):		"$/kernel";
	support(base):		"$/support";
	access(structures):	"$/access";
	cursors(structures):	"$/cursors";
	dispenser(structures):	"$/dispenser";
	list(structures):		"$/list";
	set(structures):		"$/set";
	sort(structures):		"$/sort";
	storage(structures):	"$/storage";
	table(structures):		"$/table_eiffel3";
	traversing(structures):	"$/traversing";
	tree(structures):		"$/tree";

		-- MEL
	mel:             		"$EIFFEL_SRC/library/mel";
	mel_callback_structs (mel):   	"$/callback_structs";
	mel_constants (mel):          	"$/constants";
	mel_events (mel):             	"$/events";
	mel_extra (mel):              	"$/extra";
	mel_gadgets (mel):            	"$/gadgets";
	mel_implementation (mel):     	"$/implementation";
	mel_kernel (mel):             	"$/kernel";
	mel_resources (mel):          	"$/resources";
	mel_widgets (mel):            	"$/widgets";


		-- EiffelVision
    vision:                        	"$EIFFEL_SRC/library/vision";
	vision_kernel (vision):         "$/oui/kernel";
	vision_widgets (vision):        "$/oui/widgets";
    vision_context_data (vision):   "$/oui/context_data";

    vision_figures (vision):        "$/figures"
		exclude
				-- This is excluded, because there is a class with
				-- the same name in compiler sources (motif only)
				-- Check this!!!!!
			"text_figure.e"; "line.e"
		end

	vision_tools (vision):          "$/tools";

		-- Toolkit
	vision_toolkit (vision): "$/implement/toolkit";
	vision_toolkit_kernel (vision_toolkit): "$/kernel";
	vision_toolkit_widgets (vision_toolkit): "$/widgets";
	vision_toolkit_support (vision_toolkit): "$/support";

		-- Implementation clusters for x/Motif
	vision_imp (vision):          		"$/implement/motif";
	vision_imp_kernel (vision_imp):         "$/kernel";
	vision_imp_widgets (vision_imp):        "$/widgets";
	vision_imp_support (vision_imp):        "$/support";

	vision_imp_x (vision):      		"$/implement/x";
	vision_imp_x_kernel (vision_imp_x):  	"$/kernel";
	--  vision_imp_x_widgets (vision_imp_x):    "$/widgets";
	vision_imp_x_support (vision_imp_x):    "$/support";

		-- ES4 SPECIFIC CLUSTERS
	liman:				"$EIFFEL_SRC/Eiffel/limand";

	liman_bench(liman):		"$/bench";
	liman_client(liman):		"$/client";
	liman_shared(liman):		"$/shared";
	liman_bench_graphical(liman):	"$/bench_graphical";
	liman_abstract(liman):		"$/abstract";
	liman_graphical(liman):		"$/graphical";

-- EiffelNet
	net:                            "$EIFFEL_SRC/library/net";
	abstract_socket (net):          "$/abstract/socket";
	net_socket (net):               "$/network/socket";
	local_socket (net):             "$/local/socket";

	polling_abstract (net):         "$/polling/abstract";
	polling_implementation (net):   "$/polling/implementation";

	abstract_client_server (net):   "$/abstract/client_server";
	net_client_server (net):        "$/network/client_server";
	local_client_server (net):      "$/local/client_server";


	beurk:			"$EIFFEL_SRC/Eiffel/beurk";
	compiler_support:		"$EIFFEL_SRC/Eiffel/support";
	replication:		"$EIFFEL_SRC/Eiffel/eiffel/replication";

		-- General compilation:
	common:				"$EIFFEL_SRC/Eiffel/common";
	common_parser (common):				"$/parser";
	common_eiffel_parser (common_parser):		"$/parser";

	flat_short (common_parser):			"$/flat_short"
		exclude
			"format_context.e" ; "local_format.e" ;
		end

	flat_short_b:		"$EIFFEL_SRC/Eiffel/flat_short/bench";

	yacc:				"$EIFFEL_SRC/Eiffel/yacc";
	const:			"$EIFFEL_SRC/Eiffel/const";

		-- Lace compilation:
	env:				"$EIFFEL_SRC/Eiffel/lace/env";
	lace_compile:		"$EIFFEL_SRC/Eiffel/lace/lace_compile";
	lace_shared:		"$EIFFEL_SRC/Eiffel/lace/shared";

		-- Eiffel compilation:
	eiffel_comp:		"$EIFFEL_SRC/Eiffel/eiffel";

	instructions_b(eiffel_comp):		"$/AST/instructions";
	expressions_b(eiffel_comp):		"$/AST/expressions";
	ast_skeleton_b(eiffel_comp):		"$/AST/skeleton";
	ast_clickable_b(eiffel_comp):		"$/AST/clickable";

	byte_code(eiffel_comp):			"$/byte_code";
	cecil(eiffel_comp):			"$/cecil";
	compiler(eiffel_comp):			"$/compiler";
	eiffel_const(eiffel_comp):		"$/const";
	generation(eiffel_comp):		"$/generation";
--		default
--			profile (yes)
--		end;

	genericity(eiffel_comp):		"$/genericity";
	compiler_ids(eiffel_comp):		"$/ids/compiler";
	routine_ids(eiffel_comp):		"$/ids/routine";
	class_ids(eiffel_comp):			"$/ids/class";
	type_ids(eiffel_comp):			"$/ids/type";
	body_ids(eiffel_comp):			"$/ids/body_id";
	body_indexes(eiffel_comp):		"$/ids/body_index";
	real_body_ids(eiffel_comp):		"$/ids/real_body_id";
	real_body_indexes(eiffel_comp):	"$/ids/real_body_index";
	file_ids(eiffel_comp):			"$/ids/file";
	pattern_ids(eiffel_comp):		"$/ids/pattern";
	feature_as_ids(eiffel_comp): 		"$/ids/feature_as";
	inheritance(eiffel_comp):		"$/inheritance";
	eiffel_interface(eiffel_comp):	"$/interface";

	polymorphism(eiffel_comp):		"$/polymorphism"
--		default
--			profile(yes)
--		end;

	server(eiffel_comp): 			"$/server"
--		default
--			profile (yes)
--		end;
	eiffel_shared(eiffel_comp):		"$/shared";
	skeleton(eiffel_comp):			"$/skeleton";
	eiffel_structures(eiffel_comp):	"$/structures";
	tables(eiffel_comp): 			"$/tables";
	descriptor(eiffel_comp):		"$/descriptor";

		-- API cluster
	api:				"$EIFFEL_SRC/Eiffel/API";

	api_constants(api):	"$/constants"; 
	api_shared(api):		"$/shared";
	api_ids(api):		"$/ids";
	api_queries(api):		"$/queries";
	api_interface(api):	"$/interface";
	api_common(api):		"$/common";
	output(api):		"$/output";
	evaluated_type(api):	"$/evaluated_type";

		-- Error processing
	error_common(api):	"$/error/common";
	lace_error(api):		"$/error/lace";
	feature_error(api):	"$/error/eiffel/feature";
	parents_error(api):	"$/error/eiffel/parents";
	redefined_error(api):	"$/error/eiffel/redefined";
	unredefined_error(api):	"$/error/eiffel/unredefined";

		-- Resources
	resources(common):		"$/resources";

		-- Profiling
	converter(api):		"$/profiler/converter";
	profiling(api):		"$/profiler/profiling";
	querying(api):		"$/profiler/querying";
	filters(api):		"$/profiler/filters";
	struct_text(api):		"$/structured_text";

		-- AST structures
	lace_AST(api):	"$/AST/lace";

		-- SWITCH clusters (chose one cluster per directory in switch directory)
	switch:			"$EIFFEL_SRC/Eiffel/switch";
	interface_switch(switch):	"$/interface/graphical";
	--dle_switch(switch):	"$/dle/no_dle";
	license_switch(switch): "$/license/license";  	--unix
	--license_switch(switch): "$/license/no_license";	--win

		-- Communications
	communications (switch):		"$/communication";
	status (communications):		"$/status";
	ipc (communications):		"$/ipc";
	debuging_class (communications):	"$/debug";
	debuging_commands (communications):	"$/commands";
	debuging_formatters (communications):	"$/formatters";
--	time_lock(switch):        	"$/license/no_time_lock";--win

		-- INTERFACE CLUSTERS
	interface:			"$EIFFEL_SRC/Eiffel/interface";
	interface_shared(interface):	"$/shared";

		-- tty interace
	tty(interface): 			"$/tty";

		-- graphical interface (bench):
	bench_common(interface):	"$/graphical/common";
	case_tool(interface):		"$/graphical/case_tool";
	commands(interface):		"$/graphical/commands";
	debugging_tool (interface):	"$/graphical/debugging";
	drag_and_drop(interface):	"$/graphical/drag_and_drop";
	formatters(interface):		"$/graphical/formatters";
	main(interface):			"$/graphical/main";
	graphical_shared(interface):	"$/graphical/shared";
	stones(interface):		"$/graphical/stones";
	text_window(interface):		"$/graphical/text_window";
	windows(interface):		"$/graphical/windows";
	preference_tool(interface):	"$/graphical/preference_tool";
	profile_tool(interface):	"$/graphical/profile_tool";
	wizard_common(interface):	"$/graphical/wizard/common";
	wizard_bench(interface):	"$/graphical/wizard/bench";

		-- Motif specific classes
	platform_motif(interface):		"$/graphical/spec/widgets/motif";
	motif_graphical_window(interface):		"$/graphical/spec/graphical_window/motif";
	motif_formatters(interface):		"$/graphical/spec/formatters/motif";	
	motif_commands (interface):		"$/graphical/spec/commands/motif";

		-- Case
	case_common(common):		"$/case_storage";
	case_bench:			"$EIFFEL_SRC/Eiffel/case_storage/bench";

external
	include_path:
		"\$(EIFFEL_SRC)/library/mel/Clib",
		"\$(EIFFEL_SRC)/C/parsing/shared",
		"\$(EIFFEL_SRC)/C/parsing/eiffel",
		"\$(EIFFEL_SRC)/C/bench";
				

	object:
		"$(EIFFEL_SRC)/C/bench/special_tables.o",
		"$(EIFFEL_SRC)/C/ipc/ewb/libewb.a",
		"$(EIFFEL_SRC)/C/ipc/shared/libipc.a",
		"$(EIFFEL_SRC)/C/idrs/libidr.a",
		"$(EIFFEL_SRC)/C/parsing/eiffel/libeiffel.a",
		"$(EIFFEL_SRC)/C/parsing/lace/liblace.a",
		"$(EIFFEL_SRC)/C/parsing/shared/libparsing.a",
		"$(EIFFEL_SRC)/C/platform/libplatform.a",
		"$(EIFFEL_SRC)/library/mel/spec/$(PLATFORM)/lib/libMel.a",
		"$(EIFFEL_SRC)/library/mel/spec/$(PLATFORM)/lib/libXpm.a",
		"-L/usr/X11R6/lib -lXm -lXt -lX11 -lXext -lXp -lSM -lICE"
end
