-- This file has been generated by EWG. Do not edit. Changes will be lost!
-- functions wrapper
class CGGEOMETRY_FUNCTIONS

obsolete
	"Use class CGGEOMETRY_FUNCTIONS_EXTERNAL instead."

inherit

	CGGEOMETRY_FUNCTIONS_EXTERNAL

feature
-- Ignoring cgpoint_make since its return type is a composite type

-- Ignoring cgsize_make since its return type is a composite type

-- Ignoring cgrect_make since its return type is a composite type

	cgrect_get_min_x (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_min_x_external (rect)
		end

	cgrect_get_mid_x (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_mid_x_external (rect)
		end

	cgrect_get_max_x (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_max_x_external (rect)
		end

	cgrect_get_min_y (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_min_y_external (rect)
		end

	cgrect_get_mid_y (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_mid_y_external (rect)
		end

	cgrect_get_max_y (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_max_y_external (rect)
		end

	cgrect_get_width (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_width_external (rect)
		end

	cgrect_get_height (rect: POINTER): REAL is
		local
		do
			Result := cgrect_get_height_external (rect)
		end

	cgpoint_equal_to_point (point1: POINTER; point2: POINTER): INTEGER is
		local
		do
			Result := cgpoint_equal_to_point_external (point1, point2)
		end

	cgsize_equal_to_size (size1: POINTER; size2: POINTER): INTEGER is
		local
		do
			Result := cgsize_equal_to_size_external (size1, size2)
		end

	cgrect_equal_to_rect (rect1: POINTER; rect2: POINTER): INTEGER is
		local
		do
			Result := cgrect_equal_to_rect_external (rect1, rect2)
		end

-- Ignoring cgrect_standardize since its return type is a composite type

	cgrect_is_empty (rect: POINTER): INTEGER is
		local
		do
			Result := cgrect_is_empty_external (rect)
		end

	cgrect_is_null (rect: POINTER): INTEGER is
		local
		do
			Result := cgrect_is_null_external (rect)
		end

	cgrect_is_infinite (rect: POINTER): INTEGER is
		local
		do
			Result := cgrect_is_infinite_external (rect)
		end

-- Ignoring cgrect_inset since its return type is a composite type

-- Ignoring cgrect_integral since its return type is a composite type

-- Ignoring cgrect_union since its return type is a composite type

-- Ignoring cgrect_intersection since its return type is a composite type

-- Ignoring cgrect_offset since its return type is a composite type

	cgrect_divide (rect: POINTER; slice: POINTER; remainder: POINTER; amount: REAL; edge: INTEGER) is
		local
		do
			cgrect_divide_external (rect, slice, remainder, amount, edge)
		end

	cgrect_contains_point (rect: POINTER; point: POINTER): INTEGER is
		local
		do
			Result := cgrect_contains_point_external (rect, point)
		end

	cgrect_contains_rect (rect1: POINTER; rect2: POINTER): INTEGER is
		local
		do
			Result := cgrect_contains_rect_external (rect1, rect2)
		end

	cgrect_intersects_rect (rect1: POINTER; rect2: POINTER): INTEGER is
		local
		do
			Result := cgrect_intersects_rect_external (rect1, rect2)
		end

end
