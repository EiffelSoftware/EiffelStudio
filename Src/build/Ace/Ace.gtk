system
	EiffelBuild

root
	ebuild (root_cluster): "make"

default
	exception_trace (yes);
	assertion (all);
	profile (no);

cluster

-- ISE Source

	ws:						"$BUILD_WS";

	all base (ws):					"$/base"
		exclude
			"table_eiffel3"
		end

  	all vision (ws):				"$/vision2"
		exclude
			"mswin"
		end

-- EiffelBuild clusters

	build (ws):					"$/build";
	

	root_cluster (build):	 			"$/main";

	build_eiffel (build):				"$/eiffel";
--	build_rescue (build_eiffel): 			"$/rescue";
--	build_shared (build_eiffel):			"$/shared";
	build_ast (build_eiffel):			"$/AST";
	build_special_ast (build_ast):			"$/special_ast";
--	build_skeleton (build_ast):			"$/skeleton";

	build_merger (build):				"$/merger";

	build_shared (build):				"$/shared";

	build_catalog (build):				"$/catalog";
	build_catalog_commands (build_catalog):		"$/commands";

	build_utility (build):				"$/utility";

	build_constants (build):			"$/constants";

	build_icon (build):				"$/icon";

	build_structures (build):			"$/structures";

	build_windows (build):				"$/windows";
	build_windows_common (build_windows):		"$/common";
	build_windows_dialogs (build_windows):		"$/dialogs";
	build_main_window (build_windows):		"$/main_window";

	build_window_mgr (build):			"$/window_manager";

	build_liman (build):				"$/liman/build";
--	build_liman_common (build):			"$/liman/common";
--	build_liman_graphical (build):			"$/liman/common/graphical";

	build_storage (build):				"$/Storage";
	build_storage_command (build_storage):		"$/Command";
	build_storage_context (build_storage):		"$/Context";
	build_storage_control (build_storage):		"$/Control";
	build_storage_function (build_storage):		"$/Function";
	build_storage_application (build_storage):	"$/Application";

	build_generation (build):			"$/Generation";

	build_transport (build):			"$/Transport";

	build_context (build): 				"$/Context";
	build_context_commands (build_context):		"$/Commands";
	build_context_editor (build_context):		"$/Editor";
	build_context_catalog (build_context):		"$/Catalog";
	build_context_widgets (build_context):		"$/Widgets";
	build_context_new_widgets (build_context):	"$/NewWidgets";
	build_context_tree (build_context):		"$/Tree";

	build_application (build):			"$/Application";
	build_application_control (build_application):	"$/Control"
		option
			assertion (no): APP_GRAPH
		end;
	build_application_commands (build_application):	"$/Commands";

	build_event (build):				"$/Event";
 
 	build_focusable_widgets (build):		"$/Focusable_widgets";
 
 	build_modes (build): 				"$/modes";
 	build_mode_commands (build_modes):		"$/Commands";
 	build_command_instantiator (build_modes):	"$/Instantiator";
 	build_shared_mode (build_modes):		"$/Shared";
 
 	build_menus (build):				"$/Menus";
 	
  	build_function (build):				"$/Function";
	build_function_commands (build_function):	"$/Commands";
  	build_function_editor (build_function):		"$/Editor";
	build_function_functions (build_function):	"$/Functions";
	build_function_holes (build_function):		"$/Holes";
--	build_function_stones (build_function):		"$/Stones";
--	build_function_icon_box (build_function):	"$/IconBox";
 
  	build_command (build):				"$/Command";
	build_command_catalog (build_command):		"$/Catalog";
	build_command_commands (build_command):		"$/Commands";
  	build_command_editor (build_command):		"$/Editor";
	build_command_predef (build_command):		"$/Predef";
--	build_command_stones (build_command):		"$/Stones";
  	build_command_instance (build_command):		"$/Instance";
  
--	build_patches (build):				"$/patches";
--
--	build_object (build):				"$/Object";
--	build_object_commands (build_object):		"$/Commands";
--	build_object_generator (build_object):		"$/Generator";
--	build_object_selector (build_object):		"$/Selector";
--	build_object_shared (build_object):		"$/Shared";

  		--| Paltform dependant clusters
 	build_spec (build):				"$/Spec";
 	build_spec_widgets (build_spec):		"$/Widgets";
 
	
-- Common

	common (build):					"$/common";
	
        -- API cluster
	common_api (common):  				"$/eiffel/API";

	common_constants(common_api):			"$/constants"; 
	      -- Error processing
	common_error_common(common_api):		"$/error/common"
		exclude
			"syntax_error.e" 
		end;

	common_structured_text (common_api):		"$/structured_text"; 	

	common_shared(common_api):       		 "$/shared";

	common_eiffel (common):				"$/eiffel";

	common_lace_env (common_eiffel):		"$/lace/env";
	common_yacc (common_eiffel):			"$/yacc"; -- Eiffel/yacc

	--These seem to be build specific
--	eiffel_rescue (build):		"$/eiffel/rescue"; -- these classes are in patches
--	eiffel_shared (build):		"$/eiffel/shared"; -- these classes are in patches
	eiffel_clicking (build):			"$/eiffel/shared/clicking";

-- Patches from case: syntax_error, compiler_exporter
	case_patches:	"$ISE_SRC/case/eiffel/patches"

--	Patches from build: syntax_error
	patches (build):				"$/patches";

	common_resources (common):			"$/resources"
		default
			assertion (no)
		end;
	common_parser (common):				"$/parser";
	common_parser_ast (common_parser):		"$/AST";
	common_skeleton (common_parser_ast):		"$/skeleton";
	common_expressions (common_parser_ast):		"$/expressions";
	common_instructions (common_parser_ast):	"$/instructions";
	common_clickable (common_parser_ast):		"$/clickable";

	common_flat_short (common_parser):		"$/flat_short"
		default
			assertion (no)
		end;

	liman (ws):				"$/limand";

	liman_abstract(liman):				"$/abstract";
--	win time_lock(liman):				"$/time_lock";--win
	liman_graphical(liman):				"$/graphical";
	liman_shared(liman):				"$/shared";--unix
	liman_client(liman):				"$/client";--unix


-- Eiffel Bench Clusters

--	bench_eiffel (ise_src):				"$/Eiffel/eiffel";
--	bench_compiler (bench_eiffel):			"$/compiler"
--		exclude
--			"counter.e"
--		end;
--	bench_genericity (bench_eiffel):		"$/genericity";
--	bench_server (bench_eiffel):			"$/server";
--	bench_error (common_api):			"$/error";
--	bench_API_eiffel (bench_error):			"$/eiffel";
--	bench_ids (common_api):				"$/ids";
--	bench_evaluated_type (common_api):		"$/evaluated_type";
	bench_output (common_api):			"$/output";
	bench_const (common_eiffel):			"$/const";


external
	include_path:		
		"$WS/C/parsing/shared",
		"$WS/vision2/implementation/gtk/Clib", "`gtk-config --cflags`";

	object:
		"$(WS)/C/parsing/eiffel/libeiffel.a",
		"$(WS)/C/parsing/lace/liblace.a",
		"$(WS)/C/parsing/shared/libparsing.a",
		"$(WS)/C/platform/libplatform.a",
		"$(WS)/vision2/implementation/gtk/Clib/gtk_eiffel.o",
		"`gtk-config --libs`"


end -- system ebuild
