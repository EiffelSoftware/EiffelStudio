<document title="Under the Hood - How metrics work" output="studio">
<meta_data/>
<paragraph>
	<paragraph>This part explains how a product basic metric is calculated.</paragraph>
	<heading>
		<size>2</size>
		<content>Domain Transformation</content>
	</heading>	
	<paragraph>As you have seen, before calculating a product basic metric, two things have to be specified:</paragraph>
	<list ordered="false">
		<item>
			A metric, and every metric has a unit
		</item>
		<item>
			An input domain
		</item>
	</list>
	
	<paragraph>And two facts follows:</paragraph>
	<list ordered="false">
		<item>
			the specified metric will count the number of the code elements specified by the metric unit
		</item>
		<item>
			An input domain can contain any kinds of code elements
		</item>
	</list>	
	<paragraph>For example, in the following figure, a metric as well as its input domain are specified:</paragraph>
	<paragraph>
		<image>
			<url>../../../../../images/eiffelstudio/metrics_tool/hood1.png</url>
			<alt_text>Actual semantic for input domain item</alt_text>
		</image>
	</paragraph>		
	<paragraph>Here the selected metric is <bold>Compiled classes</bold>, and the input domain is {<cluster_name>base</cluster_name>}, and when calculating, all compiled classes in library base will be found and counted. The result is shown in the following figure:</paragraph>
	<paragraph>
		<image>
			<url>../../../../../images/eiffelstudio/metrics_tool/hood2.png</url>
			<alt_text>Actual semantic for input domain item</alt_text>
		</image>
	</paragraph>
	<paragraph>But how those compiled classes are found in library <cluster_name>base</cluster_name>? The answer is through an operation called domain transformation.</paragraph>
	<paragraph>A domain transformation will transform a source domain into a destination domain with a specified product unit. This means that a product unit has to be specified to indicate what kind of code element will appear in a destination domain. A product unit can be one of the following: target, group, class, generic, feature, argument, local, assertion, line.</paragraph>
	<paragraph>A domain transformation is done like this: For every code element in source domain, all code elements of the destination unit that can be found (with the help of the compiler) in that source code element are put into the destination domain.</paragraph>
	<paragraph>Let's continue to use the above <bold>Compiled classes</bold> example. The input domain {<cluster_name>base</cluster_name>} is source domain, and the result domain of the metric is destination domain here. And the destination unit is class which is the unit of the specified metric <bold>Compiled classes</bold>.</paragraph>
	<paragraph>So for a source code element (here is <cluster_name>base</cluster_name>), find all classes in that element (<cluster_name>base</cluster_name>), and put them in the destination domain. Now we get a destination domain which contains all candidate classes. Those classes are called candidates because we only want some of them. And the filtering is done with the specified criterion is_compiled. After that, you get the actual result domain.</paragraph>
	<paragraph>It's quite easy to understand the group to class transformation. But what if I want some features now? Just do consecutive transformations: from group to class first, and then from class to feature.</paragraph>
	<paragraph>We call a transformation from an element to another element a rout, consecutive transformations a path. All possible transformation paths are shown in the following figure:</paragraph>
	<paragraph>
		<image>
			<url>../../../../../images/eiffelstudio/metrics_tool/hood3.jpg</url>
			<alt_text>Actual semantic for input domain item</alt_text>
		</image>
	</paragraph>	
	<paragraph>Some remarks on the transformation paths:</paragraph>
	<list ordered="false">
		<item>
			If go through the path from the end of an arrow to its head, you'll possibly find results, but if the transformation is done in the reversed directory, nothing will be find. For example, in any cases, the destination domain will be empty (indicating nothing is found) if you do a transformation from a line element to a class element.
		</item>
		<item>
			Code element line appears in the path: Target -&gt; Group -&gt; Class -&gt; Line because typically in an Eiffel class, there are some lines that do not belong to any features, such as class indexing lines, inherit clauses.
		</item>
		<item>
			The shortest path will be always used. So if you transform a target element to a line element, the path: Target -&gt; Group -&gt; Class -&gt; Line will be used instead of Target -&gt; Group -&gt; Class -&gt; Feature -&gt; Line
		</item>
		<item>
			Paths from element to the element of the same unit are omitted. i.e., there are paths such as Target -&gt; Target, Group -&gt; Group, Class -&gt; Class
		</item>
	</list>
	<heading>
		<size>2</size>
		<content>Domain Filtering</content>
	</heading>	
	<paragraph>After domain transformation, we get a destination domain with all candidate code elements. Then we perform a filtering operation using the specified criterion in a basic metric to get rid of all unsatisfied candidates. At last, we'll get the desired result domain. Use the above example, for every class in the destination domain, we test if that class is compiled using the specified criterion is_compiled. If it's a compiled class, keep it in the destination domain, if not, remove it from the destination domain.</paragraph>

</paragraph>
</document>
