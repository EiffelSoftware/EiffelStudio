WIDGET     : Temporary window.
DESCRIPTION: A window that can be popped up and popped down.

CLIENT INTERFACE:
-----------------

class interface
	BULLETIN_D

creation 
	make

feature

	allow_recompute_size
			-- Allow Current bulletin to recompute its size
			-- according to its children.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed
		
	circulate_down
			-- Circulate the children of this widget down
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed
		
	circulate_up
			-- Circulate the children of this widget up
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed
		
	dialog_command_target
			-- Set the command target to be the dialog shell
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	forbid_recompute_size
			-- Forbid Current bulletin to recompute its size
			-- according to its children.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed
		
	set_default_position (flag: BOOLEAN)
			-- Set default position of Current to flag.
			-- (from BULLETIN)
		require -- from BULLETIN
			exists: not destroyed
		
	widget_command_target
			-- set the command target to be the widget
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
feature  -- Color

	foreground_color: COLOR
			-- Foreground color of manager widget
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed
		ensure -- from MANAGER
			valid_result: Result /= void
		
	set_foreground (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed;
			color_not_void: new_color /= void
		ensure -- from MANAGER
			foreground_color = new_color
		
	set_foreground_color (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from MANAGER)
		require -- from MANAGER
			exists: not destroyed;
			color_not_void: new_color /= void
		ensure -- from MANAGER
			foreground_color = new_color
		
feature  -- Icon representing shell

	icon_mask: PIXMAP
			-- Bitmap that could be used by window manager
			-- to clip icon_pixmap bitmap to make the
			-- icon nonrectangular
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	icon_pixmap: PIXMAP
			-- Bitmap that could be used by the window manager
			-- as the application's icon
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			valid_result: Result /= void
		
	icon_x: INTEGER
			-- Place to put application's icon
			-- Since the window manager controls icon placement
			-- policy, this may be ignored.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	icon_y: INTEGER
			-- Place to put application's icon
			-- Since the window manager controls icon placement
			-- policy, this may be ignored.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	set_icon_mask (a_mask: PIXMAP)
			-- Set icon_mask to a_mask.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			not_a_mask_void: a_mask /= void
		
	set_icon_pixmap (a_pixmap: PIXMAP)
			-- Set icon_pixmap to a_pixmap.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			not_a_pixmap_void: a_pixmap /= void;
			valid_a_pixmap: a_pixmap.is_valid
		
	set_icon_x (x_value: INTEGER)
			-- Set icon_x to x_value.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	set_icon_y (y_value: INTEGER)
			-- Set icon_y to y_value.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
feature  -- Parent composite

	parent: COMPOSITE
			-- Parent of manager widget
			-- (from MANAGER)
		require -- from STACKABLE
			exists: not destroyed
		
feature  -- Size

	base_height: INTEGER
			-- Base for a progression of preferred heights
			-- for current window manager to use in sizing
			-- widgets.
			-- The preferred heights are base_heights plus
			-- integral multiples of height_inc
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 0
		
	base_width: INTEGER
			-- Base for a progression of preferred widths
			-- for current window manager to use in sizing
			-- widgets.
			-- The preferred widths are base_heights plus
			-- integral multiples of width_inc
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 0
		
	height_inc: INTEGER
			-- Increment for a progression of preferred
			-- heights for the window manager tu use in sizing
			-- widgets.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 0
		
	max_aspect_x: INTEGER
			-- Numerator of maximum aspect ratio (X/Y) that
			-- application wishes widget instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	max_aspect_y: INTEGER
			-- Denominator of maximum ration (X/Y) that
			-- application wishes widget instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	max_height: INTEGER
			-- Maximum height that application wishes widget
			-- instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 1
		
	max_width: INTEGER
			-- Maximum width that application wishes widget
			-- instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 1
		
	min_aspect_x: INTEGER
			-- Numerator of minimum aspect ratio (X/Y) that
			-- application wishes widget instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	min_aspect_y: INTEGER
			-- Denominator of minimum ration (X/Y) that
			-- application wishes widget instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	min_height: INTEGER
			-- minimum height that application wishes widget
			-- instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 1
		
	min_width: INTEGER
			-- minimum width that application wishes widget
			-- instance to have
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 1
		
	set_base_height (a_height: INTEGER)
			-- Set base_height to a_height.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			height_large_enough: a_height >= 0
		ensure -- from WM_SHELL
			base_height = a_height
		
	set_base_width (a_width: INTEGER)
			-- Set base_width to a_width.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			width_large_enough: a_width >= 0
		ensure -- from WM_SHELL
			base_width = a_width
		
	set_height_inc (an_increment: INTEGER)
			-- Set height_inc to an_increment.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			an_increment_large_enought: an_increment >= 0
		ensure -- from WM_SHELL
			height_inc = an_increment
		
	set_max_aspect_x (a_max: INTEGER)
			-- Set max_aspect_x to a_max.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			max_aspect_x = a_max
		
	set_max_aspect_y (a_max: INTEGER)
			-- Set max_aspect_y to a_max.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			max_aspect_y = a_max
		
	set_max_height (a_height: INTEGER)
			-- Set max_height to a_height.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			a_height_large_enough: a_height >= 1
		ensure -- from WM_SHELL
			max_height = a_height
		
	set_max_width (a_max: INTEGER)
			-- Set max_width to a_max.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			a_max_large_enough: a_max >= 1
		ensure -- from WM_SHELL
			max_width = a_max
		
	set_min_aspect_x (a_min: INTEGER)
			-- Set min_aspect_x to a_min.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			min_aspect_x = a_min
		
	set_min_aspect_y (a_min: INTEGER)
			-- Set min_aspect_y to a_min.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			min_aspect_y = a_min
		
	set_min_height (a_height: INTEGER)
			-- Set min_height to a_height.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			a_height_large_enough: a_height >= 1
		ensure -- from WM_SHELL
			min_height = a_height
		
	set_min_width (a_min: INTEGER)
			-- Set min_width to a_min.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			a_min_large_enough: a_min >= 1
		ensure -- from WM_SHELL
			min_width = a_min
		
	set_width_inc (an_increment: INTEGER)
			-- Set width_inc to an_increment.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			an_increment_large_enough: an_increment >= 0
		ensure -- from WM_SHELL
			width_inc = an_increment
		
	width_inc: INTEGER
			-- Increment for a progression of preferred
			-- widths for the window manager tu use in sizing
			-- widgets.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		ensure -- from WM_SHELL
			Result >= 0
		
feature  -- Title

	set_title (a_title: STRING)
			-- Set title to a_title.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed;
			not_a_title_void: a_title /= void
		
	title: STRING
			-- Application name to be displayed by
			-- the window manager
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
feature  -- Widget

	set_widget_group (a_widget: WIDGET)
			-- Set widget_group to a_widget.
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
	widget_group: WIDGET
			-- Widget with wich current widget is associated.
			-- By convention this widget is the "leader" of a group
			-- widgets. Window manager will treat all widgets in
			-- a group in some way; for example, it may move or
			-- iconify them together
			-- (from WM_SHELL)
		require -- from WM_SHELL
			exists: not destroyed
		
feature  -- Widget hierarchy

	children: ARRAYED_LIST [WIDGET]
			-- List of children for Current composite
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			valid_result: Result /= void
		
	children_count: INTEGER
			-- Number of children
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			positive_result: Result >= 0
		
	descendents: ARRAYED_LIST [WIDGET]
			-- List of descendents for Current composite
			-- (from COMPOSITE)
		require -- from COMPOSITE
			exists: not destroyed
		ensure -- from COMPOSITE
			valid_result: Result /= void
		
	allow_resize
			-- Allow geometry resize to all geometry requests
			-- from its children.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	forbid_resize
			-- Forbid geometry resize to all geometry requests
			-- from its children.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	is_cascade_grab: BOOLEAN
			-- Is the shell popped up with cascade grab (allowing the other
			-- shells popped up with grab to receive events) ?
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	is_exclusive_grab: BOOLEAN
			-- Is the shell popped up with exclusive grab ?
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	is_no_grab: BOOLEAN
			-- Is the shell popped up with no grab ?
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
	is_popped_up: BOOLEAN
			-- Is the popup widget popped up on screen ?
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		
			-- Lower the dialog box in the stacking order.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		require else -- from WIDGET
			exists: not destroyed;
			is_realized: realized
		
	popdown
			-- Popdown dialog shell.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		ensure -- from DIALOG
			not is_popped_up
		
	popup
			-- Popup a dialog shell with no grab on it.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		ensure -- from DIALOG
			is_popped_up
		
			-- Raise the dialog box to the top of the stacking order.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		require else -- from WIDGET
			exists: not destroyed;
			is_realized: realized
		
		require else -- from STACKABLE
			exists: not destroyed
		
	set_cascade_grab
			-- Specifies that the shell would be popped up with cascade grab
			-- (allowing the other shells popped up with grab to receive events).
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		ensure -- from DIALOG
			is_cascade_grab
		
	set_exclusive_grab
			-- Specifies that the shell would be popped up with exclusive grab.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		ensure -- from DIALOG
			is_exclusive_grab
		
			-- (from WIDGET)
	set_no_grab
			-- Specifies that the shell would be popped up with no grab.
			-- (from DIALOG)
		require -- from DIALOG
			exists: not destroyed
		ensure -- from DIALOG
			is_no_grab
		
end -- class BULLETIN_D
