note
	description: "Control interfaces. Help file: "
	legal: "See notice at end of class."
	status: "See notice at end of class."
	generator: "Automatically generated by the EiffelCOM Wizard."

deferred class
	IRUNNING_OBJECT_TABLE_INTERFACE

inherit
	ECOM_INTERFACE

feature -- Status Report

	register_user_precondition (grf_flags: INTEGER; punk_object: ECOM_INTERFACE; pmk_object_name: IMONIKER_INTERFACE; pdw_register: INTEGER_REF): BOOLEAN
			-- User-defined preconditions for `register'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	revoke_user_precondition (dw_register: INTEGER): BOOLEAN
			-- User-defined preconditions for `revoke'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	is_running_user_precondition (pmk_object_name: IMONIKER_INTERFACE): BOOLEAN
			-- User-defined preconditions for `is_running'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	get_object_user_precondition (pmk_object_name: IMONIKER_INTERFACE; ppunk_object: CELL [ECOM_INTERFACE]): BOOLEAN
			-- User-defined preconditions for `get_object'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	note_change_time_user_precondition (dw_register: INTEGER; pfiletime: X_FILETIME_RECORD): BOOLEAN
			-- User-defined preconditions for `note_change_time'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	get_time_of_last_change_user_precondition (pmk_object_name: IMONIKER_INTERFACE; pfiletime: X_FILETIME_RECORD): BOOLEAN
			-- User-defined preconditions for `get_time_of_last_change'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

	enum_running_user_precondition (ppenum_moniker: CELL [IENUM_MONIKER_INTERFACE]): BOOLEAN
			-- User-defined preconditions for `enum_running'.
			-- Redefine in descendants if needed.
		do
			Result := True
		end

feature -- Basic Operations

	register (grf_flags: INTEGER; punk_object: ECOM_INTERFACE; pmk_object_name: IMONIKER_INTERFACE; pdw_register: INTEGER_REF)
			-- No description available.
			-- `grf_flags' [in].  
			-- `punk_object' [in].  
			-- `pmk_object_name' [in].  
			-- `pdw_register' [out].  
		require
			non_void_pdw_register: pdw_register /= Void
			register_user_precondition: register_user_precondition (grf_flags, punk_object, pmk_object_name, pdw_register)
		deferred

		end

	revoke (dw_register: INTEGER)
			-- No description available.
			-- `dw_register' [in].  
		require
			revoke_user_precondition: revoke_user_precondition (dw_register)
		deferred

		end

	is_running (pmk_object_name: IMONIKER_INTERFACE)
			-- No description available.
			-- `pmk_object_name' [in].  
		require
			is_running_user_precondition: is_running_user_precondition (pmk_object_name)
		deferred

		end

	get_object (pmk_object_name: IMONIKER_INTERFACE; ppunk_object: CELL [ECOM_INTERFACE])
			-- No description available.
			-- `pmk_object_name' [in].  
			-- `ppunk_object' [out].  
		require
			non_void_ppunk_object: ppunk_object /= Void
			get_object_user_precondition: get_object_user_precondition (pmk_object_name, ppunk_object)
		deferred

		ensure
			valid_ppunk_object: ppunk_object.item /= Void
		end

	note_change_time (dw_register: INTEGER; pfiletime: X_FILETIME_RECORD)
			-- No description available.
			-- `dw_register' [in].  
			-- `pfiletime' [in].  
		require
			non_void_pfiletime: pfiletime /= Void
			valid_pfiletime: pfiletime.item /= default_pointer
			note_change_time_user_precondition: note_change_time_user_precondition (dw_register, pfiletime)
		deferred

		end

	get_time_of_last_change (pmk_object_name: IMONIKER_INTERFACE; pfiletime: X_FILETIME_RECORD)
			-- No description available.
			-- `pmk_object_name' [in].  
			-- `pfiletime' [out].  
		require
			non_void_pfiletime: pfiletime /= Void
			valid_pfiletime: pfiletime.item /= default_pointer
			get_time_of_last_change_user_precondition: get_time_of_last_change_user_precondition (pmk_object_name, pfiletime)
		deferred

		end

	enum_running (ppenum_moniker: CELL [IENUM_MONIKER_INTERFACE])
			-- No description available.
			-- `ppenum_moniker' [out].  
		require
			non_void_ppenum_moniker: ppenum_moniker /= Void
			enum_running_user_precondition: enum_running_user_precondition (ppenum_moniker)
		deferred

		ensure
			valid_ppenum_moniker: ppenum_moniker.item /= Void
		end

note
	copyright:	"Copyright (c) 1984-2006, Eiffel Software and others"
	license:	"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"




end -- IRUNNING_OBJECT_TABLE_INTERFACE

