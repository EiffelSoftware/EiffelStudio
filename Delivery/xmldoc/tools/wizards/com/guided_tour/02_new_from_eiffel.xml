<document title="Creating a new component from an Eiffel project" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>EiffelCOM</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour, Creating a new component from an Eiffel project</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The second tutorial describes creating a COM component from an Eiffel system. The tutorial example 
			<class_name>String</class_name> is almost identical to 
			<class_name>StringManipulator</class_name> of the previous tutorial. In the 
			<class_name>StringManipulator</class_name> example the wizard starts from an IDL file and builds an Eiffel System; in contrast, the 
			<class_name>String</class_name> example takes an Eiffel system and generates an IDL file and the required plumbing code to make 
			the Eiffel project accessible to COM.
		</paragraph>
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>Create a new Eiffel project in the directory 
				<italic>$ISE_EIFFEL\examples\com\wizard\e2idl\eproject</italic> where $ISE_EIFFEL represents the path to the 
				EiffelStudio installation directory.
			</item>
			<item>Select the ACE file located in the same directory and compile.</item>
			<item>Start the EiffelCOM Wizard</item>
			<item>
				In <bold>Project</bold>, in the <bold>Current project</bold> input field, type in <italic>string</italic>
				 and press <bold>enter</bold>.
			</item>
			<item>
				In <bold>Project Type</bold>, choose 
				<italic>Add a COM interface to an existing Eiffel project</italic>.
			</item>
			<item>
				Click the browse button under <bold>Path to Eiffel project file (*.epr)</bold> and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\e2idl\eproject\string.epr</italic>.
			</item>
			<item>
				Click the browse button under <bold>Path to system's ace file (*.ace)</bold> and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\e2idl\eproject\Ace.ace</italic>.
			</item>
			<item>In the text field under <bold>Name of Eiffel facade class</bold>, enter: 
				<class_name>string_manipulator</class_name>.
			</item>
			<item>In the text field under <bold>Name of Eiffel facade class cluster</bold>, enter: 
				<class_name>root_cluster</class_name>.
			</item>
			<item>
				<link/>Click 
				<bold>Next</bold>.
			</item>
			<item>
				In <bold>Component Type</bold>, choose  
				<italic>In-process (*.dll)</italic>.
			</item>
			<item>
				In <bold>Generation Options</bold>, click the browse button and select the directory where the project should be created. Choose 
				<italic>$ISE_EIFFEL\examples\com\wizard\e2idl\generated</italic>.
			</item>
			<item>
				Make sure both <bold>Compile C code</bold> and <bold>Compile Eiffel code</bold> are checked.
			</item>
			<item>
				Make sure <bold>Clean destination folder prior to generation</bold> is selected.
			</item>
			<item>
				Click <bold>Generate</bold>.
			</item>
			<item>
				Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>
		 <paragraph>
		 	The generated Eiffel classes include:
		 	<list ordered="false">
		 		<item>
		 			<class_name>ISTRING_MANIPULATOR_INTERFACE</class_name>: This class represents the only interface exposed by the COM 
		 			component.
		 		</item>
		 		<item>
		 			<class_name>STRING_MANIPULATOR_PROXY_IMP</class_name>: This class implements the coclass, it inherits from the interface 
		 			and implements its members.
		 		</item>
		 		<item>
		 			<class_name>ECOM_STRING_REGISTRATION</class_name>: This class contains the code required to register the component.
		 		</item>
		 	</list>
			You do not need to modify or implement any classes. The wizard produces a ready-to-use component.
		</paragraph>		
		<tip>
			<bold>Tip</bold>:
			<line_break/>In most Eiffel systems functionality is spread out throughout the system. No single class exposes the full functionality 
			of the system and can serve as a Facade to the outside world. Running the wizard on any such class would not be practical. 
			Before starting the wizard write an Eiffel class that acts as a Facade and forwards client calls to the appropriate subsystems. 
			Enter the Facade class name into <bold>Name of Eiffel facade class</bold> field. The wizard generates an IDL file from this class.
		</tip>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>01_new_from_com.xml</url>
				<label>Creating a new COM component</label>
			</link>
			<line_break/>
			<link>
				<url>03_accessing.xml</url>
				<label>Accessing a COM component.</label>
			</link>
		</seealso>
		<paragraph> </paragraph>
	</paragraph></document>
