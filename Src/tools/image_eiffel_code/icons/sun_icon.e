indexing
	description: "Pixel buffer that replaces orignal image file.%
		%The orignal version of this class has been generated by PNGEiffelCode."
	status: "See notice at end of class."
	legal: "See notice at end of class."

class
	SUN_ICON

inherit
	EV_PIXEL_BUFFER

create
	make,
	make_cw_90,
	make_cw_180,
	make_cw_270

feature {NONE} -- Initialization

	make is
			-- Initialization
		do
			make_with_size (16, 16)
			draw_direction := no_rotate
			draw
		end

	make_cw_90 is
			-- Initialization
			-- Colorwise 90 degree rotate.
		do
			make_with_size (16, 16)
			draw_direction := cw_90
			draw
		end

	make_cw_180 is
			-- Initialization
			-- Colokwise 180 degree rotate.
		do
			make_with_size (16, 16)
			draw_direction := cw_180
			draw
		end

	make_cw_270 is
			-- Initialization
			-- Colokwise 270 degree rotate.
		do
			make_with_size (16, 16)
			draw_direction := cw_270
			draw
		end

feature {NONE} -- Implementation

	draw is
			-- Draw current.
		local
			i, j, t_count, colors_count, max_len: INTEGER
			l_iterator: EV_PIXEL_BUFFER_ITERATOR
			l_pixel_buffer_pixel: EV_PIXEL_BUFFER_PIXEL
		do
			build_colors

			colors_count := colors.count
			max_len := width.max (height)
			from
				j := 0
				lock
				l_iterator := pixel_iterator
				l_iterator.start
			until
				j >= colors_count
			loop
				from
					i := 0
					t_count := colors.item (j).count
				until
					i >= t_count
				loop
					l_pixel_buffer_pixel := l_iterator.item
						inspect draw_direction
						when no_rotate then
								-- Draw orignal image file.
							l_pixel_buffer_pixel.set_rgba_value (colors.item (j).item(i))
						when cw_90 then
								-- Draw colorwise 90 degree rotated image.
							l_pixel_buffer_pixel.set_rgba_value (colors.item (max_len - i - 1).item(j))
						when cw_180 then
								-- Draw colorwise 180 degree rotated image.
							l_pixel_buffer_pixel.set_rgba_value (colors.item (colors_count - j - 1).item(t_count - i - 1))
						when cw_270 then
								-- Draw colorwise 270 degree rotated image.
							l_pixel_buffer_pixel.set_rgba_value (colors.item (i).item(colors_count - j - 1))
						end
					l_iterator.forth
					i := i + 1
				end
				j := j + 1
			end
			unlock
			colors := Void
		end

	build_colors is
			-- Build `colors'.
			-- Here is all image pixels data.
		do
			create colors.make (16)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFBD3900, 0xFFBC3700, 0xFFC14800, 0xFFC34D00, 0xFFBF442D, 0xFFC24DF7, 0xFFB9377D, 0xFFBA1F00, 0xFFB71E00, 0xFFC0457D, 0xFFC044F7, 0xFFBE362D, 0xFFC03D00, 0xFFC03E00, 0xFFBC3800, 0xFFBD3900>>], 0)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFBD3900, 0xFFBE3A00, 0xFFB82F00, 0xFFAC0A00, 0xFFB7241E, 0xFFA000FF, 0xFFA608FF, 0xFFB71D7C, 0xFFB2187C, 0xFFA90FFF, 0xFFA000FF, 0xFFAD171E, 0xFFA40000, 0xFFB32400, 0xFFBE3C00, 0xFFBD3900>>], 1)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFBD3900, 0xFFBE3A00, 0xFFB93100, 0xFFAA0F00, 0xFFCF6CA9, 0xFFBD1CFF, 0xFFCF32FF, 0xFFDD3EFF, 0xFFD639FF, 0xFDC027FF, 0xF9AB12FF, 0xFFC14EA9, 0xFFA80800, 0xFFB32600, 0xFFBE3C00, 0xFFBD3900>>], 2)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFBE3B25, 0xFFBE3ACA, 0xFFB82FD0, 0xFFA909D2, 0xFFDA43FF, 0xFFEC51FF, 0xFFFF54FF, 0xFFFD55FF, 0xFFF756FF, 0xFEE54FFF, 0xFDD43DFF, 0xF0B12AFF, 0xFDA303D2, 0xFFB325D0, 0xFFBE3CCA, 0xFFBE3B25>>], 3)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFB92D03, 0xFFB01972, 0xFFA000FF, 0xFFCA2AFF, 0xFFF448FF, 0xFFFF4CFF, 0xFFFF4BFF, 0xFFFF49FF, 0xFFFE4CFF, 0xFFFE4EFF, 0xFFDD47FF, 0xFCCA3DFF, 0xECA016FF, 0xFFA400FF, 0xFFB11872, 0xFFBA2D03>>], 4)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFBC4300, 0xFFBD4862, 0xFDB527FF, 0xFEE838FF, 0xFFFF46FF, 0xFFFF4AFF, 0xE4DE3AFF, 0xF7F640FF, 0xF4F143FF, 0xE3D23CFF, 0xFFEC4BFF, 0xFFD640FF, 0xEDAE26FF, 0xF09E10FF, 0xFFBA2A62, 0xFFB62500>>], 5)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFDA9900, 0xFFDCA662, 0xFAD860FF, 0xFCF038FF, 0xF3EC3AFF, 0xFFFF41FF, 0x99811AFF, 0xD6CB2DFF, 0xD3C62EFF, 0x9B801AFF, 0xFFFE49FF, 0xF3CF3CFF, 0xF0B42DFF, 0xD89A33FF, 0xFFD16D62, 0xFFC96400>>], 6)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFC96100, 0xFFA81B68, 0xFACD2DFF, 0xF3E641FF, 0xC3B028FF, 0xFFFF39FF, 0xE2D927FF, 0xF2EF32FF, 0xF3ED34FF, 0xE3D332FF, 0xFFF446FF, 0xC6A62BFF, 0xEABA38FF, 0xD98B14FF, 0xFFAE1268, 0xFFBB3600>>], 7)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFC65665, 0xFF9B00FF, 0xFABE19FF, 0xF8E935FF, 0xB7A21DFF, 0xF5EF2FFF, 0xFFFF32FF, 0xFFFF32FF, 0xFFFC32FF, 0xFFFE36FF, 0xE1C630FF, 0xD3AC2EFF, 0xEFB73DFF, 0xD07E07FF, 0xFFA600FF, 0xFFB92D65>>], 8)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFC554A2, 0xFFAA12CC, 0xFCB11FFF, 0xFEE02BFF, 0xE4D024FF, 0xC0A918FF, 0xDED321FF, 0xFFF624FF, 0xFCEC27FF, 0xDBC020FF, 0xBA991DFF, 0xF4C83DFF, 0xE59A2CFF, 0xD78508FF, 0xFFAF11CC, 0xFFB82CA2>>], 9)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFC24C00, 0xFFB32419, 0xFFCE71C2, 0xF4C231FF, 0xFFE121FF, 0xE8C515FF, 0xD1B715FF, 0xCCB713FF, 0xCEB311FF, 0xD2A910FF, 0xF0C224FF, 0xF9C032FF, 0xC08020FF, 0xFAC566C2, 0xFFB11E19, 0xFFB52600>>], 10)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFCD6A00, 0xFFCF6B00, 0xFFDB8C95, 0xFBAF20FF, 0xEEB112FF, 0xFED412FF, 0xFED910FF, 0xEDC60AFF, 0xF0C90EFF, 0xFFD011FF, 0xEFB820FF, 0xBF7612FF, 0xE4981AFF, 0xFFDE8A95, 0xFFCF6B00, 0xFFC04100>>], 11)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFD68900, 0xFFD78C00, 0xFFD990A8, 0xFFAD17FF, 0xFBA206FF, 0xE5A825FF, 0xE49F0FFF, 0xED9B00FF, 0xEB9E06FF, 0xD28B0EFF, 0xC27D21FF, 0xEC9306FF, 0xFFB016FF, 0xFFD982A8, 0xFFD87F00, 0xFFD67A00>>], 12)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFD67A00, 0xFFD67A00, 0xFFD98160, 0xFFAD159C, 0xFFAF1D9C, 0xFFD4779C, 0xFBBC50E6, 0xEB9303FF, 0xE88D00FF, 0xF0A836E6, 0xFFD1799C, 0xFFB4259C, 0xFFAD149C, 0xFFD98260, 0xFFD67B00, 0xFFD67B00>>], 13)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFD67B00, 0xFFD67B00, 0xFFD98200, 0xFFAD1500, 0xFFAE1C00, 0xFFCF6C00, 0xFFD27334, 0xFFB019F3, 0xFFB009F3, 0xFDC04F34, 0xFBC97000, 0xFFB22300, 0xFFAD1400, 0xFFD98200, 0xFFD67B00, 0xFFD67B00>>], 14)
			colors.put (({ARRAY [NATURAL_32]}) [<<0xFFD67B00, 0xFFD67B00, 0xFFD98200, 0xFFAD1500, 0xFFAE1C00, 0xFFCF6D00, 0xFFD1700A, 0xFFB11EC7, 0xFFB10BC7, 0xFCBE4D0A, 0xFBC97000, 0xFFB22300, 0xFFAD1400, 0xFFD98200, 0xFFD67B00, 0xFFD67B00>>], 15)
		end

	draw_direction : INTEGER
			-- Drawing direction.

	colors: SPECIAL [SPECIAL [NATURAL_32]]
			-- All image pixel data.

feature {NONE} -- Constants

	no_rotate: INTEGER is 1
			-- No rotate.
	cw_90: INTEGER is 2
			-- Colorwise 90 degree.
	cw_180:INTEGER is 3
			-- Colorwise 180 degree.
	cw_270: INTEGER is 4;
			-- Colorwise 270 degree.

indexing
	copyright: "Copyright (c) 1984-2007, Eiffel Software"
	license:   "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"

end -- SUN_ICON
