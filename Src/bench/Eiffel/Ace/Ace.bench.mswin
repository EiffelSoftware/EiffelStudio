system
	es4

root
	 ewb_windows (main): "make"

default
	assertion (require)
	console_application (yes)
	dead_code_removal (yes)
-- RTEA version
	exception_trace (yes)
-- Full optimized version
--	exception_trace (no)
--	array_optimization (yes)
--	inlining_size ("8")
--	inlining (yes)

	--trace(yes)
	--trace ("SERVER")
	--debug ("CACHE_SERVER")
	--debug ("Freeze_set")
	--debug ("SERVER")
	--debug ("DOCUMENT")
	--debug ("DEBUGGER_TRACE")
	--debug ("DRAWING")
	--debug ("PARSE")
	--debug ("FLAT_SHORT")
	--debug ("LOCAL_FEAT_ADAPTATION")
	--debug ("ACTIVITY")
	--debug ("DEBUG_RECV")
	--debug ("PASS3")
	--debug ("TRANSFER")
	--debug("DEAD_CODE")
	--debug ("DLE SPY")

cluster

		-- EiffelBase:
	base:				"$EIFFEL_SRC\library\base"
	structures(base):		"$\structures"

	kernel(base):		"$\kernel"
--		default
--			profile (yes)
--		end

	support(base):		"$\support"
	access(structures):	"$\access"
	cursors(structures):	"$\cursors"
	dispenser(structures):	"$\dispenser"
	list(structures):		"$\list"
	set(structures):		"$\set"
	sort(structures):		"$\sort"
	storage(structures):	"$\storage"
	table(structures):		"$\table_eiffel3"
	traversing(structures):	"$\traversing"
	tree(structures):		"$\tree"

		-- Wel:
	all wel:					"$EIFFEL_SRC\library\wel"

		-- EiffelVision
	all vision:							"$EIFFEL_SRC\library\vision"
		exclude
			"figures";
			"obsolete";
			"motif";
			"gtk";
			"x"
		end	

		-- ES4 SPECIFIC CLUSTERS
	liman:				"$EIFFEL_SRC\limand"

	liman_bench(liman):		"$\..\Eiffel\limand\bench"
	liman_bench_graphical(liman):	"$\..\Eiffel\limand\bench_graphical"
	liman_abstract(liman):		"$\abstract"
	liman_graphical(liman):		"$\graphical"

	beurk:			"$EIFFEL_SRC\Eiffel\beurk"
	compiler_support:		"$EIFFEL_SRC\Eiffel\support"
	replication:		"$EIFFEL_SRC\Eiffel\eiffel\replication"

		-- General compilation:
	common:				"$EIFFEL_SRC\common"
	common_parser (common):				"$\parser"
	common_eiffel_parser (common_parser):		"$\parser";

	flat_short (common_parser):			"$\flat_short"
		exclude
				-- This is excluded because we are defining them in EiffelBench in
				-- order to avoid polymorphism calls
			"format_context.e"
			"local_format.e"
		end
	flat_short_b:		"$EIFFEL_SRC\Eiffel\flat_short\bench"

	yacc:				"$EIFFEL_SRC\Eiffel\yacc"
	const:			"$EIFFEL_SRC\Eiffel\const"

		-- Gobo Eiffel Parse Library
	pr_skeleton:		"$EIFFEL_SRC\library\gobo\library\parse\skeleton";
		-- Gobo Eiffel Lexical Library
	lx_skeleton:		"$EIFFEL_SRC\library\gobo\library\lexical\skeleton";
		-- Gobo Eiffel Kernel Library
	kl_kernel:			"$EIFFEL_SRC\library\gobo\library\kernel";
	kl_kernel_spec:		"$EIFFEL_SRC\library\gobo\library\kernel\spec\ise";

		-- Lace compilation:
	env:				"$EIFFEL_SRC\Eiffel\lace\env"
	lace_compile:		"$EIFFEL_SRC\Eiffel\lace\lace_compile"
	lace_shared:		"$EIFFEL_SRC\Eiffel\lace\shared"

		-- Eiffel compilation:
	eiffel_comp:		"$EIFFEL_SRC\Eiffel\eiffel"

	instructions_b(eiffel_comp):		"$\AST\instructions"
	expressions_b(eiffel_comp):		"$\AST\expressions"
	ast_skeleton_b(eiffel_comp):		"$\AST\skeleton"
	ast_clickable_b(eiffel_comp):		"$\AST\clickable"

	byte_code(eiffel_comp):			"$\byte_code"
		--default
			--profile (yes)
		--end
	cecil(eiffel_comp):			"$\cecil"
	compiler(eiffel_comp):			"$\compiler"
	eiffel_const(eiffel_comp):		"$\const"
	generation(eiffel_comp):		"$\generation"
		--default
			--profile (yes)
		--end

	genericity(eiffel_comp):		"$\genericity"

	compiler_ids(eiffel_comp):		"$\ids\compiler"
	routine_ids(eiffel_comp):		"$\ids\routine"
	class_ids(eiffel_comp):			"$\ids\class"
	type_ids(eiffel_comp):			"$\ids\type"
	body_ids(eiffel_comp):			"$\ids\body_id"
	body_indexes(eiffel_comp):		"$\ids\body_index"
	real_body_ids(eiffel_comp):		"$\ids\real_body_id"
	real_body_indexes(eiffel_comp):	"$\ids\real_body_index"
	file_ids(eiffel_comp):			"$\ids\file"
	pattern_ids(eiffel_comp):		"$\ids\pattern"
	feature_as_ids(eiffel_comp): 		"$\ids\feature_as"
	inheritance(eiffel_comp):		"$\inheritance"
	eiffel_interface(eiffel_comp):	"$\interface"

	polymorphism(eiffel_comp):		"$\polymorphism"
		--default
			--profile (yes)
		--end

	server(eiffel_comp): 			"$\server"
		--default
			--profile (yes)
		--end

	eiffel_shared(eiffel_comp):		"$\shared"
	skeleton(eiffel_comp):			"$\skeleton"
	eiffel_structures(eiffel_comp):	"$\structures"
	tables(eiffel_comp): 			"$\tables"
	descriptor(eiffel_comp):		"$\descriptor"

		-- API cluster
	api:				"$EIFFEL_SRC\Eiffel\API"

	api_constants(api):	"$\constants"; 
	api_shared(api):		"$\shared"
	api_ids(api):		"$\ids"
	api_queries(api):		"$\queries"
	api_interface(api):	"$\interface"
	api_common(api):		"$\common"
	output(api):		"$\output"
	evaluated_type(api):	"$\evaluated_type"

		-- Error processing
	error_common(api):	"$\error\common"
	lace_error(api):		"$\error\lace"
	feature_error(api):	"$\error\eiffel\feature"
	parents_error(api):	"$\error\eiffel\parents"
	redefined_error(api):	"$\error\eiffel\redefined"
	unredefined_error(api):	"$\error\eiffel\unredefined"

		-- Resources
	resources(common):		"$\resources"

		-- Profiling
	converter(api):		"$\profiler\converter"
	profiling(api):		"$\profiler\profiling"
	querying(api):		"$\profiler\querying"
	filters(api):		"$\profiler\filters"
	struct_text(api):		"$\structured_text"

		-- AST structures
	lace_AST(api):	"$\AST\lace"

--	instructions(common_parser):	"$\AST\instructions"
--	expressions(common_parser):	"$\AST\expressions"
--	ast_skeleton(common_parser):	"$\AST\skeleton"
--	ast_stonables(common_parser):	"$\AST\clickable"

		-- SWITCH clusters (chose one cluster per directory in switch directory)
	switch:			"$EIFFEL_SRC\Eiffel\switch"
	interface_switch(switch):	"$\interface\graphical"
	--dle_switch(switch):	"$\dle\no_dle"
	--license_switch(switch): "$\license\license";  	--unix
	--license_switch(switch): "$\license\no_license";	--win
	time_lock(switch):        	"$\license\time_lock";--win
	encryption:				"$EIFFEL_SRC\library\encryption"

		-- Communications
	communications (switch):		"$\communication"
	status (communications):		"$\status"
	ipc (communications):		"$\ipc"
	debuging_class (communications):	"$\debug"
	debuging_commands (communications):	"$\commands"
	debuging_formatters (communications):	"$\formatters"

		-- INTERFACE CLUSTERS
	interface:			"$EIFFEL_SRC\Eiffel\interface"
	interface_shared(interface):	"$\shared"

		-- tty interace
	tty(interface): 			"$\tty"

		-- graphical interface (bench):
	bench_common(interface):	"$\graphical\common"
	case_tool(interface):		"$\graphical\case_tool"
	commands(interface):		"$\graphical\commands"
	debugging_tool (interface):	"$\graphical\debugging"
	drag_and_drop(interface):	"$\graphical\drag_and_drop"
	formatters(interface):		"$\graphical\formatters"
	main(interface):			"$\graphical\main"
		--default
			--profile (yes)
		--end

	graphical_shared(interface):	"$\graphical\shared"
	stones(interface):		"$\graphical\stones"
	text_window(interface):		"$\graphical\text_window"
	windows(interface):		"$\graphical\windows"
	preference_tool(interface):	"$\graphical\preference_tool"
	profile_tool(interface):	"$\graphical\profile_tool"
	wizard_common(interface):	"$\graphical\wizard\common"
	wizard_bench(interface):	"$\graphical\wizard\bench"

		-- Windows specific classes
	platform_mswin(interface):		"$\graphical\spec\widgets\win32"
	win_graphical_window(interface):		"$\graphical\spec\graphical_window\win32"
	win_formatters(interface):		"$\graphical\spec\formatters\win32";
	win_commands(interface):			"$\graphical\spec\commands\win32"	

		-- Case
	case_common(common):		"$\case_storage"
	case_bench:			"$EIFFEL_SRC\Eiffel\case_storage\bench"

external
	include_path:
		"$(EIFFEL_SRC)\library\wel\spec\windows\include",
		"$(EIFFEL_SRC)\C\parsing\shared",
		"$(EIFFEL_SRC)\C\parsing\eiffel",
		"$(EIFFEL_SRC)\C\bench",
		"$(EIFFEL_SRC)\library\encryption\Clib",
		"$(EIFFEL_SRC)\library\gobo\library\kernel\include"

	object:
		"$(EIFFEL_SRC)\library\wel\spec\$(COMPILER)\lib\wel.lib",
		"$(EIFFEL_SRC)\C\ipc\ewb\ewb.lib",
		"$(EIFFEL_SRC)\C\ipc\shared\ipc.lib",
		"$(EIFFEL_SRC)\C\idrs\idr.lib",
		"$(EIFFEL_SRC)\C\parsing\eiffel\eiffel.lib",
		"$(EIFFEL_SRC)\C\parsing\lace\lace.lib",
		"$(EIFFEL_SRC)\C\parsing\shared\parsing.lib",
		"$(EIFFEL_SRC)\C\platform\platform.lib",
		"$(EIFFEL_SRC)\C\bench\special_tables.obj",
		"$(EIFFEL_SRC)\library\encryption\spec\$(COMPILER)\lib\des.lib"

end
