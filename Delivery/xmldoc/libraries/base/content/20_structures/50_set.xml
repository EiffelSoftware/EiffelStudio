<document title="EiffelBase, Sets">
	<meta_data>
		<help>
			<toc>
				<envision_location>Class Libraries\EiffelBase\EiffelBase\EiffelBase Data Structures Overview</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph> Sets are containers where successive occurrences of the same item are not distinguished: inserting the same item twice has the same observable effect as inserting it once.</paragraph>
		<heading>
			<size>2</size>Deferred classes
		</heading>
		<paragraph>The most general class describing sets is 
			<link>
				<url>../../reference/structures/set/set_chart.xml</url>
				<label>SET</label>
			</link>. The usual operations of set theory such as union and intersection have been relegated to 
			<link>
				<url>../../reference/structures/set/subset_chart.xml</url>
				<label>SUBSET</label>
			</link>, an heir of 
			<link>
				<url>../../reference/structures/set/set_chart.xml</url>
				<label>SET</label>
			</link>. This enables a class to inherit from 
			<link>
				<url>../../reference/structures/set/set_chart.xml</url>
				<label>SET</label>
			</link> without having to effect these operations if it satisfies the basic set property but has no convenient implementation of the subset operations.
		</paragraph>
		<heading>
			<size>2</size>Sets without a notion of order
		</heading>
		<paragraph>
			<link>
				<url>../../reference/structures/set/linked_set_chart.xml</url>
				<label>LINKED_SET</label>
			</link> provides a basic implementation of 
			<link>
				<url>../../reference/structures/set/set_chart.xml</url>
				<label>SET</label>
			</link> by linked lists.
		</paragraph>
		<heading>
			<size>2</size>Sets of comparable elements and sorted sets
		</heading>
		<paragraph>The deferred class 
			<link>
				<url>../../reference/structures/set/comparable_set_chart.xml</url>
				<label>COMPARABLE_SET</label>
			</link>, declared as
		</paragraph>
		<code_block>
	<keyword>deferred class</keyword>
		<link><url>../../reference/structures/set/comparable_set_chart.xml</url><label>COMPARABLE_SET</label></link>[G -&gt; <link><url>../../reference/kernel/comparable_chart.xml</url><label>COMPARABLE</label></link>]

	<keyword>inherit</keyword>
		<link><url>../../reference/structures/set/subset_chart.xml</url><label>SUBSET</label></link> [G]
		<link><url>/libraries/base/reference/structures/sort/comparable_struct_chart.xml</url><label>COMPARABLE_STRUCT</label></link> [G]
	...
		</code_block>
		<paragraph> describes sets whose items may be compared by a total order relation. The class has the features 
			<link>
				<url>../../reference/structures/set/comparable_set_chart.xml</url><anchor_name>f_min</anchor_name>
				<label>min</label>
			</link> and 
			<link>
				<url>../../reference/structures/set/comparable_set_chart.xml</url><anchor_name>f_max</anchor_name>
				<label>max</label>
			</link>.
			<line_break/>   Two implementations of 
			<link>
				<url>../../reference/structures/set/comparable_set_chart.xml</url>
				<label>COMPARABLE_SET</label>
			</link> are provided. One, 
			<link>
				<url>../../reference/structures/set/two_way_sorted_set_chart.xml</url>
				<label>TWO_WAY_SORTED_SET</label>
			</link>, uses sorted two-way lists. The other, 
			<link>
				<url>../../reference/structures/set/binary_search_tree_set_chart.xml</url>
				<label>BINARY_SEARCH_TREE_SET</label>
			</link>, uses binary search trees.
			<line_break/>   If the items are partially rather than totally ordered, you may use the class 
			<link>
				<url>../../reference/structures/set/part_sorted_set_chart.xml</url>
				<label>PART_SORTED_SET</label>
			</link> [G -&gt; 
			<link>
				<url>../../reference/kernel/part_comparable_chart.xml</url>
				<label>PART_COMPARABLE</label>
			</link>], which uses a two-way sorted list implementation.
		</paragraph>
	</paragraph></document>
