<document output="studio" title="Major changes between ISE Eiffel 5.2 and ISE Eiffel 5.3">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>What's new
		</heading>
		<list ordered="false">
			<item>Finalized executable with option `exception trace' enabled will now display the instruction number (usually equivalent to the line number in the routine) being executed when a failure occurred. It was already displaying this information in workbench/melted mode, we have just extended this feature to finalize mode.</item>
			<item>Incremental compilation is now available for .NET code generation.  Meaning that if you modify one class, only this class is being recompiled. It dramatically improves development time when targeting .NET.</item>
			<item>In .NET code generation, assertions can be turned on or off on a class per class basis without having to recompile those classes.</item>
			<item>Implemented
				<link>
					<url>../../../../../../libraries/base/content/10_kernel/index.xml#Recoverable_storable</url>
					<label>recoverable storable</label>
				</link> to enable the retrieval of slightly different version of an object. It only applies for classic           Eiffel.
			</item>
		</list>
		<heading>
			<size>2</size>Improvements
		</heading>
		<list ordered="false">
			<item>Enabled support for Borland C compiler in .NET.</item>
			<item>Removed too many warnings during C compilation on Tru64.</item>
			<item>Improved formatting of exception traces so that class names, feature names, exception tags are not truncated. Display limit has been pushed at about 256 characters.</item>
		</list>
		<heading>
			<size>2</size>Changes
		</heading>
		<list ordered="false">
			<item>Made `\\' follow the balancing rules for various integer types.</item>
			<item>Precompiled libraries now precompiles all classes reachable from clusters defined in project settings only if root class is ANY, otherwise it will only precompile classes reachable from the root class. In 5.1 and prior version it was precompiling all classes           reachable from clusters.</item>
		</list>
		<heading>
			<size>2</size>Bug fixes
		</heading>
		<heading>
			<size>3</size>Language issues
		</heading>
		<list ordered="false">
			<item>Fixed semantic of object creations to strictly follow definition given in "Eiffel: The Language". Namely, if you have x of           type
				<code>
					<class_name>X</class_name>
				</code>:
				<line_break/>
				<paragraph>
					<code>
						<keyword>create</keyword>
					</code> x.
					<code>
						<feature_name>make</feature_name>
					</code>is equivalent tox :=
					<code>
						<keyword>create</keyword>
					</code> {
					<code>
						<class_name>X</class_name>
					</code>}.
					<code>
						<feature_name>make</feature_name>
					</code>
				</paragraph> It implies some bug fixes which might break existing code. For example:
				<paragraph>x:
					<code>
						<class_name>X</class_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>once</keyword>
					</code>
					<code>
						<comment>-- If </comment>
					</code>
					<code>
						<feature_name>make</feature_name>
					</code>
					<code>
						<comment> calls back to x then it used to return</comment>
					</code>
					<code>
						<comment>-- a non-Void value for x, where it should have been Void.</comment>
					</code>
					<code>
						<keyword>create</keyword>
					</code> Result.
					<code>
						<feature_name>make</feature_name>
					</code>
					<code>
						<keyword>end</keyword>
					</code>x:
					<code>
						<class_name>X</class_name>
					</code>
					<code>
						<comment>-- If </comment>
					</code>
					<code>
						<feature_name>make </feature_name>
					</code>
					<code>
						<comment>accesses back the x attribute then it used to return</comment>
					</code>
					<code>
						<comment>-- new value of x rather than the old value.</comment>
					</code>
					<code>
						<keyword>create</keyword>
					</code> x.
					<code>
						<feature_name>make</feature_name>
					</code>
				</paragraph> Or in melted code only the following code now works properly, i.e.
				<code>
					<feature_name>make</feature_name>
				</code> gets the old value of x, not the new one
				<line_break/>
				<paragraph>
					<code>
						<keyword>create</keyword>
					</code> x.
					<code>
						<feature_name>make</feature_name>
					</code> (x)
				</paragraph>
			</item>
			<item>Fixed undetected
				<compiler_error>VDRD(3)</compiler_error> errors: compiler was not strict enough and accepted
				<code>
					<keyword>ensure</keyword>
				</code> where only
				<code>
					<keyword>ensure then</keyword>
				</code> was valid.
			</item>
		</list>
		<heading>
			<size>3</size>Store/Retrieve issues
		</heading>
		<list ordered="false">
			<item>Fixed issue in storable mechanism when retrieving expanded objects.</item>
			<item>Fixed issue with independent_store where storing arrays of objects whose count was greater than 65536 will cause a memory corruption.</item>
			<item>Added
				<code>
					<feature_name>correct_mismatch</feature_name>
				</code> on
				<code>
					<class_name>HASH_TABLE</class_name>
				</code> to enable retrieval of the 5.1 and older version of
				<code>
					<class_name>HASH_TABLE</class_name>
				</code>.
			</item>
		</list>
		<heading>
			<size>3</size>Runtime/code generation issues
		</heading>
		<list ordered="false">
			<item>Fixed incorrect C code generation in final mode when creating an
				<code>
					<class_name>ARRAY</class_name>
				</code> of expanded type.
			</item>
			<item>Fixed incorrect C code generation in final mode when creating a complex object which contains expanded objects that have expanded           objects.</item>
			<item>Fixed random crash issue in finalized applications due to incorrect memory management when you have code similar to:</item>
			<paragraph>
				<code>
					<feature_name>f</feature_name>
				</code> (g:
				<code>
					<class_name>STRING</class_name>
				</code>):
				<code>
					<class_name>ANY</class_name>
				</code>
				<code>
					<keyword>is</keyword>
				</code>
				<code>
					<keyword>do</keyword>
				</code> Result :=
				<code>
					<keyword>create</keyword>
				</code> {
				<code>
					<class_name>STRING</class_name>
				</code>}.
				<code>
					<feature_name>make_from_string</feature_name>
				</code> (g)
				<code>
					<keyword>end</keyword>
				</code>
			</paragraph>
			<item>Fixed issue with
				<code>
					<feature_name>deep_equal</feature_name>
				</code> on
				<code>
					<class_name>ARRAY</class_name>
				</code> of expanded types which was returning
				<code>
					<keyword>False</keyword>
				</code> where it should have returned
				<code>
					<keyword>True</keyword>
				</code>.
			</item>
			<item>Fixed code generation issue with double constants where code below was not producing the expected result of 1e+030:
				<paragraph>
					<code>
						<feature_name>value</feature_name>
					</code>:
					<code>
						<class_name>DOUBLE</class_name>
					</code> is 1.0e15
					<code>
						<feature_name>print</feature_name>
					</code> (
					<code>
						<feature_name>value</feature_name>
					</code> *
					<code>
						<feature_name>value</feature_name>
					</code>)
				</paragraph>
			</item>
			<item>Fixed issue in melted code where computation such as
				<code>
					<class_name>INTEGER_X</class_name>
				</code> //
				<code>
					<class_name>INTEGER_Y</class_name>
				</code> will either crash or give an incorrect computation where X and Y represents integers that are either 8, 16, 32 or 64 bits long and X &lt; Y.
			</item>
			<item>Fixed incorrect C code generation of finalized code when your project configuration includes a precompiled library and that you cancel finalization process at degree -2, and then restart a finalization.</item>
			<item>Fixed issue with incorrect C code generation of inspect instruction based on character values above 128.</item>
			<item>Fixed compilation crash at degree 3 with following code:
				<paragraph>
					<code>
						<keyword>local</keyword>
					</code> i:
					<code>
						<class_name>INTEGER</class_name>
					</code>
					<code>
						<keyword>do</keyword>
					</code> i := &lt;&lt; 1 &gt;&gt;
					<code>
						<feature_name>@</feature_name>
					</code> 2
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>
			</item>
			<item>Fixed a crash in finalized mode with invariant checking enabled with following code and when checking the invariant triggers a garbage           collection cycle:
				<line_break/>
				<paragraph>
					<code>
						<feature_name>value</feature_name>
					</code>:
					<code>
						<class_name>INTEGER</class_name>
					</code>
					<code>
						<feature_name>is_value_required</feature_name>
					</code>:
					<code>
						<class_name>BOOLEAN</class_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code> Result :=
					<code>
						<feature_name>value</feature_name>
					</code> = 1
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>
			</item>
			<item>Fixed crash of compiler at degree 4 while trying to compile this incorrect class:
				<line_break/>
				<paragraph>
					<code>
						<keyword>class</keyword>
					</code>
					<code>
						<class_name>CRASH</class_name>
					</code>
					<code>
						<keyword>inherit</keyword>
					</code>
					<code>
						<class_name>CHAIN</class_name>
					</code>
					<code>
						<comment>-- Missing generic parameter</comment>
					</code>
					<code>
						<keyword>create</keyword>
					</code>
					<code>
						<feature_name>make</feature_name>
					</code>
					<code>
						<keyword>feature</keyword>
					</code> -- Initialization
					<code>
						<feature_name>make</feature_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<feature_name>index</feature_name>
					</code>:
					<code>
						<class_name>INTEGER</class_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<feature_name>duplicate</feature_name>
					</code> (n:
					<code>
						<class_name>INTEGER</class_name>
					</code>):
					<code>
						<keyword>like Current is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>
			</item>
			<item>Fixed issue with pathological memory allocation scheme that could trigger an `out of memory' exception where enough memory is still available.</item>
			<item>Fixed incorrect allocation of expanded arrays where creation routine of expanded class was not called on all items of the newly created array.</item>
			<item>Fixed incorrect creation type of attribute where attribute's type has some generic parameter. In some cases, instead of creating an
				<code>
					<class_name>ARRAY [B2 [C]]</class_name>
				</code> it would create an
				<code>
					<class_name>ARRAY [B2 [STRING]]</class_name>
				</code>.
			</item>
		</list>
		<heading>
			<size>3</size>.NET issues
		</heading>
		<list ordered="false">
			<item>Fixed issue in IL code generation where having a class that inherits from a non-Eiffel .NET class. And the class has the following           features:
				<line_break/>
				<paragraph>
					<code>
						<feature_name>a</feature_name>
					</code>:
					<code>
						<class_name>ARRAY</class_name>
					</code> [
					<code>
						<keyword>like</keyword>
					</code>
					<code>
						<feature_name>f</feature_name>
					</code>]
					<code>
						<feature_name>f</feature_name>
					</code>:
					<code>
						<class_name>STRING</class_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>          Then you could neither load nor execute the generated code.
			</item>
			<item>Fixed incorrect C file naming when generating a .NET system that uses a C++ external (it should be .cpp, not just .c).</item>
			<item>Fixed incorrect .NET code generation with following assignment attempts whose source is expanded:
				<paragraph>
					<code>
						<keyword>local</keyword>
					</code> a:
					<code>
						<class_name>ANY</class_name>
					</code> o:
					<code>
						<class_name>SYSTEM_OBJECT</class_name>
					</code>
					<code>
						<keyword>do</keyword>
					</code> a ?= 12 o ?= 12
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>
			</item>
			<item>Fixed incorrect code generation in .NET for assertions checking with following code where precondition of
				<code>
					<feature_name>test</feature_name>
				</code> will not be checked although it should:
				<line_break/>
				<paragraph>
					<code>
						<feature_name>make</feature_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<feature_name>test_which_fail_and_rescued</feature_name>
					</code>
					<code>
						<feature_name>test</feature_name>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<feature_name>test</feature_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>require</keyword>
					</code> should_be_checked: False
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<feature_name>test_which_fail_and_rescued</feature_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>local</keyword>
					</code> retried:
					<code>
						<class_name>BOOLEAN</class_name>
					</code>
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>if not</keyword>
					</code> retried
					<code>
						<keyword>then</keyword>
					</code>
					<code>
						<feature_name>failure</feature_name>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<keyword>rescue</keyword>
					</code> retried := true; retry
					<code>
						<keyword>end</keyword>
					</code>
					<code>
						<feature_name>failure</feature_name>
					</code>
					<code>
						<keyword>is</keyword>
					</code>
					<code>
						<keyword>require</keyword>
					</code> should_be_checked: False
					<code>
						<keyword>do</keyword>
					</code>
					<code>
						<keyword>end</keyword>
					</code>
				</paragraph>
			</item>
			<item>Fixed .NET verification issue where sometimes you could get the following message when checking an Eiffel assembly against peverify:           [IL]: Error: Unverifiable PE Header/native stub.</item>
			<item>Fixed incorrect code generation when creating and accessing a
				<code>
					<class_name>NATIVE_ARRAY</class_name>
				</code> of expanded type.
			</item>
			<item>Fixed incorrect metadata heap generation to use standard CLI tables.</item>
			<item>Fixed bug where content of
				<code>
					<class_name>NATIVE_ARRAY</class_name>
				</code> could not be looked up in .NET debuggers (cordbg, DbgClr or Visual Studio)
			</item>
		</list>
	</paragraph></document>