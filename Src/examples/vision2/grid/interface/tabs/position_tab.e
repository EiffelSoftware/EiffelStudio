indexing
	description: "Objects that represent an EV_TITLED_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	POSITION_TAB

inherit
	POSITION_TAB_IMP
	
	GRID_ACCESSOR
		undefine
			copy, default_create, is_equal
		end

feature {NONE} -- Initialization

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			grid.virtual_position_changed_actions.extend (agent virtual_position_changed)
			grid.virtual_size_changed_actions.extend (agent virtual_size_changed)
		end

feature {NONE} -- Implementation

	
	update_position_button_selected is
			-- Called by `select_actions' of `update_position_button'.
		do
		end

	virtual_position_changed (a_x, a_y: INTEGER) is
			-- Virtual position of `grid' has changed.
		do
			drawable.redraw
			virtual_x_position.change_actions.block
			virtual_x_position.set_value (a_x)
			virtual_x_position.change_actions.resume
			virtual_y_position.change_actions.block
			virtual_y_position.set_value (a_y)
			virtual_y_position.change_actions.resume
		end

	virtual_size_changed (a_width, a_height: INTEGER) is
			-- Virtual size of `grid' has changed.
		do
			drawable.redraw
		end
		
	virtual_x_position_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `virtual_x_position'.
		do
			grid.virtual_position_changed_actions.block
			grid.set_virtual_position (a_value, grid.virtual_y_position)
			grid.virtual_position_changed_actions.resume
			drawable.redraw
		end


	virtual_y_position_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `virtual_y_position'.
		do
			grid.virtual_position_changed_actions.block
			grid.set_virtual_position (grid.virtual_x_position, a_value)
			grid.virtual_position_changed_actions.resume
			drawable.redraw
		end
		
	drawable_exposed (a_x, a_y, a_width, a_height: INTEGER) is
			-- Called by `expose_actions' of `drawable'.
		local
			virtual_width, virtual_height: INTEGER
		do
			drawable.clear
			virtual_width := grid.virtual_width
			virtual_height := grid.virtual_height
			virtual_x_position.value_range.adapt (create {INTEGER_INTERVAL}.make (0, virtual_width - grid.viewable_width))
			virtual_y_position.value_range.adapt (create {INTEGER_INTERVAL}.make (0, virtual_height - grid.viewable_height))
			drawable.set_foreground_color (stock_colors.black)
			if virtual_width / drawable.width > virtual_height / drawable.height then
				scale := virtual_width / drawable.width
				left := 0
				top := (drawable.height - (virtual_height / scale).truncated_to_integer) // 2
				right := drawable.width
				bottom := (virtual_height / scale).truncated_to_integer
				
			else
				scale := virtual_height / drawable.height
				left := (drawable.width - (virtual_width / scale).truncated_to_integer) // 2
				top := 0
				right := (virtual_width / scale).truncated_to_integer
				bottom := drawable.height
			end
			drawable.draw_rectangle (left, top, right, bottom)
			drawable.set_foreground_color (stock_colors.red)
			drawable.draw_rectangle (left + ((grid.virtual_x_position) / scale).truncated_to_integer, (top + (grid.virtual_y_position) / scale).truncated_to_integer, (grid.viewable_width / scale).truncated_to_integer, (grid.viewable_height / scale).truncated_to_integer)
		end
		
	scale: REAL
		-- Last computed scaling factor.
	
	left, right, top, bottom: INTEGER
		
	pointed_moved_on_drawable (a_x, a_y: INTEGER; a_x_tilt, a_y_tilt, a_pressure: DOUBLE; a_screen_x, a_screen_y: INTEGER) is
			-- Called by `pointer_motion_actions' of `drawable'.
		local
			v_x, v_y: INTEGER
			x_pos, y_pos: INTEGER
		do
			x_pos := a_x
			y_pos := a_y
			if moving then
				v_x := ((x_pos - left) * scale).truncated_to_integer.max (0).min (grid.virtual_width - grid.viewable_width)
				v_y := ((y_pos - top) * scale).truncated_to_integer.max (0).min (grid.virtual_height - grid.viewable_height)
				grid.set_virtual_position (v_x, v_y)
				virtual_x_position.set_value (v_x)
				virtual_y_position.set_value (v_y)
				drawable.redraw
			end
		end
	
	drawable_resized (a_x, a_y, a_width, a_height: INTEGER) is
			-- Called by `resize_actions' of `drawable'.
		do
			drawable.redraw	
		end
		
	button_pressed_on_drawable (a_x, a_y, a_button: INTEGER; a_x_tilt, a_y_tilt, a_pressure: DOUBLE; a_screen_x, a_screen_y: INTEGER) is
			-- Called by `pointer_button_press_actions' of `drawable'.
		do
			if a_button = 1 then
				press_x := a_x
				press_y := a_y
				moving := True
			end
		end
	
	button_released_on_drawable (a_x, a_y, a_button: INTEGER; a_x_tilt, a_y_tilt, a_pressure: DOUBLE; a_screen_x, a_screen_y: INTEGER) is
			-- Called by `pointer_button_release_actions' of `drawable'.
		do
			if a_button = 1 then
				moving := False
			end
		end
		
	moving: BOOLEAN
		
	last_x, last_y: INTEGER
	
	press_x, press_y: INTEGER

	stock_colors: EV_STOCK_COLORS is
			--
		once
			create Result
		end

end -- class POSITION_TAB

