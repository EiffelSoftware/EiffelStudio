system es4

root
	ewb_motif (main): "make"

default
	assertion (no);
--	exception_trace (yes);
	dead_code_removal (no);
--	inlining_size ("16");
	inlining (no);

	--trace(yes)
	--trace ("SERVER");
	--debug ("DOCUMENT");
	--debug ("DRAWING")
	--debug ("PARSE")
	--debug ("FLAT_SHORT");
	--debug ("LOCAL_FEAT_ADAPTATION");
	--debug ("ACTIVITY")
	--debug ("DEBUG_RECV")
	--debug ("PASS3")
	--array_optimization (no);

cluster

-- EiffelBase:
	base:				"$EIFFEL_SRC/library/base";
	structures(base):		"$/structures";

	kernel(base):		"$/kernel";
	support(base):		"$/support";
	access(structures):	"$/access";
	cursors(structures):	"$/cursors";
	dispenser(structures):	"$/dispenser";
	list(structures):		"$/list";
	set(structures):		"$/set";
	sort(structures):		"$/sort";
	storage(structures):	"$/storage";
	table(structures):	"$/table_eiffel3";
	traversing(structures):	"$/traversing";
	tree(structures):		"$/tree";

-- EiffelNet
        net:                            "$EIFFEL_SRC/library/net";
        abstract_socket (net):          "$/abstract/socket";
        net_socket (net):               "$/network/socket";
        local_socket (net):             "$/local/socket";

        polling_abstract (net):         "$/polling/abstract";
        polling_implementation (net):   "$/polling/implementation";

        abstract_client_server (net):   "$/abstract/client_server";
        net_client_server (net):        "$/network/client_server";
        local_client_server (net):      "$/local/client_server";


-- Mel:
        mel:                    "$EIFFEL_SRC/library/mel";
        mel_callback_structs (mel):   "$/callback_structs";
        mel_constants (mel):          "$/constants";
        mel_events (mel):             "$/events";
        mel_extra (mel):              "$/extra";
        mel_gadgets (mel):            "$/gadgets";
        mel_implementation (mel):     "$/implementation";
        mel_kernel (mel):             "$/kernel";
        mel_resources (mel):          "$/resources";
        mel_widgets (mel):            "$/widgets";

-- Wel:
--	wel:					"$EIFFEL_SRC/library/wel";

--	wel_constants(wel):		"$/consts";
--	wel_controls(wel):		"$/controls";
--	wel_gdi(wel):			"$/gdi";
--	wel_gdi_stocks(wel):		"$/gdistock";
--	wel_standard_dialogs(wel):	"$/stddlgs";
--	wel_structures(wel):		"$/structs";
--	wel_support(wel):			"$/support";
--	wel_windows(wel):			"$/windows";
--	wel_messages(wel):		"$/messages";

-- Vision
	vision:				"$EIFFEL_SRC/library/vision";
	vision_figures (vision):             "$/figures" --unix
		exclude 
			-- This is excluded, because there is a class with
			-- the same name in compiler sources (motif only)
			-- Check this!!!!!
			"text_figure.e"; "line.e"
--	    	adapt
--                    eiffel_structures:
 --                           rename
  --                                  line as eiffel_line
   	 	end;
    	vision_imp_motif (vision):           "$/implement/motif";--unix
    	vision_imp_toolkit (vision):         "$/implement/toolkit";--unix
    	vision_context_data (vision):        "$/oui/context_data";--unix
    	vision_kernel (vision):              "$/oui/kernel";--unix
    	vision_widgets (vision):             "$/oui/widgets";--unix
    	vision_tools (vision):               "$/tools";--unix
    	vision_obsolete_motif (vision):      "$/obsolete/motif";--unix
    	vision_obsolete_oui (vision):        "$/obsolete/oui";--unix
    	vision_obsolete_toolkit (vision):    "$/obsolete/toolkit";--unix

--	oui(vision):			"$/oui";--win
--	implement(vision):		"$/implement";--win

--	graph_context_data(oui):	"$/context_data";--win
--	graph_kernel(oui):		"$/kernel";--win
--	graph_oui(oui):			"$/widgets";--win
--	graph_toolkit(implement):	"$/toolkit";--win
--	graph_widgets(implement):	"$/mswin/widgets";--win
--	graph_command(implement):	"$/mswin/commands";--win

-- ES4 SPECIFIC CLUSTERS
	liman:				"$EIFFEL_SRC/Eiffel/limand";

	liman_bench(liman):		"$/bench";
	liman_bench_graphical(liman):	"$/bench_graphical";
	liman_abstract(liman):		"$/abstract";
	liman_graphical(liman):		"$/graphical";
	--win time_lock(liman):        	"$/time_lock";--win
	liman_shared(liman):		"$/shared";--unix
	liman_client(liman):		"$/client";--unix

	beurk:			"$EIFFEL_SRC/Eiffel/beurk";
	compiler_support:		"$EIFFEL_SRC/Eiffel/support";
	replication:		"$EIFFEL_SRC/Eiffel/eiffel/replication";

-- General compilation:

	common:				"$EIFFEL_SRC/Eiffel/common";

	common_parser (common):				"$/parser";

	flat_short (common_parser):			"$/flat_short";
--		default
--			profile (yes);
--		end;

	flat_short_b:		"$EIFFEL_SRC/Eiffel/flat_short/bench";
--		default
--			profile (yes);
--		end;

	yacc:				"$EIFFEL_SRC/Eiffel/yacc";
	const:			"$EIFFEL_SRC/Eiffel/const";

-- Lace compilation:
	env:				"$EIFFEL_SRC/Eiffel/lace/env";
	lace_compile:		"$EIFFEL_SRC/Eiffel/lace/lace_compile";
	lace_shared:		"$EIFFEL_SRC/Eiffel/lace/shared";

-- Eiffel compilation:

	eiffel_comp:		"$EIFFEL_SRC/Eiffel/eiffel";

	instructions_b(eiffel_comp):		"$/AST/instructions";
	expressions_b(eiffel_comp):		"$/AST/expressions";
	ast_skeleton_b(eiffel_comp):		"$/AST/skeleton";
	ast_clickable_b(eiffel_comp):		"$/AST/clickable";

	byte_code(eiffel_comp):			"$/byte_code";
	cecil(eiffel_comp):			"$/cecil";
	compiler(eiffel_comp):			"$/compiler";
	eiffel_const(eiffel_comp):		"$/const";
	generation(eiffel_comp):		"$/generation";
	genericity(eiffel_comp):		"$/genericity";
	compiler_ids(eiffel_comp):		"$/ids/compiler";
	routine_ids(eiffel_comp):		"$/ids/routine";
	class_ids(eiffel_comp):			"$/ids/class";
	type_ids(eiffel_comp):			"$/ids/type";
	body_ids(eiffel_comp):			"$/ids/body_id";
	body_indexes(eiffel_comp):		"$/ids/body_index";
	real_body_ids(eiffel_comp):		"$/ids/real_body_id";
	real_body_indexes(eiffel_comp):	"$/ids/real_body_index";
	file_ids(eiffel_comp):			"$/ids/file";
	pattern_ids(eiffel_comp):		"$/ids/pattern";
	feature_as_ids(eiffel_comp): 		"$/ids/feature_as";
	inheritance(eiffel_comp):		"$/inheritance";
	eiffel_interface(eiffel_comp):	"$/interface";
--		option
--			profile (yes): CLASS_C, SYSTEM_I
--		end;

	polymorphism(eiffel_comp):		"$/polymorphism";
	server(eiffel_comp): 			"$/server";
	eiffel_shared(eiffel_comp):		"$/shared";
	skeleton(eiffel_comp):			"$/skeleton";
	eiffel_structures(eiffel_comp):	"$/structures";
--	    adapt
--                    vision_figures:
--                            rename
--                                    line as vision_line
--                            end ;
   
	tables(eiffel_comp): 			"$/tables";
	descriptor(eiffel_comp):		"$/descriptor";


-- API cluster
	api:				"$EIFFEL_SRC/Eiffel/API";

	api_constants(api):	"$/constants"; 
	api_shared(api):		"$/shared";
	api_ids(api):		"$/ids";
	api_queries(api):		"$/queries";
	api_interface(api):	"$/interface";
	api_common(api):		"$/common";
	communication(api):	"$/communication";
	output(api):		"$/output";
	evaluated_type(api):	"$/evaluated_type";

		-- Error processing
	error_common(api):	"$/error/common";
	lace_error(api):		"$/error/lace";
	feature_error(api):	"$/error/eiffel/feature";
	parents_error(api):	"$/error/eiffel/parents";
	redefined_error(api):	"$/error/eiffel/redefined";
	unredefined_error(api):	"$/error/eiffel/unredefined";

		-- Resources
	resources(common):		"$/resources";

		-- Profiling
	converter(api):		"$/profiler/converter";
	profiling(api):		"$/profiler/profiling";
	querying(api):		"$/profiler/querying";
	filters(api):		"$/profiler/filters";
	matching(api):		"$/profiler/matching";
	struct_text(api):		"$/structured_text";

		-- AST structures

	lace_AST(api):	"$/AST/lace";

	instructions(common_parser):	"$/AST/instructions";
	expressions(common_parser):	"$/AST/expressions";
	ast_skeleton(common_parser):	"$/AST/skeleton";
	ast_stonables(common_parser):	"$/AST/clickable";

-- SWITCH clusters (chose one cluster per directory in switch directory)
	switch:			"$EIFFEL_SRC/Eiffel/switch";

	dle_switch(switch):		"$/dle/dle";
	generation_switch(switch):	"$/generation/professional";
	interface_switch(switch):	"$/interface/graphical";
	tty_switch(switch): 		"$/tty/professional";
	license_switch(switch): 		"$/license/license";  	--unix
	--license_switch(switch): 		"$/license/no_license";	--win

-- INTERFACE CLUSTERS
	interface:			"$EIFFEL_SRC/Eiffel/interface";

	interface_shared(interface):	"$/shared";

		-- tty interace
	tty(interface): 			"$/tty";

		-- graphical interface (bench):
	bench_common(interface):	"$/graphical/common";
	commands(interface):		"$/graphical/commands";
	--	default
	--		profile (yes);
	--	end;

	debugging(interface):		"$/graphical/debugging";
	drag_and_drop(interface):	"$/graphical/drag_and_drop";
	formatters(interface):		"$/graphical/formatters";
	main(interface):			"$/graphical/main";
	graphical_shared(interface):	"$/graphical/shared";
	stones(interface):		"$/graphical/stones";
	text_window(interface):		"$/graphical/text_window";
	windows(interface):		"$/graphical/windows";
	preference_tool(interface):	"$/graphical/preference_tool";
	profile_tool(interface):	"$/graphical/profile_tool";
	wizard_common(interface):	"$/graphical/wizard/common";
	wizard_bench(interface):	"$/graphical/wizard/bench";

	platform_common(interface):		"$/graphical/spec/widgets/common";

	platform_motif(interface):			"$/graphical/spec/widgets/motif";
	motif_graphical_window(interface):		"$/graphical/spec/graphical_window/motif";

--	platform_mswin(interface):		"$/graphical/spec/widgets/win32";
--	win_graphical_window(interface):	"$/graphical/spec/graphical_window/win32";

-- Communications
	ipc:				"$EIFFEL_SRC/Eiffel/ipc";
	debugclas:			"$EIFFEL_SRC/Eiffel/debug";

-- Case
	case_common(common):		"$/case_storage";
	case_bench:			"$EIFFEL_SRC/Eiffel/case_storage/bench";

external
	
	include_path:
		"\$(BENCH)/C.ANSI/parsing/shared",
		"\$(EIFFEL4)/library/mel/Clib";

	object:
		"\$(BENCH)/C.ANSI/parsing/eiffel/libweiffel.a",
		"\$(BENCH)/C.ANSI/parsing/lace/liblace.a",
		"\$(BENCH)/C.ANSI/parsing/shared/libparsing.a",
		"\$(BENCH)/C.ANSI/platform/libplatform.a",
		"\$(EIFFEL4)/library/mel/spec/$(PLATFORM)/lib/libMel.a",
		"\$(EIFFEL4)/library/mel/spec/$(PLATFORM)/lib/libXpm.a",
		"\$(EIFFEL4)/library/net/spec/$(PLATFORM)/lib/libnet.a",
		"\$(BENCH)/C.ANSI/ipc/ewb/libewb.a",
		"\$(BENCH)/C.ANSI/ipc/shared/libipc.a",
		"\$(BENCH)/C.ANSI/liman/lm/liblm.a",
		"\$(BENCH)/C.ANSI/liman/shared/libshared.a",
		"\$(BENCH)/C.ANSI/idrs/libidr.a",
		"-lXm -lXt -lX11"	
end
