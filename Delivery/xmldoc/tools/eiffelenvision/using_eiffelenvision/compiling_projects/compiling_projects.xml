<document output="envision" title="Compiling Projects">
	<meta_data>
		<help>
			<toc>
				<envision_title>Compiling Projects</envision_title>
				<envision_pseudo_name>00</envision_pseudo_name>
			</toc>
			<xml>
				<xmlkeyword>
					<index>K</index>
					<term>EiffelEnvision, Building</term>
				</xmlkeyword>
				<xmlkeyword>
					<index>K</index>
					<term>Compiling project</term>
				</xmlkeyword>
				<xmlkeyword>
					<index>K</index>
					<term>Build, EiffelEnvision</term>
				</xmlkeyword>
			</xml>
		</help>
	</meta_data>
	<paragraph>	
		<paragraph>
			Compiling projects, often referred to as <help_link>
				<keywords>vxconProjectBuilds</keywords>
				<tab_index>0</tab_index>
				Building
			</help_link> in Visual Studio .NET is the process of compiling the Eiffel source files, each containing an <link><url>url</url><label>Eiffel class</label></link> declaration, and creating an assembly. The assembly generated 
			from a build can be executed as a stand-alone application or used from another application.
		</paragraph>

		<anchor>build_process</anchor>
		<heading>
			<size>2</size>
			<content>The Build Process</content>
		</heading>
		<paragraph>
			The EiffelEnvision project build process is broken down into three stages:
			<list ordered="true">
				<item>Pre-Build Tasks</item>
				<item>Main Compilation</item>
				<item>Post-Build Tasks</item>
			</list>
		</paragraph>	
		<paragraph>	
			<bold>Pre-Build Tasks</bold>
			<line_break/>
			During this stage of the build, EiffelEnvision prepares the project and your system for the Main Compilation.
		</paragraph>
		<paragraph>	
			<bold>Main Compilation</bold>
			<line_break/>
			In this stage, the Eiffel compilation will be started, compiling your project's Eiffel code into an assembly. An extra task to <link><url>umanaged_code.xml</url><label>compile the unmanaged code</label></link> may be performed 
			based on your <link><url>url</url><label>*project's configuration</label></link> and what has been compiled by Eiffel for .NET compiler.
		</paragraph>
		<paragraph>	
			<bold>Post-Build Tasks</bold>
			<line_break/>
			After the main compilation has succeeded, the post-build actions will be performed. In this stage, EiffelEnvision is preparing the project for execution using the <link><url>url</url><label>*Debugger</label></link> or for 
			external execution.
		</paragraph>
		
		<anchor>compilation_modes</anchor>
		<heading>
			<size>2</size>
			<content>Compilation Modes</content>
		</heading>
		<paragraph>
			EiffelEnvision presents two modes of compilation; <bold>incremental</bold> and <bold>optimized</bold>. Incremental compilation has the advantage of building projects faster as the Eiffel compiler will only 
			build the changes made to the <link><url>url</url><label>*project configuration</label></link> or any of its Eiffel source files. For incremental compilations, the Eiffel for .NET compiler will generate multiple 
			assembly modules, instead of a single assembly module containing the assembly manifest. Optimized compilation attempts to make compile-time optimizations and is therefore much slower than the incremental compilation. 
			Optimized compilation, in contrast, generates a single assembly module containing the assembly manifest and all of the <link><url>url</url><label>Eiffel classes</label></link> included in a project. You may change 
			the configuration specific <link><url>url</url><label>*Optimize Code</label></link> property from the <link><url>url</url><label>*Build Project Properties</label></link>. Setting the 
			<link><url>url</url><label>*Optimize Code</label></link> property to <bold>No</bold> will instruct the compiler to use incremental compilation, whereas <bold>Yes</bold> will ensure 
			the compiler optimizes the compilation of your project.
			
			<tip>
				<bold>Tip</bold>: When compiling projects using incremental compilation, you can tweak the compilation further using the <link><url>url</url><label>*Classes Per Module</label></link> configuration property also 
				from the <link><url>url</url><label>*Build Project Properties</label></link>.  This property dictates how many Eiffel classes the compiler should put into each incremental assembly module. Lower numbers reduce 
				compilation time for large systems, but increase start-up time; higher numbers decrease start-up time but increase compilation time.
			</tip>
		</paragraph>
		
		<anchor>building_projects</anchor>
		<heading>
			<size>2</size>
			<content>Build Projects</content>
		</heading>
		<paragraph>
			The process of building a project contained within a <link><url>url</url><label>*Solution</label></link> is governed by the <help_link>
				<keywords>vxconBuildConfigurations</keywords>
				<tab_index>0</tab_index>
				Build Configuration
			</help_link>. Although most builds will be performed using the <help_link>
				<keywords>vxconBuildConfigurations</keywords>
				<tab_index>0</tab_index>
				Build Configuration
			</help_link>, you may also selectively build a single project contained within the <help_link>
				<keywords>vxurfSolutionExplorerDialog</keywords>
				<tab_index>0</tab_index>
				Solution Explorer
			</help_link>. For more information, please refer to the <help_link>
				<keywords>vxtskPrepareandManageBuilds</keywords>
				<tab_index>0</tab_index>
				Preparing and Managing Builds
			</help_link> documentation.
		</paragraph>
		<paragraph>
			EiffelEnvision projects present three modes of building a project:
			<list ordered="false">
				<item>Build</item>
				<item>Rebuild</item>
				<item>Clean</item>
			</list>
		</paragraph>
		<paragraph>	
			<bold>Build</bold>
			<line_break/>
			In this build mode, EiffelEnvision project(s) will be built as fast as possible, taking into consideration the changes to the project and its configuration. If EiffelEnvision does not detect any 
			changes to the project, the main compilation will be skipped. EiffelEnvision may also deem it necessary to perform a Rebuild instead of a Build to ensure the changes to the project or its configuration 
			are reflected. Those <link><url>url</url><label>*Project Properties</label></link> that will trigger a Rebuild when changed are marked as such in the <link><url>url</url><label>*Project Property</label></link> 
			descriptions.
			
			<note>
				<bold>Note</bold>: Projects whose <link><url>url</url><label>*Output Type</label></link> property is set to <bold>Precompiled</bold> or <bold>Precompiled with Root</bold> will perform a Rebuild instead of 
				Build. This is the nature of precompiled libraries. EiffelEnvision is smart enough to know not to build any precompiled projects contained within a solution unless they absolutely require a build.
			</note>
		</paragraph>
		<paragraph>	
			<bold>Rebuild</bold>
			<line_break/>
			This build mode will force a fresh compilation. All attained and generated incremental compilation information will be discarded and project(s) will be built as if for the first time.
		</paragraph>
		<paragraph>	
			<bold>Clean</bold>
			<line_break/>
			Clean building works in contrast to Build and Rebuild in that is does not generate, but cleans. This build mode removes any incremental compilation information for the project(s) selected, and removes all compiled 
			assemblies and other binaries generated as a result of one or more builds.
		</paragraph>
		
		<anchor>starting_a_build</anchor>
		<heading>
			<size>2</size>
			<content>Starting a Build</content>
		</heading>
		<paragraph>
			Building one or more projects in the same session may be done using either the project's context menu options or through using the <bold>Build</bold> main menu. Instructions for building a single project or an entire 
			solution may be found in the <help_link>
				<keywords>vxtskPrepareandManageBuilds</keywords>
				<tab_index>0</tab_index>
				Preparing and Managing Builds
			</help_link> documentation.
		</paragraph>
		<paragraph>
			Alternatively, you may <help_link>
				<keywords>vxlrfBuild</keywords>
				<tab_index>0</tab_index>
				Build
			</help_link>, <help_link>
				<keywords>vxlrfRebuildS</keywords>
				<tab_index>0</tab_index>
				Rebuild
			</help_link>, or <help_link>
				<keywords>vxlrfClean</keywords>
				<tab_index>0</tab_index>
				Clean
			</help_link> projects and solutions from the command-line using <italic>devenv</italic> and its <help_link>
				<keywords>vxgrfCommandLineSwitche</keywords>
				<tab_index>0</tab_index>
				Command Line Switches
			</help_link>
		</paragraph>
		 
		<anchor>also_see</anchor>
		<heading>
			<size>2</size>
			<content>Related Sections</content>
		</heading>
		<seealso>
			<bold>See Also:</bold>
			<line_break/>
			<link><url>index.xml</url><label>Compiling EiffelEnvision Projects</label></link>
			<line_break/>
			<link><url>unmanaged_code.xml</url><label>Compiling Unmanaged Code</label></link>
			<line_break/>
			<link><url>errors.xml</url><label>Compilation Errors</label></link>
			<line_break/>
			<help_link>
				<keywords>vxconBuildConfigurations</keywords>
				<tab_index>0</tab_index>
				Build Configurations
			</help_link>
		</seealso>
	</paragraph>
</document>
