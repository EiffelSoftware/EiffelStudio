indexing


	Product: EiffelStore
	Database: Matisse

class MATISSE_APPL

inherit

	GENERAL_APPL

	HANDLE_USE_MAT

	DB_CONSTANT

	MATISSE_CONST
		export {NONE} all;	
			{ANY} version_access, opened_transaction, no_selected_database, selected_database
		end

creation

	login

feature -- Initialization

	login (host_name, database_name: STRING; arg_priority,arg_wait: INTEGER) is
		-- Login to database server under `host_name' with `database_name'.
		require
			arguments_exist: host_name /= Void and database_name /= Void
			arguments_not_empty: not ( host_name.empty or database_name.empty)
		do
			if session_login = Void then
				!! session_login
			end --if
			session_login.set (host_name, database_name)
			set_priority(arg_priority)
			set_wait(arg_wait)
			handle_mat.set_previous_mode(NO_MODE)
			handle_mat.set_names(host_name,database_name)
		ensure
			session_login_not_void: session_login /= Void
		end -- login

	set_wait(sec : INTEGER) is
			-- Set wait Time
		require
			sec_positive_or_null : sec >= 0
		do
			handle_mat.set_wait(sec)
			-- Use MtSetWait
		end -- set_wait

	set_priority(one_priority:INTEGER) is
			-- Set priority of transactions
		require
			one_priority_positive_or_null : one_priority >= 0
		do
			handle_mat.set_priority(one_priority)
		end -- set_priority

	set_mode(mode : INTEGER;argument : ANY) is
			-- Set current working mode in Matisse
		require 
			mode_is_correct : mode=VERSION_ACCESS or mode=OPENED_TRANSACTION or mode=NO_SELECTED_DATABASE or mode=SELECTED_DATABASE
		local
			stime : STRING
		do
			if mode=VERSION_ACCESS then
				stime?=argument
				handle_mat.set_version(Clone(stime))
			elseif mode=OPENED_TRANSACTION   then
				
			elseif mode=NO_SELECTED_DATABASE then
				
			elseif mode=SELECTED_DATABASE	then
				
			end
			if handle_mat.previous_mode /= NO_MODE then handle_mat.set_previous_mode(mode) end
			handle_mat.set_mode(mode)
		end -- set_mode

feature -- Status Report

	wait_time : INTEGER is
			-- Wait Time in Matisse
		do
			Result := handle_mat.wait_time
		end  -- wait_time

feature -- Status setting

	set_version(version_value : STRING) is
		-- Set current version string
		require
			version_value_not_void : version_value /= Void
		do
			handle_mat.set_version(version_value)
		end -- set_version

	set_base is
		-- Initialize or re-activate Matisse database server
		-- after a handle change.
		require
			is_logged_to_base: is_logged_to_base
		do
			-- Prepare link to Matisse implementation
			if session_database = Void then
				!! session_database
			end -- if
			handle.set_database (session_database)
			if session_status = Void then
				!! session_status.make
			end -- if
			handle.set_status (session_status)
			if session_execution_type = Void then
				!! session_execution_type.make
			end -- if
			handle.set_execution_type (session_execution_type)
			handle_mat.set_login (session_login)
		ensure
			handle.database = session_database
			handle.process = session_process
			handle.status = session_status
			handle.execution_type = session_execution_type
			handle_mat.login = session_login
		end -- set_base

feature -- Status report

	is_logged_to_base: BOOLEAN is
		-- Is current handle logged to Matisse server?
		do
			Result := session_login /= Void
		ensure
			Result = (session_login /= Void)
		end -- is_logged_to_base

	print_error_message is
		-- Output error message generated by Matisse Server
		do
			io.putstring(handle.status.error_message)
		end  -- print_error_message

feature {NONE} -- Implementation

	session_database: MATISSE -- Link to specific implementation services

	session_login: LOGIN_MATISSE -- Keep track of login information

end -- class MATISSE_APPL

--|----------------------------------------------------------------
--| EiffelStore: library of reusable components for ISE Eiffel.
--| Copyright (C) 1986-1998 Interactive Software Engineering Inc.
--| All rights reserved. Duplication and distribution prohibited.
--| May be used only with ISE Eiffel, under terms of user license. 
--| Contact ISE for any other use.
--|
--| Interactive Software Engineering Inc.
--| ISE Building, 2nd floor
--| 270 Storke Road, Goleta, CA 93117 USA
--| Telephone 805-685-1006, Fax 805-685-6869
--| Electronic mail <info@eiffel.com>
--| Customer support e-mail <support@eiffel.com>
--| For latest info see award-winning pages: http://www.eiffel.com
--|----------------------------------------------------------------

