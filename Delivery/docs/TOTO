README.TXT
==========

RELEASE NOTES for version 4.1:

- Ace file option to enable multithreading:
  	multithreaded (all | yes | no);
			-- all and yes have the same meaning; default is no.

- Fixed the `hide_implementation' bug: Even if you said `no',
  `hide_implementation' was set to `yes'.

- New environment variable set by the installation procedure:
  COMPILER, denoting the C compiler. Current possible values are msc
  (Microsoft) and bcc (Borland).

- The `PLATFORM' environment variable is automatically set to `windows'
  (for both(  Windows 95 and Windows NT).

- CURRENT USERS: note the change with previous conventions, which used
  different PLATFORM values for each compiler (w32msc and w32bcc).
  The new convention simplifies management and saves space on disk.

- New console: this is now a standard DOS console (with more flexibility
  on NT than on 95).

- The compiler now only generates C-ANSI code.

- You can now use several external editors concurrently. Note, however,
  that external editors will only work for classes whose clusters are
  specified with absolute path names in the Ace file.

- In Workbench mode, the current directory is now the one where the
  workbench program is (for consistency with Unix versions).

- Scrolling bug fixed: when you move the arrow keys past the window
  borders, the text will now scroll automatically.

- Important precompilation note: a precompiled library must be compiled
  in the same mode, multithreaded or not, as the system using it. The
  precompiled libraries currently available for downloading are compiled
  for non-multithreaded, so if you want to use precompiled libraries
  with a multithreaded system you will have to precompile them yourself.


ISE Eiffel 4.2 is a major new release which incorporates
many new features and improvements to existing mechanisms.
Highlights:

- EiffelCom library for use of Eiffel with COM, OLE.

- Eiffel2Java library: call Java applets and other
  Java facilities from Eiffel.

- EiffelThreads library: full-fledged implementation
  of multithreading (Windows, Posix/Linux, Solaris,
  VxWorks), with an extensive set of threads
  capabilities and close connection with the
  garbage collection mechanism (one GC per
  thread, enabling independent execution).

- Full implementation of the Precursor construct
  as described in "Object-Oriented Software Construction",
  2nd edition (and, we know, awaited impatiently
  by many users).

- Considerably faster compilation.

- Graphical profiler, for detailed analysis of running
  times.

- A greatly improved EiffelCase analysis and design
  workbench. This is the only tool we know that truly
  fulfils the promise of seamless development offered
  by object technology: going back and forth between
  high-level graphical views of systems, and their
  actual source text. EiffelCase in particular has
  a great reverse engineering facility, which produces
  clear graphical views of systems, which can then be
  modified to re-generate code. A "Merging Tool" enables
  users to reconcile, feature by feature, the changes
  they may have made separately to the textual view
  (Eiffel text) and to the graphical view (EiffelCase
  diagrams). As an example application, we now systematically
  use EiffelCase for our hands-on object technology
  classes, as well for our analysis/design/implementation
  consulting, and have found it to be attractive to both
  beginners and seasoned software engineers, as well
  as to managers who need to see global schemata of
  system architecture, system dictionaries/glossaries
  etc.

- Numerous improvements, both functional and of speed,
  to the EiffelBench graphical development environment.
  The interface has also been enriched with new, intuitive
  user interaction mechanisms. "Clickable" elements are
  underlined, HTML-browser style, for even more intuitive
  browsing. Searching is faster as well as drag-and-drop
  and other operations.

- New, improved version of the Legacy++ tool for wrapping
  C++ classes into Eiffel classes (now handles many subtle
  facilities of Visual C++). Helps move away from C++
  without losing one's investment.

- More information in generated C code, enabling the
  use of a C debugger. (Although most Eiffel users will never
  need to see the generated C, even less debug it -- there
  is a powerful Eiffel debugger in EiffelBench to avoid that --,
  this facility is of great interest to some projects, in
  particular to users of Embedded Eiffel who may need to
  perform debugging on a target platform that only has
  C tools.)

- Many improvements to other tools and libraries, such as
  EiffelNet (client-server object management system),
  EiffelBase (the fundamental library of data structures
  and algorithms), EiffelVision (portable graphics),
  WEL (the Windows Eiffel Library -- for programming
  graphical applications under Windows).

- Eiffel generator for Cayenne's Object Team analysis
  tool, supporting UML and OMT.

New functionalities:
--------------------

- Run-time in DLL: a new option has been added to the ace file:
	dynamic_runtime (yes | no);

	It will link your program with a ".DLL" version of the run-time on windows
	(and a ".so" version on UNIX). It will make the code of the executable smaller.

	To make it works copy all the "*.dll" files in $EIFFEL4\bench\spec\windows\lib\msc
	into the Windows directory so that the operating system will find them at execution
	time.

- New Console: a new option has been added to the ace file:
	console_application (yes | no);

	This option does not have any effects on UNIX systems. On Windows, this enable the
	user to create a real CONSOLE application and redirect the output or the input.

	On remaining problems: the program will ask you to press enter to finish the execution
	of the program, it will be fixed for the next release.

- New project management: 
	First, when you launch the new Ebench an empty project tool. In the file menu, you
	have either the choice to create a new project or to open one. The processus to create
	a project is the same as before. However, to open an eiffel project you need a
	".epr" file. This file is automatically generated at the end of each successful
	compilation at the same location as the EIFGEN directory.

	In the file menu, you have also a new entry which memorizes all the latest
	project that you used (the history is limited to 10 entries).

	One major improvements in project retrieving is the speed-up that you will notice.

- New graphic interface:
	The design of some tools has changed a little bit.
	The project tool has been split in three windows:
		- the project window
		- the feature window
		- the object browser window

- New case generation:
	A first implementation of a new kind of reverse engineering has been implemented,
	however you can take benefit of it since there is no available version of EiffelCase
	which supports it yet.

	Briefly, EiffelBench can now do a reverse engineering on some specific clusters
	and not on all the system as it was before.

- New Eiffel semantics:
	Now, in your Eiffel code, you can have some class declaration like:
		class A [H -> INTEGER, G -> ARRAY [H}]

­ Creation of generic parameters.

- Generic conformance.
ISE EiffelBench 4.4
===================

New functionalities:
--------------------

- Implementation of `default_create'.

- Updated EiffelStore and EiffelTime library.

- Run-time in DLL: they now work for all kind of configurations, ie:
	single_threaded in DLL
	multithreaded in DLL

- New Console: it won't ask you to press enter to finish the execution if you started
    your program from a DOS console, it will ask you only if you did not launch if from
	a DOS console.

­ Creation of generic parameters: it has been improved to follow completely the semantic.


Bug fixes from 4.3:
-------------------

- Loosing precision when using `independent_store' to store DOUBLEs.

- Fixed some problems related to the C code generation when using an external C
  routine in DLL.

