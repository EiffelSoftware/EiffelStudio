-- Eiffel class generated by the 2.3 to 3 translator.

--|---------------------------------------------------------------
--|   Copyright (C) Interactive Software Engineering, Inc.      --
--|    270 Storke Road, Suite 7 Goleta, California 93117        --
--|                   (805) 685-1006                            --
--| All rights reserved. Duplication or distribution prohibited --
--|---------------------------------------------------------------

-- General button implementation.

indexing

	date: "$Date$";
	revision: "$Revision$"

deferred class BUTTON_I 

inherit

	PRIMITIVE_I;

	FONTABLE_I



	
feature 

	allow_recompute_size is
			-- Allow current button to recompute its  size according to
			-- some changes on its text.
		deferred
		end;

	forbid_recompute_size is
			-- Forbid current button to recompute its size according to
			-- some changes on its text.
		deferred
		end; -- forbid_recompute_size

	set_center_alignment is
            -- Set text alignment of current label to center
        deferred
        end; -- set_center_alignment
 
    set_left_alignment is
            -- Set text alignment of current label to left.
        deferred
        end; -- set_left_alignment

	text: STRING is
			-- Text of current button
		deferred
		end; -- text

	set_text (a_text: STRING) is
			-- Set current button text to `a_text'.
		require
			not_text_void: not (a_text = Void)
		deferred
		ensure
			text.is_equal (a_text)
		end;

	add_activate_action (a_command: COMMAND; argument: ANY) is
			-- Add `a_command' to the list of action to execute when current
			-- push button is activated.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end; -- add_activate_action

	add_arm_action (a_command: COMMAND; argument: ANY) is
			-- Add `a_command' to the list of action to execute when current
			-- push button is armed.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end; -- add_arm_action

	add_release_action (a_command: COMMAND; argument: ANY) is
			-- Add `a_command' to the list of action to execute when current
			-- push button is released.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end; -- add_release_action

	remove_activate_action (a_command: COMMAND; argument: ANY) is
			-- Remove `a_command' from the list of action to execute when
			-- current push button is activated.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end; -- remove_activate_action

	remove_arm_action (a_command: COMMAND; argument: ANY) is
			-- Remove `a_command' from the list of action to execute when
			-- current push button is armed.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end; -- remove_arm_action

	remove_release_action (a_command: COMMAND; argument: ANY) is
			-- Remove `a_command' from the list of action to execute when
			-- current push button is released.
		require
			not_a_command_void: not (a_command = Void)
		deferred
		end -- remove_release_action

end -- class BUTTON_I
