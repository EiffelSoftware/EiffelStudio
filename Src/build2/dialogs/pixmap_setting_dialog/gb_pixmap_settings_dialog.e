indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	GB_PIXMAP_SETTINGS_DIALOG

inherit
	GB_PIXMAP_SETTINGS_DIALOG_IMP
	
	GB_EV_PIXMAP_HANDLER
		export
			{NONE} all
		undefine
			default_create, is_equal, copy
		end
		
	GB_CONSTANTS
		export
			{NONE} all
		undefine
			default_create, is_equal, copy
		end
		
	GB_SHARED_CONSTANTS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	GB_NAMING_UTILITIES
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	GB_SHARED_SYSTEM_STATUS
		export
			{NONE} all
		undefine
			default_create, copy
		end
		
	GB_SHARED_COMMAND_HANDLER
		export
			{NONE} all
		end
		
	EIFFEL_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
	
	BUILD_RESERVED_WORDS
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	GB_SHARED_OBJECT_HANDLER
		export
			{NONE} all
		undefine
			default_create, copy, is_equal
		end
		
	EV_STOCK_COLORS
		rename
			implementation as stock_colors_implementation
		export
			{NONE} all
		undefine
			copy, is_equal, default_create
		end

feature {NONE} -- Initialization

	user_initialization is
			-- called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		local
			obejct_and_event_names: ARRAYED_LIST [STRING]
		do
			set_default_cancel_button (cancel_button)
			absolute_constant_radio_button.enable_select
			pixmap_list.set_pixmaps_size (32, 32)
			
			all_object_and_event_names := object_handler.all_object_and_event_names
--				-- Create a hash table of all names in system.
--			object_and_event_names := object_handler.all_object_and_event_names
--			from
--				object_and_event_names.start
--			until
--				
--			loop
--				
--			end
		end

feature {NONE} -- Implementation

	all_object_and_event_names: ARRAYED_LIST [STRING]
	

--	all_names: HASH_TABLE [STRING, STRING]
--		-- All names in system, including reserved words.

	
	select_pixmap_pressed is
			-- Called by `select_actions' of `select_pixmap_button'.
		do
			modify_pixmap
		end
		
	select_directory_pressed is
			-- Called by `select_actions' of `select_directory_button'.
		do
			modify_directory
		end

	absolute_radio_button_selected is
			--
		do
			relative_constant_box.disable_sensitive
			absolute_constant_box1.enable_sensitive
		end
		
	relative_radio_button_selected is
			--
		do
			relative_constant_box.enable_sensitive
			absolute_constant_box1.disable_sensitive
		end
		

	absolute_new_button_pressed is
			-- Called by `select_actions' of `absolute_new_button'.
		do
			
		end


	relative_directory_new_button_selected is
			-- Called by `select_actions' of `relative_directory_new_button'.
		do
		end


	relative_file_name_button_pressed is
			-- Called by `select_actions' of `relative_file_name_button'.
		do
		end
		
	ok_button_pressed is
			-- Called by `select_actions' of `ok_button'.
		local
			confirmation_dialog: STANDARD_DISCARDABLE_CONFIRMATION_DIALOG
			constant_matching_absolute: STRING
			pixmap_constant: GB_PIXMAP_CONSTANT
			warning_dialog: NO_DIRECTORY_SPECIFIED_WARNING_DIALOG
			cancelled: BOOLEAN
			added_directory_name: STRING
		do
			check
				item_selected_in_list: pixmap_list.selected_item /= Void
			end
			from
				pixmap_list.start
			until
				pixmap_list.off or cancelled
			loop
				pixmap_constant ?= pixmap_list.item.data
				check
					data_was_pixmap_constant: pixmap_constant /= Void
				end
				if pixmap_list.item.is_selected then
						-- We must update the information regarding the selected
						-- item, as it will not be up to date.
					if relative_constant_radio_button.is_selected then
						if relative_directory_combo.text.is_empty then
							pixmap_constant.set_attributes (relative_text.text, pixmap_constant.value, file_path, pixmap_constant.filename, pixmap_constant.is_absolute)
						else
							pixmap_constant.set_attributes (relative_text.text, pixmap_constant.value, relative_directory_combo.text, pixmap_constant.filename, pixmap_constant.is_absolute)
						end
					else
						pixmap_constant.set_attributes (absolute_text.text, pixmap_constant.value, pixmap_constant.directory, pixmap_constant.filename, pixmap_constant.is_absolute)						
					end
				end
				if pixmap_list.is_item_checked (pixmap_list.item) then
					if pixmap_constant.is_absolute then
							constant_matching_absolute := constants.matching_absolute_pixmap_constant (pixmap_constant.value)
							if constant_matching_absolute /= Void then
								create confirmation_dialog.make_initialized (2, show_repeated_absolute_constant_warning, "An absolute pixmap constant named %"" +
									constant_matching_absolute + "%" already references this image file.%NAre you sure you wish to add another?", "Do not show this dialog again, and always add.")
								confirmation_dialog.set_ok_action (agent add_absolute_constant)
								confirmation_dialog.show_modal_to_window (Current)
							else
								add_absolute_constant (pixmap_constant)
							end
					else
						if not pixmap_constant.is_absolute and pixmap_constant.directory.is_equal (file_path) and added_directory_name = Void and--then (Constants.matching_directory_constant_name (pixmap_constant.directory.as_lower) = Void) then
							Constants.matching_directory_constant_name (file_path) = Void then
							create warning_dialog
							warning_dialog.show_modal_to_window (Current)
							if not warning_dialog.cancelled then
								added_directory_name := warning_dialog.directory_name
								add_relative_directory_and_constant (pixmap_constant, added_directory_name)
							else
								cancelled := True
							end
						elseif not pixmap_constant.is_absolute and pixmap_constant.directory.is_equal (file_path) and added_directory_name /= Void then
							pixmap_constant.set_attributes (pixmap_constant.name, pixmap_constant.value, added_directory_name, pixmap_constant.filename, pixmap_constant.is_absolute)
							add_relative_constant (pixmap_constant)
						elseif (Constants.matching_directory_constant_name (pixmap_constant.directory.as_lower) = Void) and
							(Constants.directory_constant_by_name (pixmap_constant.directory.as_lower) = Void) then
							add_relative_directory_and_constant (pixmap_constant, pixmap_constant.directory)
						else
							if constants.matching_directory_constant_name (pixmap_constant.directory) /= Void then
								pixmap_constant.set_attributes (pixmap_constant.name, pixmap_constant.value, constants.matching_directory_constant_name (pixmap_constant.directory), pixmap_constant.filename, pixmap_constant.is_absolute)
							else
								check
									directory_is_constant: constants.directory_constant_by_name (pixmap_constant.directory) /= Void
								end
							end
							add_relative_constant (pixmap_constant)
						end
					end
					pixmap_list.forth
		--				if absolute_constant_radio_button.is_selected then
		--					constant_matching_absolute := constants.matching_absolute_pixmap_constant (last_pixmap_name.as_lower)
		--					if constant_matching_absolute /= Void then
		--						create confirmation_dialog.make_initialized (2, show_repeated_absolute_constant_warning, "An absolute pixmap constant named %"" +
		--							constant_matching_absolute + "%" already references this image file.%NAre you sure you wish to add another?", "Do not show this dialog again, and always add.")
		--						confirmation_dialog.set_ok_action (agent add_absolute_constant)
		--						confirmation_dialog.show_modal_to_window (Current)
		--					else
		--						add_absolute_constant
		--					end
		--				elseif relative_constant_radio_button.is_selected then
		--					if constants.directory_constant_by_name (relative_directory_combo.text) = Void then -- Add check here
		--					create confirmation_dialog.make_initialized (2, show_create_new_directory_constant_warning,
		--						"You have entered a directory constant that does not exist.%NWould you like to create both the PIXMAP constant%Nand DIRECTORY constant %"" + relative_directory_combo.text.as_lower + "%" on which it relies?",
		--						"Do not show this dialog again, and always create new directory constants.")	
		--						confirmation_dialog.set_ok_action (agent add_relative_directory_and_constant)
		--						confirmation_dialog.show_modal_to_window (Current)
		--					else
		--						add_relative_constant
		--					end
		--				end
				end
			end
		end
		
		add_absolute_constant (pixmap_constant: GB_PIXMAP_CONSTANT) is
			--
			local
				add_constant_command: GB_COMMAND_ADD_CONSTANT
			do
				--create pixmap_constant.make_with_name_and_value (absolute_text.text, last_pixmap_name, "", "", True)
				pixmap_constant.convert_to_full
				create add_constant_command.make (pixmap_constant)
				add_constant_command.execute	
					-- Update project to reflect change.
				system_status.enable_project_modified
				command_handler.update
			
					-- Now hide `Current'.
				hide
			end
			
		add_relative_directory_and_constant (pixmap_constant: GB_PIXMAP_CONSTANT; directory_name: STRING) is
				--
			require
				pixmap_constant_not_void: pixmap_constant /= Void
				directory_name_not_void: directory_name  /= void
				directory_name_not_exists: Constants.directory_constant_by_name (directory_name) = Void
			local
				directory_constant: GB_DIRECTORY_CONSTANT
				add_constant_command: GB_COMMAND_ADD_CONSTANT
			do
				create directory_constant.make_with_name_and_value (directory_name, file_path)
				create add_constant_command.make (directory_constant)
				add_constant_command.execute
			--	check
			--		pixmap_constant.directory.is_equal (directory_constant.value)
			--	end
				pixmap_constant.set_attributes (pixmap_constant.name, pixmap_constant.value, directory_name, pixmap_constant.filename, pixmap_constant.is_absolute)
				add_relative_constant (pixmap_constant)
			end
			
			
		add_relative_constant (pixmap_constant: GB_PIXMAP_CONSTANT) is
				--
			local
			--	pixmap_constant: GB_PIXMAP_CONSTANT
				add_constant_command: GB_COMMAND_ADD_CONSTANT
			do
			--	create pixmap_constant.make_with_name_and_value (relative_text.text, last_pixmap_name, relative_directory_combo.text, file_title, False)
				pixmap_constant.convert_to_full
				create add_constant_command.make (pixmap_constant)
				add_constant_command.execute	
					-- Update project to reflect change.
				system_status.enable_project_modified
				command_handler.update
			
					-- Now hide `Current'.
				hide
			end
			
	check_all_button_selected is
			-- Called by `select_actions' of `check_all_button'.
		do
			pixmap_list.check_actions.block
			pixmap_list.do_all (agent pixmap_list.check_item (?))
			pixmap_list.check_actions.resume
			update_ok_button
		end
	
	uncheck_all_button_selected is
			-- Called by `select_actions' of `uncheck_all_button'.
		do
			pixmap_list.uncheck_actions.block
			pixmap_list.do_all (agent pixmap_list.uncheck_item (?))
			pixmap_list.uncheck_actions.resume
			update_ok_button
		end
		
	item_checked (a_list_item: EV_LIST_ITEM) is
			-- Called by `check_actions' of `pixmap_list'.
		do
			update_ok_button
		end
	
	item_unchecked (a_list_item: EV_LIST_ITEM) is
			-- Called by `uncheck_actions' of `pixmap_list'.
		do
			update_ok_button
		end
	
	update_ok_button is
			--
		do
			io.putstring ("Update ok")
			if not pixmap_list.checked_items.is_empty then
				ok_button.enable_sensitive
			else
				ok_button.disable_sensitive
			end
		end
		

	cancel_button_pressed is
			-- Called by `select_actions' of `cancel_button'.
		do
			hide
		end
		
	basic_valid_name (a_name:STRING): BOOLEAN is
			--
		do
			Result :=  valid_class_name (a_name) and not Reserved_words.has (a_name) and
			not object_handler.string_used_globally_as_object_or_feature_name (a_name)
		end
		
		
	absolute_text_changed is
			-- Called by `change_actions' of `absolute_text'.
		local
			text: STRING
		do
			text := absolute_text.text.as_lower
			if basic_valid_name (text) then
				
				--| FIXME check current names also.
				absolute_text.set_foreground_color (black)
				ok_button.enable_sensitive
			else
				absolute_text.set_foreground_color (red)
				ok_button.disable_sensitive
			end
		end
		
	relative_text_changed is
			-- Called by `change_actions' of `relative_text'.
		local
			text: STRING	
		do
			text := relative_text.text.as_lower
			if basic_valid_name (text) then	
				--| FIXME check current names also.
				relative_text.set_foreground_color (black)
				ok_button.enable_sensitive
			else
				relative_text.set_foreground_color (red)
				ok_button.disable_sensitive
			end
		end
	
	relative_directory_text_changed is
			-- Called by `select_actions' of `relative_directory_combo'.
		local
			text: STRING
		do
			text := relative_directory_combo.text.as_lower
			if basic_valid_name (text) then	
				--| FIXME check current names also.
				relative_directory_combo.set_foreground_color (black)
				ok_button.enable_sensitive
			elseif not relative_directory_combo.text.is_empty then
					-- Do not disable the "Ok" button when text is empty,
					-- as Build can add a directory constant automatically
					-- for any pixmaps for which it is not set.
				relative_directory_combo.set_foreground_color (red)
				ok_button.disable_sensitive
			end
		end
		
	modify_pixmap is
			-- Display a dialog allowing user input for
			-- selected pixmap.
		local
			dialog: EV_FILE_OPEN_DIALOG
			shown_once, opened_file: BOOLEAN
			error_dialog: EV_WARNING_DIALOG
			list_item: EV_LIST_ITEM
			directory_constant: GB_DIRECTORY_CONSTANT
			pixmap_constant: GB_PIXMAP_CONSTANT
		do
			from
				create dialog
			until
				(dialog.file_name.is_empty and shown_once) or opened_file
			loop
				shown_once := True
				dialog.show_modal_to_window (Current)
				if not dialog.file_name.is_empty and then valid_file_extension (dialog.file_name.substring (dialog.file_name.count -2, dialog.file_name.count)) then
					create new_pixmap
					new_pixmap.set_with_named_file (dialog.file_name)
					last_pixmap_name := dialog.file_name
					file_title := dialog.file_title
					file_path := dialog.file_path
					pixmap_path_label.set_text (last_pixmap_name)
					pixmap_path_label.set_tooltip (last_pixmap_name)
						-- Must set the pixmap before the stretch takes place.
					create list_item.make_with_text (file_title)
					list_item.set_pixmap (new_pixmap)
					pixmap_list.extend (list_item)
					pixmap_list.check_item (list_item)
					create pixmap_constant.set_attributes (pixmap_file_title_to_constant_name (file_title), "", file_path, file_title, False)
					list_item.set_data (pixmap_constant)
					display_pixmap_info (list_item)
					list_item.select_actions.extend (agent display_pixmap_info (list_item))
					list_item.deselect_actions.extend (agent item_unselected (list_item))
					built_from_frame.enable_sensitive
					ok_button.enable_sensitive
					opened_file := True
					check_buttons_box.enable_sensitive
					pixmap_list.i_th (1).enable_select
				elseif not dialog.file_name.is_empty then
					create error_dialog
					error_dialog.set_text (invalid_type_warning)
					error_dialog.show_modal_to_window (Current)
				end
			end
			if not dialog.selected_button.is_equal ((create {EV_DIALOG_CONSTANTS}).ev_cancel) then
				absolute_text.set_text (pixmap_file_title_to_constant_name (file_title))
				relative_text.set_text (pixmap_file_title_to_constant_name (file_title))
				if Constants.matching_directory_constant_name (file_path) /= Void then
					directory_constant ?= constants.all_constants.item (Constants.matching_directory_constant_name (file_path))
					check
						directory_constant_exists: directory_constant /= Void
					end
					create list_item.make_with_text (directory_constant.name)
					list_item.set_data (directory_constant.name)
					relative_directory_combo.extend (list_item)
				end
			end
		end
		
	modify_directory is
			-- Display a dialog prompting for searching in a paticular directory.
		local
			dialog: EV_DIRECTORY_DIALOG
			directory: DIRECTORY
			supported_types: LINEAR [STRING]
			files: ARRAYED_LIST [STRING]
			current_filename: STRING
			filename_ext: STRING
			scrollable_area: EV_SCROLLABLE_AREA
			pixmap: EV_PIXMAP
			filename: FILE_NAME
			list_item: EV_LIST_ITEM
			pixmap_constant: GB_PIXMAP_CONSTANT
			directory_value: STRING
		do
			create dialog
			dialog.show_modal_to_window (Current)
			if not dialog.directory.is_empty or not dialog.selected_button.is_equal ((create {EV_DIALOG_CONSTANTS}).ev_cancel) then
				pixmap_list.check_actions.block
				file_path := dialog.directory
				create directory.make (dialog.directory)
				supported_types := (create {EV_ENVIRONMENT}).supported_image_formats
				files := directory.linear_representation
				from
					files.start
				until
					files.off
				loop
					current_filename := files.item
					filename_ext := current_filename.substring (current_filename.substring_index (".", 1) + 1, current_filename.count)
					if supported_types.has (filename_ext.as_upper) then
						create pixmap
							-- Now must prune last directory separator if we are a drive.
						directory_value := directory.name
						if directory_value.item (directory_value.count).is_equal (Directory_seperator) then
							directory_value := directory_value.substring (1, directory_value.count - 1)
						end
						create filename.make_from_string (directory_value)
						filename.extend (current_filename)
						pixmap.set_with_named_file (filename)
						pixmap.set_minimum_size (pixmap.width, pixmap.height)
						create list_item.make_with_text (current_filename)
						list_item.set_pixmap (pixmap)
						pixmap_list.extend (list_item)
						pixmap_list.check_item (list_item)
						create pixmap_constant.set_attributes (get_unique_pixmap_name (current_filename), filename, directory.name, current_filename, False)
						list_item.set_data (pixmap_constant)
						list_item.select_actions.extend (agent display_pixmap_info (list_item))
						list_item.deselect_actions.extend (agent item_unselected (list_item))
					end
					files.forth
				end
				if not pixmap_list.is_empty then
					check_buttons_box.enable_sensitive
					pixmap_list.check_actions.block
					pixmap_list.i_th (1).enable_select
				else
					-- Display warning that there are no files found?
				end
			end
			update_ok_button
		end
		
	display_pixmap_info (a_list_item: EV_LIST_ITEM) is
			-- Display information regarding `a_list_item' in `Current'.
		local
			pixmap_constant: GB_PIXMAP_CONSTANT
			directory_constant: GB_DIRECTORY_CONSTANT
			list_item: EV_LIST_ITEM
			matching_directory_names: ARRAYED_LIST [STRING]
		do
			built_from_frame.enable_sensitive
			ok_button.enable_sensitive
			pixmap_constant ?= a_list_item.data
			check
				data_was_pixmap_constant: pixmap_constant /= Void
			end
			if pixmap_constant.is_absolute then
				absolute_constant_radio_button.enable_select
			else
				relative_constant_radio_button.enable_select
			end
			absolute_text.set_text (pixmap_constant.name)
			relative_text.set_text (pixmap_constant.name)
			if pixmap_constant.directory.is_empty then
				relative_directory_combo.remove_text
			end
			if Constants.matching_directory_constant_name (file_path) /= Void then
				directory_constant ?= constants.all_constants.item (Constants.matching_directory_constant_name (file_path))
				check
					directory_constant_exists: directory_constant /= Void
				end
				relative_directory_combo.wipe_out
				matching_directory_names := constants.matching_directory_constant_names (file_path)
				from
					matching_directory_names.start
				until
					matching_directory_names.off
				loop
					create list_item.make_with_text (matching_directory_names.item)--directory_constant.name)
					list_item.set_data (directory_constant.name)
					relative_directory_combo.extend (list_item)
					matching_directory_names.forth
				end
				
			end
			if not pixmap_constant.directory.is_empty and not pixmap_constant.directory.is_equal (file_path) then
				relative_directory_combo.set_text (pixmap_constant.directory)
			end
				--As the selected item has changed, update the display in the naming fields.
			absolute_text_changed
			relative_text_changed
			relative_directory_text_changed
		end
		
	item_unselected (a_list_item: EV_LIST_ITEM) is
			-- `a_list_item' 
		local
			pixmap_constant: GB_PIXMAP_CONSTANT
		do
			pixmap_constant ?= a_list_item.data
			check
				data_was_pixmap_constant: pixmap_constant /= Void
			end
			if absolute_constant_radio_button.is_selected and not absolute_text.foreground_color.is_equal (red) then
				pixmap_constant.set_attributes (absolute_text.text.as_lower, pixmap_constant.value, pixmap_constant.directory, pixmap_constant.filename, True)	
			elseif not relative_text.foreground_color.is_equal (red) and not relative_directory_combo.foreground_color.is_equal (red) then
				pixmap_constant.set_attributes (relative_text.text.as_lower, pixmap_constant.value, relative_directory_combo.text, pixmap_constant.filename, False)	
			end
		end
		
	get_unique_pixmap_name (a_file_name: STRING): STRING is
			--
		do
			Result := pixmap_file_title_to_constant_name (a_file_name)
			Result := unique_name (Reserved_words, Result)
			Result := unique_name (Object_handler.all_object_and_event_names, Result)
			Result := unique_name (Constants.all_constant_names, Result)
		end
		
	--		Result :=  valid_class_name (a_name) and not Reserved_words.has (a_name) and
	--		not object_handler.string_used_globally_as_object_or_feature_name (a_name)
	--	end
	
	new_pixmap: EV_PIXMAP

	last_pixmap_name: STRING
	
	file_title: STRING
	
	file_path: STRING

end -- class GB_PIXMAP_SETTINGS_DIALOG

