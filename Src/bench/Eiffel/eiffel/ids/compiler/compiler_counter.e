deferred class COMPILER_COUNTER [G -> COMPILER_ID]

inherit

	HASH_TABLE [COMPILER_SUBCOUNTER [G], INTEGER]
		rename
			make as ht_make
		end;
	SHARED_WORKBENCH
		undefine
			is_equal, copy, consistent, setup
		end

feature -- Initialization

	make is
			-- Create a new counter.
		local
			compilation_id: INTEGER
		do
			ht_make (Initial_size);
			compilation_id := System.compilation_id;
			current_subcounter := new_subcounter (compilation_id);
			put (current_subcounter, compilation_id)
		end

	init_counter is
			-- Renumber ids already generated so far and continue
			-- generation from there.
		local
			nb, compilation_id: INTEGER
		do
			nb := current_subcounter.offset + current_subcounter.count
			compilation_id := System.compilation_id;
			current_subcounter := new_subcounter (compilation_id);
			current_subcounter.set_offset (nb);
			put (current_subcounter, compilation_id)
		end

	new_subcounter (compilation_id: INTEGER): COMPILER_SUBCOUNTER [G] is
			-- New subcounter associated with `compilation_id'
		deferred
		ensure
			new_subcounter_not_void: Result /= Void
		end

	append (other: like Current) is
			-- Append ids generated by `other' to `Current' and
			-- renumber the resulting set of ids.
		require
			other_not_void: other /= Void
		local
			counter: COMPILER_SUBCOUNTER [G];
			nb, compilation_id: INTEGER
		do
			nb := current_subcounter.offset;
			from other.start until other.after loop
				compilation_id := other.key_for_iteration;
				if not has (compilation_id) then
					counter := other.item_for_iteration;
					counter.set_offset (nb);
					nb := nb + counter.count;
					put (counter, compilation_id)
				end;
				other.forth
			end;
			current_subcounter.set_offset (nb);
		end

feature -- Access

	next_id: G is
			-- Next id
		do
			Result := current_subcounter.next_id
		ensure
			id_not_void: Result /= Void
		end

feature {NONE} -- Implementation

	current_subcounter: COMPILER_SUBCOUNTER [G];
			-- Current subcounter

	Initial_size: INTEGER is 5;
			-- Hash table initial size

invariant

	current_subcounter_not_void: current_subcounter /= Void

end -- class COMPILER_COUNTER
