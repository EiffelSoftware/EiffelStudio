<HTML>

<HEAD>
<META HTTP-EQUIV="Content-Language" CONTENT="en-us">
<META NAME="GENERATOR" CONTENT="Microsoft FrontPage 5.0">
<META NAME="ProgId" CONTENT="FrontPage.Editor.Document">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<LINK REL="StyleSheet" HREF="../../default.css">
<TITLE>How to use the Code DOM</TITLE>
</HEAD>

<BODY>

<H1>How to use the Code DOM?</H1>
<H2>Directly.</H2>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To use the Code DOM, you can create your Code DOM
tree, and give it to the Eiffel Code DOM to generate the Eiffel code associated.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; First of all, we will have to create a valid Code DOM
tree. Here is the code to create a valid code DOM in Eiffel.</P>
<PRE><SPAN CLASS="eFeature">create_code_dom_tree</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_COMPILE_UNIT</SPAN> <SPAN CLASS="eKeyword">is</SPAN>
			<SPAN CLASS="eComment">-- create codeDOM tree</SPAN>
	<SPAN CLASS="eKeyword">local</SPAN>
		<SPAN CLASS="eLocal">l_compile_unit</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_COMPILE_UNIT</SPAN>
		<SPAN CLASS="eLocal">l_namespace</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_NAMESPACE</SPAN>
		<SPAN CLASS="eLocal">l_class_1, l_class_2, l_class_3</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_TYPE_DECLARATION</SPAN>
		<SPAN CLASS="eLocal">l_parent_class</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_TYPE_REFERENCE</SPAN>
		<SPAN CLASS="eLocal">l_sys</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_NAMESPACE_IMPORT</SPAN>
		<SPAN CLASS="eLocal">added</SPAN>: <SPAN CLASS="eClass">INTEGER</SPAN>
		<SPAN CLASS="eLocal">l_attribute</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_MEMBER_FIELD</SPAN>
		<SPAN CLASS="eLocal">l_procedure</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_MEMBER_METHOD</SPAN>
		<SPAN CLASS="eLocal">l_type_return_function</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_TYPE_REFERENCE</SPAN>
		<SPAN CLASS="eLocal">l_parameter</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_PARAMETER_DECLARATION_EXPRESSION</SPAN>
		<SPAN CLASS="eLocal">l_comments</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_COMMENT_STATEMENT</SPAN>
		<SPAN CLASS="eLocal">l_variable</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_CODE_VARIABLE_DECLARATION_STATEMENT</SPAN>
	<SPAN CLASS="eKeyword">do</SPAN>
			<SPAN CLASS="eComment">-- defining compile unit</SPAN>
		<SPAN CLASS="eKeyword">create</SPAN>l_compile_unit.make
			<SPAN CLASS="eComment">-- adding referenced assemblies</SPAN>
		added := l_compile_unit.referenced_assemblies.add ((<SPAN CLASS="eString">&quot;C:\WINDOWS\Microsoft.NET\Framework\v1.0.3705\mscorlib.dll&quot;</SPAN>).to_cil)
		added := l_compile_unit.referenced_assemblies.add ((<SPAN CLASS="eString">&quot;C:\WINDOWS\Microsoft.NET\Framework\v1.0.3705\system.dll&quot;</SPAN>).to_cil)
		added := l_compile_unit.referenced_assemblies.add ((<SPAN CLASS="eString">&quot;C:\WINDOWS\Microsoft.NET\Framework\v1.0.3705\system.xml.dll&quot;</SPAN>).to_cil)
			<SPAN CLASS="eComment">-- defining namespace &quot;sample&quot;</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_namespace.make_from_name ((<SPAN CLASS="eString">&quot;sample&quot;</SPAN>).to_cil)
			<SPAN CLASS="eComment">-- importing namespace</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_sys.make_from_name_space ((<SPAN CLASS="eString">&quot;system&quot;</SPAN>).to_cil)
		l_namespace.imports.add (l_sys)
			<SPAN CLASS="eComment">-- adding `namespace' to `compile_unit'</SPAN>
		added := l_compile_unit.namespaces.add (l_namespace)

	--------------------------- CLASS_1 ---------------------------
			<SPAN CLASS="eComment">-- Defining class</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_class_1.make_from_name ((&quot;CLASS_1&quot;).to_cil)
			<SPAN CLASS="eComment">-- adding comments to 'CLASS_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_comments.make_from_text_and_doc_comment ((<SPAN CLASS="eString">&quot;Class with two attributes&quot;</SPAN>).to_cil, true)
		added := l_class_1.comments.add (l_comments)
			<SPAN CLASS="eComment">-- adding class to 'l_namespace'</SPAN>
		added := l_namespace.types.add (l_class_1)
			<SPAN CLASS="eComment">-- adding an attribute to 'l_class_1'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Int32&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_attribute&quot;</SPAN>).to_cil)
		added := l_class_1.members.add (l_attribute)
			<SPAN CLASS="eComment">-- adding an other attribute to 'l_class_1'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Double&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_2_attribute&quot;</SPAN>).to_cil)
		added := l_class_1.members.add (l_attribute)

	--------------------------- CLASS_2 ---------------------------
			<SPAN CLASS="eComment">-- Defining class CLASS_2</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_class_2.make_from_name ((<SPAN CLASS="eString">&quot;CLASS_2&quot;</SPAN>).to_cil)
			<SPAN CLASS="eComment">-- adding comments to 'CLASS_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_comments.make_from_text_and_doc_comment ((<SPAN CLASS="eString">&quot;This class inherit CLASS_1, and is client of CLASS_3&quot;</SPAN>).to_cil, true)
		added := l_class_2.comments.add (l_comments)
			<SPAN CLASS="eComment">-- adding 'class_2' to 'namespace'</SPAN>
		added := l_namespace.types.add (l_class_2)
			<SPAN CLASS="eComment">-- adding an attribute to 'l_class_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;CLASS_1&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_attribute_class_2&quot;</SPAN>).to_cil)
		added := l_class_2.members.add (l_attribute)
			<SPAN CLASS="eComment">-- adding comments to attribute</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_comments.make_from_text ((<SPAN CLASS="eString">&quot;This comment is from the DOM&quot;</SPAN>).to_cil)
		added := l_attribute.comments.add (l_comments)

			<SPAN CLASS="eComment">-- adding inheritance : 'l_class_1' is parent 'class_2'</SPAN>
		<SPAN CLASS="eKeyword">create</SPAN>l_parent_class.make_from_type_name (l_class_1.name)
			<SPAN CLASS="eComment">--parent_class.set_array_element_type (feature_clause)</SPAN>
		added := l_class_2.base_types.add_code_type_reference (l_parent_class)

			<SPAN CLASS="eComment">-- adding an other attribute to 'class_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;CLASS_3&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_2_attribute_class_2&quot;</SPAN>).to_cil)
		added := l_class_2.members.add (l_attribute)

			<SPAN CLASS="eComment">-- adding procedure my_procedure to `class_2'</SPAN>
		<SPAN CLASS="eKeyword">create</SPAN>l_procedure.make
		added := l_class_2.members.add (l_procedure)
			<SPAN CLASS="eComment">-- set `my_procedure'</SPAN>
		l_procedure.set_name ((<SPAN CLASS="eString">&quot;my_procedure&quot;</SPAN>).to_cil)
		<SPAN CLASS="eKeyword">create </SPAN>l_parameter.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Single&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;param_1&quot;</SPAN>).to_cil)
		added := l_procedure.parameters.add (l_parameter)
		<SPAN CLASS="eKeyword">create </SPAN>l_parameter.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Double&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;param_2&quot;</SPAN>).to_cil)
		added := l_procedure.parameters.add (l_parameter)
		<SPAN CLASS="eKeyword">create </SPAN>l_variable.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Int32&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_local_variable&quot;</SPAN>).to_cil)
		added := l_procedure.statements.add_code_statement (l_variable)
			<SPAN CLASS="eComment">-- adding comments to procedure</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_comments.make_from_text ((<SPAN CLASS="eString">&quot;This is a function comment&quot;</SPAN>).to_cil)
		added := l_procedure.comments.add (l_comments)

			<SPAN CLASS="eComment">-- adding function my_procedure to `class_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_procedure.make
		l_procedure.set_name ((<SPAN CLASS="eString">&quot;my_function&quot;</SPAN>).to_cil)
		<SPAN CLASS="eKeyword">create </SPAN>l_parameter.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Int32&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;param_1&quot;</SPAN>).to_cil)
		added := l_procedure.parameters.add (l_parameter)
		<SPAN CLASS="eKeyword">create </SPAN>l_parameter.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Double&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;param_2&quot;</SPAN>).to_cil)
		added := l_procedure.parameters.add (l_parameter)
		<SPAN CLASS="eKeyword">create </SPAN>l_type_return_function.make_from_type_name ((<SPAN CLASS="eString">&quot;System.Boolean&quot;</SPAN>).to_cil)
		l_procedure.set_return_type (l_type_return_function)
		added := l_class_2.members.add (l_procedure)

	--------------------------- CLASS_3 ---------------------------
			<SPAN CLASS="eComment">-- Defining class</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_class_3.make_from_name ((<SPAN CLASS="eString">&quot;CLASS_3&quot;</SPAN>).to_cil)
			<SPAN CLASS="eComment">-- adding comments to 'CLASS_2'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_comments.make_from_text_and_doc_comment ((<SPAN CLASS="eString">&quot;Class with two attributes&quot;</SPAN>).to_cil, true)
		added := l_class_3.comments.add (l_comments)
			<SPAN CLASS="eComment">-- adding class to 'l_namespace'</SPAN>
		added := l_namespace.types.add (l_class_3)
			<SPAN CLASS="eComment">-- adding an attribute to 'l_class_3'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.String&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_attribute&quot;</SPAN>).to_cil)
		added := l_class_3.members.add (l_attribute)
			<SPAN CLASS="eComment">-- adding an other attribute to 'l_class_3'</SPAN>
		<SPAN CLASS="eKeyword">create </SPAN>l_attribute.make_from_type_and_name_2 ((<SPAN CLASS="eString">&quot;System.Object&quot;</SPAN>).to_cil, (<SPAN CLASS="eString">&quot;my_2_attribute&quot;</SPAN>).to_cil)
		added := l_class_3.members.add (l_attribute)

		Result := l_compile_unit
	<SPAN CLASS="eKeyword">end</SPAN></PRE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then, we have to reference the Eiffel code DOM dll, in
the project. Use Project\Project settings, and select the .NET Assemblies tab. Click the Add button,
scroll down the list of GAC Assemblies and select ISE.CodedomProvider.ASP.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now, we simply have to create an instance of the
Eiffel_code_generator, and call the function `generate_code_from_compile_unit' with the above code
DOM tree.</P>
<PRE>	<SPAN CLASS="eKeyword">local</SPAN>
		<SPAN CLASS="eLocal">eiffel_code_generator</SPAN>: <SPAN CLASS="eClass">SYSTEM_DLL_ICODE_GENERATOR</SPAN>
	<SPAN CLASS="eKeyword">do</SPAN>
		<SPAN CLASS="eLocal">eiffel_code_generator </SPAN>:= (<SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">EIFFEL_CODE_DOM_PROVIDER</SPAN>}.default_create).create_generator
		<SPAN CLASS="eLocal">eiffel_code_generator</SPAN>.generate_code_from_compile_unit (create_code_dom_tree, <SPAN CLASS="eKeyword">Void</SPAN>, <SPAN CLASS="eKeyword">Void</SPAN>)
	<SPAN CLASS="eKeyword">end</SPAN></PRE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We will end up with three Eiffel files (class_1.e,
class_2.e, class_3.e) generated in the current directory.</P>
<P CLASS="warning"><B>Note</B>: When you call the Eiffel code DOM generator, the second argument
(STREAM) can be Void. This stream is normally used to put all the generated code. But, an Eiffel
system requires each class to be generated in separated files. Then, as a code DOM tree can contain
more than one class, the Eiffel code DOM will automatically generate the files it needs to generate
the code. These files are generated in the current directory.</P>
<P CLASS="warning"><B>Note 2</B>: The option parameter (third parameter) does not have any influence
on the code generation, because there is only one syntax style in Eiffel!</P>
<P CLASS="warning"><B>Note 3</B>: Make sure that the paths to the assemblies are correct.</P>
<P>&nbsp;</P>
<H2>With some tools (wsdl.exe and xsd.exe).</H2>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsdl.exe and xsd.exe are two tools given with the
Framework SDK. They uses the code DOM to generate code in a given language. So that, you can specify
the language you want the code to be generated in. The option to use is 'language' and you have to
specify the fully-qualified name for a class implementing System.CodeDom.Compiler.CodeDomProvider.
Here is the command line option to use the Eiffel Code DOM, and then generate Eiffel code:</P>
<PRE>/language:&quot;ISE.codedomprovider.EIFFEL_CODE_DOM_PROVIDER, ISE.CodeDomProvider.ASP, Version=5.2.0.0, Culture=neutral, PublicKeyToken=def26f296efef469&quot; </PRE>
<P>&nbsp;</P>
<H3>- WSDL.exe</H3>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wsdl generates the source code
associated to a given URL.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <I>examples</I>:</P>
<PRE>            wsdl /language:&quot;...&quot; http://www.capescience.com/webservices/airportweather/AirportWeather.wsdl
            wsdl /language:&quot;...&quot; http://www.nanonull.com/TimeService/TimeService.asmx?wsdl</PRE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Both examples will create two
&quot;.e&quot; files in the current directory.</P>
<P>&nbsp;</P>
<P CLASS="warning"><B>Note</B>: The out option is unavailable with the Eiffel Code DOM. In fact, in
the previous chapter, we saw that the Code DOM does not uses the input stream to generate the code
and generate the code in the current directory. It is the same here, and the associated source code
will be generated in the current directory.</P>
<P CLASS="warning"><B>Note 2</B>: wsdl will also generate an &quot;.ace&quot; file. This file is empty, and
has no interest.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </P>
<H3>- XSD.exe</H3>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xsd generates the source code associated to a given
xsd file.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We need an xsd file. We will start with the following
xml file (books.xml) that we will convert into an xsd file.</P>
<PRE>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;bookstore xmlns=&quot;generic&quot;&gt;
    &lt;book genre=&quot;autobiography&quot;&gt;
            &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;
            &lt;author&gt;
		&lt;first-name&gt;Ben&lt;/first-name&gt;
		&lt;last-name&gt;Franklin&lt;/last-name&gt;
            &lt;/author&gt;
            &lt;price&gt;89.88&lt;/price&gt;
    &lt;/book&gt;
    &lt;book genre=&quot;novel&quot;&gt;
            &lt;title&gt;The Confidence Man&lt;/title&gt;
            &lt;author&gt;
		&lt;first-name&gt;John&lt;/first-name&gt;
		&lt;last-name&gt;Melville&lt;/last-name&gt;
            &lt;/author&gt;
            &lt;price&gt;11.99&lt;/price&gt;
    &lt;/book&gt;
&lt;/bookstore&gt;</PRE>
<P></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From the xml code above (books.xml), we can generate
an xsd file (books.xsd) running the following command line: </P>
<PRE>        xsd books.xml</PRE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; When we have the xsd file, you can generate the Eiffel
code corresponding, running this command line:</P>
<PRE>        xsd /language:&quot;...&quot; books.xsd /c</PRE>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The Eiffel code is generated in three different files
(bookstore.e, bookstore_book.e, bookstore_book_author.e).</P>
<P><I>bookstore.e</I></P>
<PRE><SPAN CLASS="eKeyword">indexing</SPAN>
	description: &quot;&lt;remarks/&gt;&quot;
	attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_TYPE_ATTRIBUTE</SPAN>}.make [[<SPAN CLASS="eString">&quot;namespace&quot;</SPAN>, (<SPAN CLASS="eString">&quot;generic&quot;</SPAN>).to_cil]] end,
		<SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ROOT_ATTRIBUTE</SPAN>}.make_from_element_name ((<SPAN CLASS="eString">&quot;bookstore&quot;</SPAN>).to_cil)
						[[<SPAN CLASS="eString">&quot;namespace&quot;</SPAN>, (<SPAN CLASS="eString">&quot;generic&quot;</SPAN>).to_cil], [<SPAN CLASS="eString">&quot;is_nullable&quot;</SPAN>, False]] <SPAN CLASS="eKeyword">end</SPAN>

<SPAN CLASS="eKeyword">class</SPAN>
	<SPAN CLASS="eClass">BOOKSTORE</SPAN>

<SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">NONE</SPAN>}

<SPAN CLASS="eKeyword">feature</SPAN> <SPAN CLASS="eComment">-- Access</SPAN>

	<SPAN CLASS="eFeature">Items</SPAN>: <SPAN CLASS="eClass">NATIVE_ARRAY [BOOKSTORE_BOOK]</SPAN>
			-- | &lt;remarks/&gt;
		<SPAN CLASS="eKeyword">indexing</SPAN>
			attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ELEMENT_ATTRIBUTE</SPAN>}.make_from_element_name ((<SPAN CLASS="eString">&quot;book&quot;</SPAN>).to_cil) end
		<SPAN CLASS="eKeyword">end</SPAN>

<SPAN CLASS="eKeyword">end</SPAN> <SPAN CLASS="eComment">-- BOOKSTORE</SPAN></PRE>
<P>&nbsp;</P>
<P><I>bookstore_book.e</I></P>
<PRE><SPAN CLASS="eKeyword">indexing</SPAN>
	description: &quot;&lt;remarks/&gt;&quot;
	attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_TYPE_ATTRIBUTE</SPAN>}.make [[<SPAN CLASS="eString">&quot;namespace&quot;</SPAN>, (<SPAN CLASS="eString">&quot;generic&quot;</SPAN>).to_cil]] end

<SPAN CLASS="eKeyword">class</SPAN>
	<SPAN CLASS="eClass">BOOKSTORE_BOOK</SPAN>

<SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">NONE</SPAN>}

<SPAN CLASS="eKeyword">feature</SPAN> <SPAN CLASS="eComment">-- Access</SPAN>

	<SPAN CLASS="eFeature">title</SPAN>: <SPAN CLASS="eClass">SYSTEM_STRING</SPAN>
			-- | &lt;remarks/&gt;

	<SPAN CLASS="eFeature">price</SPAN>: <SPAN CLASS="eClass">SYSTEM_STRING</SPAN>
			-- | &lt;remarks/&gt;

	<SPAN CLASS="eFeature">author</SPAN>: <SPAN CLASS="eClass">NATIVE_ARRAY [BOOKSTORE_BOOK_AUTHOR]</SPAN>
			-- | &lt;remarks/&gt;
		<SPAN CLASS="eKeyword">indexing</SPAN>
			attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ELEMENT_ATTRIBUTE</SPAN>}.make_from_element_name ((<SPAN CLASS="eString">&quot;author&quot;</SPAN>).to_cil) end
		<SPAN CLASS="eKeyword">end</SPAN>

	<SPAN CLASS="eFeature">genre</SPAN>: <SPAN CLASS="eClass">SYSTEM_STRING</SPAN>
			-- | &lt;remarks/&gt;
		<SPAN CLASS="eKeyword">indexing</SPAN>
			attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ATTRIBUTE_ATTRIBUTE</SPAN>}.make
						[[<SPAN CLASS="eString">&quot;form&quot;</SPAN>, feature {<SPAN CLASS="eClass">XML_XML_SCHEMA_FORM</SPAN>}.Unqualified]] end
		<SPAN CLASS="eKeyword">end</SPAN>

<SPAN CLASS="eKeyword">end</SPAN> -- <SPAN CLASS="eComment">BOOKSTORE_BOOK</SPAN></PRE>
<P>&nbsp;</P>
<P><I>bookstore_book_author.e</I></P>
<PRE><SPAN CLASS="eKeyword">indexing</SPAN>
	description: &quot;&lt;remarks/&gt;&quot;
	attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_TYPE_ATTRIBUTE</SPAN>}.make [[<SPAN CLASS="eString">&quot;namespace&quot;</SPAN>, (<SPAN CLASS="eString">&quot;generic&quot;</SPAN>).to_cil]] end

<SPAN CLASS="eKeyword">class</SPAN>
	<SPAN CLASS="eClass">BOOKSTORE_BOOK_AUTHOR</SPAN>

<SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">NONE</SPAN>}

<SPAN CLASS="eKeyword">feature</SPAN> <SPAN CLASS="eComment">-- Access</SPAN>

	<SPAN CLASS="eFeature">firstname</SPAN>: <SPAN CLASS="eClass">SYSTEM_STRING</SPAN>
			-- | &lt;remarks/&gt;
		<SPAN CLASS="eKeyword">indexing</SPAN>
			attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ELEMENT_ATTRIBUTE</SPAN>}.make_from_element_name ((<SPAN CLASS="eString">&quot;first-name&quot;</SPAN>).to_cil) end
		<SPAN CLASS="eKeyword">end</SPAN>

	<SPAN CLASS="eFeature">lastname</SPAN>: <SPAN CLASS="eClass">SYSTEM_STRING</SPAN>
			-- | &lt;remarks/&gt;
		<SPAN CLASS="eKeyword">indexing</SPAN>
			attribute: <SPAN CLASS="eKeyword">create</SPAN> {<SPAN CLASS="eClass">XML_XML_ELEMENT_ATTRIBUTE</SPAN>}.make_from_element_name ((<SPAN CLASS="eString">&quot;last-name&quot;</SPAN>).to_cil) end
		<SPAN CLASS="eKeyword">end</SPAN>

<SPAN CLASS="eKeyword">end</SPAN> -- <SPAN CLASS="eComment">BOOKSTORE_BOOK_AUTHOR</SPAN></PRE>
<P><BR>
&nbsp;</P>
<P CLASS="warning"><B>Note</B>: xsd prompt that the code is generated in the file books.ace. As we
saw in the previous chapters, this file is useless, and we are only interested in the three &quot;.e&quot;
files generated in the current directory.</P>
</SPAN></SPAN></SPAN>

</BODY>

</HTML>
