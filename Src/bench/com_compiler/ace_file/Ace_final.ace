system
	"ISE.Compiler"

root
	ECOM_ISE_REGISTRATION: make

default
	assertion (no)
	arguments ("/regserver")
	arguments (" ")
	disabled_debug (yes)
	disabled_debug ("activity")
	disabled_debug ("actual_replication")
	disabled_debug ("anchored_features")
	disabled_debug ("assertion")
	disabled_debug ("assertions")
	disabled_debug ("byte_code")
	disabled_debug ("c_debugger")
	disabled_debug ("cache")
	disabled_debug ("cache_compiler")
	disabled_debug ("cache_research")
	disabled_debug ("cache_server")
	disabled_debug ("cache_stat")
	disabled_debug ("cecil")
	disabled_debug ("check_expanded")
	disabled_debug ("class_of_id")
	disabled_debug ("comments")
	disabled_debug ("count")
	disabled_debug ("dead_code")
	disabled_debug ("dead_code_removal")
	disabled_debug ("debbugger_hook")
	disabled_debug ("debugger_hook")
	disabled_debug ("dle topo")
	disabled_debug ("dlg_dispatcher")
	disabled_debug ("document")
	disabled_debug ("documentation")
	disabled_debug ("dollar")
	disabled_debug ("filters")
	disabled_debug ("flat_short")
	disabled_debug ("flush_file")
	disabled_debug ("formal_generic")
	disabled_debug ("gelex")
	disabled_debug ("genericity")
	disabled_debug ("geyacc")
	disabled_debug ("has_calls")
	disabled_debug ("liman")
	disabled_debug ("local_feat_adaptation")
	disabled_debug ("optimization")
	disabled_debug ("options")
	disabled_debug ("parse")
	disabled_debug ("remove_class")
	disabled_debug ("replication")
	disabled_debug ("sep_debug")
	disabled_debug ("server")
	disabled_debug ("skeleton")
	disabled_debug ("trace_table")
	disabled_debug ("transfer")
	disabled_debug ("type_check")
	disabled_debug ("verbose")
	disabled_debug ("wel")
	disabled_debug ("wel_gdi_count")
	disabled_debug ("wel_gdi_references")
	disabled_debug ("win_dispatcher")
	debug (no)
	line_generation (no)
	profile (no)
	trace (no)
	il_verifiable (yes)
	cls_compliant (yes)
	dotnet_naming_convention (yes)
	msil_generation_type ("exe")
	check_vape (yes)
	console_application (no)
	array_optimization (no)
	dead_code_removal (yes)
	exception_trace (no)
	inlining (no)


cluster
	all com_generated:		"$EIFFEL_SRC\com_compiler"
		exclude
			"EIFGEN"; "to_replace"; "generated"; 
		visible
			ieiffel_compiler_events_impl_proxy
				end
			ieiffel_project_impl_proxy
				end
			ieiffel_compiler_impl_proxy
				end
			ieiffel_system_browser_impl_proxy
				end
			ieiffel_cluster_descriptor_impl_proxy
				end
			ieiffel_class_descriptor_impl_proxy
				end
			ieiffel_feature_descriptor_impl_proxy
				end
			ieiffel_project_properties_impl_proxy
				end
			ieiffel_cluster_properties_impl_proxy
				end
			ecom_ise_registration
				end
			ceiffel_project_coclass_imp
				end
			ceiffel_compiler_coclass_imp
				end
			ieiffel_project_impl_stub
				end
			ieiffel_compiler_impl_stub
				end
			ieiffel_system_browser_impl_stub
				end
			ieiffel_cluster_descriptor_impl_stub
				end
			ieiffel_class_descriptor_impl_stub
				end
			ieiffel_feature_descriptor_impl_stub
				end
			ieiffel_project_properties_impl_stub
				end
			ieiffel_cluster_properties_impl_stub
				end
			class_descriptor
				end
			cluster_descriptor
				end
			cluster_properties
				end
			compiler
				end
			com_degree_output
				end
			com_error_window
				end
			feature_descriptor
				end
			project_manager
				end
			project_properties
				end
			system_browser
				end
			system_clusters
				end
			class_enumerator
				end
			cluster_enumerator
				end
			feature_enumerator
				end
			cluster_prop_enumerator
				end
			cluster_excludes_enumerator
				end
			assembly_enumerator
				end
			include_paths_enumerator
				end
			object_files_enumerator
				end
			system_externals
				end
			ieiffel_system_externals_impl_stub
				end
			ieiffel_system_assemblies_impl_stub
				end
			ieiffel_assembly_properties_impl_stub
				end
			system_assemblies
				end
			assembly_properties
				end
		end

	all base:		"$EIFFEL_SRC\library\base"
		exclude
			"table"; "desc"; "CVS"; 
		visible
			integer_ref
				end
			character_ref
				end
			boolean_ref
				end
			real_ref
				end
			double_ref
				end
			cell
				end
			string
				end
			array
				end
		end

	all wel:		"$EIFFEL_SRC\library\wel"

	all time:		"$EIFFEL_SRC\library\time"
		exclude
			"french"; "german"; 
		visible
			date_time
				end
		end

	all ecom:		"$EIFFEL_SRC\library\com"
		visible
			ecom_decimal
				end
			ecom_currency
				end
			ecom_array
				end
			ecom_variant
				end
			ecom_guid
				end
			ecom_excep_info
				end
			ecom_disp_params
				end
			ecom_statstg
				end
			ecom_stream
				end
			ecom_storage
				end
			ecom_root_storage
				end
			ecom_enum_statstg
				end
			ecom_hresult
				end
			ecom_wide_string
				end
			ecom_large_integer
				end
			ecom_ularge_integer
				end
			ecom_unknown_interface
				end
			ecom_automation_interface
				end
			ecom_stub
				end
			ecom_queriable
				end
		end

	all compiler:		"$EIFFEL_SRC\Eiffel\eiffel"
		exclude
			"CVS"; "unix"; "Clib"; "Core"; "junk"; "kernel"; 
		end

	all compiler_api:		"$EIFFEL_SRC\Eiffel\API"
		exclude
			"CVS"; 
		end

	all helpers:		"$EIFFEL_SRC\library\helpers"

	switch:		"$EIFFEL_SRC\Eiffel\switch"

	interface_switch (switch):		"$\interface\batch_only"

	communications (switch):		"$\no_communication"

	time_lock (switch):		"$\license\time_lock"

	status (communications):		"$\status"

	ipc (communications):		"$\ipc"

	debuging_class (communications):		"$\debug"

	debuging_formatters (communications):		"$\formatters"

	beurk:		"$EIFFEL_SRC\Eiffel\beurk"

	"common":		"$EIFFEL_SRC\Eiffel\common"

	common_parser (common):		"$\parser"

	old_resources (common):		"$\resources"

	common_eiffel_parser (common_parser):		"$\parser"

	yacc:		"$EIFFEL_SRC\Eiffel\yacc"

	all lace:		"$EIFFEL_SRC\Eiffel\lace"
		exclude
			"CVS"; 
		default
			assertion (all)
		end

	liman:		"$EIFFEL_SRC\Eiffel\limand"

	liman_bench (liman):		"$\bench"

	liman_abstract (liman):		"$\abstract"

	interface_shared:		"$EIFFEL_SRC\Eiffel\interface\shared"

	documentation_main:		"$EIFFEL_SRC\Eiffel\case\documentation\main"

	all "compiler_support":		"$EIFFEL_SRC\Eiffel\support"

	flat_short_b:		"$EIFFEL_SRC\Eiffel\flat_short\bench"

	flat_short (common_parser):		"$\flat_short"
		exclude
			"format_context.e"; "local_format.e"; 
		end

	encryption:		"$EIFFEL_SRC\library\encryption"

	const:		"$EIFFEL_SRC\Eiffel\const"

	all gobo:		"$EIFFEL_SRC\library\gobo\library"
		exclude
			"hact"; "se"; "ve"; "base"; "CVS"; 
		end

	new_tty:		"$EIFFEL_SRC\Eiffel\interface\new_tty"

	all cli_writer:		"$EIFFEL_SRC\Eiffel\library\cli_writer"

	all xml_deserializer: "$EIFFEL_SRC\Eiffel\library\xml_deserializer"

	all eac_components: "$EIFFEL_SRC\dotnet\consumer\components"

	xml:		"$EIFFEL_SRC\library\exml"

	xml_main (xml):		"$\main"

	xml_tree_parser (xml_main):		"$\tree_parser"

	xml_spec (xml):		"$\compiler_specific\ise"

external

	include_path:
		"$(EIFFEL_SRC)\library\wel\spec\windows\include",
		"$(EIFFEL_SRC)\library\time\Clib",
		"$(EIFFEL_SRC)\library\com\spec\windows\include",
		"$(EIFFEL_SRC)\com_compiler\Clib",
		"$(EIFFEL_SRC)\library\gobo\library\kernel\include",
		"$(EIFFEL_SRC)\library\encryption\Clib",
		"$(EIFFEL_SRC)\C\bench",
		"$(EIFFEL_SRC)\C\platform",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\core\Clib",
		"$(EIFFEL_SRC)\Eiffel\library\cli_writer\Clib"
		"$(EIFFEL_SRC)\library\exml\compiler_specific\ise\clib",
		"$(EIFFEL_SRC)\C_library\expat\xmlparse"

	object:
		"$(EIFFEL_SRC)\library\wel\spec\$(ISE_C_COMPILER)\lib\wel.lib",
		"$(EIFFEL_SRC)\library\time\spec\$(ISE_C_COMPILER)\lib\datetime.lib",
		"$(EIFFEL_SRC)\library\com\spec\$(ISE_C_COMPILER)\lib\com.lib",
		"$(EIFFEL_SRC)\library\com\spec\$(ISE_C_COMPILER)\lib\com_runtime.lib",
		"$(EIFFEL_SRC)\C\bench\compiler.lib",
		"$(EIFFEL_SRC)\library\encryption\spec\$(ISE_C_COMPILER)\lib\des.lib",
		"$(EIFFEL_SRC)\C\ipc\ewb\ewb.lib",
		"$(EIFFEL_SRC)\C\ipc\shared\ipc.lib",
		"$(EIFFEL_SRC)\C\idrs\idr.lib",
		"$(EIFFEL_SRC)\C\minilzo\minilzo.obj",
		"$(EIFFEL_SRC)\C\platform\platform.lib",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\core\Clib\ecom.lib",
		"$(EIFFEL_SRC)\com_compiler\Clib\$(ISE_C_COMPILER)\ecom_final.lib",
		"$(EIFFEL_SRC)\Eiffel\library\cli_writer\spec\msc\lib\cli_writer.lib",
		"corguids.lib"
		"$(EIFFEL_SRC)\library\exml\compiler_specific\ise\clib\$(ISE_C_COMPILER)\exml.lib",
		"$(EIFFEL_SRC)\C_library\expat\lib\xmlparse.lib"

end
