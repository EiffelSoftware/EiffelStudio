#! /bin/sh
#
# If these # comments don't work, trim them. Don't worry about any other
# shell scripts, Configure will trim # comments from them for you.
#
# (If you are trying to port this package to a machine without sh,
# I would suggest you have a look at the prototypical config_h.SH file
# and edit it to reflect your system. Some packages may include samples
# of eif_config.h for certain machines, so you might look for one of those.)
#
# Yes, you may rip this off to use in other distribution packages. This
# script belongs to the public domain and cannot be copyrighted.
#
# (Note: this Configure script was generated automatically. Rather than
# working with this copy of Configure, you may wish to get metaconfig.
# The dist-3.0 package (which contains metaconfig) was posted in
# comp.sources.misc so you may fetch it yourself from your nearest
# archive site. Check with Archie if you don't know where that can be.)
#

# $Id$
#
# Generated on Thu Nov  7 17:23:31 PST 1996 [metaconfig 3.0 PL60]

cat >/tmp/c1$$ <<EOF
ARGGGHHHH!!!!!

SCO csh still thinks true is false.  Write to SCO today and tell them that next
year Configure ought to "rm /bin/csh" unless they fix their blasted shell. :-)

(Actually, Configure ought to just patch csh in place.  Hmm.  Hmmmmm.  All
we'd have to do is go in and swap the && and || tokens, wherever they are.)

[End of diatribe. We now return you to your regularly scheduled programming...]
EOF
cat >/tmp/c2$$ <<EOF

OOPS!  You naughty creature!  You didn't run Configure with sh!
I will attempt to remedy the situation by running sh for you...
EOF

true || cat /tmp/c1$$ /tmp/c2$$
true || exec sh $0 $argv:q

(exit $?0) || cat /tmp/c2$$
(exit $?0) || exec sh $0 $argv:q
rm -f /tmp/c1$$ /tmp/c2$$

: compute my invocation name
me=$0
case "$0" in
*/*)
	me=`echo $0 | sed -e 's!.*/\(.*\)!\1!' 2>/dev/null`
	test "$me" || me=$0
	;;
esac

: Proper PATH separator
p_=:

: Proper PATH setting
paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin'
paths="$paths /opt/bin /opt/local/bin /opt/local /opt/lbin"
paths="$paths /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin"
paths="$paths /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin"
paths="$paths /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb"
paths="$paths /bsd4.3/usr/bin /usr/bsd /bsd43/bin /usr/ccs/bin"
paths="$paths /etc /usr/lib /usr/ucblib /lib /usr/ccs/lib"
paths="$paths /sbin /usr/sbin /usr/libexec"

for p in $paths
do
	case "$p_$PATH$p_" in
	*$p_$p$p_*) ;;
	*) test -d $p && PATH=$PATH$p_$p ;;
	esac
done

PATH=.$p_$PATH
export PATH

: Sanity checks
#No need for this as the user will know not to do that
#if test ! -t 0; then
#	echo "Say 'sh $me', not 'sh <$me'"
#	exit 1
#fi

: On HP-UX, large Configure scripts may exercise a bug in /bin/sh
if test -f /hp-ux -a -f /bin/ksh; then
	if (PATH=.; alias -x) >/dev/null 2>&1; then
		: already under /bin/ksh
	else
		cat <<'EOM'
(Feeding myself to ksh to avoid nasty sh bug in "here document" expansion.)
EOM
		unset ENV
		exec /bin/ksh $0 "$@"
	fi
else
	: Warn them if they use ksh on other systems
	(PATH=.; alias -x) >/dev/null 2>&1 && \
		cat <<EOM
(I see you are using the Korn shell.  Some ksh's blow up on $me,
especially on exotic machines.  If yours does, try the Bourne shell instead.)
EOM
fi

: Configure runs within the UU subdirectory
test -d UU || mkdir UU
cd UU && rm -f ./*

eunicefix=''
Mcc=''
awk=''
bash=''
bison=''
byacc=''
cat=''
chgrp=''
chmod=''
chown=''
comm=''
compress=''
cp=''
cpio=''
cpp=''
csh=''
date=''
echo=''
egrep=''
emacs=''
expr=''
find=''
flex=''
gcc=''
grep=''
inews=''
ksh=''
ldsharedflags=''
less=''
line=''
lint=''
ln=''
lp=''
lpr=''
ls=''
mail=''
mailx=''
make=''
mkdir=''
more=''
mv=''
nroff=''
perl=''
pg=''
pmake=''
pr=''
rm=''
rmail=''
sed=''
sendmail=''
sh=''
shar=''
sleep=''
smail=''
sort=''
submit=''
tail=''
tar=''
tbl=''
test=''
touch=''
tr=''
troff=''
uname=''
uniq=''
uuname=''
vi=''
zcat=''
hint=''
myuname=''
osname=''
osvers=''
Author=''
Date=''
Header=''
Id=''
Locker=''
Log=''
RCSfile=''
Revision=''
Source=''
State=''
abortsig=''
add_log=''
afs=''
alignbytes=''
bin=''
binexp=''
bitpbyte=''
byteorder=''
cc=''
gccversion=''
ccflags=''
cppflags=''
ldflags=''
lkflags=''
optimize=''
cf_by=''
cf_time=''
charsize=''
contains=''
cpp_stuff=''
cpplast=''
cppminus=''
cpprun=''
cppstdin=''
d_gettblsz=''
nofile=''
tablesize=''
d_access=''
d_bcmp=''
d_bcopy=''
d_bsdjmp=''
d_bzero=''
d_chown=''
d_dlopen=''
d_dup2=''
d_eofpipe=''
d_fcntl=''
d_fd_macros=''
d_fd_set=''
d_fds_bits=''
d_ftime=''
d_gettimeod=''
d_getgrps=''
d_gethid=''
aphostname=''
d_gethname=''
d_phostname=''
d_uname=''
d_getopt=''
d_getpagsz=''
pagesize=''
d_keepsig=''
d_link=''
d_lstat=''
d_memcpy=''
d_memmove=''
d_mkdir=''
d_mktime=''
d_mmap=''
d_open3=''
d_pidcheck=''
d_portable=''
d_readdir=''
d_rewinddir=''
d_seekdir=''
d_telldir=''
d_rename=''
d_rmdir=''
d_rusage=''
d_safebcpy=''
d_safemcpy=''
d_sbrk=''
d_select=''
d_sigaltstack=''
d_siglist=''
d_sigsetmk=''
d_sigaction=''
d_sigintrp=''
d_sigvec=''
d_sigvectr=''
d_smartmmap=''
d_oldsock=''
d_socket=''
d_sockpair=''
sockethdr=''
socketlib=''
d_geteuid=''
d_getgrgid=''
d_getpwuid=''
d_index=''
d_strchr=''
d_strctcpy=''
d_strdup=''
d_strerrm=''
d_strerror=''
d_sysernlst=''
d_syserrlst=''
d_time=''
timetype=''
clocktype=''
d_times=''
d_unlink=''
d_nanosleep=''
d_usleep=''
d_utime=''
d_voidsig=''
signal_t=''
doublesize=''
floatsize=''
gidtype=''
groupstype=''
h_fcntl=''
h_sysfile=''
i_direct=''
d_dirnamlen=''
direntrytype=''
i_dirent=''
i_dlfcn=''
i_fcntl=''
i_fd_setsyss=''
i_grp=''
i_limits=''
i_netns_ns=''
i_niin=''
i_sysin=''
d_pwage=''
d_pwchange=''
d_pwclass=''
d_pwcomment=''
d_pwexpire=''
d_pwquota=''
i_pwd=''
i_string=''
strings=''
i_sysdir=''
i_sysfile=''
i_sysndir=''
i_sysresrc=''
i_sysselct=''
i_syssock=''
i_systimeb=''
i_systimes=''
i_sysun=''
i_systime=''
i_systimek=''
i_time=''
timeincl=''
i_tmvlsyss=''
i_utime=''
i_stdarg=''
i_varargs=''
i_varhdr=''
i_xm_protocols=''
install=''
installdir=''
intsize=''
lex=''
lexflags=''
libc=''
glibpth=''
libpth=''
plibpth=''
xlibpth=''
libs=''
lns=''
longsize=''
d_mymalloc=''
mallocobj=''
mallocsrc=''
malloctype=''
usemymalloc=''
installmansrc=''
manext=''
mansrc=''
mansrcexp=''
mkdep=''
huge=''
large=''
medium=''
models=''
small=''
split=''
mydomain=''
myhostname=''
phostname=''
c=''
n=''
groupcat=''
hostcat=''
passcat=''
orderlib=''
ranlib=''
package=''
spackage=''
d_maypanic=''
pidtype=''
prefix=''
prototype=''
ptrsize=''
reg10=''
reg11=''
reg12=''
reg13=''
reg14=''
reg15=''
reg16=''
reg1=''
reg2=''
reg3=''
reg4=''
reg5=''
reg6=''
reg7=''
reg8=''
reg9=''
registers=''
d_sbrksmart=''
installscript=''
selecttype=''
so=''
d_keepalive=''
sharpbang=''
shsharp=''
spitshell=''
startsh=''
uidtype=''
nm_opt=''
runnm=''
usenm=''
incpath=''
mips=''
mips_type=''
usrinc=''
defvoidused=''
voidflags=''
yacc=''
yaccflags=''
CONFIG=''

define='define'
undef='undef'
smallmach='pdp11 i8086 z8000 i80286 iAPX286'
rmlist=''

: We must find out about Eunice early
eunicefix=':'
if test -f /etc/unixtovms; then
	eunicefix=/etc/unixtovms
fi
if test -f /etc/unixtovms.exe; then
	eunicefix=/etc/unixtovms.exe
fi

: list of known cpp symbols, sorted alphabetically
al="AMIX BIT_MSF BSD BSD4_3 BSD_NET2 CMU CRAY DGUX DOLPHIN DPX2"
al="$al GO32 GOULD_PN HP700 I386 I80960 I960 Lynx M68000 M68K MACH"
al="$al MIPSEB MIPSEL MSDOS MTXINU MULTIMAX MVS"
al="$al M_COFF M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM"
al="$al M_SYS3 M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX"
al="$al NeXT OCS88 OSF1 PARISC PC532 PORTAR POSIX"
al="$al PWB R3000 RES RISC6000 RT Sun386i SVR3 SVR4"
al="$al SYSTYPE_BSD SYSTYPE_SVR4 SYSTYPE_SYSV Tek4132 Tek4300"
al="$al UMAXV USGr4 USGr4_2 UTEK UTS UTek UnicomPBB UnicomPBD Utek"
al="$al VMS Xenix286"
al="$al _AIX _AIX32 _AIX370 _AM29000 _COFF _CRAY _CX_UX _EPI"
al="$al _IBMESA _IBMR2 _M88K _M88KBCS_TARGET"
al="$al _MIPSEB _MIPSEL _M_COFF _M_I86 _M_I86SM _M_SYS3"
al="$al _M_SYS5 _M_SYSIII _M_SYSV _M_UNIX _M_XENIX _NLS _PGC_ _R3000"
al="$al _SYSTYPE_BSD _SYSTYPE_BSD43 _SYSTYPE_SVR4"
al="$al _SYSTYPE_SYSV _SYSV3 _U370 _UNICOS"
al="$al __386BSD__ __BIG_ENDIAN __BIG_ENDIAN__ __BSD_4_4__"
al="$al __DGUX__ __DPX2__ __H3050R __H3050RX"
al="$al __LITTLE_ENDIAN __LITTLE_ENDIAN__ __MACH__"
al="$al __MIPSEB __MIPSEB__ __MIPSEL __MIPSEL__"
al="$al __Next__ __OSF1__ __PARAGON__ __PGC__ __PWB __STDC__"
al="$al __SVR4_2__ __UMAXV__"
al="$al ____386BSD____ __alpha __alpha__ __amiga"
al="$al __bsd4_2 __bsd4_2__ __bsdi__ __convex__"
al="$al __host_mips__"
al="$al __hp9000s200 __hp9000s300 __hp9000s400 __hp9000s500"
al="$al __hp9000s500 __hp9000s700 __hp9000s800"
al="$al __hppa __hpux __hp_osf __i286 __i286__ __i386 __i386__"
al="$al __i486 __i486__ __i860 __i860__ __ibmesa __ksr1__ __linux__"
al="$al __m68k __m68k__ __m88100__ __m88k __m88k__"
al="$al __mc68000 __mc68000__ __mc68020 __mc68020__"
al="$al __mc68030 __mc68030__ __mc68040 __mc68040__"
al="$al __mc88100 __mc88100__ __mips __mips__"
al="$al __motorola__ __osf__ __pa_risc __sparc__ __stdc__"
al="$al __sun __sun__ __svr3__ __svr4__ __ultrix __ultrix__"
al="$al __unix __unix__ __uxpm__ __uxps__ __vax __vax__"
al="$al _host_mips _mips _unix"
al="$al a29k aegis aix aixpc alliant alpha am29000 amiga ansi ardent"
al="$al apollo ardent att386 att3b"
al="$al bsd bsd43 bsd4_2 bsd4_3 bsd4_4 bsdi bull"
al="$al cadmus clipper concurrent convex cray ctix"
al="$al dmert encore gcos gcx gimpel gould"
al="$al hbullx20 hcx host_mips hp200 hp300 hp700 hp800"
al="$al hp9000 hp9000s300 hp9000s400 hp9000s500"
al="$al hp9000s700 hp9000s800 hp9k8 hppa hpux"
al="$al i186 i286 i386 i486 i8086"
al="$al i80960 i860 iAPX286 ibm ibm032 ibmrt interdata is68k"
al="$al ksr1 linux luna luna88k m68k m88100 m88k"
al="$al mc300 mc500 mc68000 mc68010 mc68020 mc68030"
al="$al mc68040 mc68060 mc68k mc68k32 mc700"
al="$al mc88000 mc88100 merlin mert mips mvs n16"
al="$al ncl_el ncl_mr"
al="$al news1500 news1700 news1800 news1900 news3700"
al="$al news700 news800 news900 ns16000 ns32000"
al="$al ns32016 ns32332 ns32k nsc32000 os osf"
al="$al parisc pc532 pdp11 plexus posix pyr"
al="$al riscix riscos scs sequent sgi sinix sony sony_news"
al="$al sonyrisc sparc sparclite spectrum stardent stratos"
al="$al sun sun3 sun386 svr4 sysV68 sysV88"
al="$al titan tower tower32 tower32_200 tower32_600 tower32_700"
al="$al tower32_800 tower32_850 tss u370 u3b u3b2 u3b20 u3b200"
al="$al u3b20d u3b5 ultrix unix unixpc unos vax venix vms"
al="$al xenix z8000"

gccversion=''
: no include file wanted by default
inclwanted=''

groupstype=''
i_whoami=''
: change the next line if compiling for Xenix/286 on Xenix/386
xlibpth='/usr/lib/386 /lib/386'

: general looking path for locating libraries
glibpth="/lib/pa1.1 /usr/lib/large /lib /usr/lib $xlibpth"
glibpth="$glibpth /lib/large /usr/lib/small /lib/small"
glibpth="$glibpth /usr/ccs/lib /usr/ucblib /usr/local/lib /usr/shlib"

: Private path used by Configure to find libraries.  Its value
: is prepended to libpth. This variable takes care of special
: machines, like the mips.  Usually, it should be empty.
plibpth=''

: default library list
libswanted=''
: full support for void wanted by default
defvoidused=15

: libraries wanted for XDR support and socket support
libswanted="c_s rpc xdr bsd socket inet nsl m"
lex="flex"
lexflags="-lB8 -C"
: script used to extract .SH files with variable substitutions
cat >extract <<'EOS'
CONFIG=true
echo "Doing variable substitutions on .SH files..."
if test -f MANIFEST; then
	set x `awk '{print $1}' <MANIFEST | grep '\.SH'`
else
	echo "(Looking for .SH files under the current directory.)"
	set x `find . -name "*.SH" -print`
fi
shift
case $# in
0) set x *.SH; shift;;
esac
if test ! -f $1; then
	shift
fi
for file in $*; do
	case "$file" in
	*/*)
		dir=`expr X$file : 'X\(.*\)/'`
		file=`expr X$file : 'X.*/\(.*\)'`
		(cd $dir && . ./$file)
		;;
	*)
		. ./$file
		;;
	esac
done
if test -f config_h.SH; then
	if test ! -f eif_config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. ./config_h.SH
	fi
fi
EOS

: produce awk script to parse command line options
cat >options.awk <<'EOF'
BEGIN {
	optstr = "dD:eEf:hKOrsSU:V";	# getopt-style specification

	len = length(optstr);
	for (i = 1; i <= len; i++) {
		c = substr(optstr, i, 1);
		if (i < len) a = substr(optstr, i + 1, 1); else a = "";
		if (a == ":") {
			arg[c] = 1;
			i++;
		}
		opt[c] = 1;
	}
}
{
	expect = 0;
	str = $0;
	if (substr(str, 1, 1) != "-") {
		printf("'%s'\n", str);
		next;
	}
	len = length($0);
	for (i = 2; i <= len; i++) {
		c = substr(str, i, 1);
		if (!opt[c]) {
			printf("-%s\n", substr(str, i));
			next;
		}
		printf("-%s\n", c);
		if (arg[c]) {
			if (i < len)
				printf("'%s'\n", substr(str, i + 1));
			else
				expect = 1;
			next;
		}
	}
}
END {
	if (expect)
		print "?";
}
EOF

: process the command line options
set X `for arg in "$@"; do echo "X$arg"; done |
	sed -e s/X// | awk -f options.awk`
eval "set $*"
shift
rm -f options.awk

: set up default values
fastread=''
reuseval=false
config_sh=''
alldone=''
error=''
silent=''
extractsh=''
override=''
knowitall=''
rm -f optdef.sh

: option parsing
while test $# -gt 0; do
	case "$1" in
	-d) shift; fastread=yes;;
	-e) shift; alldone=cont;;
	-f)
		shift
		cd ..
		if test -r "$1"; then
			config_sh="$1"
		else
			echo "$me: cannot read config file $1." >&2
			error=true
		fi
		cd UU
		shift;;
	-h) shift; error=true;;
	-r) shift; reuseval=true;;
	-s) shift; silent=true;;
	-E) shift; alldone=exit;;
	-K) shift; knowitall=true;;
	-O) shift; override=true;;
	-S) shift; extractsh=true;;
	-D)
		shift
		case "$1" in
		*=)
			echo "$me: use '-U symbol=', not '-D symbol='." >&2
			echo "$me: ignoring -D $1" >&2
			;;
		*=*) echo "$1" | \
				sed -e "s/'/'\"'\"'/g" -e "s/=\(.*\)/='\1'/" >> optdef.sh;;
		*) echo "$1='define'" >> optdef.sh;;
		esac
		shift
		;;
	-U)
		shift
		case "$1" in
		*=) echo "$1" >> optdef.sh;;
		*=*)
			echo "$me: use '-D symbol=val', not '-U symbol=val'." >&2
			echo "$me: ignoring -U $1" >&2
			;;
		*) echo "$1='undef'" >> optdef.sh;;
		esac
		shift
		;;
	-V) echo "$me generated by metaconfig 3.0 PL60." >&2
		exit 0;;
	--) break;;
	-*) echo "$me: unknown option $1" >&2; shift; error=true;;
	*) break;;
	esac
done

case "$error" in
true)
	cat >&2 <<EOM
Usage: $me [-dehrEKOSV] [-f config.sh] [-D symbol] [-D symbol=value]
                 [-U symbol] [-U symbol=]
  -d : use defaults for all answers.
  -e : go on without questioning past the production of config.sh.
  -f : specify an alternate default configuration file.
  -h : print this help message and exit (with an error status).
  -r : reuse C symbols value if possible (skips costly nm extraction).
  -s : silent mode, only echoes questions and essential information.
  -D : define symbol to have some value:
         -D symbol         symbol gets the value 'define'
         -D symbol=value   symbol gets the value 'value'
  -E : stop at the end of questions, after having produced config.sh.
  -K : do not use unless you know what you are doing.
  -O : let -D and -U override definitions from loaded configuration file.
  -S : perform variable substitutions on all .SH files (can mix with -f)
  -U : undefine symbol:
         -U symbol    symbol gets the value 'undef'
         -U symbol=   symbol gets completely empty
  -V : print version number and exit (with a zero status).
EOM
	exit 1
	;;
esac

exec 4>&1
case "$silent" in
true) exec 1>/dev/null;;
esac

: run the defines and the undefines, if any, but leave the file out there...
touch optdef.sh
. ./optdef.sh

case "$extractsh" in
true)
	case "$config_sh" in
	'') config_sh='config.sh'; config='./config.sh';;
	/*) config="$config_sh";;
	*) config="./$config_sh";;
	esac
	echo " "
	echo "Fetching answers from $config_sh..."
	cd ..
	. $config
	test "$override" && . ./optdef.sh
	echo " "
	. ./UU/extract
	rm -rf UU
	echo "Done."
	exit 0
	;;
esac

: set package name
package=Eiffel4
first=`echo $package | sed -e 's/^\(.\).*/\1/'`
last=`echo $package | sed -e 's/^.\(.*\)/\1/'`
case "`echo AbyZ | tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
ABYZ) spackage=`echo $first | tr '[:lower:]' '[:upper:]'`$last;;
*) spackage=`echo $first | tr '[a-z]' '[A-Z]'`$last;;
esac

: Eunice requires " " instead of "", can you believe it
echo " "
: Here we go...
echo "Beginning of configuration questions for $package."

trap 'echo " "; test -d ../UU && rm -rf X $rmlist; exit 1' 1 2 3 15

: Some greps do not return status, grrr.
echo "grimblepritz" >grimble
if grep blurfldyick grimble >/dev/null 2>&1 ; then
	contains=contains
elif grep grimblepritz grimble >/dev/null 2>&1 ; then
	contains=grep
else
	contains=contains
fi
rm -f grimble
: the following should work in any shell
case "$contains" in
contains*)
	echo " "
	echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
	cat >contains <<'EOSS'
grep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
EOSS
chmod +x contains
esac

: first determine how to suppress newline on echo command
echo " "
echo "Checking echo to see how to suppress newlines..."
(echo "hi there\c" ; echo " ") >.echotmp
if $contains c .echotmp >/dev/null 2>&1 ; then
	echo "...using -n."
	n='-n'
	c=''
else
	cat <<'EOM'
...using \c
EOM
	n=''
	c='\c'
fi
echo $n "The star should be here-->$c"
echo '*'
rm -f .echotmp

: Now test for existence of everything in MANIFEST
echo " "
if test -f ../MANIFEST; then
	echo "First let's make sure your kit is complete.  Checking..." >&4
	awk '$1 !~ /PACK[A-Z]+/ {print $1}' ../MANIFEST | split -50
	rm -f missing
	for filelist in x??; do
		(cd ..; ls `cat UU/$filelist` >/dev/null 2>>UU/missing)
	done
	if test -s missing; then
		cat missing >&4
		cat >&4 <<'EOM'

THIS PACKAGE SEEMS TO BE INCOMPLETE.

You have the option of continuing the configuration process, despite the
distinct possibility that your kit is damaged, by typing 'y'es.  If you
do, don't blame me if something goes wrong.  I advise you to type 'n'o
and contact the author (compiler@eiffel.com).

EOM
		echo $n "Continue? [n] $c" >&4
		read ans
		case "$ans" in
		y*)
			echo "Continuing..." >&4
			rm -f missing
			;;
		*)
			echo "ABORTING..." >&4
			kill $$
			;;
		esac
	else
		echo "Looks good..." >&4
	fi
else
	echo "There is no MANIFEST file.  I hope your kit is complete !"
fi
rm -f missing x??

: compute the number of columns on the terminal for proper question formatting
case "$COLUMNS" in
'') COLUMNS='80';;
esac

: set up the echo used in my read
myecho="case \"\$xxxm\" in
'') echo $n \"\$rp $c\" >&4;;
*) case \"\$rp\" in
	'') echo $n \"[\$xxxm] $c\";;
	*)
		if test \`echo \"\$rp [\$xxxm]  \" | wc -c\` -ge $COLUMNS; then
			echo \"\$rp\" >&4
			echo $n \"[\$xxxm] $c\" >&4
		else
			echo $n \"\$rp [\$xxxm] $c\" >&4
		fi
		;;
	esac;;
esac"

: now set up to do reads with possible shell escape and default assignment
cat <<EOSC >myread
xxxm=\$dflt
$myecho
ans='!'
case "\$fastread" in
yes) case "\$dflt" in
	'') ;;
	*) ans='';
		case "\$silent-\$rp" in
		true-) ;;
		*) echo " " >&4;;
		esac;;
	esac;;
*) case "\$silent" in
	true) case "\$rp" in
		'') ans='';;
		esac;;
	esac;;
esac
while expr "X\$ans" : "X!" >/dev/null; do
	read answ
	set x \$xxxm
	shift
	aok=''; eval "ans=\"\$answ\"" && aok=y
	case  "\$answ" in
	"\$ans")
		case "\$ans" in
		\\&*)
			set x \`expr "X\$ans" : "X&\(.*\)\$"\`
			shift
			case "\$1" in
			-d)
				fastread=yes
				echo "(OK, I'll run with -d after this question.)"
				;;
			-*)
				echo "*** Sorry, \$1 not supported yet."
				;;
			esac
			$myecho
			ans=!
			;;
		"!")
			sh 1>&4
			echo " "
			$myecho
			;;
		!*)
			set x \`expr "X\$ans" : "X!\(.*\)\$"\`
			shift
			sh 1>&4 -c "\$*"
			echo " "
			$myecho
			;;
		esac;;
	*)
		case "\$aok" in
		y)
			echo "*** Substitution done -- please confirm."
			xxxm="\$ans"
			ans=\`echo $n "\$ans$c" | tr '\012' ' '\`
			xxxm="\$ans"
			ans=!
			;;
		*)
			echo "*** Error -- try again."
			ans=!
			;;
		esac
		$myecho
		;;
	esac
	case "\$ans\$xxxm\$nostick" in
	'')
		ans=!
		$myecho
		;;
	esac
done
case "\$ans" in
'') ans="\$xxxm";;
esac
EOSC

: create .config dir to save info across Configure sessions
test -d ../.config || mkdir ../.config
cat >../.config/README <<EOF
This directory created by Configure to save information that should
persist across sessions.

You may safely delete it if you wish.
EOF

: general instructions
needman=true
firsttime=true
user=`( (logname) 2>/dev/null || whoami) 2>&1`
if $contains "^$user\$" ../.config/instruct >/dev/null 2>&1; then
	firsttime=false
	echo " "
	rp='Would you like to see the instructions?'
	dflt=n
	. ./myread
	case "$ans" in
	[yY]*) ;;
	*) needman=false;;
	esac
fi
if $needman; then
	cat <<EOH
 
This installation shell script will examine your system and ask you questions
to determine how the Eiffel4 package should be installed. If you get
stuck on a question, you may use a ! shell escape to start a subshell or
execute a command.  Many of the questions will have default answers in square
brackets; typing carriage return will give you the default.

On some of the questions which ask for file or directory names you are allowed
to use the ~name construct to specify the login directory belonging to "name",
even if you don't have a shell which knows about that.  Questions where this is
allowed will be marked "(~name ok)".

EOH
	rp=''
	dflt='Type carriage return to continue'
	. ./myread
	cat <<'EOH'

The prompter used in this script allows you to use shell variables and
backticks in your answers.  You may use $1, $2, etc...  to refer to the words
in the default answer, as if the default line was a set of arguments given to a
script shell.  This means you may also use $* to repeat the whole default line,
so you do not have to re-type everything to add something to the default.

Everytime there is a substitution, you will have to confirm.  If there is an
error (e.g. an unmatched backtick), the default answer will remain unchanged
and you will be prompted again.

If you are in a hurry, you may run 'Configure -d'.  This will bypass nearly all
the questions and use the computed defaults (or the previous answers if there
was already a config.sh file). Type 'Configure -h' for a list of options.
You may also start interactively and then answer '& -d' at any prompt to turn
on the non-interactive behaviour for the remaining of the execution.

EOH
	. ./myread
	cat <<EOH

Much effort has been expended to ensure that this shell script will run on any
Unix system.  If despite that it blows up on yours, your best bet is to edit
Configure and run it again.  If you can't run Configure for some reason,
you'll have to generate a config.sh file by hand.  Whatever problems you
have, let me (compiler@eiffel.com) know how I blew it.

This installation script affects things in two ways:

1) it may do direct variable substitutions on some of the files included
   in this kit.
2) it builds a eif_config.h file for inclusion in C programs.  You may edit
   any of these files as the need arises after running this script.

If you make a mistake on a question, there is no easy way to back up to it
currently.  The easiest thing to do is to edit config.sh and rerun all the SH
files.  Configure will offer to let you do this before it runs the SH files.

EOH
	dflt='Type carriage return to continue'
	. ./myread
	case "$firsttime" in
	true) echo $user >>../.config/instruct;;
	esac
fi

: see if sh knows # comments
echo " "
echo "Checking your sh to see if it knows about # comments..." >&4
if `sh -c '#' >/dev/null 2>&1`; then
	echo "Your sh handles # comments correctly."
	shsharp=true
	spitshell=cat
	echo " "
	echo "Okay, let's see if #! works on this system..."
	xcat=/bin/cat
	test -f $xcat || xcat=/usr/bin/cat
	echo "#!$xcat" >try
	$eunicefix try
	chmod +x try
	./try > today
	if test -s today; then
		echo "It does."
		sharpbang='#!'
	else
		echo "#! $xcat" > try
		$eunicefix try
		chmod +x try
		./try > today
		if test -s today; then
			echo "It does."
			sharpbang='#! '
		else
			echo "It's just a comment."
			sharpbang=': use '
		fi
	fi
else
	echo "Your sh doesn't grok # comments--I will strip them later on."
	shsharp=false
	cd ..
	echo "exec grep -v '^[ 	]*#'" >spitshell
	chmod +x spitshell
	$eunicefix spitshell
	spitshell=`pwd`/spitshell
	cd UU
	echo "I presume that if # doesn't work, #! won't work either!"
	sharpbang=': use '
fi
rm -f try today

: figure out how to guarantee sh startup
echo " "
echo "Checking out how to guarantee sh startup..." >&4
case "$SYSTYPE" in
*bsd*|sys5*) startsh=$sharpbang"/$SYSTYPE/bin/sh";;
*) startsh=$sharpbang'/bin/sh';;
esac
echo "Let's see if '$startsh' works..."
cat >try <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x try
$eunicefix try
if ./try; then
	echo "Yup, it does."
else
echo "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
fi
rm -f try

: find out where common programs are
echo " "
echo "Locating common programs..." >&4
cat <<EOSC >loc
$startsh
case \$# in
0) exit 1;;
esac
thing=\$1
shift
dflt=\$1
shift
for dir in \$*; do
	case "\$thing" in
	.)
	if test -d \$dir/\$thing; then
		echo \$dir
		exit 0
	fi
	;;
	*)
	for thisthing in \$dir/\$thing; do
		: just loop through to pick last item
	done
	if test -f \$thisthing; then
		echo \$thisthing
		exit 0
	elif test -f \$dir/\$thing.exe; then
		: on Eunice apparently
		echo \$dir/\$thing
		exit 0
	fi
	;;
	esac
done
echo \$dflt
exit 1
EOSC
chmod +x loc
$eunicefix loc
loclist="
awk
cat
chgrp
chmod
chown
comm
cp
echo
expr
grep
ln
mkdir
mv
rm
sed
sort
touch
tr
uniq
"
trylist="
Mcc
bison
byacc
cpp
date
flex
nroff
test
uname
"
pth=`echo $PATH | sed -e "s/$p_/ /g"`
pth="$pth /lib /usr/lib"
for file in $loclist; do
	xxx=`./loc $file $file $pth`
	eval $file=$xxx
	eval _$file=$xxx
	case "$xxx" in
	/*)
		echo $file is in $xxx.
		;;
	?:[\\/]*)
		echo $file is in $xxx.
		;;
	*)
		echo "I don't know where '$file' is, and my life depends on it."
		echo "Go find a public domain implementation or fix your PATH setting!"
		exit 1
		;;
	esac
done
echo " "
echo "Don't worry if any of the following aren't found..."
say=offhand
for file in $trylist; do
	xxx=`./loc $file $file $pth`
	eval $file=$xxx
	eval _$file=$xxx
	case "$xxx" in
	/*)
		echo $file is in $xxx.
		;;
	?:[\\/]*)
		echo $file is in $xxx.
		;;
	*)
		echo "I don't see $file out there, $say."
		say=either
		;;
	esac
done
case "$egrep" in
egrep)
	echo "Substituting grep for egrep."
	egrep=$grep
	;;
esac
case "$test" in
test)
	echo "Hopefully test is built into your sh."
	;;
*)
	if `sh -c "PATH= test true" >/dev/null 2>&1`; then
		echo "Using the test built into your sh."
		test=test
		_test=test
	fi
	;;
esac
case "$echo" in
echo)
	echo "Hopefully echo is built into your sh."
	;;
'') ;;
*)
	echo " "
echo "Checking compatibility between $echo and builtin echo (if any)..." >&4
	$echo $n "hi there$c" >foo1
	echo $n "hi there$c" >foo2
	if cmp foo1 foo2 >/dev/null 2>&1; then
		echo "They are compatible.  In fact, they may be identical."
	else
		case "$n" in
		'-n') n='' c='\c';;
		*) n='-n' c='';;
		esac
		cat <<FOO
They are not compatible!  You are probably running ksh on a non-USG system.
I'll have to use $echo instead of the builtin, since Bourne shell doesn't
have echo built in and we may have to run some Bourne shell scripts.  That
means I'll have to use '$n$c' to suppress newlines now.  Life is ridiculous.

FOO
		$echo $n "The star should be here-->$c"
		$echo "*"
	fi
	$rm -f foo1 foo2
	;;
esac

: determine whether symbolic links are supported
echo " "
$touch blurfl
if $ln -s blurfl sym > /dev/null 2>&1 ; then
	echo "Symbolic links are supported." >&4
	lns="$ln -s"
else
	echo "Symbolic links are NOT supported." >&4
	lns="$ln"
fi
$rm -f blurfl sym

: see whether [:lower:] and [:upper:] are supported character classes
echo " "
up='[A-Z]'
low='[a-z]'
case "`echo AbyZ | $tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
ABYZ)
	echo "Good, your tr supports [:lower:] and [:upper:] to convert case." >&4
	up='[:upper:]'
	low='[:lower:]'
	;;
*)
	echo "Your tr only supports [a-z] and [A-Z] to convert case." >&4
	;;
esac
: set up the translation script tr, must be called with ./tr of course
cat >tr <<EOSC
$startsh
case "\$1\$2" in
'[A-Z][a-z]') exec $tr '$up' '$low';;
'[a-z][A-Z]') exec $tr '$low' '$up';;
esac
exec $tr "\$@"
EOSC
chmod +x tr
$eunicefix tr

: Try to determine whether config.sh was made on this system
case "$config_sh" in
'')
myuname=`( ($uname -a) 2>/dev/null || hostname) 2>&1`
myuname=`echo $myuname | $sed -e 's/^[^=]*=//' -e 's/\///g' | \
	./tr '[A-Z]' '[a-z]' | tr '\012' ' '`
newmyuname="$myuname"
dflt=n
case "$knowitall" in
'')
	if test -f ../config.sh; then
		if $contains myuname= ../config.sh >/dev/null 2>&1; then
			eval "`grep myuname= ../config.sh`"
		fi
		if test "X$myuname" = "X$newmyuname"; then
			dflt=y
		fi
	fi
	;;
*) dflt=y;;
esac

: Get old answers from old config file if Configure was run on the
: same system, otherwise use the hints.
hint=default
cd ..
if test -f config.sh; then
	echo " "
	rp="I see a config.sh file.  Shall I use it to set the defaults?"
	. UU/myread
	case "$ans" in
	n*|N*) echo "OK, I'll ignore it."; mv config.sh config.sh.old;;
	*)  echo "Fetching default answers from your old config.sh file..." >&4
		tmp_n="$n"
		tmp_c="$c"
		. ./config.sh
		cp config.sh UU
		n="$tmp_n"
		c="$tmp_c"
		hint=previous
		;;
	esac
fi
if test ! -f config.sh; then
	$cat <<EOM

First time through, eh?  I have some defaults handy for the following systems:

EOM
	cd hints; ls -C *.sh | $sed 's/\.sh/   /g' >&4
	dflt=''
	: Half the following guesses are probably wrong... If you have better
	: tests or hints, please send them to compiler@eiffel.com
	: The metaconfig authors would also appreciate a copy...
	$test -f /irix && osname=irix
	$test -f /xenix && osname=sco_xenix
	$test -f /dynix && osname=dynix
	$test -f /dnix && osname=dnix
 	$test -f /unicos && osname=unicos && osvers=`$uname -r`
	$test -f /bin/mips && /bin/mips && osname=mips
	$test -d /NextApps && set X `hostinfo | grep 'NeXT Mach.*:' | \
		$sed -e 's/://' -e 's/\./_/'` && osname=next && osvers=$4
	$test -d /usr/apollo/bin && osname=apollo
	$test -f /etc/saf/_sactab && osname=svr4
	$test -d /usr/include/minix && osname=minix
	$test -d /MachTen && osname=machten && \
		osvers=`/usr/etc/version | $awk '{print $2}' | \
		$sed -e 's/[A-Za-z]$//'`
	if $test -f $uname; then
		set X $myuname
		shift

		case "$5" in
		fps*) osname=fps ;;
		mips*)
			case "$4" in
			umips) osname=umips ;;
			*) osname=mips ;;
			esac;;
		[23]100) osname=mips ;;
		next*) osname=next ;;
		news*) osname=news ;;
		i386*)
			if $test -f /etc/kconfig; then
				osname=isc
				if test "$lns" = "ln -s"; then
					osvers=4
				elif $contains _SYSV3 /usr/include/stdio.h > /dev/null 2>&1 ; then
					osvers=3
				elif $contains _POSIX_SOURCE /usr/include/stdio.h > /dev/null 2>&1 ; then
					osvers=2
				fi
			fi
			;;
		esac

		case "$1" in
		aix) osname=aix
			tmp=`( (oslevel) 2>/dev/null || echo "not found") 2>&1`
			case "$tmp" in
			'not found') osvers="$4"."$3" ;;
			'<3240'|'<>3240') osvers=3.2.0 ;;
			'=3240'|'>3240'|'<3250'|'<>3250') osvers=3.2.4 ;;
			'=3250'|'>3250') osvers=3.2.5 ;;
			*) osvers=$tmp;;
			esac
			;;
		dnix) osname=dnix
			osvers="$3"
			;;
		domainos) osname=apollo
			osvers="$3"
			;;
		dgux) osname=dgux 
			osvers="$3"
			;;
		freebsd) osname=freebsd 
			osvers="$3" ;;
		genix) osname=genix ;;
		hp*) osname=hpux 
			case "$3" in
			*.08.*) osvers=9 ;;
			*.09.*) osvers=9 ;;
			*.10.*) osvers=10 ;;
			*)	osvers="$3" ;;
			esac
			;;
		irix) osname=irix
			case "$3" in
			4*) osvers=4 ;;
			5*) osvers=5 ;;
			*)	osvers="$3" ;;
			esac
			;;
		linux) osname=linux
			case "$3" in
			1*) osvers=1 ;;
			*)	osvers="$3" ;;
			esac
			;;
		netbsd*) osname=netbsd 
			osvers="$3"
			;;
		bsd386) osname=bsd386
			osvers=`$uname -r`
			;;
		next*) osname=next ;;
		solaris) osname=solaris
			case "$3" in
			5*) osvers=`echo $3 | $sed 's/^5/2/g'` ;;
			*)	osvers="$3" ;;
			esac
			;;
		sunos) osname=sunos
			case "$3" in
			5*) osname=solaris
				osvers=`echo $3 | $sed 's/^5/2/g'` ;;
			*)	osvers="$3" ;;
			esac
			;;
		titanos) osname=titanos
			case "$3" in
			1*) osvers=1 ;;
			2*) osvers=2 ;;
			3*) osvers=3 ;;
			4*) osvers=4 ;;
			*)	osvers="$3" ;;
			esac
			;;
		ultrix) osname=ultrix
			osvers="$3"
			;;
		osf1)	case "$5" in
				alpha)
					osname=dec_osf
					osvers=`echo "$3" | sed 's/^[vt]//'`
					;;
			hp*)	osname=hp_osf1	;;
			mips)	osname=mips_osf1 ;;
			esac
			;;
		uts) osname=uts 
			osvers="$3"
			;;
		$2) case "$osname" in
			*isc*) ;;
			*freebsd*) ;;
 			svr*)
				: svr4.x or possibly later
				case "svr$3" in	
				${osname}*)
					osname=svr$3
					osvers=$4
					;;
				esac
				case "$osname" in
				svr4.0)
					: Check for ESIX
					if test -f /stand/boot ; then
						eval `grep '^INITPROG=[a-z/0-9]*$' /stand/boot`
						if test -n "$INITPROG" -a -f "$INITPROG"; then
			isesix=`strings -a $INITPROG|grep 'ESIX SYSTEM V/386 Release 4.0'`
							if test -n "$isesix"; then
								osname=esix4
							fi
						fi
					fi
					;;
				esac
				;;
			*)	if test -f /etc/systemid; then
					osname=sco
					set `echo $3 | $sed 's/\./ /g'` $4
					if $test -f sco_$1_$2_$3.sh; then
						osvers=$1.$2.$3
					elif $test -f sco_$1_$2.sh; then
						osvers=$1.$2
					elif $test -f sco_$1.sh; then
						osvers=$1
					fi
				else
					case "$osname" in
					'') : Still unknown.  Probably a generic Sys V.
						osname="sysv"
						osvers="$3"
						;;
					esac
				fi
				;;
			esac
			;;
		*)	case "$osname" in
			'') : Still unknown.  Probably a generic BSD.
				osname="$1"
				osvers="$3"
				;;
			esac
			;;
		esac
	else
		if test -f /vmunix -a -f news_os.sh; then
			(what /vmunix | ../UU/tr '[A-Z]' '[a-z]') > ../UU/kernel.what 2>&1
			if $contains news-os ../UU/kernel.what >/dev/null 2>&1; then
				osname=news_os
			fi
			$rm -f ../UU/kernel.what
		elif test -d c:/.; then
			set X $myuname
			osname=os2
			osvers="$5"
		fi
	fi
	
	: Now look for a hint file osname_osvers, unless one has been
	: specified already.
	case "$hintfile" in
	''|' ')
		file=`echo "${osname}_${osvers}" | $sed -e 's@\.@_@g' -e 's@_$@@'`
		: Also try without trailing minor version numbers.
		xfile=`echo $file | $sed -e 's@_[^_]*$@@'`
		xxfile=`echo $xfile | $sed -e 's@_[^_]*$@@'`
		xxxfile=`echo $xxfile | $sed -e 's@_[^_]*$@@'`
		xxxxfile=`echo $xxxfile | $sed -e 's@_[^_]*$@@'`
		case "$file" in
		'') dflt=none ;;
		*)  case "$osvers" in
			'') dflt=$file
				;;
			*)  if $test -f $file.sh ; then
					dflt=$file
				elif $test -f $xfile.sh ; then
					dflt=$xfile
				elif $test -f $xxfile.sh ; then
					dflt=$xxfile
				elif $test -f $xxxfile.sh ; then
					dflt=$xxxfile
				elif $test -f $xxxxfile.sh ; then
					dflt=$xxxxfile
				elif $test -f "${osname}.sh" ; then
					dflt="${osname}"
				else
					dflt=none
				fi
				;;
			esac
			;;
		esac
		;;
	*)
		dflt=`echo $hintfile | $sed 's/\.sh$//'`
		;;
	esac

	$cat <<EOM

You may give one or more space-separated answers, or "none" if appropriate.
If your OS version has no hints, DO NOT give a wrong version -- say "none".

EOM
	rp="Which of these apply, if any?"
	. ../UU/myread
	tans=$ans
	for file in $tans; do
		if $test -f $file.sh; then
			. ./$file.sh
			$cat $file.sh >> ../UU/config.sh
		elif $test X$tans = X -o X$tans = Xnone ; then
			: nothing
		else
			: Give one chance to correct a possible typo.
			echo "$file.sh does not exist"
			dflt=$file
			rp="hint to use instead?"
			. ../UU/myread
			for file in $ans; do
				if $test -f "$file.sh"; then
					. ./$file.sh
					$cat $file.sh >> ../UU/config.sh
				elif $test X$ans = X -o X$ans = Xnone ; then
					: nothing
				else
					echo "$file.sh does not exist -- ignored."
				fi
			done
		fi
	done

	hint=recommended
	: Remember our hint file for later.
	if $test -f "$file.sh" ; then
		hintfile="$file"
	else
		hintfile=''
	fi

	cd ..
fi
cd UU
;;
*)
	echo " "
	echo "Fetching default answers from $config_sh..." >&4
	tmp_n="$n"
	tmp_c="$c"
	cd ..
	cp $config_sh config.sh 2>/dev/null
	. ./config.sh
	cd UU
	cp ../config.sh .
	n="$tmp_n"
	c="$tmp_c"
	hint=previous
	;;
esac
test "$override" && . ./optdef.sh
myuname="$newmyuname"

: Restore computed paths
for file in $loclist $trylist; do
	eval $file="\$_$file"
done

: who configured the system
cf_time=`$date 2>&1`
(logname > .temp) >/dev/null 2>&1
$test -s .temp || (whoami > .temp) >/dev/null 2>&1
$test -s .temp || echo unknown > .temp
cf_by=`$cat .temp`
$rm -f .temp

: decide how portable to be
case "$d_portable" in
"$define") dflt=y;;
*)	dflt=n;;
esac
$cat <<'EOH'
 
I can set things up so that your shell scripts and binaries are more portable,
at what may be a noticable cost in performance.  In particular, if you
ask to be portable, the following happens:

     1) Shell scripts will rely on the PATH variable rather than using
	the paths derived above.
     2) ~username interpretations will be done at run time rather than
	by Configure.
     3) The system name will be determined at run time, if at all possible.

EOH
rp="Do you expect to run these scripts and binaries on multiple machines?"
. ./myread
case "$ans" in
	y*) d_portable="$define"
	;;
	*)  d_portable="$undef" ;;
esac

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
	echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
	;;
 ~*)
	if $test -f /bin/csh; then
		/bin/csh -f -c "glob \$1"
		failed=\$?
		echo ""
		exit \$failed
	else
		name=\`$expr x\$1 : '..\([^/]*\)'\`
		dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
		if $test ! -d "\$dir"; then
			me=\`basename \$0\`
			echo "\$me: can't locate home directory for: \$name" >&2
			exit 1
		fi
		case "\$1" in
		*/*)
			echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
			;;
		*)
			echo \$dir
			;;
		esac
	fi
	;;
*)
	echo \$1
	;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

: now set up to get a file name
cat <<'EOSC' >getfile
tilde=''
fullpath=''
already=''
skip=''
none_ok=''
exp_file=''
nopath_ok=''
orig_rp="$rp"
orig_dflt="$dflt"

case "$fn" in
*\(*)
	expr $fn : '.*(\(.*\)).*' | tr ',' '\012' >getfile.ok
	fn=`echo $fn | sed 's/(.*)//'`
	;;
esac

case "$fn" in
*:*)
	loc_file=`expr $fn : '.*:\(.*\)'`
	fn=`expr $fn : '\(.*\):.*'`
	;;
esac

case "$fn" in
*~*) tilde=true;;
esac
case "$fn" in
*/*) fullpath=true;;
esac
case "$fn" in
*+*) skip=true;;
esac
case "$fn" in
*n*) none_ok=true;;
esac
case "$fn" in
*e*) exp_file=true;;
esac
case "$fn" in
*p*) nopath_ok=true;;
esac

case "$fn" in
*f*) type='File';;
*d*) type='Directory';;
*l*) type='Locate';;
esac

what="$type"
case "$what" in
Locate) what='File';;
esac

case "$exp_file" in
'')
	case "$d_portable" in
	"$define") ;;
	*) exp_file=true;;
	esac
	;;
esac

cd ..
while test "$type"; do
	redo=''
	rp="$orig_rp"
	dflt="$orig_dflt"
	case "$tilde" in
	true) rp="$rp (~name ok)";;
	esac
	. UU/myread
	if test -f UU/getfile.ok && \
		$contains "^$ans\$" UU/getfile.ok >/dev/null 2>&1
	then
		value="$ans"
		ansexp="$ans"
		break
	fi
	case "$ans" in
	none)
		value=''
		ansexp=''
		case "$none_ok" in
		true) type='';;
		esac
		;;
	*)
		case "$tilde" in
		'') value="$ans"
			ansexp="$ans";;
		*)
			value=`UU/filexp $ans`
			case $? in
			0)
				if test "$ans" != "$value"; then
					echo "(That expands to $value on this system.)"
				fi
				;;
			*) value="$ans";;
			esac
			ansexp="$value"
			case "$exp_file" in
			'') value="$ans";;
			esac
			;;
		esac
		case "$fullpath" in
		true)
			case "$ansexp" in
			/*) value="$ansexp" ;;
			*)
				redo=true
				case "$already" in
				true)
				echo "I shall only accept a full path name, as in /bin/ls." >&4
				echo "Use a ! shell escape if you wish to check pathnames." >&4
					;;
				*)
				echo "Please give a full path name, starting with slash." >&4
					case "$tilde" in
					true)
				echo "Note that using ~name is ok provided it expands well." >&4
						already=true
						;;
					esac
				esac
				;;
			esac
			;;
		esac
		case "$redo" in
		'')
			case "$type" in
			File)
				if test -f "$ansexp"; then
					type=''
				elif test -r "$ansexp" || (test -h "$ansexp") >/dev/null 2>&1
				then
					echo "($value is not a plain file, but that's ok.)"
					type=''
				fi
				;;
			Directory)
				if test -d "$ansexp"; then
					type=''
				fi
				;;
			Locate)
				if test -d "$ansexp"; then
					echo "(Looking for $loc_file in directory $value.)"
					value="$value/$loc_file"
					ansexp="$ansexp/$loc_file"
				fi
				if test -f "$ansexp"; then
					type=''
				fi
				case "$nopath_ok" in
				true)	case "$value" in
					*/*) ;;
					*)	echo "Assuming $value will be in people's path."
						type=''
						;;
					esac
					;;
				esac
				;;
			esac

			case "$skip" in
			true) type='';
			esac

			case "$type" in
			'') ;;
			*)
				if test "$fastread" = yes; then
					dflt=y
				else
					dflt=n
				fi
				rp="$what $value doesn't exist.  Use that name anyway?"
				. UU/myread
				dflt=''
				case "$ans" in
				y*) type='';;
				*) echo " ";;
				esac
				;;
			esac
			;;
		esac
		;;
	esac
done
cd UU
ans="$value"
rp="$orig_rp"
dflt="$orig_dflt"
rm -f getfile.ok
EOSC

: see what memory models we can support
case "$models" in
'')
	$cat >pdp11.c <<'EOP'
main() {
#ifdef pdp11
	exit(0);
#else
	exit(1);
#endif
}
EOP
	cc -o pdp11 pdp11.c >/dev/null 2>&1
	if ./pdp11 2>/dev/null; then
		dflt='unsplit split'
	else
		tans=`./loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
		case "$tans" in
		X) dflt='none';;
		*) if $test -d /lib/small || $test -d /usr/lib/small; then
				dflt='small'
			else
				dflt=''
			fi
			if $test -d /lib/medium || $test -d /usr/lib/medium; then
				dflt="$dflt medium"
			fi
			if $test -d /lib/large || $test -d /usr/lib/large; then
				dflt="$dflt large"
			fi
			if $test -d /lib/huge || $test -d /usr/lib/huge; then
				dflt="$dflt huge"
			fi
		esac
	fi;;
*) dflt="$models";;
esac
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Venix systems may wish to put "none" and let the compiler figure things out.
(In the following question multiple model names should be space separated.)

EOM
rp="Which memory models are supported?"
. ./myread
models="$ans"

case "$models" in
none)
	small=''
	medium=''
	large=''
	huge=''
	unsplit=''
	split=''
	;;
*split)
	case "$split" in
	'') if $contains '\-i' $sysman/ld.1 >/dev/null 2>&1 || \
			 $contains '\-i' $sysman/cc.1 >/dev/null 2>&1; then
			dflt='-i'
		else
			dflt='none'
		fi;;
	*) dflt="$split";;
	esac
	rp="What flag indicates separate I and D space?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';;
	esac
	split="$tans"
	unsplit='';;
*large*|*small*|*medium*|*huge*)
	case "$models" in
	*large*)
		case "$large" in
		'') dflt='-Ml';;
		*) dflt="$large";;
		esac
	rp="What flag indicates large model?"
	. ./myread
	tans="$ans"
	case "$tans" in
	none) tans='';
	esac
	large="$tans";;
	*) large='';;
	esac
	case "$models" in
	*huge*) case "$huge" in
		'') dflt='-Mh';;
		*) dflt="$huge";;
		esac
		rp="What flag indicates huge model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		huge="$tans";;
	*) huge="$large";;
	esac
	case "$models" in
	*medium*) case "$medium" in
		'') dflt='-Mm';;
		*) dflt="$medium";;
		esac
		rp="What flag indicates medium model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		medium="$tans";;
	*) medium="$large";;
	esac
	case "$models" in
	*small*) case "$small" in
		'') dflt='none';;
		*) dflt="$small";;
		esac
		rp="What flag indicates small model?"
		. ./myread
		tans="$ans"
		case "$tans" in
		none) tans='';
		esac
		small="$tans";;
	*) small='';;
	esac
	;;
*)
	echo "Unrecognized memory models--you may have to edit Makefile.SH" >&4
	;;
esac

: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
echo exit 1 >bsd
echo exit 1 >usg
echo exit 1 >v7
echo exit 1 >osf1
echo exit 1 >eunice
echo exit 1 >xenix
echo exit 1 >venix
echo exit 1 >os2
$cat /usr/include/signal.h /usr/include/sys/signal.h >foo 2>/dev/null
if test -f /osf_boot || $contains 'OSF/1' /usr/include/ctype.h >/dev/null 2>&1
then
	echo "Looks kind of like an OSF/1 system, but we'll see..."
	echo exit 0 >osf1
elif test `echo abc | tr a-z A-Z` = Abc ; then
	xxx=`./loc addbib blurfl $pth`
	if $test -f $xxx; then
	echo "Looks kind of like a USG system with BSD features, but we'll see..."
		echo exit 0 >bsd
		echo exit 0 >usg
	else
		if $contains SIGTSTP foo >/dev/null 2>&1 ; then
			echo "Looks kind of like an extended USG system, but we'll see..."
		else
			echo "Looks kind of like a USG system, but we'll see..."
		fi
		echo exit 0 >usg
	fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
	echo "Looks kind of like a BSD system, but we'll see..."
	echo exit 0 >bsd
else
	echo "Looks kind of like a Version 7 system, but we'll see..."
	echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
	$cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
	echo exit 0 >eunice
: it so happens the Eunice I know will not run shell scripts in Unix format
	;;
*)
	echo " "
	echo "Congratulations.  You aren't running Eunice."
	;;
esac
case "$p_" in
:) ;;
*)
	$cat <<'EOI'
I have the feeling something is not exactly right, however...don't tell me...
lemme think...does HAL ring a bell?...no, of course, you're only running OS/2!
EOI
	echo exit 0 >os2
	;;
esac
if test -f /xenix; then
	echo "Actually, this looks more like a XENIX system..."
	echo exit 0 >xenix
else
	echo " "
	echo "It's not Xenix..."
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
	echo "Actually, this looks more like a VENIX system..."
	echo exit 0 >venix
else
	echo " "
	if ./xenix; then
		: null
	else
		echo "Nor is it Venix..."
	fi
fi
chmod +x bsd usg v7 osf1 eunice xenix venix os2
$eunicefix bsd usg v7 osf1 eunice xenix venix os2
$rm -f foo

: see if we need a special compiler
echo " "
if ./usg; then
	case "$cc" in
	'') case "$Mcc" in
		/*) dflt='Mcc';;
		*) case "$large" in
			-M*) dflt='cc';;
			*)	if $contains '\-M' $sysman/cc.1 >/dev/null 2>&1 ; then
					if $contains '\-M' $sysman/cpp.1 >/dev/null 2>&1; then
						dflt='cc'
					else
						dflt='cc -M'
					fi
				else
					dflt='cc'
				fi;;
			esac;;
		esac;;
	*)  dflt="$cc";;
	esac
	$cat <<'EOM'
On some systems the default C compiler will not resolve multiple global
references that happen to have the same name.  On some such systems the "Mcc"
command may be used to force these to be resolved.  On other systems a "cc -M"
command is required.  (Note that the -M flag on other systems indicates a
memory model to use!) If you have the Gnu C compiler, you might wish to use
that instead.

EOM
	rp="What command will force resolution on this system?"
	. ./myread
	cc="$ans"
else
	case "$cc" in
	'') dflt=cc;;
	*) dflt="$cc";;
	esac
	rp="Use which C compiler?"
	. ./myread
	cc="$ans"
fi
echo " "
echo "Checking for GNU cc in disguise and/or its version number..." >&4
$cat >gccvers.c <<EOM
#include <stdio.h>
int main() {
#ifdef __GNUC__
#ifdef __VERSION__
	printf("%s\n", __VERSION__);
#else
	printf("%s\n", "1");
#endif
#endif
	exit(0);
}
EOM
if $cc -o gccvers gccvers.c >/dev/null 2>&1; then
	gccversion=`./gccvers`
	case "$gccversion" in
	'') echo "You are not using GNU cc." ;;
	*)  echo "You are using GNU cc $gccversion." ;;
	esac
else
	echo " "
	echo "*** WHOA THERE!!! ***" >&4
	echo "    Your C compiler \"$cc\" doesn't seem to be working!" >&4
	case "$knowitall" in
	'')
	echo "    You'd better start hunting for one and let me know about it." >&4
		exit 1
		;;
	esac
fi
$rm -f gccvers*
case "$gccversion" in
1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
esac

: What should the include directory be ?
echo " "
$echo $n "Hmm...  $c"
dflt='/usr/include'
incpath=''
mips_type=''
if $test -f /bin/mips && /bin/mips; then
	echo "Looks like a MIPS system..."
	$cat >usr.c <<'EOCP'
#ifdef SYSTYPE_BSD43
/bsd43
#endif
EOCP
	if $cc -E usr.c > usr.out && $contains / usr.out >/dev/null 2>&1; then
		dflt='/bsd43/usr/include'
		incpath='/bsd43'
		mips_type='BSD 4.3'
	else
		mips_type='System V'
	fi
	$rm -f usr.c usr.out
	echo "and you're compiling with the $mips_type compiler and libraries."
	echo "exit 0" >mips
else
	echo "Doesn't look like a MIPS system."
	echo "exit 1" >mips
fi
chmod +x mips
$eunicefix mips
echo " "
case "$usrinc" in
'') ;;
*) dflt="$usrinc";;
esac
fn=d/
rp='Where are the include files you want to use?'
. ./getfile
usrinc="$ans"

: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..." >&4
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
cd ..
echo 'cat >.$$.c; '"$cc"' -E ${1+"$@"} .$$.c; rm .$$.c' >cppstdin
chmod 755 cppstdin
wrapper=`pwd`/cppstdin
ok='false'
cd UU

if $test "X$cppstdin" != "X" && \
	$cppstdin $cppminus <testcpp.c >testcpp.out 2>&1 && \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
then
	echo "You used to use $cppstdin $cppminus so we'll use that again."
	case "$cpprun" in
	'') echo "But let's see if we can live without a wrapper..." ;;
	*)
		if $cpprun $cpplast <testcpp.c >testcpp.out 2>&1 && \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "(And we'll use $cpprun $cpplast to preprocess directly.)"
			ok='true'
		else
			echo "(However, $cpprun $cpplast does not work, let's see...)"
		fi
		;;
	esac
else
	case "$cppstdin" in
	'') ;;
	*)
		echo "Good old $cppstdin $cppminus does not seem to be of any help..."
		;;
	esac
fi

if $ok; then
	: nothing
elif echo 'Maybe "'"$cc"' -E" will work...'; \
	$cc -E <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -E -" will work...'; \
	$cc -E - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	x_cpp="$cc -E"
	x_minus='-';
elif echo 'Nope...maybe "'"$cc"' -P" will work...'; \
	$cc -P <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yipee, that works!"
	x_cpp="$cc -P"
	x_minus='';
elif echo 'Nope...maybe "'"$cc"' -P -" will work...'; \
	$cc -P - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "At long last!"
	x_cpp="$cc -P"
	x_minus='-';
elif echo 'No such luck, maybe "'$cpp'" will work...'; \
	$cpp <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "It works!"
	x_cpp="$cpp"
	x_minus='';
elif echo 'Nixed again...maybe "'$cpp' -" will work...'; \
	$cpp - <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Hooray, it works!  I was beginning to wonder."
	x_cpp="$cpp"
	x_minus='-';
elif echo 'Uh-uh.  Time to get fancy.  Trying a wrapper...'; \
	$wrapper <testcpp.c >testcpp.out 2>&1; \
	$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	x_cpp="$wrapper"
	x_minus=''
	echo "Eureka!"
else
	dflt=''
	rp="No dice.  I can't find a C preprocessor.  Name one:"
	. ./myread
	x_cpp="$ans"
	x_minus=''
	$x_cpp <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "OK, that will do." >&4
	else
echo "Sorry, I can't get that to work.  Go find one and rerun Configure." >&4
		exit 1
	fi
fi

case "$ok" in
false)
	cppstdin="$x_cpp"
	cppminus="$x_minus"
	cpprun="$x_cpp"
	cpplast="$x_minus"
	set X $x_cpp
	shift
	case "$1" in
	"$cpp")
		echo "Perhaps can we force $cc -E using a wrapper..."
		if $wrapper <testcpp.c >testcpp.out 2>&1; \
			$contains 'abc.*xyz' testcpp.out >/dev/null 2>&1
		then
			echo "Yup, we can."
			cppstdin="$wrapper"
			cppminus='';
		else
			echo "Nope, we'll have to live without it..."
		fi
		;;
	esac
	case "$cpprun" in
	"$wrapper")
		cpprun=''
		cpplast=''
		;;
	esac
	;;
esac

case "$cppstdin" in
"$wrapper") ;;
*) $rm -f $wrapper;;
esac
$rm -f testcpp.c testcpp.out

: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' ') dflt='none';;
'') dflt='-O';;
*) dflt="$optimize";;
esac
$cat <<EOH

Some C compilers have problems with their optimizers, by default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might want
to use the symbolic debugger, which uses the -g flag (on traditional Unix
systems).  Either flag can be specified here.  To use neither flag, specify
the word "none".

EOH
rp="What optimizer/debugger flag should be used?"
. ./myread
optimize="$ans"
case "$optimize" in
'none') optimize=" ";;
esac

dflt=''
case "$ccflags" in
'')	
	case "$gccversion" in
	1*) dflt='-fpcc-struct-return' ;;
	esac
	case "$optimize" in
	*-g*) dflt="$dflt -DDEBUGGING";;
	esac
	case "$gccversion" in
	2*) if test -d /etc/conf/kconfig.d &&
			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
		then
			dflt="$dflt -posix"
		fi
		;;
	esac
	;;
esac

case "$mips_type" in
*BSD*) ;;
'') ;;
*) inclwanted="$inclwanted $usrinc/bsd";;
esac
for thisincl in $inclwanted; do
	if $test -d $thisincl; then
		if $test x$thisincl != x$usrinc; then
			case "$dflt" in
			*$thisincl*);;
			*) dflt="$dflt -I$thisincl";;
			esac
		fi
	fi
done

inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
else
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'

if ./osf1; then
	set signal.h __LANGUAGE_C__; eval $inctest
else
	set signal.h LANGUAGE_C; eval $inctest
fi
set signal.h NO_PROTOTYPE; eval $inctest
set signal.h _NO_PROTO; eval $inctest

case "$dflt" in
'') dflt=none;;
esac
case "$ccflags" in
'') ;;
*) dflt="$ccflags";;
esac
$cat <<EOH

Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want $package to honor its debug switch, you should include -DDEBUG here.
To use no flags, specify the word "none".

EOH
set X $dflt
shift
dflt=${1+"$@"}
rp="Any additional cc flags?"
. ./myread
case "$ans" in
none) ccflags='';;
*) ccflags="$ans";;
esac

: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$gccversion" in
1*) cppflags="$cppflags -D__GNUC__"
esac
case "$mips_type" in
'');;
*BSD*) cppflags="$cppflags -DSYSTYPE_BSD43";;
esac
case "$cppflags" in
'');;
*)
	echo " "
	echo "Let me guess what the preprocessor flags are..." >&4
	set X $cppflags
	shift
	cppflags=''
	$cat >cpp.c <<'EOM'
#define BLURFL foo

BLURFL xx LFRULB
EOM
	previous=''
	for flag in $*
	do
		case "$flag" in
		-*) ftry="$flag";;
		*) ftry="$previous $flag";;
		esac
		if $cppstdin -DLFRULB=bar $ftry $cppminus <cpp.c \
			>cpp1.out 2>/dev/null && \
			$cpprun -DLFRULB=bar $ftry $cpplast <cpp.c \
			>cpp2.out 2>/dev/null && \
			$contains 'foo.*xx.*bar' cpp1.out >/dev/null 2>&1 && \
			$contains 'foo.*xx.*bar' cpp2.out >/dev/null 2>&1
		then
			cppflags="$cppflags $ftry"
			previous=''
		else
			previous="$flag"
		fi
	done
	set X $cppflags
	shift
	cppflags=${1+"$@"}
	case "$cppflags" in
	*-*)  echo "They appear to be: $cppflags";;
	esac
	$rm -f cpp.c cpp?.out
	;;
esac

: flags used in final linking phase
case "$ldflags" in
'') if ./venix; then
		dflt='-i -z'
	else
		dflt=''
	fi
	case "$ccflags" in
	*-posix*) dflt="$dflt -posix" ;;
	esac
	case "$dflt" in
	'') dflt='none' ;;
	esac
	;;
*) dflt="$ldflags";;
esac
echo " "
rp="Any additional ld flags (NOT including libraries)?"
. ./myread
case "$ans" in
none) ldflags='';;
*) ldflags="$ans";;
esac
rmlist="$rmlist pdp11"

: coherency check
echo " "
echo "Checking your choice of C compiler and flags for coherency..." >&4
set X $cc $optimize $ccflags $ldflags try.c -o try
shift
$cat >try.msg <<EOM
I've tried to compile and run a simple program with:

	$*
	./try

and I got the following output:

EOM
$cat > try.c <<'EOF'
#include <stdio.h>
main() { exit(0); }
EOF
dflt=y
if sh -c "$cc $optimize $ccflags $ldflags try.c -o try" >>try.msg 2>&1; then
	if sh -c './try' >>try.msg 2>&1; then
		dflt=n
	else
		echo "The program compiled OK, but exited with status $?." >>try.msg
		rp="You have a problem.  Shall I abort Configure"
		dflt=y
	fi
else
	echo "I can't compile the test program." >>try.msg
	rp="You have a BIG problem.  Shall I abort Configure"
	dflt=y
fi
case "$dflt" in
y)
	$cat try.msg
	case "$knowitall" in
	'')
		echo "(The supplied flags might be incorrect with this C compiler.)"
		;;
	*) dflt=n;;
	esac
	echo " "
	. ./myread
	case "$ans" in
	n*|N*) ;;
	*)	echo "Ok.  Stopping Configure." >&4
		exit 1
		;;
	esac
	;;
n) echo "OK, that should do.";;
esac
$rm -f try try.* core

: Initialize h_fcntl
h_fcntl=false

: Initialize h_sysfile
h_sysfile=false

: Set private lib path
case "$plibpth" in
'') if ./mips; then
		plibpth="$incpath/usr/lib /usr/local/lib /usr/ccs/lib"
	fi;;
esac
case "$libpth" in
' ') dlist='';;
'') dlist="$plibpth $glibpth";;
*) dlist="$libpth";;
esac

: Now check and see which directories actually exist, avoiding duplicates
libpth=''
for xxx in $dlist
do
    if $test -d $xxx; then
		case " $libpth " in
		*" $xxx "*) ;;
		*) libpth="$libpth $xxx";;
		esac
    fi
done
$cat <<'EOM'

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

EOM
case "$libpth" in
'') dflt='none';;
*)
	set X $libpth
	shift
	dflt=${1+"$@"}
	;;
esac
rp="Directories to use for library searches?"
. ./myread
case "$ans" in
none) libpth=' ';;
*) libpth="$ans";;
esac

: compute shared library extension
case "$so" in
'')
	if xxx=`./loc libc.sl X $libpth`; $test -f "$xxx"; then
		dflt='sl'
	else
		dflt='so'
	fi
	;;
*) dflt="$so";;
esac
$cat <<EOM

On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remaining
of this configuration.

EOM
rp='What is the file extension used for shared libraries?'
. ./myread
so="$ans"

: Looking for optional libraries
echo " "
echo "Checking for optional libraries..." >&4
case "$libs" in
' '|'') dflt='';;
*) dflt="$libs";;
esac
case "$libswanted" in
'') libswanted='c_s';;
esac
for thislib in $libswanted; do
	
	if xxx=`./loc lib$thislib.$so.[0-9]'*' X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib$thislib.$so X $libpth` ; $test -f "$xxx"; then
		echo "Found -l$thislib (shared)."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib$thislib.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc $thislib.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	elif xxx=`./loc lib${thislib}_s.a X $libpth`; $test -f "$xxx"; then
		echo "Found -l${thislib}_s."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l${thislib}_s";;
		esac
	elif xxx=`./loc Slib$thislib.a X $xlibpth`; $test -f "$xxx"; then
		echo "Found -l$thislib."
		case " $dflt " in
		*"-l$thislib "*);;
		*) dflt="$dflt -l$thislib";;
		esac
	else
		echo "No -l$thislib."
	fi
done
set X $dflt
shift
dflt="$*"
case "$libs" in
'') dflt="$dflt";;
*) dflt="$libs";;
esac
case "$dflt" in
' '|'') dflt='none';;
esac

$cat <<EOM
 
Some versions of Unix support shared libraries, which make executables smaller
but make load time slightly longer.

On some systems, mostly newer Unix System V's, the shared library is included
by putting the option "-lc_s" as the last thing on the cc command line when
linking.  Other systems use shared libraries by default.  There may be other
libraries needed to compile $package on your machine as well.  If your system
needs the "-lc_s" option, include it here.  Include any other special libraries
here as well.  Say "none" for none.
EOM

echo " "
rp="Any additional libraries?"
. ./myread
case "$ans" in
none) libs=' ';;
*) libs="$ans";;
esac

: see if nm is to be used to determine whether a symbol is defined or not
case "$usenm" in
'')
	dflt=`egrep 'inlibc|csym' ../Configure | wc -l 2>/dev/null`
	if $test $dflt -gt 20; then
		dflt=y
	else
		dflt=n
	fi
	;;
*)
	case "$usenm" in
	true) dflt=y;;
	*) dflt=n;;
	esac
	;;
esac
$cat <<EOM

I can use 'nm' to extract the symbols from your C libraries. This is a time
consuming task which may generate huge output on the disk (up to 3 megabytes)
but that should make the symbols extraction faster. The alternative is to skip
the 'nm' extraction part and to compile a small test program instead to
determine whether each symbol is present. If you have a fast C compiler and/or
if your 'nm' output cannot be parsed, this may be the best solution.

EOM
rp='Shall I use nm to extract C symbols from the libraries?'
. ./myread
case "$ans" in
n|N) usenm=false;;
*) usenm=true;;
esac

runnm=$usenm
case "$reuseval" in
true) runnm=false;;
esac

: nm options which may be necessary
case "$nm_opt" in
'') if $test -f /mach_boot; then
		nm_opt=''
	elif $test -d /usr/ccs/lib; then
		nm_opt='-p'
	elif $test -f /dgux; then
		nm_opt='-p'
	else
		nm_opt='-C'
	fi;;
esac

case "$runnm" in
true)
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') libc=unknown
	case "$libs" in
	*-lc_s*) libc=`./loc libc_s.a $libc $libpth`
	esac
	;;
esac
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-lc|-lc_s)
		: Handle C library specially below.
		;;
	-l*)
		thislib=`echo $thislib | $sed -e 's/^-l//'`
		if try=`./loc lib$thislib.$so.'*' X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.$so X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib.a X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc lib$thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc $thislib X $libpth`; $test -f "$try"; then
			:
		elif try=`./loc Slib$thislib.a X $xlibpth`; $test -f "$try"; then
			:
		else
			try=''
		fi
		libnames="$libnames $try"
		;;
	*) libnames="$libnames $thislib" ;;
	esac
	done
	;;
esac
xxx=normal
case "$libc" in
unknown)
	set /usr/ccs/lib/libc.$so
	$test -r $1 || set /lib/libc.$so
	$test -r $1 || set /usr/lib/libc.$so
	$test -r $1 || set /usr/shlib/libc.$so
	$test -r $1 || \
		set `echo blurfl; echo /usr/lib/libc.$so.[0-9]* | \
		tr ' ' '\012' | egrep -v '\.[A-Za-z]*$' | $sed -e '
			h
			s/[0-9][0-9]*/0000&/g
			s/0*\([0-9][0-9][0-9][0-9][0-9]\)/\1/g
			G
			s/\n/ /' | \
		 sort | $sed -e 's/^.* //'`
	eval set \$$#
	$test -r $1 || set /lib/libsys_s.a
	;;
*)
	set blurfl
	;;
esac
if $test -r "$1"; then
	echo "Your (shared) C library seems to be in $1."
	libc="$1"
elif $test -r /lib/libc && $test -r /lib/clib; then
	echo "Your C library seems to be in both /lib/clib and /lib/libc."
	xxx=apollo
	libc='/lib/clib /lib/libc'
	if $test -r /lib/syslib; then
		echo "(Your math library is in /lib/syslib.)"
		libc="$libc /lib/syslib"
	fi
elif $test -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	echo "Your C library seems to be in $libc, as you said before."
elif $test -r $incpath/usr/lib/libc.a; then
	libc=$incpath/usr/lib/libc.a;
	echo "Your C library seems to be in $libc.  That's fine."
elif $test -r /lib/libc.a; then
	libc=/lib/libc.a;
	echo "Your C library seems to be in $libc.  You're normal."
else
	if tans=`./loc libc.a blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc libc blurfl/dyick $libpth`; $test -r "$tans"; then
		libnames="$libnames "`./loc clib blurfl/dyick $libpth`
	elif tans=`./loc clib blurfl/dyick $libpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Slibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	elif tans=`./loc Mlibc.a blurfl/dyick $xlibpth`; $test -r "$tans"; then
		:
	else
		tans=`./loc Llibc.a blurfl/dyick $xlibpth`
	fi
	if $test -r "$tans"; then
		echo "Your C library seems to be in $tans, of all places."
		libc=$tans
	else
		libc='blurfl'
	fi
fi
if $test $xxx = apollo -o -r "$libc" || (test -h "$libc") >/dev/null 2>&1; then
	dflt="$libc"
	cat <<EOM

If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.

EOM
else
	dflt=''
	echo $libpth | tr ' ' '\012' | sort | uniq > libpath
	cat >&4 <<EOM
I can't seem to find your C library.  I've looked in the following places:

EOM
	$sed 's/^/	/' libpath
	cat <<EOM

None of these seems to contain your C library. I need to get its name...

EOM
fi
fn=f
rp='Where is your C library?'
. ./getfile
libc="$ans"

echo " "
echo $libc $libnames | tr ' ' '\012' | sort | uniq > libnames
set X `cat libnames`
shift
xxx=files
case $# in 1) xxx=file; esac
echo "Extracting names from the following $xxx for later perusal:" >&4
echo " "
$sed 's/^/	/' libnames >&4
echo " "
$echo $n "This may take a while...$c" >&4

nm $nm_opt $* 2>/dev/null >libc.tmp
$echo $n ".$c"
$grep fprintf libc.tmp > libc.ptf
xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
xrun='eval "<libc.tmp $com >libc.list"; echo "done" >&4'
xxx='[ADTSIW]'
if com="$sed -n -e 's/__IO//' -e 's/^.* $xxx  *_[_.]*//p' -e 's/^.* $xxx //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$grep '|' | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
				-e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e '/Def. Text/s/.* \([^ ]*\)\$/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
elif com="$sed -n -e 's/^.*| //p'";\
	eval $xscan;\
	$contains '^fprintf$' libc.list >/dev/null 2>&1; then
		eval $xrun
else
	nm -p $* 2>/dev/null >libc.tmp
	$grep fprintf libc.tmp > libc.ptf
	if com="$sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'";\
		eval $xscan; $contains '^fprintf$' libc.list >/dev/null 2>&1
	then
		nm_opt='-p'
		eval $xrun
	else
		echo " "
		echo "nm didn't seem to work right. Trying ar instead..." >&4
		com=''
		if ar t $libc > libc.tmp; then
			for thisname in $libnames; do
				ar t $thisname >>libc.tmp
			done
			$sed -e 's/\.o$//' < libc.tmp > libc.list
			echo "Ok." >&4
		else
			echo "ar didn't seem to work right." >&4
			echo "Maybe this is a Cray...trying bld instead..." >&4
			if bld t $libc | $sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list
			then
				for thisname in $libnames; do
					bld t $libnames | \
					$sed -e 's/.*\///' -e 's/\.o:.*$//' >>libc.list
					ar t $thisname >>libc.tmp
				done
				echo "Ok." >&4
			else
				echo "That didn't work either.  Giving up." >&4
				exit 1
			fi
		fi
	fi
fi
nm_extract="$com"
if $test -f /lib/syscalls.exp; then
	echo " "
	echo "Also extracting names from /lib/syscalls.exp for good ole AIX..." >&4
	$sed -n 's/^\([^ 	]*\)[ 	]*syscall$/\1/p' /lib/syscalls.exp >>libc.list
fi
;;
esac
$rm -f libnames libpath

: is a C symbol defined?
csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tc=""; tdc="";;
-a) tf=libc.tmp; tc="[0]"; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tc="()"; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	case "$runnm" in
	true)
		if $contains $tlook $tf >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;;
	*)
		echo "main() { extern short $1$tdc; printf(\"%hd\", $1$tc); }" > t.c;
		if $cc $ccflags $ldflags -o t t.c $libs >/dev/null 2>&1;
		then tval=true;
		else tval=false;
		fi;
		$rm -f t t.c;;
	esac;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;;
esac;
eval "$2=$tval"'

: set up the script used to warn in case of inconsistency
cat <<'EOSC' >whoa
dflt=y
echo " "
echo "*** WHOA THERE!!! ***" >&4
echo "    The $hint value for \$$var on this machine was \"$was\"!" >&4
rp="    Keep the $hint value?"
. ./myread
case "$ans" in
y) td=$was; tu=$was;;
esac
EOSC

: define an is-in-libc? function
inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'

: determine filename position in cpp output
echo " "
echo "Computing filename position in cpp output for #include directives..." >&4
echo '#include <stdio.h>' > foo.c
$cat >fieldn <<EOF
$startsh
$cppstdin $cppflags $cppminus <foo.c 2>/dev/null | \
$grep '^[ 	]*#.*stdio\.h' | \
while read cline; do
	pos=1
	set \$cline
	while $test \$# -gt 0; do
		if $test -r \`echo \$1 | $tr -d '"'\`; then
			echo "\$pos"
			exit 0
		fi
		shift
		pos=\`expr \$pos + 1\`
	done
done
EOF
chmod +x fieldn
fieldn=`./fieldn`
$rm -f foo.c fieldn
case $fieldn in
'') pos='???';;
1) pos=first;;
2) pos=second;;
3) pos=third;;
*) pos="${fieldn}th";;
esac
echo "Your cpp writes the filename in the $pos field of the line."

: locate header file
$cat >findhdr <<EOF
$startsh
wanted=\$1
name=''
if test -f $usrinc/\$wanted; then
	echo "$usrinc/\$wanted"
	exit 0
fi
awkprg='{ print \$$fieldn }'
echo "#include <\$wanted>" > foo\$\$.c
$cppstdin $cppminus $cppflags < foo\$\$.c 2>/dev/null | \
$grep "^[ 	]*#.*\$wanted" | \
while read cline; do
	name=\`echo \$cline | $awk "\$awkprg" | $tr -d '"'\`
	case "\$name" in
	*/\$wanted) echo "\$name"; exit 0;;
	*) name='';;
	esac;
done;
$rm -f foo\$\$.c;
case "\$name" in
'') exit 1;;
esac
EOF
chmod +x findhdr

: access call always available on UNIX
set access d_access
eval $inlibc

: locate the flags for 'access()'
case "$d_access" in
"$define")
	echo " "
	$cat >access.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
#ifdef I_UNISTD
#include <unistd.h>
#endif
main() {
	exit(R_OK);
}
EOCP
	: check sys/file.h first, no particular reason here
	if $test `./findhdr sys/file.h` && \
		$cc $cppflags -DI_SYS_FILE access.c -o access >/dev/null 2>&1 ; then
		h_sysfile=true;
		echo "<sys/file.h> defines the *_OK access constants." >&4
	elif $test `./findhdr fcntl.h` && \
		$cc $cppflags -DI_FCNTL access.c -o access >/dev/null 2>&1 ; then
		h_fcntl=true;
		echo "<fcntl.h> defines the *_OK access constants." >&4
	else
		echo "I can't find the four *_OK access constants--I'll use mine." >&4
	fi
	;;
esac
$rm -f access*

: see if bcmp exists
set bcmp d_bcmp
eval $inlibc

: see if bcopy exists
set bcopy d_bcopy
eval $inlibc

: function used to set $1 to $val
setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'

: see if _setjmp and _longjmp exists
echo " "
case "$d_bsdjmp" in
'')
	$cat >set.c <<EOP
#include <setjmp.h>
jmp_buf env;
int set = 1;
main()
{
	if (_setjmp(env))
		exit(set);
	set = 0;
	_longjmp(env, 1);
	exit(1);
}
EOP
	if $cc set.c -o set $libs >/dev/null 2>&1; then
		if ./set >/dev/null 2>&1; then
			echo "Good! You have BSD _setjmp and _longjmp routines." >&4
			val="$define"
		else
			$cat <<EOM
Uh-Oh! You have BSD _setjmp and _longjmp, but they do not work properly!!
EOM
			val="$undef"
		fi
	else
		if ./usg; then
			echo "You do not have _setjmp and _longjmp, but that's fine." >&4
		else
			cat <<EOM
It sounds strange for a BSD system to miss _setjmp and _longjmp, but that's ok.
EOM
		fi
		val="$undef"
	fi
	;;
*) val="$d_bsdjmp"
	case "$d_bsdjmp" in
	$define) echo "Good! You have BSD _setjmp and _longjmp routines." >&4;;
	$undef) echo "You do not have _setjmp and _longjmp, but that's fine." >&4;;
	esac
	;;
esac
set d_bsdjmp
eval $setvar
$rm -f set.c set

: see if bzero exists
set bzero d_bzero
eval $inlibc

: see if chown exists
set chown d_chown
eval $inlibc

: see if this is a dirent system
echo " "
if xinc=`./findhdr dirent.h`; $test "$xinc"; then
	val="$define"
	echo "<dirent.h> found." >&4
else
	val="$undef"
	if xinc=`./findhdr sys/dir.h`; $test "$xinc"; then
		echo "<sys/dir.h> found." >&4
		echo " "
	else
		xinc=`./findhdr sys/ndir.h`
	fi
	echo "<dirent.h> NOT found." >&4
fi
set i_dirent
eval $setvar


: see if the directory entry stores field length
echo " "
$cppstdin $cppflags $cppminus < "$xinc" > try.c
if $contains 'd_namlen' try.c >/dev/null 2>&1; then
	echo "Good, your directory entry keeps length information in d_namlen." >&4
	val="$define"
else
	echo "Your directory entry does not know about the d_namlen field." >&4
	val="$undef"
fi
set d_dirnamlen
eval $setvar
$rm -f try.c

: see if dlopen exists
xxx_runnm="$runnm"
runnm=false
set dlopen d_dlopen
eval $inlibc
runnm="$xxx_runnm"

: see if dup2 exists
set dup2 d_dup2
eval $inlibc

: see if pipe correctly gives the EOF condition
echo " "
case "$d_eofpipe" in
'')
	echo "Let's see if your pipes return EOF to select() upon closing..." >&4
	$cat >pipe.c <<'EOP'
main()
{
	int pd[2];
	long mask;

	pipe(pd);
	if (0 == fork()) {
		close(pd[0]);
		close(pd[1]);
		exit(0);
	}

	close(pd[1]);
	mask = 1 << pd[0];
	alarm(2);
	select(32, &mask, (int *) 0, (int *) 0, (char *) 0);
	if (0 == read(pd[0], &mask, 1))
		exit(0);
	
	exit(1);
}
EOP
	if $cc $ccflags pipe.c -o pipe $libs >/dev/null 2>&1; then
		echo "./pipe || exit 1" > mpipe
		chmod +x mpipe
		./mpipe >/dev/null 2>&1
		case $? in
		0) d_eofpipe="$define";;
		*) d_eofpipe="$undef";;
		esac
	else
		echo "(The test program did not compile correctly -- Guessing.)"
		if ./bsd; then
			d_eofpipe="$define"
		else
			d_eofpipe="$undef"
		fi
	fi
	case "$d_eofpipe" in
	"$define") echo "Yes, they do.";;
	*) echo "No, they don't! (sigh)";;
	esac
	;;
*)
	$echo $n "Your pipes $c"
	case "$d_eofpipe" in
	"$define") echo "allow select() to see EOF upon closing.";;
	*) echo "won't let select() see EOF on closing.";;
	esac
	;;
esac
$rm -f *pipe* core

: see if this is an fcntl system
set fcntl d_fcntl
eval $inlibc

: see if gettimeofday or ftime exists
set gettimeofday d_gettimeod
eval $inlibc
case "$d_gettimeod" in
"$undef")
	set ftime d_ftime 
	eval $inlibc
	;;
*)
	val="$undef"; set d_ftime; eval $setvar
	;;
esac
case "$d_gettimeod$d_ftime" in
"$undef$undef")
	echo " "
	echo 'No ftime() nor gettimeofday() -- timing may be less accurate.' >&4
	;;
esac

: see if getpwuid exists
set getpwuid d_getpwuid
eval $inlibc
: see if getgrgid exists
set getgrgid d_getgrgid
eval $inlibc
: see if geteuid exists
set geteuid d_geteuid
eval $inlibc

: see if gethid exists
set gethostid d_gethid
eval $inlibc

: see if we have to deal with yellow pages, now NIS.
if $test -d /usr/etc/yp || $test -d /etc/yp; then
	if $test -f /usr/etc/nibindd; then
		echo " "
		echo "I'm fairly confident you're on a NeXT."
		echo " "
		rp='Do you get the hosts file via NetInfo?'
		dflt=y
		case "$hostcat" in
		nidump*) ;;
		'') ;;
		*) dflt=n;;
		esac
		. ./myread
		case "$ans" in
		y*) hostcat='nidump hosts .';;
		*)	case "$hostcat" in
			nidump*) hostcat='';;
			esac
			;;
		esac
	fi
	case "$hostcat" in
	nidump*) ;;
	*)
		case "$hostcat" in
		*ypcat*) dflt=y;;
		'') if $contains '^\+' /etc/passwd >/dev/null 2>&1; then
				dflt=y
			else
				dflt=n
			fi;;
		*) dflt=n;;
		esac
		echo " "
		rp='Are you getting the hosts file via yellow pages?'
		. ./myread
		case "$ans" in
		y*) hostcat='ypcat hosts';;
		*) hostcat='cat /etc/hosts';;
		esac
		;;
	esac
fi

: now get the host name
echo " "
echo "Figuring out host name..." >&4
case "$myhostname" in
'') cont=true
	echo 'Maybe "hostname" will work...'
	if tans=`sh -c hostname 2>&1` ; then
		myhostname=$tans
		phostname=hostname
		cont=''
	fi
	;;
*) cont='';;
esac
if $test "$cont"; then
	if ./xenix; then
		echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
		if tans=`cat /etc/systemid 2>&1` ; then
			myhostname=$tans
			phostname='cat /etc/systemid'
			echo "Whadyaknow.  Xenix always was a bit strange..."
			cont=''
		fi
	elif $test -r /etc/systemid; then
		echo "(What is a non-Xenix system doing with /etc/systemid?)"
	fi
fi
if $test "$cont"; then
	echo 'No, maybe "uuname -l" will work...'
	if tans=`sh -c 'uuname -l' 2>&1` ; then
		myhostname=$tans
		phostname='uuname -l'
	else
		echo 'Strange.  Maybe "uname -n" will work...'
		if tans=`sh -c 'uname -n' 2>&1` ; then
			myhostname=$tans
			phostname='uname -n'
		else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if tans=`sh -c $contains' sysname $usrinc/whoami.h' 2>&1` ; then
				myhostname=`echo "$tans" | $sed 's/^.*"\(.*\)"/\1/'`
				phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' <$usrinc/whoami.h"
			else
				case "$myhostname" in
				'') echo "Does this machine have an identity crisis or something?"
					phostname='';;
				*)
					echo "Well, you said $myhostname before..."
					phostname='echo $myhostname';;
				esac
			fi
		fi
	fi
fi
: you do not want to know about this
set $myhostname
myhostname=$1

: verify guess
if $test "$myhostname" ; then
	dflt=y
	rp='Your host name appears to be "'$myhostname'".'" Right?"
	. ./myread
	case "$ans" in
	y*) ;;
	*) myhostname='';;
	esac
fi

: bad guess or no guess
while $test "X$myhostname" = X ; do
	dflt=''
	rp="Please type the (one word) name of your host:"
	. ./myread
	myhostname="$ans"
done

: translate upper to lower if necessary
case "$myhostname" in
*[A-Z]*)
	echo "(Normalizing case in your host name)"
	myhostname=`echo $myhostname | ./tr '[A-Z]' '[a-z]'`
	;;
esac

: a little sanity check here
case "$phostname" in
'') ;;
*)
	case `$phostname | ./tr '[A-Z]' '[a-z]'` in
	$myhostname$mydomain|$myhostname) ;;
	*)
		case "$phostname" in
		sed*)
			echo "(That doesn't agree with your whoami.h file, by the way.)"
			;;
		*)
			echo "(That doesn't agree with your $phostname command, by the way.)"
			;;
		esac
	;;
	esac
	;;
esac

: see how we will look up host name
echo " "
if false; then
	: dummy stub to allow use of elif
elif set gethostname val -f d_gethname; eval $csym; $val; then
	echo 'gethostname() found.' >&4
	d_gethname="$define"
	call=gethostname
elif set uname val -f d_uname; eval $csym; $val; then
	if ./xenix; then
		$cat <<'EOM'
uname() was found, but you're running xenix, and older versions of xenix
have a broken uname(). If you don't really know whether your xenix is old
enough to have a broken system call, use the default answer.

EOM
		dflt=y
		case "$d_uname" in
		"$define") dflt=n;;
		esac
		rp='Is your uname() broken?'
		. ./myread
		case "$ans" in
		n*) d_uname="$define"; call=uname;;
		esac
	else
		echo 'uname() found.' >&4
		d_uname="$define"
		call=uname
	fi
fi
case "$d_gethname" in
'') d_gethname="$undef";;
esac
case "$d_uname" in
'') d_uname="$undef";;
esac
case "$d_uname$d_gethname" in
*define*)
	dflt=n
	cat <<EOM
 
Every now and then someone has a $call() that lies about the hostname
but can't be fixed for political or economic reasons.  If you wish, I can
pretend $call() isn't there and maybe compute hostname at run-time
thanks to the '$phostname' command.

EOM
	rp="Shall I ignore $call() from now on?"
	. ./myread
	case "$ans" in
	y*) d_uname="$undef" d_gethname="$undef"; $echo $n "Okay...$c";;
	esac;;
esac
case "$phostname" in
'') aphostname='';;
*) case "$aphostname" in
	/*) ;;
	*) set X $phostname
		shift
		file=$1
		shift
		file=`./loc $file $file $pth`
		aphostname=`echo $file $*`
		;;
	esac
	;;
esac
case "$d_uname$d_gethname" in
*define*) ;;
*)
	case "$phostname" in
	'')
		echo "There will be no way for $package to get your hostname." >&4;;
	*)
	echo "I'll use 'popen("'"'$aphostname'", "r")'"' to get your hostname." >&4
		;;
	esac;;
esac
case "$d_phostname" in
'') d_phostname="$undef";;
esac

: see if getopt exists
set getopt d_getopt
eval $inlibc

: see which of string.h or strings.h is needed
echo " "
strings=`./findhdr string.h`
if $test "$strings" && $test -r "$strings"; then
	echo "Using <string.h> instead of <strings.h>." >&4
	val="$define"
else
	val="$undef"
	strings=`./findhdr strings.h`
	if $test "$strings" && $test -r "$strings"; then
		echo "Using <strings.h> instead of <string.h>." >&4
	else
		echo "No string header found -- You'll surely have problems." >&4
	fi
fi
set i_string
eval $setvar
case "$i_string" in
"$undef") strings=`./findhdr strings.h`;;
*)	  strings=`./findhdr string.h`;;
esac

: index or strchr
echo " "
if set index val -f; eval $csym; $val; then
	if set strchr val -f d_strchr; eval $csym; $val; then
		if $contains strchr "$strings" >/dev/null 2>&1 ; then
			val="$define"
			vali="$undef"
			echo "strchr() found." >&4
		else
			val="$undef"
			vali="$define"
			echo "index() found." >&4
		fi
	else
		val="$undef"
		vali="$define"
		echo "index() found." >&4
	fi
else
	if set strchr val -f d_strchr; eval $csym; $val; then
		val="$define"
		vali="$undef"
		echo "strchr() found." >&4
	else
		echo "No index() or strchr() found!" >&4
		val="$undef"
		vali="$undef"
	fi
fi
set d_strchr; eval $setvar
val="$vali"
set d_index; eval $setvar

socketlib=''
sockethdr=''
: see whether socket exists
echo " "
$echo $n "Hmm... $c" >&4
if set socket val -f d_socket; eval $csym; $val; then
	echo "Looks like you have Berkeley networking support." >&4
	d_socket="$define"
	if set setsockopt val -f; eval $csym; $val; then
		d_oldsock="$undef"
	else
		echo "...but it uses the old 4.1c interface, rather than 4.2" >&4
		d_oldsock="$define"
	fi
else
	if $contains socklib libc.list >/dev/null 2>&1; then
		echo "Looks like you have Berkeley networking support." >&4
		d_socket="$define"
		: we will have to assume that it supports the 4.2 BSD interface
		d_oldsock="$undef"
	else
		echo "You don't have Berkeley networking in libc.a..." >&4
		if test -f /usr/lib/libnet.a; then
			( (nm $nm_opt /usr/lib/libnet.a | eval $nm_extract) ||  \
			ar t /usr/lib/libnet.a) 2>/dev/null >> libc.list
			if $contains socket libc.list >/dev/null 2>&1; then
			echo "...but the Wollongong group seems to have hacked it in." >&4
				socketlib="-lnet"
				sockethdr="-I/usr/netinclude"
				d_socket="$define"
				if $contains setsockopt libc.list >/dev/null 2>&1; then
					d_oldsock="$undef"
				else
					echo "...using the old 4.1c interface, rather than 4.2" >&4
					d_oldsock="$define"
				fi
			else
				echo "or even in libnet.a, which is peculiar." >&4
				d_socket="$undef"
				d_oldsock="$undef"
			fi
		else
			echo "or anywhere else I see." >&4
			d_socket="$undef"
			d_oldsock="$undef"
		fi
	fi
fi

: see if setsockopt with SO_KEEPALIVE works as advertised
echo " "
case "$d_oldsock" in
"$undef")
	if $contains SO_KEEPALIVE `./findhdr sys/socket.h` \
		/dev/null >/dev/null 2>&1
	then
		echo "OK, let's see if SO_KEEPALIVE works as advertised..." >&4
		$cat > socket.c <<EOP
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

main()
{
	int s = socket(AF_INET, SOCK_STREAM, 0);
	if (s == -1)
		exit(1);
	if (-1 == setsockopt(s, SOL_SOCKET, SO_KEEPALIVE, 0, 0))
		exit(2);
	exit(0);
}
EOP
		if $cc $ccflags $sockethdr socket.c -o socket $libs \
			$socketlib >/dev/null 2>&1; then
			./socket >/dev/null 2>&1
			case $? in
			0) echo "Yes, it does!"
				val="$define";;
			1) $cat <<EOM
(Something went wrong -- Assuming SO_KEEPALIVE is broken)
EOM
				val="$undef";;
			2) echo "No, it doesn't.  Don't trust your manuals!!"
				val="$undef";;
			esac
		else
			cat <<EOM
(I can't compile the test program -- Assuming SO_KEEPALIVE is broken)
EOM
			val="$undef"
		fi
	else
		echo "Strange!! You have BSD 4.2 sockets but no SO_KEEPALIVE option."
		val="$undef"
	fi;;
*) cat <<EOM
As you have an old socket interface, you can't have heard of SO_KEEPALIVE.
EOM
	val="$undef";;
esac
set d_keepalive
eval $setvar
$rm -f socket socket.c

: see if signals are kept
val="$undef";
echo " "
echo "Checking to see if signal handlers stick around..." >&4
$cat >try.c <<'EOCP'
foo() {}

main()
{
	signal(2, foo);
	kill(getpid(), 2);
	kill(getpid(), 2);
	printf("abc\n");
}
EOCP
if $cc -o try $ccflags try.c >/dev/null 2>&1; then
	`sh -c ./try >try.out 2>/dev/null`
	if $contains abc try.out >/dev/null 2>&1; then
		echo "Yes, they do."
		val="$define";
	else
		echo "No, they don't."
	fi
else
	$echo $n "(I can't seem to compile the test program. Assuming $c"
	if ./bsd; then
		echo "they do.)"
		val="$define"
	else
		echo "they don't.)"
	fi
fi
set d_keepsig
eval $setvar
$rm -f try*

: see if link exists
set link d_link
eval $inlibc

: see if lstat exists
set lstat d_lstat
eval $inlibc

: see if we want to allow run-time panics
case "$d_maypanic" in
"$define") dflt=y ;;
*) dflt=n ;;
esac
$cat <<'EOM'

I can set up the run-time to do extra sanity checks which will incur a slight
execution overhead but provide better error tracking in case an inconsitency
appears. Typical checks include free-list consistency checks, stack overflow
or underflow, etc... Detecting the inconsistency when it appears simply avoids
cascade effects which may produce an inextricable mess in memory. This is only
an insurance against unexpected problems: in a perfect world, it would not
make things any different.

EOM
rp='Do you want to enable run-time extra checks?'
. myread
case "$ans" in
y*) val="$define" ;;
*) val="$undef" ;;
esac
set d_maypanic
eval $setvar

: see if memmove exists
set memmove d_memmove
eval $inlibc

: see if mkdir exists
set mkdir d_mkdir
eval $inlibc

: see if mktime exists
set mktime d_mktime
eval $inlibc

: Locate the flags for 'open()'
echo " "
$cat >open3.c <<'EOCP'
#include <sys/types.h>
#ifdef I_FCNTL
#include <fcntl.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>
#endif
main() {
	if(O_RDONLY);
#ifdef O_TRUNC
	exit(0);
#else
	exit(1);
#endif
}
EOCP
: check sys/file.h first to get FREAD on Sun
if $test `./findhdr sys/file.h` && \
		$cc $cppflags "-DI_SYS_FILE" open3.c -o open3 >/dev/null 2>&1 ; then
	h_sysfile=true;
	echo "<sys/file.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
elif $test `./findhdr fcntl.h` && \
		$cc "-DI_FCNTL" open3.c -o open3 >/dev/null 2>&1 ; then
	h_fcntl=true;
	echo "<fcntl.h> defines the O_* constants..." >&4
	if ./open3; then
		echo "and you have the 3 argument form of open()." >&4
		val="$define"
	else
		echo "but not the 3 argument form of open().  Oh, well." >&4
		val="$undef"
	fi
else
	val="$undef"
	echo "I can't find the O_* constant definitions!  You got problems." >&4
fi
set d_open3
eval $setvar
$rm -f open3*

: check for "kill(pid, 0)"
echo " "
case "$d_pidcheck" in
"$define")
echo "I already know your system supports kill(pid, 0) for pid checks." >&4
	;;
"$undef")
echo "We both know your system does not support signal #0 for pid checks." >&4
	;;
*)
	echo "Checking to see if kill(pid, 0) works..." >&4
	$cat >try.c <<'EOCP'
main()
	{
	int	pid, status0, status9;

	if ((pid = fork()) == 0)
		{
		sleep(30);
		exit(1);
		}
	status0 = kill(pid, 0);
	status9 = kill(pid, 9);
	exit(status0 == status9);
	}
EOCP
	if $cc try.c -o try >/dev/null 2>&1 ; then
		if ./try >/dev/null 2>&1 ; then
			echo "Yes, it does marvels."
			d_pidcheck="$undef"
		else
			d_pidcheck="$define"
			echo "No, it doesn't."
		fi
	else
		echo "(I was unable to compile the test program.)"
		echo "Your system does not appear to support kill(pid, 0)."
		d_pidcheck="$undef"
	fi
	$rm -f try.c try.o try
	;;
esac

: see if readdir and friends exist
set readdir d_readdir
eval $inlibc
set rewinddir d_rewinddir
eval $inlibc

: see if rename exists
set rename d_rename
eval $inlibc

: see if rmdir exists
set rmdir d_rmdir
eval $inlibc

: see if getrusage exists
set getrusage d_rusage
eval $inlibc

: can bcopy handle overlapping blocks?
val="$undef"
case "$d_bcopy" in
"$define")
	echo " "
	echo "Checking to see if your bcopy() can do overlapping copies..." >&4
	$cat >foo.c <<'EOCP'
main()
{
char buf[128], abc[128];
char *b;
int len;
int off;
int align;

bcopy("abcdefghijklmnopqrstuvwxyz0123456789", abc, 36);

for (align = 7; align >= 0; align--) {
	for (len = 36; len; len--) {
		b = buf+align;
		bcopy(abc, b, len);
		for (off = 1; off <= len; off++) {
			bcopy(b, b+off, len);
			bcopy(b+off, b, len);
			if (bcmp(b, abc, len))
				exit(1);
		}
	}
}
exit(0);
}
EOCP
	if $cc $ccflags $ldflags foo.c -o safebcpy $libs >/dev/null 2>&1; then
		if ./safebcpy 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
		else
			echo "It can't, sorry."
		fi
	else
		echo "(I can't compile the test program, so we'll assume not...)"
	fi
	;;
esac
$rm -f foo.* safebcpy core
set d_safebcpy
eval $setvar

: see if memcpy exists
set memcpy d_memcpy
eval $inlibc

: can memcpy handle overlapping blocks?
val="$undef"
case "$d_memcpy" in
"$define")
	echo " "
	echo "Checking to see if your memcpy() can do overlapping copies..." >&4
	$cat >foo.c <<'EOCP'
main()
{
char buf[128], abc[128];
char *b;
int len;
int off;
int align;

memcpy(abc, "abcdefghijklmnopqrstuvwxyz0123456789", 36);

for (align = 7; align >= 0; align--) {
	for (len = 36; len; len--) {
		b = buf+align;
		memcpy(b, abc, len);
		for (off = 1; off <= len; off++) {
			memcpy(b+off, b, len);
			memcpy(b, b+off, len);
			if (memcmp(b, abc, len))
				exit(1);
		}
	}
}
exit(0);
}
EOCP
	if $cc $ccflags $ldflags foo.c -o safemcpy $libs >/dev/null 2>&1; then
		if ./safemcpy 2>/dev/null; then
			echo "Yes, it can."
			val="$define"
		else
			echo "It can't, sorry."
		fi
	else
		echo "(I can't compile the test program, so we'll assume not...)"
	fi
	;;
esac
$rm -f foo.* safemcpy core
set d_safemcpy
eval $setvar

: see if sbrk exists
set sbrk d_sbrk
eval $inlibc

: see if sys_siglist[] exist
echo " "
if set sys_siglist val -a d_siglist; eval $csym; $val; then	
	echo "You have sys_siglist[] for signal description." >&4
	val="$define"
else
	echo "You don't have sys_siglist[]." >&4
	val="$undef"
fi
set d_siglist
eval $setvar

: see if sigaltstack exists
echo " "
if set sigaltstack val -f d_sigaltstack; eval $csym; $val; then
	echo 'sigaltstack() found.' >&4
	val="$define"
else
	echo "sigaltstack() not found." >&4
	val="$undef"
fi
set d_sigaltstack
eval $setvar

: see if sigsetmask exists
echo " "
if set sigsetmask val -f d_sigsetmk; eval $csym; $val; then
	echo 'sigsetmask() found.' >&4
	val="$define"
else
	echo "sigsetmask() not found -- We'll use signal()." >&4
	val="$undef"
fi
set d_sigsetmk
eval $setvar

: see if sigvector exists -- since sigvec will match the substring
echo " "
if set sigvector val -f d_sigvectr; eval $csym; $val; then
	echo 'sigvector() found--you must be running HP-UX.' >&4
	val="$define"; set d_sigvectr; eval $setvar
	val="$define"; set d_sigvec; eval $setvar
else
: try the original name
	d_sigvectr="$undef"
	if set sigvec val -f d_sigvec; eval $csym; $val; then
		echo 'sigvec() found.' >&4
		val="$define"; set d_sigvec; eval $setvar
	else
		echo 'sigvec() not found--race conditions with signals may occur.' >&4
		val="$undef"; set d_sigvec; eval $setvar
	fi
fi

: define an alternate in-header-list? function
inhdr='echo " "; td=$define; tu=$undef; yyy=$@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@;
done'

: see if mmap exists
set mmap d_mmap
eval $inlibc

val="$undef"
if $test $d_mmap = "$define"; then
	xxx=`./findhdr sys/mman.h`
	if $test "$xxx"; then
    	if $contains 'MAP_ANONYMOUS' $xxx >/dev/null 2>&1; then
			if $contains 'MAP_VARIABLE' $xxx >/dev/null 2>&1; then
				if $contains 'MAP_PRIVATE' $xxx >/dev/null 2>&1; then
        			val="$define"
        			echo "MAP_ANONYMOUS, MAP_VARIABLE and MAP_PRIVATE are defined." >&4
        			echo "mmap and munmap can be used for shared memory." >&4
				else
					echo "MAP_PRIVATE is not defined." >&4
					echo "HAS_SMART_MMAP is not defined." >&4
    			fi
			else
				echo "MAP_VARIABLE is not defined." >&4
				echo "HAS_SMART_MMAP is not defined." >&4
    		fi
		else
			echo "MAP_ANONYMOUS is not defined." >&4
		echo "HAS_SMART_MMAP is not defined." >&4
    	fi
	else
		echo "<sys/mman.h> not found." >&4
		echo "HAS_SMART_MMAP is not defined." >&4
	fi
else
	echo "Your system does not support mmap, HAS_SMART_MMAP is not defined." >&4
fi
set d_smartmmap
eval $setvar
: check for structure copying
echo " "
echo "Checking to see if your C compiler can copy structs..." >&4
$cat >try.c <<'EOCP'
main()
{
	struct blurfl {
		int dyick;
	} foo, bar;

	foo = bar;
}
EOCP
if $cc -c try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it can."
else
	val="$undef"
	echo "Nope, it can't."
fi
set d_strctcpy
eval $setvar
$rm -f try.*

: see if strdup exists
set strdup d_strdup
eval $inlibc

: see if strerror and/or sys_errlist[] exist
echo " "
if set strerror val -f d_strerror; eval $csym; $val; then
	echo 'strerror() found.' >&4
	d_strerror="$define"
	d_strerrm='strerror(e)'
	if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
		echo "(You also have sys_errlist[], so we could roll our own strerror.)" 
		d_syserrlst="$define"
	else
	echo "(Since you don't have sys_errlist[], sterror() is welcome.)"
		d_syserrlst="$undef"
	fi
elif xxx=`./findhdr string.h`; test "$xxx" || xxx=`./findhdr strings.h`; \
	$contains '#[ 	]*define.*strerror' "$xxx" >/dev/null 2>&1; then
	echo 'strerror() found in string header.' >&4
	d_strerror="$define"
	d_strerrm='strerror(e)'
	if set sys_errlist val -a d_syserrlst; eval $csym; $val; then	
		echo "(Most probably, strerror() uses sys_errlist[] for descriptions.)"
		d_syserrlst="$define"
	else
		echo "(You don't appear to have any sys_errlist[], how can this be?)"
		d_syserrlst="$undef"
	fi
elif set sys_errlist val -a d_syserrlst; eval $csym; $val; then
echo "strerror() not found, but you have sys_errlist[] so we'll use that." >&4
	d_strerror="$undef"
	d_syserrlst="$define"
	d_strerrm='((e)<0||(e)>=sys_nerr?"unknown":sys_errlist[e])'
else
	echo 'strerror() and sys_errlist[] NOT found.' >&4
	d_strerror="$undef"
	d_syserrlst="$undef"
	d_strerrm='"unknown"'
fi
if set sys_errnolist val -a d_sysernlst; eval $csym; $val; then
	echo "(Symbolic error codes can be fetched via the sys_errnolist[] array.)"
	d_sysernlst="$define"
else
	echo "(However, I can't extract the symbolic error code out of errno.)"
	d_sysernlst="$undef"
fi

: define an is-a-typedef? function
typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'

: see if time exists
echo " "
if set time val -f d_time; eval $csym; $val; then
	echo 'time() found.' >&4
	val="$define"
	set time_t timetype long stdio.h sys/types.h
	eval $typedef
	dflt="$timetype"
	echo " "
	rp="What type is returned by time() on this system?"
	. ./myread
	timetype="$ans"
else
	echo 'time() not found, hope that will do.' >&4
	val="$undef"
	timetype='int';
fi
set d_time
eval $setvar

: see if this is a sys/times.h system
set sys/times.h i_systimes
eval $inhdr

: see if times exists
echo " "
if set times val -f d_times; eval $csym; $val; then
	echo 'times() found.' >&4
	d_times="$define"
	inc=''
	case "$i_systimes" in
	"$define") inc='sys/times.h';;
	esac
	set clock_t clocktype long stdio.h sys/types.h $inc
	eval $typedef
	dflt="$clocktype"
	echo " "
	rp="What type is returned by times() on this system?"
	. ./myread
	clocktype="$ans"
else
	echo 'times() NOT found, hope that will do.' >&4
	d_times="$undef"
	clocktype='int'
fi

: see if unlink exists
set unlink d_unlink
eval $inlibc

: see if usleep exists
set usleep d_usleep
eval $inlibc

: see if nanosleep exists
set nanosleep d_nanosleep
eval $inlibc

: see if utime exists
set utime d_utime
eval $inlibc

: preserve RCS keywords in files with variable substitution, grrr
Id='$Id'
Log='$Log'

: which signal is sent by abort ?
echo " "
case "$abortsig" in
'')
	echo "Checking to see which signal is sent to the process by abort()..." >&4
	echo "abort" > abort.sh
	chmod +x abort.sh
	for signal in SIGIOT SIGILL SIGABRT; do
		case "$abortsig" in
		'') $cat >abort.c <<EOP
#include <signal.h>
caught() { exit(0); }
main()
{
#ifdef $signal
	signal($signal, caught);
#endif
	if (-1 == abort())
		exit(1);
	exit(1);
}
EOP
			if $cc $ccflags -o abort abort.c >/dev/null 2>&1; then
				(./abort.sh) >/dev/null 2>&1
				case $? in
				0) abortsig="$signal";;
				esac
			fi
			;;
		esac
	done
	;;
esac
case "$abortsig" in
'') echo "(I wasn't able to compute the signal name--guessing)"
	if ./usg; then
		dflt="SIGIOT"
	else
		dflt="SIGILL"
	fi;;
*)  dflt="$abortsig"
	;;
esac
rp="Which signal does abort() send to the process (signal name)?"
. ./myread
abortsig="$ans"
$rm -f core abort.sh abort abort.c

: logging level stuff
add_log="$undef"

: check for alignment requirements
echo " "
case "$alignbytes" in
'') echo "Checking alignment constraints..." >&4
	$cat >try.c <<'EOCP'
struct foobar {
	char foo;
	double bar;
} try;
main()
{
	printf("%d\n", (char *)&try.bar - (char *)&try.foo);
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1; then
		dflt=`./try`
	else
		dflt='8'
		echo"(I can't seem to compile the test program...)"
	fi
	;;
*) dflt="$alignbytes"
	;;
esac
rp="Doubles must be aligned on a how-many-byte boundary?"
. ./myread
alignbytes="$ans"
$rm -f try.c try

: check for length of byte
echo " "
case "$bitpbyte" in
'')
	echo "Checking to see how many bits there are in a byte..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
#ifdef __STDC__
#include <limits.h>
#ifndef CHAR_BIT
#define CHAR_BIT 8
#endif
#ifndef BITSPERBYTE
#define BITSPERBYTE CHAR_BIT
#endif
#else
#include <values.h>
#ifndef BITSPERBYTE
#define BITSPERBYTE 8
#endif
#endif
main()
{
	printf("%d\n", BITSPERBYTE);
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$bitpbyte"
	;;
esac
rp="What is the length of a byte (in bits)?"
. ./myread
bitpbyte="$ans"
$rm -f try.c try

: check for ordering of bytes in a long
case "$byteorder" in
'')
	$cat <<'EOM'
  
In the following, larger digits indicate more significance.  A big-endian
machine like a Pyramid or a Motorola 680?0 chip will come out to 4321. A
little-endian machine like a Vax or an Intel 80?86 chip would be 1234. Other
machines may have weird orders like 3412.  A Cray will report 87654321. If
the test program works the default is probably right.
I'm now running the test program...
EOM
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	int i;
	union {
		unsigned long l;
		char c[sizeof(long)];
	} u;

	if (sizeof(long) > 4)
		u.l = (0x08070605L << 32) | 0x04030201L;
	else
		u.l = 0x04030201L;
	for (i = 0; i < sizeof(long); i++)
		printf("%c", u.c[i]+'0');
	printf("\n");
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
		case "$dflt" in
		????|????????) echo "(The test program ran ok.)";;
		*) echo "(The test program didn't run right for some reason.)";;
		esac
	else
		dflt='4321'
		cat <<'EOM'
(I can't seem to compile the test program.  Guessing big-endian...)
EOM
	fi
	;;
*)
	echo " "
	dflt="$byteorder"
	;;
esac
rp="What is the order of bytes in a long?"
. ./myread
byteorder="$ans"
$rm -f try.c try

: check for length of character
echo " "
case "$charsize" in
'')
	echo "Checking to see how big your characters are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(char));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='1'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$charsize"
	;;
esac
rp="What is the size of a character (in bytes)?"
. ./myread
charsize="$ans"
$rm -f try.c try

: how do we catenate cpp tokens here?
echo " "
echo "Checking to see how your cpp does stuff like catenate tokens..." >&4
$cat >cpp_stuff.c <<'EOCP'
#define RCAT(a,b)a/**/b
#define ACAT(a,b)a ## b
RCAT(Rei,ser)
ACAT(Cir,cus)
EOCP
$cppstdin $cppflags $cppminus <cpp_stuff.c >cpp_stuff.out 2>&1
if $contains 'Circus' cpp_stuff.out >/dev/null 2>&1; then
	echo "Oh!  Smells like ANSI's been here."
	echo "We can catify or stringify, separately or together!"
	cpp_stuff=42
elif $contains 'Reiser' cpp_stuff.out >/dev/null 2>&1; then
	echo "Ah, yes!  The good old days!"
	echo "However, in the good old days we don't know how to stringify and"
	echo "catify at the same time."
	cpp_stuff=1
else
	$cat >&4 <<EOM
Hmm, I don't seem to be able to catenate tokens with your cpp.  You're going
to have to edit the values of CAT[2-5] in eif_config.h...
EOM
	cpp_stuff="/* Help! How do we handle cpp_stuff? */*/"
fi
$rm -f cpp_stuff.*

: check for length of double
echo " "
case "$doublesize" in
'')
	echo "Checking to see how big your double precision numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(double));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='8'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$doublesize"
	;;
esac
rp="What is the size of a double precision number (in bytes)?"
. ./myread
doublesize="$ans"
$rm -f try.c try

: check for length of float
echo " "
case "$floatsize" in
'')
	echo "Checking to see how big your floating point numbers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(float));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$floatsize"
	;;
esac
rp="What is the size of a floating point number (in bytes)?"
. ./myread
floatsize="$ans"
$rm -f try.c try

: see what type gids are declared as in the kernel
set gid_t gidtype xxx stdio.h sys/types.h
eval $typedef
case "$gidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep 'groups\[NGROUPS\];' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$gidtype";;
esac
echo " "
rp="What is the type for group ids returned by getgid()?"
. ./myread
gidtype="$ans"

: see if getgroups exists
set getgroups d_getgrps
eval $inlibc

: Find type of 2nd arg to getgroups
echo " "
case "$d_getgrps" in
'define')
	case "$groupstype" in
	'') dflt="$gidtype" ;;
	*)  dflt="$groupstype" ;;
	esac
	$cat <<EOM
What is the type of the second argument to getgroups()?  Usually this
is the same as group ids, $gidtype, but not always.

EOM
	rp='What type is the second argument to getgroups()?'
	. ./myread
	groupstype="$ans"
	;;
*)  groupstype="$gidtype";;
esac

: locate a BSD compatible install program
echo " "
echo "Looking for a BSD-compatible install program..." >&4
case "$install" in
'')
	tryit=''
	for dir in $pth; do
		for file in ginstall installbsd scoinst install; do
			if $test -f $dir/$file; then
				tryit="$tryit $dir/$file"
			fi
		done
	done
	$cat >try.c <<EOC
main()
{
	printf("OK\n");
	exit(0);
}
EOC
	if $cc try.c -o try >/dev/null 2>&1; then
		cp try try.ns
		strip try >/dev/null 2>&1
	else
		echo "(I can't seem to compile a trivial C program -- bypassing.)"
		echo "try" >try
		cp try try.ns
	fi
	$cat >tryinst <<EOS
$startsh
$rm -rf foo d
$mkdir d
\$1 -c -m 764 try.ns d
\$1 -c -s -m 642 try.ns d/try
EOS
	chmod +x tryinst
	$eunicefix tryinst
	dflt=''
	either=''
	for prog in $tryit; do
		$echo $n "Checking $prog... $c"
		./tryinst $prog >/dev/null 2>&1
		(ls -l d/try >try.ls; ls -l d/try.ns >tryno.ls) 2>/dev/null
		if (cmp -s d/try try && cmp -s d/try.ns try.ns && \
			$contains 'rwxrw-r--' tryno.ls && \
			$contains 'rw-r---w-' try.ls) >/dev/null 2>&1
		then
			dflt="$prog"
			echo "ok, that will do."
			break
		fi
		echo "not good$either."
		either=' either'
		$rm -f try*.ls
	done
	$rm -rf foo d tryinst try try*.ls try.*
	case "$dflt" in
	'')
		echo "Hopefully, $package comes with its own install script!"
		dflt='./install'
		;;
	esac
	;;
*) dflt="$install";;
esac
$cat <<EOM

I will be requiring a BSD-compatible install program (one that allows
options like -s to strip executables or -m to specify a file mode) to
install $package.

If the question below contains a fully qualified default path, then it
is probably ok. If it is an unqualified name such as 'install', then it
means I was unable to find out a good install program I could use. If
you know of one, please tell me about it. If the default is './install',
then I shall be using the install script supplied with $package.

EOM
fn='/fe~(install,./install)'
rp='Which install program shall I use?'
. ./getfile
install="$ans"

: check for length of integer
echo " "
case "$intsize" in
'')
	echo "Checking to see how big your integers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(int));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$intsize"
	;;
esac
rp="What is the size of an integer (in bytes)?"
. ./myread
intsize="$ans"
$rm -f try.c try

: determine lexical analyser generator
case "$lex" in
'')
	dflt=lex;;
*)
	dflt="$lex";;
esac
echo " "
if $test -f "$flex"; then
	rp='Which lexical analyser generator (lex or flex) shall I use?'
else
	rp='Which lexical analyser generator shall I use?'
fi
. ./myread
lex="$ans"

: if using lex this will normally be useless, but flex frequently takes args
echo " "
case "$lexflags" in
'') dflt='none';;
*) dflt="$lexflags";;
esac
rp="What flags should be given to $lex?"
. ./myread
case "$ans" in
none) lexflags='';;
*) lexflags="$ans";;
esac

: check for length of long
echo " "
case "$longsize" in
'')
	echo "Checking to see how big your long integers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(long));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$longsize"
	;;
esac
rp="What is the size of a long integer (in bytes)?"
. ./myread
longsize="$ans"
$rm -f try.c try

: compute the type returned by malloc
echo " "
case "$malloctype" in
'')
	if $test `./findhdr malloc.h`; then
		echo "#include <malloc.h>" > malloc.c
	fi
#include <malloc.h>
	$cat >>malloc.c <<'END'
void *malloc();
END
	if $cc $ccflags -c malloc.c >/dev/null 2>&1; then
		malloctype='void *'
	else
		malloctype='char *'
	fi
	$rm -f malloc.[co]
	;;
esac
echo "Your system wants malloc to return '$malloctype', it would seem." >&4

: find out how to generate dependencies
echo " "
echo "Checking how to generate makefile dependencies on your machine..." >&4
toplev=`cd ..;pwd`
$cat >dep.c <<'EOCP'
#include "dep.h"
EOCP
$cat >dep.h <<'EOCP'

EOCP
takeflags='flags=""
case "$@" in
*--*)
	for arg
	do
		shift
		case "$arg" in
		--) break;;
		*) flags="$flags $arg";;
		esac
	done;;
esac'
case "$mkdep" in
'')
	;;
*)
	if test -x "$mkdep" &&
		$mkdep dep.c >dep.out 2>/dev/null &&
		$contains 'dep\.o:.*dep\.h' dep.out >/dev/null 2>&1
	then
		echo "$mkdep works."
	else
		mkdep=
	fi
esac

case "$mkdep" in
'')
	$spitshell > ../mkdep <<EOM
$startsh
$takeflags
for srcfile
do
	$cpp -M -I. $cppflags \$flags \$srcfile 2>/dev/null
done
exit 0
EOM
	mkdep=$toplev/mkdep
	chmod +x $mkdep
	$eunicefix $mkdep
	if $mkdep dep.c >dep.out 2>/dev/null &&
		$contains 'dep\.o:.*dep\.h' dep.out >/dev/null 2>&1
	then
		echo "Looks like we can use $cpp -M."
	else
		mkdep=
	fi
	;;
esac

case "$mkdep" in
'')
	$spitshell > ../mkdep <<EOM
$startsh
$takeflags
for srcfile
do
	$cc -MM -I. $cppflags \$flags \$srcfile 2>/dev/null
done
exit 0
EOM
	mkdep=$toplev/mkdep
	chmod +x $mkdep
	$eunicefix $mkdep
	if $mkdep dep.c >dep.out 2>/dev/null &&
		$contains 'dep.o: dep.h' dep.out >/dev/null 2>&1
	then
		echo "Looks like we can use $cc -MM."
	else
		mkdep=
	fi
	;;
esac

case "$mkdep" in
'')
	$spitshell >../mkdep <<EOS
$startsh
$takeflags
for srcfile
do
	case "\$srcfile" in
	*.c) c='.c';;
	*.y) c='.y';;
	*.l) c='.l';;
	esac
	filebase=\`basename \$srcfile \$c\`
	<\$srcfile $cpp $cppminus $cppflags -I. \$flags 2>/dev/null | \\
	$sed -e '/^# *[0-9]/!d' \\
		-e 's/^.*"\(.*\)".*\$/'\$filebase'.o: \1/' \\
		-e 's|: \./|: |' \\
		-e 's|: *$|: '\$srcfile'|' | \\
	$grep -v '^#' | $sort | $uniq
done
exit 0
EOS
	mkdep=$toplev/mkdep
	chmod +x $mkdep
	$eunicefix $mkdep
	if $mkdep dep.c >dep.out 2>/dev/null &&
		$contains 'dep\.o:.*dep\.h' dep.out >/dev/null 2>&1
	then
		echo "A shell script using $cpp does the trick."
	else
		echo "$cpp doesn't seem to be any use at all."
		$spitshell >../mkdep <<EOS
$startsh
$takeflags
files="\$@"
set X \$flags
shift
inc='.'
while test \$# -gt 0
do
	case "\$1" in
	-I) 
		shift
		inc="\$inc:\$1"
		;;
	-I*)
		dir=\`echo \$1 | sed -e 's/^-I//'\`
		inc="\$inc:\$dir"
		;;
	esac
	shift
done
set X \$files
shift
trap "$rm -f /tmp/mkdep\$\$; exit 1" 1 2 3 15
for srcfile
do
	case "\$srcfile" in
	*.c) c='.c';;
	*.y) c='.y';;
	*.l) c='.l';;
	esac
	filebase=\`basename \$srcfile \$c\`
	echo \$filebase.o: \$srcfile
	$grep '^#[  ]*include' \$srcfile /dev/null | \
	$sed -n -e 's/#[   ]*include[  ]*//' \\
		-e '/<\(.*\)>/ d' \\
		-e 's/:[^"]*"\([^"]*\)".*/: \1/' \\
		-e 's/\.c:/\.o:/p' > /tmp/mkdep\$\$
	IFS=': '
	while read file dep; do
		for dir in \$inc; do
			if $test -f "\$dir/\$dep"; then
				dep="\$dir/\$dep"
				break
			fi
		done
		echo "\$file: \$dep" | $sed -e 's,: \./,: ,'
	done </tmp/mkdep\$\$
	IFS=' '
	$rm -f /tmp/mkdep\$\$
done
exit 0
EOS
		mkdep=$toplev/mkdep
		chmod +x $mkdep
		$eunicefix $mkdep
		if $mkdep dep.c >dep.out 2>/dev/null &&
			$contains 'dep\.o:.*dep\.h' dep.out >/dev/null 2>&1
		then
			cat << EOM

I can use a script with grep instead, but it will make some incorrect
dependencies, since it doesn't understand about conditional compilation.
Moreover, some dependencies may be missing, because scanning won't be
a recursive process.
If you have a program which generates makefile dependencies, you may want
to use it.  If not, you can use the script and edit the Makefile by hand
if you need to.
EOM
		else
			mkdep=
			cat << EOM

I can't seem to generate makefile dependencies at all!  Perhaps you have a
program that does?  If you don't, you might look at the mkdep script to
see if you can create one which works.
EOM
		fi
	fi
esac
dflt="$mkdep"
fn=f~/
rp="Name of program to make makefile dependencies?"
. ./getfile
mkdep="$ans"
$rm -f dep.c dep.h dep.o dep.out

: see if getdtablesize exists
echo " "
case "$d_gettblsz" in
$define) d_gettblsz="$undef";;
$undef) d_gettblsz="$define";;
esac
if set getdtablesize val -f d_gettblsz; eval $csym; $val; then
	echo 'getdtablesize() found.' >&4
	d_gettblsz="$undef"
	tablesize=''
	$cat >nofile.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", getdtablesize());
}
EOCP
	nofile=''
	if $cc $ccflags nofile.c -o nofile $libs >/dev/null 2>&1; then
		nofile=`./nofile 2>/dev/null`
	fi
	if $test "$nofile"; then
		echo "(You have $nofile file descriptors available per process.)"
	else
		nofile='20'
		if ./bsd; then
			nofile='64'
		fi
	echo "(Hmm... Let's say you have $nofile file descriptors available.)"
	fi
else
	echo 'getdtablesize() NOT found...' >&4
	if set ulimit val -f; eval $csym; $val; then
		echo 'Maybe ulimit(4,0) will work...'
		$cat >nofile.c <<'EOCP'
#include <stdio.h>
#ifdef GETPARAM_H
#include <sys/param.h>
#endif
main()
{
	printf("%d %d\n",
#ifdef NOFILE
		NOFILE,
#else
		0,
#endif
		ulimit(4,0));
		exit(0);
}
EOCP
		if $cc $ccflags -DGETPARAM_H nofile.c -o nofile $libs >/dev/null 2>&1 \
			|| $cc $ccflags nofile.c -o nofile $libs >/dev/null 2>&1 ; then
			set `./nofile`
			d_gettblsz=$1
			d_ulimit4=$2
			if $test "$d_ulimit4" -lt 0; then
				echo "Your ulimit() call doesn't tell me what I want to know."
				echo "We'll just use NOFILE in this case."
				nofile=$d_gettblsz
				d_gettblsz="$define"
				tablesize='NOFILE'
			else
				if $test "$d_gettblsz" -gt 0; then
				echo "Your system defines NOFILE to be $d_gettblsz, and" >&4
				else
				echo "I had trouble getting NOFILE from your system, but" >&4
				fi
echo "ulimit returns $d_ulimit4 as the number of available file descriptors." >&4
				dflt='y';
				echo " "
	rp='Should I use ulimit to get the number of available file descriptors?'
				. ./myread
				case "$ans" in
				y*)
					nofile=$d_ulimit4
					d_gettblsz="$define"
					tablesize='ulimit(4, 0L)'
					echo "Using ulimit(4,0)."
					;;
				*)
					nofile=$d_gettblsz
					d_gettblsz="$define"
					tablesize='NOFILE'
					echo "Using NOFILE."
					;;
				esac
			fi
		else
			echo "Strange, I couldn't get my test program to compile."
			echo "We'll just use NOFILE in this case."
			d_gettblsz="$define"
			tablesize='NOFILE'
			nofile=''
		fi
	else
		echo 'Using NOFILE instead.'
		d_gettblsz="$define"
		tablesize='NOFILE'
		nofile=''
	fi
fi
case "$nofile" in
'')
	$cat >nofile.c <<'EOCP'
#include <stdio.h>
#ifdef GETPARAM_H
#include <sys/param.h>
#endif
main()
{
	printf("%d\n",
#ifdef NOFILE
		NOFILE,
#else
		0,
#endif
		);
		exit(0);
}
EOCP
	if $cc $ccflags -DGETPARAM_H nofile.c -o nofile $libs >/dev/null 2>&1 \
		|| $cc $ccflags nofile.c -o nofile $libs >/dev/null 2>&1 ; then
		nofile=`./nofile 2>/dev/null`
	fi
	if $test "$nofile"; then
		echo "(You have $nofile file descriptors available per process.)"
	else
		nofile='20'
		if ./bsd; then
			nofile='64'
		fi
	echo "(Hmm... Let's say you have $nofile file descriptors available.)"
	fi
	;;
esac
$rm -f nofile*

: see if getpagesize exists
set getpagesize d_getpagsz
eval $inlibc

: determine the system page size
echo " "
guess=' (OK to guess)'
case "$pagesize" in
'')
	$cat >page.c <<EOP
extern int getpagesize();
main()
{
	printf("%d\n", getpagesize());
}
EOP
	echo "Computing the granularity of memory management calls..." >&4
	dflt='4096'
	case "$d_getpagsz" in
	"$define")
		if $cc $ccflags page.c -o page $libs >/dev/null 2>&1; then
			dflt=`./page`
			guess=''
		else
			echo "(I can't seem to compile the test program--guessing)"
		fi
		;;
	*)
		if $cc $ccflags page.c -o page $libs -lPW >/dev/null 2>&1; then
			dflt=`./page`
			guess=''
			echo "(For your eyes only: I used the getpagesize() from -lPW.)"
		else
			if $contains PAGESIZE `./findhdr sys/param.h` >/dev/null 2>&1; then
				$cat >page.c <<EOP
#include <sys/param.h>
main()
{
	printf("%d\n", PAGESIZE);
}
EOP
				if $cc $ccflags page.c -o page $libs >/dev/null 2>&1; then
					dflt=`./page`
					guess=''
					echo "(Using value of PAGESIZE found in <sys/param.h>.)"
				fi
			fi
		fi
		;;
	esac
	;;
*) dflt="$pagesize"; guess='';;
esac
rp="What is the system page size, in bytes$guess?"
. ./myread
pagesize=$ans
$rm -f page.c page

: see what type pids are declared as in the kernel
set pid_t pidtype int stdio.h sys/types.h
eval $typedef
dflt="$pidtype"
echo " "
rp="What type are process ids on this system declared as?"
. ./myread
pidtype="$ans"

: Cruising for prototypes
echo " "
echo "Checking out function prototypes..." >&4
$cat >prototype.c <<'EOCP'
main(int argc, char *argv[]) {
	exit(0);}
EOCP
if $cc $ccflags -c prototype.c >prototype.out 2>&1 ; then
	echo "Your C compiler appears to support function prototypes."
	val="$define"
else
	echo "Your C compiler doesn't seem to understand function prototypes."
	val="$undef"
fi
set prototype
eval $setvar
$rm -f prototype*

: check for length of pointer
echo " "
case "$ptrsize" in
'')
	echo "Checking to see how big your pointers are..." >&4
	$cat >try.c <<'EOCP'
#include <stdio.h>
main()
{
	printf("%d\n", sizeof(char *));
}
EOCP
	if $cc $ccflags try.c -o try >/dev/null 2>&1 ; then
		dflt=`./try`
	else
		dflt='4'
		echo "(I can't seem to compile the test program.  Guessing...)"
	fi
	;;
*)
	dflt="$ptrsize"
	;;
esac
rp="What is the size of a pointer (in bytes)?"
. ./myread
ptrsize="$ans"
$rm -f try.c try

: see if ar generates random libraries by itself
echo " "
echo "Checking how to generate random libraries on your machine..." >&4
echo 'int bar1() { return bar2(); }' > bar1.c
echo 'int bar2() { return 2; }' > bar2.c
$cat > foo.c <<'EOP'
main() { printf("%d\n", bar1()); exit(0); }
EOP
$cc $ccflags -c bar1.c >/dev/null 2>&1
$cc $ccflags -c bar2.c >/dev/null 2>&1
$cc $ccflags -c foo.c >/dev/null 2>&1
ar rc bar.a bar2.o bar1.o >/dev/null 2>&1
if $cc $ccflags $ldflags -o foobar foo.o bar.a $libs > /dev/null 2>&1 &&
	./foobar >/dev/null 2>&1; then
	echo "ar appears to generate random libraries itself."
	orderlib=false
	ranlib=":"
elif ar ts bar.a >/dev/null 2>&1 &&
	$cc $ccflags $ldflags -o foobar foo.o bar.a $libs > /dev/null 2>&1 &&
	./foobar >/dev/null 2>&1; then
		echo "a table of contents needs to be added with 'ar ts'."
		orderlib=false
		ranlib="ar ts"
else
	case "$ranlib" in
	:) ranlib='';;
	'')
		ranlib=`./loc ranlib X /usr/bin /bin /usr/local/bin`
		$test -f $ranlib || ranlib=''
		;;
	esac
	if $test -n "$ranlib"; then
		echo "your system has '$ranlib'; we'll use that."
		orderlib=false
	else
		echo "your system doesn't seem to support random libraries"
		echo "so we'll use lorder and tsort to order the libraries."
		orderlib=true
		ranlib=":"
	fi
fi
$rm -f foo* bar* 

: get C preprocessor symbols handy
echo " "
$echo $n "Hmm... $c"
echo $al | $tr ' ' '\012' >Cppsym.know
$cat <<EOSS >Cppsym
$startsh
case "\$1" in
-l) list=true
	shift
	;;
esac
unknown=''
case "\$list\$#" in
1|2)
	for sym do
		if $contains "^\$1$" Cppsym.true >/dev/null 2>&1; then
			exit 0
		elif $contains "^\$1$" Cppsym.know >/dev/null 2>&1; then
			:
		else
			unknown="\$unknown \$sym"
		fi
	done
	set X \$unknown
	shift
	;;
esac
case \$# in
0) exit 1;;
esac
echo \$* | $tr ' ' '\012' | $sed -e 's/\(.*\)/\\
#ifdef \1\\
exit 0; _ _ _ _\1\\	 \1\\
#endif\\
/' >Cppsym\$\$
echo "exit 1; _ _ _" >>Cppsym\$\$
$cppstdin $cppminus <Cppsym\$\$ | $grep '^exit [01]; _ _'  >Cppsym2\$\$
case "\$list" in
true) $awk 'NF > 5 {print substr(\$6,2,100)}' <Cppsym2\$\$ ;;
*)
	sh Cppsym2\$\$
	status=\$?
	;;
esac
$rm -f Cppsym\$\$ Cppsym2\$\$
exit \$status
EOSS
chmod +x Cppsym
$eunicefix Cppsym
./Cppsym -l $al | $sort | $grep -v '^$' >Cppsym.true

: now check the C compiler for additional symbols
$cat >ccsym <<EOS
$startsh
$cat >tmp.c <<EOF
extern int foo;
EOF
for i in \`$cc -v -c tmp.c 2>&1\`
do
	case "\$i" in
	-D*) echo "\$i" | $sed 's/^-D//';;
	-A*) $test "$gccversion" && echo "\$i" | $sed 's/^-A\(.*\)(\(.*\))/\1=\2/';;
	esac
done
$rm -f try.c
EOS
chmod +x ccsym
$eunicefix ccsym
./ccsym | $sort | $uniq >ccsym.raw
$awk '/\=/ { print $0; next }
	{ print $0"=1" }' ccsym.raw >ccsym.list
$awk '{ print $0"=1" }' Cppsym.true >ccsym.true
$comm -13 ccsym.true ccsym.list >ccsym.own
$comm -12 ccsym.true ccsym.list >ccsym.com
$comm -23 ccsym.true ccsym.list >ccsym.cpp
also=''
symbols='symbols'
if $test -z ccsym.raw; then
	echo "Your C compiler doesn't seem to define any symbol!" >&4
	echo " "
	echo "However, your C preprocessor defines the following ones:"
	$cat Cppsym.true
else
	if $test -s ccsym.com; then
		echo "Your C compiler and pre-processor define these symbols:"
		$sed -e 's/\(.*\)=.*/\1/' ccsym.com
		also='also '
		symbols='ones'
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.cpp; then
		$test "$also" && echo " "
		echo "Your C pre-processor ${also}defines the following $symbols:"
		$sed -e 's/\(.*\)=.*/\1/' ccsym.cpp
		also='further '
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.own; then
		$test "$also" && echo " "
		echo "Your C compiler ${also}defines the following cpp variables:"
		$sed -e 's/\(.*\)=1/\1/' ccsym.own
		$sed -e 's/\(.*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
		$test "$silent" || sleep 1
	fi
fi
$rm -f ccsym*

: see how many register declarations we want to use
case "$registers" in
'')
	if ./Cppsym vax; then
		dflt=6
	elif ./Cppsym sun mc68000 mips; then
		dflt=10
	elif ./Cppsym pyr; then
		dflt=14
	elif ./Cppsym ns32000 ns16000; then
		dflt=5
	elif ./Cppsym $smallmach; then
		dflt=3
	else
		: if you have any other numbers for me, please send them in
		dflt=6
	fi;;
*) dflt=$registers ;;
esac
cat <<EOM
 
Different C compilers on different machines pay attention to different numbers
of register declarations.  About how many register declarations in each routine
does your C compiler pay attention to?  (OK to guess)

EOM
rp="Maximum register declarations?"
. ./myread
registers=$ans
reg1=''
$awk "BEGIN { for (i=1; i<=16; i++) printf \"reg%d=''\n\", i}" \
	</dev/null >.foo
. ./.foo
$awk "BEGIN { for (i=1; i<=$registers; i++) printf \"reg%d=register\n\", i}" \
	</dev/null >.foo
. ./.foo
$rm -f .foo

: see if sbrk can release core to the kernel
echo " "
case "$d_sbrk" in
"$define")
	echo "Let's see if your sbrk() is smart enough to release core..." >&4
	$cat > sbrk.c <<'EOC'
#define INC 256		/* Small enough to be less than a page size */

main()
{
	char *obrk = (char *) sbrk(0);
	char *nbrk;

	nbrk = (char *) sbrk(INC);
	if (nbrk == (char *) -1)
		exit(1);	/* Not enough memory */
	if (nbrk != obrk)
		exit(2);	/* Unreliable sbrk() */
	nbrk = (char *) sbrk(-INC);
	if (nbrk == (char *) -1)
		exit(3);	/* May have understood negative arg as huge positive */
	if (obrk != (char *) sbrk(0))
		exit(4);	/* Not smart, definitely */

	exit(0);		/* Ok */
}
EOC
	d_sbrksmart="$undef"
	dumb='-- assuming dumb sbrk().'
	if $cc $ccflags -o sbrk sbrk.c $libs >/dev/null 2>&1; then
		./sbrk >/dev/null 2>&1
		case $? in
		0) d_sbrksmart="$define"
			echo "Yes, it can be used with negative values." ;;
		1) echo "Sorry, not enough memory $dumb" ;;
		2) echo "No it's not, and besides it seems to be buggy..." ;;
		3) echo "No, it fails with negative values." ;;
		4) echo "Nope, your sbrk() is too dumb." ;;
		*) echo "Err... Unexpected result $dumb" ;;
		esac
	else
		echo "(Could not compile test program $dumb)"
	fi
	;;
*)
	echo "Since you don't have sbrk(), let's forget about the smart test!"
	d_sbrksmart="$undef"
	;;
esac
$rm -f sbrk sbrk.* core

: see if sys/select.h has to be included
set sys/select.h i_sysselct
eval $inhdr

: see if we should include time.h, sys/time.h, or both
echo " "
echo "Testing to see if we should include <time.h>, <sys/time.h> or both." >&4
$echo $n "I'm now running the test program...$c"
$cat >try.c <<'EOCP'
#include <sys/types.h>
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
#ifdef I_SYSSELECT
#include <sys/select.h>
#endif
main()
{
	struct tm foo;
#ifdef S_TIMEVAL
	struct timeval bar;
#endif
#ifdef S_TIMEZONE
	struct timezone tzp;
#endif
	if (foo.tm_sec == foo.tm_sec)
		exit(0);
#ifdef S_TIMEVAL
	if (bar.tv_sec == bar.tv_sec)
		exit(0);
#endif
	exit(1);
}
EOCP
flags=''
for s_timezone in '-DS_TIMEZONE' ''; do
sysselect=''
for s_timeval in '-DS_TIMEVAL' ''; do
for i_systimek in '' '-DSYSTIMEKERNEL'; do
for i_time in '' '-DI_TIME'; do
for i_systime in '-DI_SYSTIME' ''; do
	case "$flags" in
	'') $echo $n ".$c"
		if $cc $ccflags \
		$i_time $i_systime $i_systimek $sysselect $s_timeval $s_timezone \
		try.c -o try >/dev/null 2>&1 ; then
			set X $i_time $i_systime $i_systimek $sysselect $s_timeval
			shift
			flags="$*"
			echo " "
			$echo $n "Succeeded with $flags$c"
		fi
		;;
	esac
done
done
done
done
done
timeincl=''
echo " "
case "$flags" in
*SYSTIMEKERNEL*) i_systimek="$define"
	timeincl=`./findhdr sys/time.h`
	echo "We'll include <sys/time.h> with KERNEL defined." >&4;;
*) i_systimek="$undef";;
esac
case "$flags" in
*I_TIME*) i_time="$define"
	timeincl=`./findhdr time.h`" $timeincl"
	echo "We'll include <time.h>." >&4;;
*) i_time="$undef";;
esac
case "$flags" in
*I_SYSTIME*) i_systime="$define"
	timeincl=`./findhdr sys/time.h`" $timeincl"
	echo "We'll include <sys/time.h>." >&4;;
*) i_systime="$undef";;
esac
$rm -f try.c try

: check for fd_set items
$cat <<EOM

Checking to see how well your C compiler handles fd_set and friends ...
EOM
$cat >fd_set.c <<EOCP
#$i_systime I_SYS_TIME
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
#include <sys/types.h>
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#else
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
#endif
main() {
	fd_set fds;

#ifdef TRYBITS
	if(fds.fds_bits);
#endif

#if defined(FD_SET) && defined(FD_CLR) && defined(FD_ISSET) && defined(FD_ZERO)
	exit(0);
#else
	exit(1);
#endif
}
EOCP
if $cc $ccflags -DTRYBITS fd_set.c -o fd_set >fd_set.out 2>&1 ; then
	d_fds_bits="$define"
	d_fd_set="$define"
	echo "Well, your system knows about the normal fd_set typedef..." >&4
	if ./fd_set; then
		echo "and you have the normal fd_set macros (just as I'd expect)." >&4
		d_fd_macros="$define"
	else
		$cat >&4 <<'EOM'
but not the normal fd_set macros!  Gaaack!  I'll have to cover for you.
EOM
		d_fd_macros="$undef"
	fi
else
	$cat <<'EOM'
Hmm, your compiler has some difficulty with fd_set.  Checking further...
EOM
	if $cc $ccflags fd_set.c -o fd_set >fd_set.out 2>&1 ; then
		d_fds_bits="$undef"
		d_fd_set="$define"
		echo "Well, your system has some sort of fd_set available..." >&4
		if ./fd_set; then
			echo "and you have the normal fd_set macros." >&4
			d_fd_macros="$define"
		else
			$cat <<'EOM'
but not the normal fd_set macros!  Gross!  More work for me...
EOM
			d_fd_macros="$undef"
		fi
	else
	echo "Well, you got zip.  That's OK, I can roll my own fd_set stuff." >&4
		d_fd_set="$undef"
		d_fds_bits="$undef"
		d_fd_macros="$undef"
	fi
fi
$rm -f fd_set*


: see if select exists
set select d_select
eval $inlibc

: check for type of arguments to select.  This will only really
: work if the system supports prototypes and provides one for
: select.
case "$d_select" in
$define)
	: Make initial guess
	case "$selecttype" in
	''|' ')
		case "$d_fd_set" in
		$define) xxx='fd_set *' ;;
		*) xxx='int *' ;;
		esac
		;;
	*) 	xxx="$selecttype" 
		;;
	esac
	: backup guess
	case "$xxx" in
	'fd_set *') yyy='int *' ;;
	'int *') yyy='fd_set *' ;;
	esac

	$cat <<EOM

Checking to see what type of arguments are expected by select().
EOM
	$cat >try.c <<EOCP
#$i_systime I_SYS_TIME
#$i_sysselct I_SYS_SELECT
#$d_socket HAS_SOCKET
#include <sys/types.h>
#ifdef HAS_SOCKET
#include <sys/socket.h> /* Might include <sys/bsdtypes.h> */
#endif
#ifdef I_SYS_TIME
#include <sys/time.h>
#else
#ifdef I_SYS_SELECT
#include <sys/select.h>
#endif
#endif
main()
{
	int width;
	Select_fd_set_t readfds;
	Select_fd_set_t writefds;
	Select_fd_set_t exceptfds;
	struct timeval timeout;
	select(width, readfds, writefds, exceptfds, &timeout);
	exit(0);
}
EOCP
	if $cc $ccflags -c -DSelect_fd_set_t="$xxx" try.c >/dev/null 2>&1 ; then
		selecttype="$xxx"
		echo "Your system uses $xxx for the arguments to select." >&4
	elif $cc $ccflags -c -DSelect_fd_set_t="$yyy" try.c >/dev/null 2>&1 ; then
		selecttype="$yyy"
		echo "Your system uses $yyy for the arguments to select." >&4
	else
		rp='What is the type for the 2nd, 3rd, and 4th arguments to select?'
		dflt="$xxx"
		. ./myread
		selecttype="$ans"
	fi
	$rm -f try.[co]
	;;
*)	selecttype='int *'
	;;
esac

: see if signal is declared as pointer to function returning int or void
echo " "
xxx=`./findhdr signal.h`
$test "$xxx" && $cppstdin $cppminus $cppflags < $xxx >$$.tmp 2>/dev/null
if $contains 'int.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
elif $contains 'void.*\*[ 	]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have void (*signal())() instead of int." >&4
	val="$define"
elif $contains 'extern[ 	]*[(\*]*signal' $$.tmp >/dev/null 2>&1 ; then
	echo "You have int (*signal())() instead of void." >&4
	val="$undef"
else
	case "$d_voidsig" in
	'')
	echo "I can't determine whether signal handler returns void or int..." >&4
		dflt=void
		rp="What type does your signal handler return?"
		. ./myread
		case "$ans" in
		v*) val="$define";;
		*) val="$undef";;
		esac;;
	"$define")
		echo "As you already told me, signal handler returns void." >&4;;
	*)
		echo "As you already told me, signal handler returns int." >&4;;
	esac
fi
set d_voidsig
eval $setvar
case "$d_voidsig" in
"$define") signal_t="void";;
*) signal_t="int";;
esac
$rm -f $$.tmp

: see what type uids are declared as in the kernel
set uid_t uidtype xxx stdio.h sys/types.h
eval $typedef
case "$uidtype" in
xxx)
	xxx=`./findhdr sys/user.h`
	set `grep '_ruid;' "$xxx" 2>/dev/null` unsigned short
	case $1 in
	unsigned) dflt="$1 $2" ;;
	*) dflt="$1" ;;
	esac
	;;
*) dflt="$uidtype";;
esac
echo " "
rp="What is the type for user ids returned by getuid()?"
. ./myread
uidtype="$ans"

: check for void type
echo " "
echo "Checking to see how well your C compiler groks the void type..." >&4
echo " "
$cat >&4 <<EOM
  Support flag bits are:
    1: basic void declarations.
    2: arrays of pointers to functions returning void.
    4: operations between pointers to and addresses of void functions.
    8: generic void pointers.
EOM
echo " "
case "$voidflags" in
'')
	$cat >try.c <<'EOCP'
#if TRY & 1
void main() {
#else
main() {
#endif
	extern void moo();	/* function returning void */
	void (*goo)();		/* ptr to func returning void */
#if TRY & 8
	void *hue;		/* generic ptr */
#endif
#if TRY & 2
	void (*foo[10])();
#endif

#if TRY & 4
	if(goo == moo) {
		exit(0);
	}
#endif
	exit(0);
}
EOCP
	if $cc -c -DTRY=$defvoidused try.c >.out 2>&1 ; then
		voidflags=$defvoidused
	echo "It appears to support void to the level $package wants ($defvoidused)."
		if $contains warning .out >/dev/null 2>&1; then
			echo "However, you might get some warnings that look like this:"
			$cat .out
		fi
	else
echo "Hmm, your compiler has some difficulty with void. Checking further..." >&4
		if $cc -c -DTRY=1 try.c >/dev/null 2>&1 ; then
			echo "It supports 1..."
			if $cc -c -DTRY=3 try.c >/dev/null 2>&1 ; then
				echo "It also supports 2..."
				if $cc -c -DTRY=7 try.c >/dev/null 2>&1 ; then
					voidflags=7
					echo "And it supports 4 but not 8 definitely."
				else
					echo "It doesn't support 4..."
					if $cc -c -DTRY=11 try.c >/dev/null 2>&1 ; then
						voidflags=11
						echo "But it supports 8."
					else
						voidflags=3
						echo "Neither does it support 8."
					fi
				fi
			else
				echo "It does not support 2..."
				if $cc -c -DTRY=13 try.c >/dev/null 2>&1 ; then
					voidflags=13
					echo "But it supports 4 and 8."
				else
					if $cc -c -DTRY=5 try.c >/dev/null 2>&1 ; then
						voidflags=5
						echo "And it supports 4 but has not heard about 8."
					else
						echo "However it supports 8 but not 4."
					fi
				fi
			fi
		else
			echo "There is no support at all for void."
			voidflags=0
		fi
	fi
esac
dflt="$voidflags";
rp="Your void support flags add up to what?"
. ./myread
voidflags="$ans"
$rm -f try.* .out

: determine compiler compiler
case "$yacc" in
'')
	dflt=yacc;;
*)
	dflt="$yacc";;
esac
echo " "
comp='yacc'
if $test -f "$byacc"; then
	dflt="$byacc"
	comp="byacc or $comp"
fi
if $test -f "$bison"; then
	comp="$comp or bison -y"
fi
rp="Which compiler compiler ($comp) shall I use?"
. ./myread
yacc="$ans"
case "$yacc" in
*bis*)
	case "$yacc" in
	*-y*) ;;
	*)
		yacc="$yacc -y"
		echo "(Adding -y option to bison to get yacc-compatible behaviour.)"
		;;
	esac
	;;
esac

: see if we need extra yacc flags
dflt="$yaccflags"
case "$dflt" in
'') dflt=none;;
esac
$cat <<EOH

Your yacc program may need extra flags to normally process the parser sources.
Do NOT specify any -d or -v flags here, since those are explicitely known
by the various Makefiles. However, if your machine has strange/undocumented
options (like -Sr# on SCO to specify the maximum number of grammar rules), then
please add them here.  To use no flags, specify the word "none".

EOH
rp="Any additional yacc flags?"
. ./myread
case "$ans" in
none) yaccflags='';;
*) yaccflags="$ans";;
esac

: see if this is a direct system
set direct.h i_direct
eval $inhdr

: see if dlfcn is available
set dlfcn.h i_dlfcn
eval $inhdr

: see if this is a sys/file.h system
val=''
set sys/file.h val
eval $inhdr

: do we need to include sys/file.h ?
case "$val" in
"$define")
	echo " "
	if $h_sysfile; then
		val="$define"
		echo "We'll be including <sys/file.h>." >&4
	else
		val="$undef"
		echo "We won't be including <sys/file.h>." >&4
	fi
	;;
*)
	h_sysfile=false
	;;
esac
set i_sysfile
eval $setvar

: see if fcntl.h is there
val=''
set fcntl.h val
eval $inhdr

: see if we can include fcntl.h
case "$val" in
"$define")
	echo " "
	if $h_fcntl; then
		val="$define"
		echo "We'll be including <fcntl.h>." >&4
	else
		val="$undef"
		if $h_sysfile; then
	echo "We don't need to include <fcntl.h> if we include <sys/file.h>." >&4
		else
			echo "We won't be including <fcntl.h>." >&4
		fi
	fi
	;;
*)
	h_fcntl=false
	val="$undef"
	;;
esac
set i_fcntl
eval $setvar

: see if sys/select.h has to be included
xxx=`./findhdr sys/select.h`
if $test "$xxx"; then
    if $contains 'fd_set.*{' $xxx >/dev/null 2>&1; then
        val="$define"
        echo "You have struct fd_set defined in <sys/select.h>." >&4
	else
		val="$undef"
    fi
else
    val="$undef"
fi
set i_fd_setsyss
eval $setvar
: see if this is an grp system
set grp.h i_grp
eval $inhdr

: see if this is a limits.h system
set limits.h i_limits
eval $inhdr

set netns/ns.h i_netns_ns
eval $inhdr

: see if this is a netinet/in.h or sys/in.h system
set netinet/in.h i_niin sys/in.h i_sysin
eval $inhdr

: see if this is a pwd.h system
set pwd.h i_pwd
eval $inhdr

case "$i_pwd" in
$define)
	xxx=`./findhdr pwd.h`
	$cppstdin $cppflags $cppminus < $xxx >$$.h

	if $contains 'pw_quota' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwquota
	eval $setvar

	if $contains 'pw_age' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwage
	eval $setvar

	if $contains 'pw_change' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwchange
	eval $setvar

	if $contains 'pw_class' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwclass
	eval $setvar

	if $contains 'pw_expire' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwexpire
	eval $setvar

	if $contains 'pw_comment' $$.h >/dev/null 2>&1; then
		val="$define"
	else
		val="$undef"
	fi
	set d_pwcomment
	eval $setvar

	$rm -f $$.h
	;;
*)
	val="$undef"; 
	set d_pwquota; eval $setvar
	set d_pwage; eval $setvar
	set d_pwchange; eval $setvar
	set d_pwclass; eval $setvar
	set d_pwexpire; eval $setvar
	set d_pwcomment; eval $setvar
	;;
esac

: see if stdarg is available
echo " "
if $test `./findhdr stdarg.h`; then
	echo "<stdarg.h> found." >&4
	valstd="$define"
else
	echo "<stdarg.h> NOT found." >&4
	valstd="$undef"
fi

: see if varags is available
echo " "
if $test `./findhdr varargs.h`; then
	echo "<varargs.h> found." >&4
else
	echo "<varargs.h> NOT found, but that's ok (I hope)." >&4
fi

: set up the varargs testing programs
$cat > varargs.c <<EOP
#ifdef I_STDARG
#include <stdarg.h>
#endif
#ifdef I_VARARGS
#include <varargs.h>
#endif

#ifdef I_STDARG
int f(char *p, ...)
#else
int f(va_alist)
va_dcl
#endif
{
	va_list ap;
#ifndef I_STDARG
	char *p;
#endif
#ifdef I_STDARG
	va_start(ap,p);
#else
	va_start(ap);
	p = va_arg(ap, char *);
#endif
	va_end(ap);
}
EOP
$cat > varargs <<EOP
if $cc -c $ccflags -D\$1 varargs.c >/dev/null 2>&1; then
	echo "true"
else
	echo "false"
fi
$rm -f varargs.o
EOP
chmod +x varargs

: now check which varargs header should be included
echo " "
i_varhdr=''
case "$valstd" in
"$define")
	if `./varargs I_STDARG`; then
		val='stdarg.h'
	elif `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
*)
	if `./varargs I_VARARGS`; then
		val='varargs.h'
	fi
	;;
esac
case "$val" in
'')
echo "I could not find the definition for va_dcl... You have problems..." >&4
	val="$undef"; set i_stdarg; eval $setvar
	val="$undef"; set i_varargs; eval $setvar
	;;
*) 
	set i_varhdr
	eval $setvar
	case "$i_varhdr" in
	stdarg.h)
		val="$define"; set i_stdarg; eval $setvar
		val="$undef"; set i_varargs; eval $setvar
		;;
	varargs.h)
		val="$undef"; set i_stdarg; eval $setvar
		val="$define"; set i_varargs; eval $setvar
		;;
	esac
	echo "We'll include <$i_varhdr> to get va_dcl definition." >&4;;
esac
$rm -f varargs*

: see if this is an sysdir system
set sys/dir.h i_sysdir
eval $inhdr

: see if this is an sysndir system
set sys/ndir.h i_sysndir
eval $inhdr

: see if sys/resource.h has to be included
set sys/resource.h i_sysresrc
eval $inhdr

: see if this is a sys/socket.h system
set sys/socket.h i_syssock
eval $inhdr

: see where struct timeb is defined
echo " "
xxx=`./findhdr sys/timeb.h`
if $test "$xxx"; then
	if $contains 'struct timeb' $xxx >/dev/null 2>&1; then
		val="$define"
		echo "You have struct timeb defined in <sys/timeb.h>." >&4
	else
		val="$undef"
		echo "Assuming struct timeb is defined in <sys/time.h>." >&4
	fi
else
	val="$undef"
echo "No <sys/timeb.h> -- Assuming struct timeb is defined in <sys/time.h>." >&4
fi
set i_systimeb
eval $setvar

: see if this is a sys/un.h system
set sys/un.h i_sysun
eval $inhdr

: see if sys/select.h has to be included
xxx=`./findhdr sys/select.h`
if $test "$xxx"; then
    if $contains 'timeval.*{' $xxx >/dev/null 2>&1; then
        val="$define"
        echo "You have struct timeval defined in <sys/select.h>." >&4
	else
		val="$undef"
    fi
else
    val="$undef"
fi
set i_tmvlsyss
eval $setvar
: see if this is an utime system
set utime.h i_utime
eval $inhdr

set Xm/Protocols.h i_xm_protocols
eval $inhdr

: end of configuration questions
echo " "
echo "End of configuration questions."
echo " "

: back to where it started
if test -d ../UU; then
	cd ..
fi

: configuration may be patched via a 'config.over' file
if $test -f config.over; then
	echo " "
	dflt=y
	rp='I see a config.over file.  Do you wish to load it?'
	. UU/myread
	case "$ans" in
	n*) echo "OK, I'll ignore it.";;
	*)	. ./config.over
		echo "Configuration override changes have been loaded."
		;;
	esac
fi

: in case they want portability, strip down executable paths
case "$d_portable" in
"$define")
	echo " "
	echo "Stripping down executable paths..." >&4
	for file in $loclist $trylist; do
		eval $file="\$file"
	done
	;;
esac

: create config.sh file
echo " "
echo "Creating config.sh..." >&4
$spitshell <<EOT >config.sh
$startsh
#--|----------------------------------------------------------------
#--| Eiffel runtime configuration
#--| Copyright (C) 1985-2004 Eiffel Software. All rights reserved.
#--| Duplication and distribution prohibited.  May be used only with
#--| ISE Eiffel, under terms of user license.
#--| Contact Eiffel Software for any other use.
#--|
#--| Interactive Software Engineering Inc.
#--| dba Eiffel Software
#--| 356 Storke Road, Goleta, CA 93117 USA
#--| Telephone 805-685-1006, Fax 805-685-6869
#--| Contact us at: http://www.eiffel.com/general/email.html
#--| Customer support: http://support.eiffel.com
#--| For latest info on our award winning products, visit:
#--|     http://www.eiffel.com
#--|----------------------------------------------------------------

#Computation/sizes
byteorder='$byteorder'
pagesize='$pagesize'
alignbytes='$alignbytes'
doublesize='$doublesize'
intsize='$intsize'
integer_64_size='8'
floatsize='$floatsize'
ptrsize='$ptrsize'
longsize='$longsize'
integer_32_size='4'
integer_16_size='2'
charsize='$charsize'
bitpbyte='$bitpbyte'
lngpad_2='LNGPAD(2)'

#Formatting
#Check value for next 4
inttypes_include=''
eif_integer_64_display='"lld"'
eif_natural_64_display='"llu"'
eif_pointer_display='"X"'
eif_integer_64_constant='CAT2(x,LL)'
d_uint64_to_real='define'

#File system
nofile='$nofile'
groupstype='$groupstype'
uidtype='$uidtype'
d_chown='$d_chown'
d_dup2='$d_dup2'
d_dirnamlen='$d_dirnamlen'
#Check value for next 1 on 64 bits platform.
d_eofpipe='$d_eofpipe'
d_fcntl='$d_fcntl'
d_geteuid='$d_geteuid'
d_getgrgid='$d_getgrgid'
d_getgrps='$d_getgrps'
d_getpwuid='$d_getpwuid'
d_link='$d_link'
d_lstat='$d_lstat'
d_mkdir='$d_mkdir'
d_readdir='$d_readdir'
d_rewinddir='$d_rewinddir'
d_rename='$d_rename'
d_rmdir='$d_rmdir'
d_unlink='$d_unlink'
i_dirent='$i_dirent'
i_fcntl='$i_fcntl'
i_grp='$i_grp'
i_limits='$i_limits'
i_pwd='$i_pwd'
i_sysdir='$i_sysdir'
i_sysfile='$i_sysfile'
i_sysndir='$i_sysndir'

#Network
selecttype='$selecttype'
d_keepalive='$d_keepalive'
i_fd_setsyss='$i_fd_setsyss'
i_niin='$i_niin'
i_sysin='$i_sysin'
i_syssock='$i_syssock'
i_sysun='$i_sysun'

#Time
timetype='$timetype'
d_ftime='$d_ftime'
d_gettimeod='$d_gettimeod'
d_rusage='$d_rusage'
d_time='$d_time'
d_times='$d_times'
d_utime='$d_utime'
i_sysresrc='$i_sysresrc'
i_systimeb='$i_systimeb'
i_systimes='$i_systimes'
i_time='$i_time'
i_systime='$i_systime'
i_systimek='$i_systimek'
i_utime='$i_utime'
#Check value for next 1
i_sysutime='undef'
i_tmvlsyss='$i_tmvlsyss'

#Signals
abortsig='$abortsig'
signal_t='$signal_t'
d_bsdjmp='$d_bsdjmp'
#Check value for next 1
d_bsdsig='undef'
d_keepsig='$d_keepsig'
d_sigaltstack='$d_sigaltstack'
d_siglist='$d_siglist'
d_sigsetmk='$d_sigsetmk'
d_sigvec='$d_sigvec'
d_sigvectr='$d_sigvectr'

#System
malloctype='$malloctype'
pidtype='$pidtype'
prototype='$prototype'
d_gethid='$d_gethid'
d_maypanic='$d_maypanic'
d_nanosleep='$d_nanosleep'
d_pidcheck='$d_pidcheck'
d_sbrk='$d_sbrk'
d_sbrksmart='$d_sbrksmart'
d_smartmmap='$d_smartmmap'
d_strerror='$d_strerror'
d_syserrlst='$d_syserrlst'
d_sysernlst='$d_sysernlst'
d_strerrm='$d_strerrm'
d_usleep='$d_usleep'
i_stdarg='$i_stdarg'
i_varargs='$i_varargs'

#Shell
eunicefix='$eunicefix'
rm='$rm'
sed='$sed'
spitshell='$spitshell'

#Compiler/Preprocessor
add_log='$add_log'
binary_format='$binary_format'
cc='$cc'
ccflags='$ccflags'
cpp='$cpp'
cppflags='$cppflags'
cpp_stuff='$cpp_stuff'
defvoidused='$defvoidused'
#Check value for next 4
eif_sgi='$eif_sgi'
eif_solaris='$eif_solaris'
eif_win32='$eif_win32'
eif_windows='$eif_windows'
Mcc='$Mcc'
#Check value for next 2
mtccflags="\$ccflags -DEIF_THREADS -DEIF_POSIX_THREADS"
mtcppflags="\$cppflags -DEIF_THREADS -DEIF_POSIX_THREADS"
optimize="$optimize \$binary_format \$platform_arch"
platform_arch='$platform_arch'
voidflags='$voidflags'
#Check value for next 1
warning_level='$warning_level'
wkoptimize="$wkoptimize \$binary_format \$platform_arch"

#Makefiles
ar='ar'
command_makefile='make -f'
concurrent_prefix='c'
cp='$cp'
eiflib='finalized'
ld='ld'
ldflags="$ldflags \$binary_format \$platform_arch"
ldsharedflags="\$ldflags -shared -o"
libs='$libs'
ln='$ln'
make='$make'
mkdep='$mkdep'
mkdir='$mkdir'
mtldflags="\$ldflags"
mtldsharedflags="\$ldsharedflags"
mtlibs="\$libs"
mt_prefix='mt'
mv='$mv'
prefix='lib'
ranlib='$ranlib'
shared_prefix='lib'
shared_suffix='.so'
shared_rt_suffix='.so'
sharedlibs='$libs'
sharedlibversion='.5.6'
sharedlink='ld'
suffix='.a'
wkeiflib='wkbench'

#testing
start_test='if [ ! -f finished ] ; then'
end_test='; fi'
create_test='touch finished'

EOT

: add special variables
$test -f patchlevel.h && \
awk '/^#define/ {printf "%s=%s\n",$2,$3}' patchlevel.h >>config.sh
echo "CONFIG=true" >>config.sh

: propagate old symbols
if $test -f UU/config.sh; then
	<UU/config.sh sort | uniq >UU/oldconfig.sh
	sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' config.sh config.sh UU/oldconfig.sh |\
	sort | uniq -u >UU/oldsyms
	set X `cat UU/oldsyms`
	shift
	case $# in
	0) ;;
	*)
		cat <<EOM
Hmm...You had some extra variables I don't know about...I'll try to keep 'em...
EOM
		echo "# Variables propagated from previous config.sh file." >>config.sh
		for sym in `cat UU/oldsyms`; do
			echo "    Propagating $hint variable "'$'"$sym..."
			eval 'tmp="$'"${sym}"'"'
			echo "$tmp" | \
				sed -e "s/'/'\"'\"'/g" -e "s/^/$sym='/" -e "s/$/'/" >>config.sh
		done
		;;
	esac
fi

: Finish up by extracting the .SH files
case "$alldone" in
exit)
	$rm -rf UU
	echo "Done."
	exit 0
	;;
cont)
	;;
'')
	dflt=''
	nostick=true
	$cat <<EOM

If you'd like to make any changes to the config.sh file before I begin
to configure things, do it as a shell escape now (e.g. !vi config.sh).

EOM
	rp="Press return or use a shell escape to edit config.sh:"
	. UU/myread
	nostick=''
	case "$ans" in
	'') ;;
	*) : in case they cannot read
		sh 1>&4 -c "$ans";;
	esac
	;;
esac

: if this fails, just run all the .SH files by hand
. ./config.sh

echo " "
exec 1>&4
. ./UU/extract

if $contains '^depend:' [Mm]akefile >/dev/null 2>&1; then
	dflt=y
	case "$silent" in
	true) ;;
	*)
		$cat <<EOM

Now you need to generate make dependencies by running "make depend".
You might prefer to run it in background: "make depend > makedepend.out &"
It can take a while, so you might not want to run it right now.

EOM
		;;
	esac
	rp="Run make depend now?"
	. UU/myread
	case "$ans" in
	y*)
		make depend && echo "Now you must run a make."
		;;
	*)
		echo "You must run 'make depend' then 'make'."
		;;
	esac
elif test -f [Mm]akefile; then
	echo " "
	echo "Now you must run a make."
else
	echo "Done."
fi

$rm -f kit*isdone ark*isdone
$rm -rf UU

: End of Configure

