<?xml version="1.0"?>

<!DOCTYPE ebook
[
<!ELEMENT ebook (page+)>
<!ELEMENT page (topic, text, page+)>
<!ATTLIST page
          key    CDATA "auto">
<!ELEMENT topic (#PCDATA)>
<!ELEMENT text (#PCDATA)>
]>

<ebook>
	<page key="index.html">
		<topic>
			About eXML
		</topic>
		<text>
			<![CDATA[
				<P><i>eXML</i> is a <A
				HREF="http://www.w3.org/TR/1998/REC-xml-19980210">XML 1.0</A> parser
				for Eiffel based on <A href ="http://www.jclark.com/xml/expat.html"><i>expat</i></A>. 
				Please see the <A href ="http://www.jclark.com/xml/expat.html"><i>expat</i>-hompage</a> 
				for details on the parser.</P>
			
				<P>The current <i>eXML</i> version is <b>0.1.6</b>. It is using <i>expat</i>
				version <b>1.0.2</b></P>

				<P>Copyright (c) 1999 <A HREF="mailto:andreas.leitner@teleweb.at">Andreas Leitner</A>.  eXML is subject to the <A
				HREF="forum.txt">Eiffel Forum Freeware License</A>.</P>
			]]>			
		</text>
		</page>	
	<page key="about_eiffel.html">
		<topic>
			About Eiffel
		</topic>
		<text>
			<![CDATA[
				Under construction... <br>
				In the meanwhile if you want to learn more about Eiffel, have a look at this excelent site:
				<A HREF="http://www.elj.com/eiffel/getting-started/">Eiffel Liberty</a>
			]]>			
		</text>
	</page>
	<page key="news.html">
		<topic>
			News
		</topic>
		<text>
			<![CDATA[
			<p>
				<b>04/13/1999 - Version 0.1.7</b><br>
				This release will hopefully be the last release that in the 0.1.x series. New releases will only be made if bugs are found. Changes in this release are that expat is not included anymore. Instead you need to setup a EXPAT eniviroment variable that points to the directory that contains expat. This will help making eXML better adoptable to other parser back ends.  
			<p>
				<b>10/12/1999 </b><br>
				We have established a roadmap towards version 1.0 of eXML on the eXML mailing list. An experimental 
				read only access to the eXML cvs server has been established. If you are keen please use
				":pserver:anon@exml.dhs.org/home/cvsroot:" as your CVSROOT and do a "cvs login; cvs co exml" for the
				latest exeprimental version of eXML.
			<p>
				<b>04/13/1999 </b><br>
				This website is now automatically generated with eBook. eBook is included as example 
				application for the tree based XML parser. For more information on eBook please have
				a look at the <A HREF="ebook.html">eBook Documentation</A>.
			<p>
				<b>04/13/1999 - Version 0.1.6</b><br>
				Added eBook sample (Details on it later). The tree based parser now generates attributes
				of elements. Some bug fixes.
			<p>
				<b>04/08/1999 - Version 0.1.5</b><br>
				Basic implementation of a tree based parser and bugfixes.
			<p>
				<b>04/01/1999</b><br>
				Redesigned web site. Still in work (: Works fine with IE5. Netscape 4.5 on Windows has
				some problems. Others have not been tested yet. Please send in any comments.
			<p>
				<b>Version 0.1.4:</b><br>
						Linux is now officially supported. Easier installing of <i>eXML</i>.
			<p>
				<b>Version 0.1.3:</b><br>
						<i>eXML</i> now also compiles under SmallEiffel. Redesing of internal classes.
			<p>
				<b>Version 0.1.2:</b><br>
						<i>eXML</i> Redesing of internal classes to enable easier port.
			<p>
				<b>Version 0.1.1:</b><br>
					Many more hooks are supported. Most of the expat API has been
					encapsulated, but some still need some work to make the features accessible easily.
			]]>			
		</text>
	</page>
	<page key="download.html">
		<topic>
			Download
		</topic>
		<text>
			<![CDATA[
				The latest stable release of <i>eXML</i> can be downloaded from 
				<A HREF="bin/exml_0_1_7.tgz">exml_0_1_7.tgz</A>. For CVS access please have a look at the news-page, or contact me via email.
				<p>
				For your convenience <A HREF="bin/exml_0_1_6.zip">eXML version 0.1.6</A> is still available.
				<P>
				When unpacking the zips on Unix/Linux with "unzip" please use the "-a" option to automatically convert the windows text files to the Unix standard.
			]]>			
		</text>
	</page>
	<page key="compatibility.html">
		<topic>
			Compatibility
		</topic>
		<text>
			<![CDATA[
				<b>
					Eiffel Compiler
				</b>
				<ul>
					<li>
						<a href="http://www.eiffel.com">ISE Eiffel</a> 4.2 (or better) on Windows (tested with Visual C++ 6 as
						backend C-compiler). If you succeed in compiling eXML on Unix/Linux please mail me. I would be happy
						to inlcude the Linux ACE file in the next release then.
					</li>
					<li>
						<a href="http://smalleiffel.loria.fr">	SmallEiffel</a> -0.78 Beta #3 (or better) on Windows and Linux 
						(tested with Visual C++ 6 resp. gcc (don't ask me which version :) as backend C-compiler)
					</li>
				</ul>
				<P>
					<b>
						Libraries
					</b>
				<ul>
					<li>
						<A HREF="http://www.gobo.demon.co.uk/eiffel/gobo/">GOBO</A>
					</li>
				</ul>				
				<P>
				<b>
					Note on SmallEiffel
				</b><br>
				<P>
				<b>
					Note on GOBO
				</b><br>
				        Since version 0.1.7 of eXML GOBO 1.5 is required. Previous version should work fine with GOBO 1.4. Even eXML 0.1.7 should run fine with GOBO < 1.5 if you do not use the eBook example.
			]]>			
		</text>
	</page>
	<page key="installation.html">
		<topic>
			Installation
		</topic>
		<text>
			<![CDATA[
				<P>To install the <i>eXML</i> Library unpack it in a directory of your choice. You will need to
				set the following enviroment variables to compile an eXML application:

				<P>
				<b>EXML:</b><br>
					Pointing to the directory where you installed eXML.
				</P>

				<P>
				<b>GOBO:</b><br>
					Pointing to the directory where you installed GOBO. If you don't have GOBO, get it from
					<A HREF="http://www.gobo.demon.co.uk/eiffel/gobo/">http://www.gobo.demon.co.uk/eiffel/gobo/</A>.
				</P>

				<b>EXPAT:</b><br>
					Pointing to the directory where you installed expat. If you don't have expat, get it from
					<A HREF=http://www.jclark.com/xml/expat.html">http://www.jclark.com/xml/expat.html</A>.
				</P>

				<br>
				You need to do one ore more of the following actions depending on the configuration you use:
			
				<P>
				<b>Windows (all):</b><br>
					All the needed libraries come precompiled. The DLL's are stored in the directory %EXML%\expat\bin. Be sure they
					are in your DLL-loadpath. It's a good idea to put the DLL's in your system directory.
			
				</P>
				<P>
				<b>Windows (ISE Eiffel):</b><br>
					There is an extra C-library needed. Please go to the directory %EXML%\compiler_specific\ise\clib and run
					"nmake makefile.win.msc"
				</P>
				<P>
				<b>Linux (all):</b><br>
					Go to the expat directory and run "make". This will generate the expat object files, that are
					needed when compiling an eXML application.
				</P>

			]]>			
		</text>
	</page>
	<page key="documentation.html">
		<topic>
			Documentation
		</topic>
		<text>
			<![CDATA[
				<p>
					eXML provides two different type of parsers: an event based parser and a tree based parser.
					Have a look at 
					<a href="http://www.megginson.com/SAX/event.html">http://www.megginson.com/SAX/event.html</a> for a
					comparsion between <i>event based</i> and <i>tree based</i> XML parsers. The tree based parser (XML_TREE_PARSER) 
					is implemented	as a descentant of the event based parser (XML_PARSER).
			]]>			

		</text>
		<page key="tree_parser.html">
			<topic>
				The Tree Based Parser
			</topic>
			<text>
				<![CDATA[
					<p>
						For the user of the library in most cases the tree based parser will be the better choice. For this reason I will
						limit the documentation on this topic for now. Objects of the type XML_TREE_PARSER can be feed with a XML document
						split up in one or more strings. The following example parsers a XML document that is stored completly 
						in a string object of the name `buffer'.
					</p>
	
	<pre class="EiffelSource">
	.
	.
	.
	local
		parser: XML_TREE_PARSER
	.
	.
	.
			-- somewhere the parser must be created (:
		!! parser.make
	.
	.
	.
			-- parse the XML-document
	parser.parse_string (buffer)
			-- and tell the parser that the end of the document has been reached
	parser.set_end_of_file	
	
	if
		not parser.is_correct
	then
			-- whoops! there was an error in the docment.
			-- print out some information about that error
		print ("%N")
		print (parser.last_error_string)
		print (" at ln: ")
		print (parser.last_line_number)
		print (", cl: ")
		print (parser.last_column_number)
		print ("%N")
	else
			-- the document was parsed successfully.
			-- print out the structure of the document
		print (parser.out)
	end
	
	</pre>
			
	
					<p>
						The parser stores the information contained in the XML-document as a tree consisting of XML_NODES. The following
						is a inheritance graph of all nodes currently implemented.
					</p>
					<p>
						<img src="/imgs/nodes.jpg" alt="nodes">
					</p>
				
					<p>
						The parser inheritance graph itself is presented in the next picture. You see that the tree 
						parser not only inherits from the event based parser, but also from XML_DOCUMENT. Objects of the
						type XML_DOCUMENT represent a whole XML-document. They have a `root_element' of the type XML_ELEMENT
						and (in the future will) hold additional information given in the XML-document (i.e. the encoding)
					</p>
				
					<p>
						<img src="/imgs/parser.jpg" alt="parser">
					</p>
				]]>			
			</text>
		</page>
		<page key="ebook.html">
			<topic>
				eBook
			</topic>
			<text>
				<![CDATA[
					eBook is an example of an eXML tree based parser application. It is included in the eXML package. 
					But eBook is more than a plain example, it is pretty much an application of its own. For example
					this whole web site is generated using eBook. The text and structure of this web site is
					stored in a XML-document. eBook takes this XML-document and some additional layout files and
					generates HTML pages as output.
					<p>
					There are several reasons why this can be usefull. I.e. eBook automatically generates the menu 
					you can see at the right. If I want the site to have a new design, I only need to change the
					layout files and rerun eBook to generate the new HTML pages. eBook helps you to seperate 
					the actual information from the layout of HTML sites. It makes it even possible to create 
					different layout-files for different browsers, so you do not need to fidle with compatibility
					problems.
					<p>
					Currently there is not much documentation available about eBook. Have a look at the test data
					in the directory "/examples/test_data/ebook/input" to see how eBook works.
					<p>
					Watch this space for more information about eBook...
					<p>
					One last note: If you try eBook and worry about it beeing slow, try compiling it with assertion 
					checking turned off !!!
				]]>			
			</text>




			<page key="ebook_xml.html">
				<topic>
					eBook File Format
				</topic>
				<text>
					<![CDATA[
						<P>
							The main eBook file format is usual XML of course. XML is quite easy to understand. It helps alot
							if you know a bit about HTML. Have a look at the 
							<A HREF="http://www.w3.org/TR/WD-xml-lang-970331.html">
							XML Version 1.0 Specification</A> for full details about XML.
						</P>

						<P>
							With eBook you have a clean seperation between <b>content</b> and <b>layout</b>.
							The content is stored in a XML file. The main element is <b>ebook</b>. Within
							the <b>ebook</b> element you can nest and list as many <b>page</b> elements as you want.
							A <b>page</b> element will be translated by eBook to a HTML page. The following sample
							would generate 3 (nearly) empty HTML files:
						</P>

<pre class="EiffelSource">
&lt;ebook&gt;
	&lt;page&gt;
	&lt;/page&gt;

	&lt;page&gt;
	&lt;/page&gt;

	&lt;page&gt;
	&lt;/page&gt;
&lt;/ebook&gt;
</pre>

						<P>
							The previous example is not runnable because each page must have exactly one <b>topic</b>
							, exactly one <b>text</b> and zero or more <b>page</b> elements. The <b>topic</b> element 
							must contain only text. The text you
							specify in the <b>topic</b> element will be used in the menu and as headline for the
							corresponding page. The text in the <b>text</b> element will be used as page content. For
							now only plain text is allowed. If you need some special HTML tags, you should put a CDATA 
							section in the <b>text</b> element. Here is a more complete example:
						</P>

<pre class="EiffelSource">
&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE ebook
[
&lt;!ELEMENT ebook (page+)&gt;
&lt;!ELEMENT page (topic, text, page+)&gt;
&lt;!ATTLIST page
          key    CDATA "auto"&gt;
&lt;!ELEMENT topic (#PCDATA)&gt;
&lt;!ELEMENT text (#PCDATA)&gt;
]&gt;

&lt;ebook&gt;
	&lt;page key="index.html"&gt;
		&lt;topic&gt;
			Main Page
		&lt;/topic&gt;
		&lt;text&gt;
			This is the main page.
		&lt;/text&gt;
	&lt;/page&gt;
	&lt;page&gt;
		&lt;topic&gt;
			Second Page
		&lt;/topic&gt;
		&lt;text&gt;
			&lt![CDATA[
			This is the second page. It is enclosed 
			in a CDATA section, thus I can use regular 
			HTML in here.
			&lt;A HREF="http://exml.dhs.org"&gt;I am a link!&lt;/A&gt;
			]]&gt;
		&lt;/text&gt;
	&lt;/page&gt;
	&lt;page&gt;
		&lt;topic&gt;
			3rd Page
		&lt;/topic&gt;
		&lt;text&gt;
			This is the 3rd page. 
			It includes a nested page.
		&lt;/text&gt;
		&lt;page&gt;
			&lt;topic&gt;
				Nested page
			&lt;/topic&gt;
			&lt;text&gt;
				This page is nested in the 3rd page.
			&lt;/text&gt;
		&lt;/page&gt;
	&lt;/page&gt;
&lt;/ebook&gt;
</pre>

						<P>
							The first lines define how which format this XML document has.
							The <b>key</b> attribute you can see on the first <b>page</b>-start
							tag is optional on if specified forces eBook to use the value of
							the attribute as file-name for this page.
						</P>

						<P>
							Currently eBook does nearly no validation on wether the input is correct or not.
							Well formdness rules are checked an reported, but if other errors will most likely
							result in an unhandled exception.
						</P>
					
					]]>			
				</text>
			</page>

		</page>

	</page>
	<page key="future.html">
		<topic>
			Future
		</topic>
		<text>
			<![CDATA[
					I have several ideas on how to extend/enhance eXML. There is plenty of work to do. If you are 
					keen to help developing eXML please <A HREF="mailto:andreas.leitner@teleweb.at">contact me</A>.
				<P>
				        On the exml mailing list we have established more or less a list of things to do before version
					1.0 of eXML. Please have a look there if you want to know whats going on.
				</P>
				<P>
					The following list shows spots that need work (in no specific order)
					<ul>
						<li>
							Allow XML-parsers other than <i>expat</i> to be hooked. A <i>100% pure Eiffel parser</i>
							would be perfect.
							GOBO provides anything one needs to do that. (Anybody interested?) I imagine a package
							in which you specify at compile time (maybe even at runtime?) which parser you actually
							want to use. I am yet uncertain whether it is a good idea to make a Eiffel
							parser tree based or event based, but tend to the tree based solution as it looks more
							object oriented. The resulting tree-model and a small API to feed the parser would then 
							be common to all parsers.
						</li>
						<li>
							Along with a 100% pure Eiffel XML parser XML-docuement validation could be added.
						</li>
						<li>
							Port eXML to Visual Eiffel. This should be a quite straight forward task for somebody with
							experience in wrapping C-code in Visual Eiffel. If you are keen to try, please contact me.
						</li>
						<li>
							Improve the variety of input-types XML_PARSER is able to process. Currently only 
							objects of type STRING are supported.
						</li>
						<li>
							The use of UNICODE is suggested by the W3C, but I have no idea how to realize that
							at the moment.
						</li>
						<li>
							Handle external entity declarations.
						</li>
						<li>
							Various character encodings should be handled.
						</li>
						<li>
							Improving the tree bases parser.
						</li>
						<li>
							Improving eBook. Maybe spliting it up from eXML.
						</li>
					</ul>
				</P>
			]]>			
		</text>
	</page>
	<page key="bugs.html">
		<topic>
			Known Bugs
		</topic>
		<text>
			<![CDATA[
				<TABLE border=1>
						<TH>
							Date
						</TH>
						<TH>
							Description
						</TH>
						<TH>
							Status
						</TH>
					<TR>
						<TD>
							05/11/1999
						</TD>
						<TD>
							The HTML generated by eBook is not 100% valid. This may crash older versions of Netscape
							Navigator in some cases.
						</TD>
						<TD>
							Not fixed yet.
						</TD>
					</TR>
					<TR>
						<TD>
							04/14/1999
						</TD>
						<TD>
							Compiling eBook with SmallEiffel and option "-boost" will result in C-error messages.
							Seems to be a bug in SmallEiffel. I need to isolate the bug. It seems to be that SmallEiffel
							generates a wrong type (in the C-code) with "-boost".
						</TD>
						<TD>
							Not fixed yet. 
						</TD>
					</TR>
					<TR>
						<TD>
							04/08/1999
						</TD>
						<TD>
							There are strange XML-errors reported when compiling with ISE.
						</TD>
						<TD>
							Fixed since version 0.1.6.
						</TD>
					</TR>
				</TABLE>
			]]>			
		</text>
	</page>
	<page key="notes.html">
		<topic>
			Notes
		</topic>
		<text>
			<![CDATA[
				<P>The files in the directory <i>expar</i> are (unmodified) taken from 
				<A href ="http://www.jclark.com/xml/expat.html"><i>expat</i></a> and therefore are subject to the <A
				HREF="mpl-1_0.html">Mozilla Public License Version 1.0</A>.
			
			<p>
				There is now a mailing list for <i>eXML</i> at <a href="http://www.egroups.com/">www.egroups.com</a>.
				<center>
				<form method=GET action="http://www.eGroups.com/subscribe">
			     <input type=hidden name="listname" value="exml">
			     <input type=hidden name="SubmitAction" value="Subscribe">
			     <table width=300 cellspacing=0 cellpadding=3 border=0>
			     <tr>
			      <td colspan=2 align=center>
			        <large><b><z111a>Subscribe to</z> eXML discussion list</b></large>
			      </td>
			     </tr><tr>
			      <td colspan=2>
			        <z110>Enter your e-mail address:</z>
			      </td>
			     </tr><tr>
			      <td>
			        <input type=text name="emailaddr" value="your e-mail" size=21>
			      </td><td>
			        <input type=image border=0 alt="Click here to join exml"
			        name="Click here to join exml" SRC=/imgs/bevel.gif>
			      </td>
			     </tr><tr>
			      <td colspan=2>
			        <a href="http://www.eGroups.com/list/exml/">exml
			        archive</a>
			      </td>
			     </tr>
			     </TABLE>
			     </form>
					</center>
		
				Thanks in no specific order to:
				<ul>
					<li>
						<A HREF="mailto:jjc@jclark.com">James Clark</A> for writing <i>expat</i> and to 
						<A HREF="mailto:loryn@acm.org">Loryn Jenkins</A> for telling me about <i>expat</i> (:
					</li>
					<li>
						the authors of <a href="http://www.cs.utah.edu/~beazley/SWIG/swig.html">SWIG</a> and
						<a href="mailto:cozzi@neurop2.ruhr-uni-bochum.de">Alex Cozzi</a> for 
						<a href="http://www.neurop2.ruhr-uni-bochum.de/~cozzi/swigeiffel/">SWIGEIFFEL</a>. It helped me a lot
						when porting eXML to <a href="http://SmallEiffel.loria.fr">SmallEiffel</a>.
					</li>
					<li>
						<a href="mailto:ericb@gobo.demon.co.uk">Eric Bezault</a> for providing the great
						<a href="http://www.gobo.demon.co.uk/eiffel/gobo/index.html">GOBO library</a>
					</li>
					<li>
						<a href="http://www.eiffel.com">ISE Eiffel</a>
					</li>
					<li>
						the <a href="http://SmallEiffel.loria.fr">SmallEiffel</a> team
					</li>
					<li>
						lot of other people, that helped in the one or the other way in making this project possible.
					</li>
			]]>			
		</text>
	</page>
</ebook>