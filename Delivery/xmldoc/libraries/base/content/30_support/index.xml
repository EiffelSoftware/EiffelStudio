<document title="EiffelBase Support Cluster">
	<meta_data>
		<help>
			<toc>
				<envision_title>Support Cluster</envision_title>
				<envision_pseudo_name>30</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The support cluster offers some commonly needed functionality that do not belong to the kernel.</paragraph>
		<heading>
			<size>2</size>Conversions, mathematical properties and ASCII characters
		</heading>
		<paragraph>A few utility classes complement the 
			<link>
				<url>../10_kernel/index.xml</url>
				<label>kernel</label>
			</link> facilities. <link><url>/libraries/base/reference/support/primes_chart.xml</url><label>PRIMES</label></link>, <link><url>/libraries/base/reference/support/random_chart.xml</url><label>RANDOM</label></link> and <link><url>/libraries/base/reference/support/fibonacci_chart.xml</url><label>FIBONACCI</label></link> are part of the data structure taxonomy; the others are meant to be used as ancestors by  classes needing their features.
		</paragraph>
		<paragraph>Two classes provide basic mathematical functions such as logarithms and trigonometric functions: <link><url>/libraries/base/reference/support/classic/single_math_chart.xml</url><label>SINGLE_MATH</label></link> for single precision and <link><url>/libraries/base/reference/support/classic/double_math_chart.xml</url><label>DOUBLE_MATH</label></link> for the double-precision variants.  <link><url>/libraries/base/reference/support/math_const_chart.xml</url><label>MATH_CONST</label></link> contains mathematical constants: 
			<code>
				<symbol>p</symbol>
			</code>, the square root of two, Euler's constant 
			<code>
				<symbol>e</symbol>
			</code>.
		</paragraph>
		<paragraph><link><url>/libraries/base/reference/support/primes_chart.xml</url><label>PRIMES</label></link>, <link><url>/libraries/base/reference/support/random_chart.xml</url><label>RANDOM</label></link> and <link><url>/libraries/base/reference/support/fibonacci_chart.xml</url><label>FIBONACCI</label></link> are data structure classes - heirs of <link><url>/libraries/base/reference/support/countable_sequence_chart.xml</url><label>COUNTABLE_SEQUENCE</label></link>. In all of these classes function i_th takes an integer argument 
			<code>
				<local_variable>i</local_variable>
			</code> and will return the i-th element of the sequence under consideration - prime numbers, pseudo-random numbers or Fibonacci numbers. These sequences are active structures, on which forth will advance the current position and item will return the value at the current position. A few other features are specific to each case: for example  <link><url>/libraries/base/reference/support/random_flatshort.xml</url><anchor_name>f_higher_prime</anchor_name><label>higher_prime</label></link> will yield the smallest prime greater than or equal to a certain value, and <link><url>/libraries/base/reference/support/random_flatshort.xml</url><anchor_name>f_set_seed</anchor_name><label>set_seed</label></link> will define the seed to be used for starting the pseudo-random sequence.
		</paragraph>
		<heading>
			<size>2</size>Internal object structures
		</heading>
		<paragraph>Class <link><url>/libraries/base/reference/support/classic/internal_chart.xml</url><label>INTERNAL</label></link> provides low-level access to internal object structures. It, too, is meant to be used as ancestor by classes needing its features.
			<line_break/> Here are some of the most useful calls and what they yield, 
			<feature_name>obj</feature_name> being an entity attached to an object 
			<feature_name>O</feature_name> and 
			<feature_name>i</feature_name> an integer:
		</paragraph>
		<list ordered="false">
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_class_name</anchor_name><label>class_name</label></link> (<feature_name>obj</feature_name>):  the name of the generator class for O.</item>
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_dynamic_type</anchor_name><label>dynamic_type </label></link>
				<code>
					<symbol>(</symbol>
					<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code>:  the integer code for the type of 
				<feature_name>O</feature_name>,  where each type in a system is identified by a unique code.
			</item>
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_field_count</anchor_name><label>field_count </label></link>
				<code>
					<symbol>(</symbol>
					<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code>:  the number of fields in 
				<feature_name>O</feature_name>.
			</item>
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_physical_size</anchor_name><label>physical_size </label></link>
				<code>
					<symbol>(</symbol>
					<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code>: the space occupied by 
				<feature_name>O</feature_name>, in bytes.
			</item>
			<item>
				<feature_name>field_xx</feature_name>
				<code>
					<symbol>(</symbol>
					<feature_name>i</feature_name>,  
				<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code> where  
				<feature_name>xx</feature_name> is name or offset: name or offset of the i-th field of  
				<feature_name>O</feature_name>.
			</item>
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_field</anchor_name><label>field </label></link>
				<code>
					<symbol>(</symbol>
					<feature_name>i</feature_name>, 
				<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code>:  the value of the i-th field of , if a reference; declared of type  ANY  in the class.
			</item>
			<item>
				<feature_name>yy_field</feature_name>
				<code>
					<symbol>(</symbol>
					<feature_name>i</feature_name>, 
				<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code> where  
				<feature_name>yy</feature_name> is boolean, character, integer, real or double: the value  of the i-th field of 
				<feature_name>O</feature_name>, if of the corresponding type; each declared of the  appropriate type in the class.
			</item>
			<item><link><url>/libraries/base/reference/support/classic/internal_flatshort.xml</url><anchor_name>f_is_special</anchor_name><label>is_special </label></link>
				<code>
					<symbol>(</symbol>
					<feature_name>obj</feature_name>
					<symbol>)</symbol>
				</code>, a boolean query which indicates whether 
				<feature_name>O</feature_name> is a special object  (the sequence of values representing the elements of an array or the characters of  a string).
			</item>
		</list>
		<warning>
			<bold>CAUTION:</bold> Only very special cases justify the use of this class. Unless you are writing the lowest level of an interface between an Eiffel application and external tools (such as a database management system), and this requires passing to those tools information about the internals of Eiffel objects, you almost certainly should not use <link><url>/libraries/base/reference/support/classic/internal_chart.xml</url><label>INTERNAL</label></link>. 
		</warning>
	</paragraph></document>
