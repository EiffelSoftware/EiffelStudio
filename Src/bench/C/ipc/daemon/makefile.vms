# ...C/ipc/daemon/makefile
#

#TOP = [--]
CURRENT= [.ipc.daemon]
DIR = $(CURRENT)

#CC = cc
#CTAGS = ctags
#JCFLAGS = \$(CFLAGS) $optimize $ccflags $large
#JLDFLAGS = \$(LDFLAGS) $optimize $ldflags
#LIBS = $libs
#MAKE = make
#MKDEP = $mkdep \$(DPFLAGS) --
#MV = $mv
#RM = $rm -f
#SED = $sed


########################################################################
# Automatically generated parameters -- do not edit

SOURCES =  \$(SRC)
OBJECTS =  \$(OBJ)

########################################################################
# New suffixes and associated building rules -- edit with care

#.c.obj:
#	$(CC) $(CFLAGS) $<

########################################################################
# Jmake rules for building libraries, programs, scripts, and data files
# $X-Id: Jmake.rules,v 2.8.1.4 91/11/18 13:19:07 ram Exp Locker: ram $

########################################################################
# Force 'make depend' to be performed first -- do not edit

.FORCE_DEPEND::

all:: .FORCE_DEPEND

########################################################################
# Start of Jmakefile

# define vms specific symbols for compiling, etc.
#include EIFFEL_SRC:[C.ipc]]makeinc.vms
include ../makeinc.vms		# ipc common definitions

# to compile for debugging, say	    make <target> "DEBUG_CFLAGS=/debug/noopt"
# to compile for distribution, say  make <target> "DEBUG_CFLAGS=/opt"
#                              or   make <target> "DEBUG_CFLAGS="
#DPFLAGS = -I$(TOP) -I$(LIBDIR) -I$(LIBRUN) -I$(LIBIDR)
#DPFLAGS = /incl=(eiffelc:,$(LIBDIR),$(LIBRUN),$(LIBIDR) )
#CFLAGS = /prefix=(all,except="select")/names=as_is/debug/noopt $(DPFLAGS)
#CFLAGS = /prefix=(all)/names=as_is/debug/noopt/diag $(DPFLAGS)
#CFLAGS = /prefix=(all) $(DPFLAGS) $(CDEFINES) $(DEBUG_CFLAGS) 
#CFLAGS = $(DPFLAGS) $(CDEFINES) $(DEBUG_CFLAGS)
#CINCLUDES = /incl=($(TOP),$(LIBDIR),$(LIBRUN),$(LIBIDR))
CINCLUDES = /incl=($(DECC_INCLUDES),$(LIBDIR),$(LIBRUN),$(LIBIDR))
#CDEFINES = /define=(USE_ADD_LOG,LOGGING_LEVEL=100)

ifneq ($(LOCAL_CDEFINES),)
ifneq ($(IPC_CDEFINES),)
CDEFINES = /DEF=($(LOCAL_CDEFINES),$(IPC_CDEFINES))
else
CDEFINES = /DEF=($(LOCAL_CDEFINES))
endif
else
ifneq ($(IPC_CDEFINES),)
CDEFINES = /DEF=($(IPC_CDEFINES))
else
#CDEFINES = 
endif
endif

DPFLAGS = $(CINCLUDES)$(CDEFINES)
CFLAGS = $(DECC_FLAGS)$(DPFLAGS)
#CFLAGS_CS = /ipcdmn_cs_not_required

# Files used to build the daemon
SRC = child.c listen.c main.c proto.c # putenv.c
#MSRC = main.c

# Derived object file names. Case sensitive versions not required
#OBJ = \
	child.obj \
	listen.obj \
	main.obj \
	proto.obj \
	# putenv.obj 

OBJ = $(patsubst %.c,%.obj,$(SRC) $(MSRC))



# make all objects dependent on ipcvms.h tho' not all need it
$(OBJ) : [-.shared]ipcvms.h 
#$(OBJ) : makefile   # ditto this makefile 


LDFLAGS = $(LIBARCH) $(LIBIDRARCH)
# Where shared archive is located (path and name)
LIBDIR = [-.shared]
LIBNAME = ipc.olb
LIBARCH = $(LIBDIR)$(LIBNAME)
LIBRUN = [--.run-time],[--.run-time.include]
LIBIDR = [--.idrs]
LIBIDRNAME = idr.olb
LIBIDRARCH = $(LIBIDR)$(LIBIDRNAME)
LIBDAEMON = daemon.olb



# define some useful targets
# local targets (other directory dependencies ignored)

all :: this

this : library daemon

local : this

library : $(LIBDAEMON)

#estudio : daemon

objects : $(OBJ)

#daemon : estudio.exe estudiodbg.exe
#	write sys$$output "$^"

# breakout dependencies for other libraries to allow
# local stuff to be rebuilt without checking other libraries
#estudio.exe estudiodbg.exe : $(LIBARCH)
#estudio.exe : $(LIBIDRARCH)
all :: $(LIBARCH) $(LIBIDRARCH)
all :: estudio.exe estudiodbg.exe 

$(LIBDAEMON): $(OBJ) 
#	libr/create $(LIBDAEMON) $(OBJC)
	libr/create $@ $^


#estudio_exe: $(OBJ) library
#estudio.exe : $(LIBDAEMON)
daemon : $(LIBDAEMON)
#	$(RM) $@
#	if test -f $@; then $(MV) $@ $@~; else exit 0; fi
#	$(CC)  $@ $(OBJ) $(JLDFLAGS) $(LIBS)
#	libr/create $(LIBDAEMON) $(OBJC)
#	link/exe=$@/map=estudio.map main.obj,[]$(LIBDAEMON)/libr,
	link/exe=estudio.exe/map=estudio.map/full/cross $(LINKFLAGS)  \
	    $(LIBDAEMON)/incl="main"/libr, [-.shared]ipc.olb/libr, [--.idrs]idr.olb/libr, \
	    [--.run-time]runtime.olb/incl=(eifrtvms), \
	    eiffel_src:[c_library.vms.porting.lib]vms_jackets.opt/opt
	link/debug/exe=estudiodbg.exe/map=estudiodbg.map $(LINKFLAGS) \
	    $(LIBDAEMON)/incl="main"/libr, [-.shared]ipc.olb/libr, [--.idrs]idr.olb/libr, \
	    [--.run-time]runtime/incl=(eifrtvms), \
	    eiffel_src:[c_library.vms.porting.lib]vms_jackets.opt/opt

debug : estudiodbg_exe

test : $(OBJ)
	link/exec/map nl:estudio/opt, sys$$disk:$^, \
	[-.shared]ipc.olb/libr, [--.idrs]idr.olb/libr 	


local_realclean::
	$(RM) estudio.exe



.FORCE:

$(LIBARCH) : # .FORCE
	@echo "Checking $(LIBARCH) $(LIBNAME) in $(LIBDIR)..."
#	cd $(LIBDIR); $(MAKE) $(LIBNAME)
	@\@ipcshr:make.com
	@echo "Continuing in $(CURRENT)..."


$(LIBIDRARCH) : # .FORCE
	@echo "Checking $(LIBIDRNAME) in $(LIBIDR)..."
#	cd $(LIBIDR); $(MAKE) $(LIBIDRNAME)
	@\@idrs:make.com
	@echo "Continuing in $(CURRENT)..."



depend:: ../../mkdep

../../mkdep:
	echo "You have to run Configure in $(TOP) first."; exit 1

depend::
	($(SED) '/^# DO NOT DELETE/q' Makefile && \
	$(MKDEP) $(SOURCES) | \
	$(SED) 's/: \.\//: /; /\/usr\/include/d' \
	) > Makefile.new
	cp Makefile Makefile.bak
	cp Makefile.new Makefile
	$(RM) Makefile.new

########################################################################
# Common rules for all Makefiles -- do not edit

emptyrule::

clean: local_clean
realclean: local_realclean
clobber: local_clobber

local_clean::
	$(RM) core *~ *.obj

local_realclean:: local_clean

local_clobber:: local_realclean
	$(RM) Makefile config.sh

Makefile.SH: Jmakefile
	-@if test -f $(TOP)/.package; then \
		if test -f Makefile.SH; then \
			echo "	$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~"; \
			$(RM) Makefile.SH~; $(MV) Makefile.SH Makefile.SH~; \
		fi; \
		echo "	$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT)" ; \
		$(JMAKE) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT) ; \
	else touch $@; exit 0; fi

Makefile: Makefile.SH
	/bin/sh Makefile.SH

tags::
	$(CTAGS) -w *.[ch]
	$(CTAGS) -xw *.[ch] > tags

local_clobber::
	$(RM) tags

########################################################################
# Empty rules for directories with no sub-directories -- do not edit

install::
	@echo "install in $(CURRENT) done."

deinstall::
	@echo "deinstall in $(CURRENT) done."

install.man::
	@echo "install.man in $(CURRENT) done."

deinstall.man::
	@echo "deinstall.man in $(CURRENT) done."

Makefiles::

Makefiles.SH::

########################################################################
# manual dependencies
$(OBJ) : $(TOP)eif_config.h $(TOP)eif_portable.h 

########################################################################
# Dependencies generated by make depend
# DO NOT DELETE THIS LINE -- make depend relies on it

# Put nothing here or make depend will gobble it up
#.FORCE_DEPEND::
#	echo "You must run 'make depend' in $(TOP) first."; exit 1
