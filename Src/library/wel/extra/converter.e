indexing
	legal: "See notice at end of class."
	status: "See notice at end of class."
class 
	CONVERTER

create
	make

feature -- Initialization

	make (a_class_name: STRING; output_file, input_file: STRING) is
			-- Create a class `a_class_name' in the file `output_file'.
		require 
			a_class_name_not_void: a_class_name /= Void
			a_class_name_not_empty: not a_class_name.is_empty
			output_file_not_void: output_file /= Void
			output_file_not_empty: not output_file.is_empty
		do
			class_name := a_class_name
			class_name.to_upper
			create class_file.make_create_read_write (output_file)
			insert_header_in_file (class_file, input_file)
		end

feature -- Access

	class_file: PLAIN_TEXT_FILE
			-- Output file to store the eiffel class.

	class_name: STRING
			-- Name of the eiffel class to genarate.

feature -- Basic operations

	extract_definition (input_file: STRING) is
			-- Scans input_file for "#define id integer" and puts them in output_file
		require
			input_file_not_void: input_file /= Void
			input_file_not_empty: not input_file.is_empty
			input_file_exists: file_exists (input_file)
		local
			a_file: PLAIN_TEXT_FILE
		do
			create a_file.make_open_read (input_file)
			from
				a_file.start
			until
				a_file.after
			loop
				a_file.read_character
				if a_file.last_character.is_equal ('#') then
					scan_definition (a_file)
				else
					if not white_space (a_file.last_character)
					and then not a_file.end_of_file then
						a_file.next_line
					end
				end
			end
			check
				end_of_input_reached: a_file.end_of_file
			end
			a_file.close
		end 

	close_file is
			-- Puts class-statement end in ouput_file and closes it.
		require
			class_file_is_open: class_file.is_open_write
		do
			class_file.putstring ("%Nend -- class ")
			class_file.putstring (class_name)
			class_file.new_line
			class_file.close
		ensure
			class_file_is_closed: class_file.is_closed
		end 

feature -- Status report

	file_exists (filename: STRING): BOOLEAN is
			-- Check if a file with filename exists
		require
			filename_not_void: filename /= Void
		local
			a_file: PLAIN_TEXT_FILE
		do
			create a_file.make (filename)
			Result := a_file.exists
		end

feature {NONE} -- Implementation

	scan_definition (a_file: PLAIN_TEXT_FILE) is
			-- Scan a "define id value" in `a_file' if any to come
		require
			a_file_not_void: a_file /= Void
			a_file_exists: a_file.exists
			a_file_is_open: a_file.is_open_read
			a_file_valid_pos: a_file.last_character.is_equal ('#')
		local
			id: STRING
		do
			a_file.read_word
			if a_file.last_string.is_equal ("define") then
				a_file.read_word
				id := a_file.last_string.twin
				a_file.read_word
				if
					a_file.last_string.is_integer or
					a_file.last_string.substring_index ("0x", 1) = 1
				then
					insert_id_in_file (id, a_file.last_string, class_file)
				else
					scan_to_previous_white_space (a_file)
				end
			end
		end

	insert_header_in_file (a_file: PLAIN_TEXT_FILE; input_file: STRING) is
			-- Fill the file with the basic stuff
		require
			a_file_not_void: a_file /= Void
			a_file_exists: a_file.exists
			a_file_is_open: a_file.is_open_write
		do
			a_file.putstring ("indexing%N")
			a_file.putstring ("%Tdescription: %"Generated by h2e from the file %%%N")
			a_file.putstring ("%T%T%%")
			a_file.putstring (input_file)
			a_file.putstring (".%"%N%N")
			a_file.putstring ("class%N%T")
			a_file.putstring (class_name)
			a_file.putstring ("%N%Nfeature -- Access%N%N")
		end

	scan_to_previous_white_space (a_file: PLAIN_TEXT_FILE) is
			-- Go to the previous white space in `a_file'
		require
			a_file_not_void: a_file /= Void
			a_file_exists: a_file.exists
		do
			from
				a_file.back
			until
				a_file.item = '%N' or
				a_file.item = '%T' or
				a_file.item = ' '
			loop
				a_file.back
			end
		end

	insert_id_in_file (id, value: STRING; a_file: PLAIN_TEXT_FILE) is
			-- Add a `id' to the class file.
		require
			id_not_void: id /= Void
			id_not_empty: not id.is_empty
			a_file_not_void: a_file /= Void
			a_file_exists: a_file.exists
			a_file_is_open: a_file.is_open_write
		do
			if id.item (1) /= '_' then
				-- Do not write ids starting by '_'
				a_file.putchar ('%T')
				id.to_lower
				id.put (id.item (1).upper, 1)
				a_file.putstring (id)
				a_file.putstring (": INTEGER is ")
				a_file.putstring (value)
				a_file.new_line
			end
		end

	white_space (a_c: CHARACTER): BOOLEAN is
			-- Is `a_c' white space?
		do
			Result := a_c = '%T' or else
				a_c = '%N' or else
				a_c = ' '
		end

indexing
	copyright:	"Copyright (c) 1984-2006, Eiffel Software and others"
	license:	"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"




end -- class CONVERTER

