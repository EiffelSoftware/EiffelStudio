<document title="MDI Details">
	<meta_data>
		<help>
			<toc>
				<envision_location>Samples\.NET Framework Samples\Windows Forms\MDI</envision_location>
				<envision_title>Using MDI</envision_title>
				<envision_location>Samples\Windows Forms\MDI</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Multiple Document Interface (MDI) applications have a single, primary window (the parent window) that contains a set of windows within its client region (child windows). Each child window is a form that is constrained to appear only within the parent. Children typically share the menu bar, tool bar, and other parts of the parent's interface. Secondary windows like dialog boxes are not constrained to the parent window's client region. </paragraph>
		<heading>
			<size>2</size>Creating an MDI Application
		</heading>
		<paragraph>You can create an MDI application by following these steps:</paragraph>
		<list ordered="true">
			<item>Create a
				<bold>Form</bold> (
				<bold>MainForm</bold>) that represents the MDI parent window and set its
				<bold>IsMdiContainer</bold> property to
				<bold>true</bold>. The following code demonstrates how to set this property.
				<code_block>set_is_mdi_container (True)</code_block>
			</item>
			<item>Create child forms and set the
				<bold>MdiParent</bold> property of each form to reference the parent form. The following code demonstrates setting the MDI parent for an instance of a child form.
				<line_break/>
				<code_block>doc.set_mdi_parent (Current)</code_block>
			</item>
		</list>
		<paragraph>If you have different types of data to display, you can have multiple types of child forms. To display a child form, create an instance of the child form and call its
			<bold>Show</bold> method.
		</paragraph>
		<paragraph/>
		<heading>
			<size>2</size>Standard MDI Menus
		</heading>
		<paragraph>Typically, an MDI application has a
			<bold>Windows</bold> menu that allows the user to arrange the open child windows through tiling or cascading. The
			<bold>Windows</bold> menu also allows you to navigate to any of the open child windows. To create a
			<bold>Windows</bold> menu, add the menu items for tiling and cascading to a
			<bold>Windows</bold> menu in your parent form and set the
			<bold>MdiList</bold> property to
			<bold>true</bold>for the top-level
			<bold>Windows</bold> menu. The following codedemonstrates how to create a
			<bold>Windows</bold> menu in an MDIapplication.
		</paragraph>
		<code_block>mi_window: WINFORMS_MENU_ITEM</code_block>
		<code_block>
mi_window := main_menu.get_menu_items.add (("&amp;Window").to_cil)
dummy := mi_window.get_menu_items.add_string_event_handler (("&amp;Cascade").to_cil, create {EVENT_HANDLER}.make (Current, $window_cascade_clicked))
dummy := mi_window.get_menu_items.add_string_event_handler (("Tile &amp;Horizontal").to_cil, create {EVENT_HANDLER}.make (Current, $window_tile_h_clicked))
dummy := mi_window.get_menu_items.add_string_event_handler (("Tile &amp;Vertical").to_cil, create {EVENT_HANDLER}.make (Current, $window_tile_v_clicked))
mi_window.set_mdi_list (True) -- Adds the MDI Window List to the bottom of the menu
</code_block>
		<paragraph/>
		<paragraph/>
		<heading>
			<size>2</size>Child Window Activation
		</heading>
		<paragraph>If you want your parent form to be notified when a child window is activated by the user, you can register an event-handling method for the
			<bold>MdiChildActivate</bold> event. You can determine which child window is active by using the
			<bold>ActiveMdiChild</bold> property of the
			<bold>Form</bold> class. For example, the following code updates a
			<bold>StatusBar</bold> control on the parent form with the name of the child window.
		</paragraph>
		<code_block>
...
add_mdi_child_activate (create {EVENT_HANDLER}.make (Current, $mdi_child_activated))
...
mdi_child_activated (sender: SYSTEM_OBJECT; e: EVENT_ARGS) is
	do
		status_bar.set_text (active_mdi_child.get_text)
	end
...
</code_block>
	</paragraph></document>