<document title="9 BROWSING FEATURES" output="studio">
	<meta_data>
		<help></help>
	</meta_data>
	<paragraph>
		<heading>
			<size>1</size>9 Browsing Features
		</heading>
		<paragraph>Let us get back to EiffelStudio.  We won't need a browser any more for this Tour, so you may close any browser window (other than the 
			<span>current</span> window if you are reading this in HTML!) opened to look up the generated documentation in the previous section.  
		</paragraph>
		<paragraph>Before studying the documentation generation we saw how to display properties of 
			<span>classes</span> .  It's also interesting to explore the properties of 
			<span>features</span>.  Let's look at this now, through the Feature View.  
		</paragraph>
		<paragraph>Your Development Window should still be targeted to class 
			<code>
				<string>LIST</string>
			</code>, from the last view, 
			<code>
				<keyword>Routines</keyword>
			</code>, that you displayed on it (page 
			<link>
				<url>index.xml</url>
			</link> ).  If you've lost it, just retarget a Development Window to this class.  
		</paragraph>
		<paragraph>If the Features Tool is not visible, bring it back by clicking the 
			<code>
				<keyword>Features</keyword>
			</code> button on the top toolbar, used earlier to remove it:
		</paragraph>
		<div>
			<image_link>
				<url>index-50.png</url>
				<target>screenshots</target>
				<image>
					<url>index-50.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>(Another way is through the menu entry 
			<code>
				<keyword>View</keyword>
			</code> 
			<code>
				<symbol>--&gt;</symbol>
			</code> 
			<code>
				<keyword>EiffelStudio bar</keyword>
			</code>.  )
		</paragraph>
		<heading>
			<size>2</size>
			<content>Targeting to a feature</content>
		</heading>
		<paragraph>The list of features, organized by feature clauses, appears on the left:</paragraph>
		<div>
			<image_link>
				<url>index-51.png</url>
				<target>screenshots</target>
				<image>
					<url>index-51.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The class only has a few immediate features because most of its interesting features are inherited.  Make sure the Editing Tool is tall enough (as on the above figure) and click the feature 
			<code>
				<string>forth</string>
			</code>, the last one, in the Feature Tree on the left.  This makes the feature the Editing Tool's current target, and scrolls the text to its declaration:
		</paragraph>
		<div>
			<image_link>
				<url>index-52png</url>
				<target>screenshots</target>
				<image>
					<url>index-52.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Note how both of the top target fields are now filled: the first one shows the target class, 
			<code>
				<string>LIST</string>
			</code>, and the second one shows the target feature, 
			<code>
				<string>forth</string>
			</code> .  
		</paragraph>
		<heading>
			<size>2</size>
			<content>Basic feature information</content>
		</heading>
		<paragraph>Now let's look at the feature views.  Click the Feature Tab at the bottom of the Context Tool:</paragraph>
		<div>
			<image_link>
				<url>index-53.png</url>
				<target>screenshots</target>
				<image>
					<url>index-53.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This brings up basic information on the selected feature in the Context Tool:</paragraph>
		<div>
			<image_link>
				<url>index-54.png</url>
				<target>screenshots</target>
				<image>
					<url>index-54.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The bottom Context Tool shows one of the Feature views, by default 
			<code>
				<keyword>Flat</keyword>
			</code>.  The flat view of a feature, similar in concept to the flat view of a class (page 
			<link>
				<url>index.html#FLAT FORM OF CLASS</url>
			</link> ), gives the full text of a feature, taking into account any inherited precondition or postcondition clauses.  Here the feature as declared in the class appears in the top Editing Tool, with no precondition and an 
			<code>
				<keyword>then ensure</keyword>
			</code> postcondition clause.  But it's a redefinition of an inherited feature; the flat view in the bottom Context Tool shows the full precondition, inherited from the ancestor 
			<code>
				<string>LINEAR</string>
			</code>, as well as the postcondition from 
			<code>
				<string>LIST</string>
			</code>.  
		</paragraph>
		<paragraph>
			<code>
				<keyword>Flat</keyword>
			</code> is just one of the available Feature Views, shown by the buttons on the Feature View toolbar:
		</paragraph>
		<div>
			<image_link>
				<url>index-55.png</url>
				<target>screenshots</target>
				<image>
					<url>index-55.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>
			<code>
				<keyword>Text</keyword>
			</code> gives the feature text, fully clickable.  
		</paragraph>
		<div>
			<heading>
				<size>2</size>
				<content>Who calls this feature?</content>
			</heading>
			<paragraph>Next to 
				<code>
					<keyword>Flat</keyword>
				</code> is 
				<code>
					<keyword>Callers</keyword>
				</code> .  Try it now by clicking the corresponding button (the following figure and the next only show the Context Tool, where the views appear):
			</paragraph>
			<div>
				<image_link>
					<url>index-56.png</url>
					<target>screenshots</target>
					<image>
						<url>index-56.png</url>
						<width>100</width>
					</image>
				</image_link>
			</div>
			<paragraph>This view shows all the places in the system that call the routine, or one of its redefinitions.  Such information can be invaluable for debugging in particular.  The successive paragraphs correspond to the various versions of 
				<code>
					<string>forth</string>
				</code> in class 
				<code>
					<string>LIST</string>
				</code>, its ancestors and its descendants.  Reading from the top we see that:
			</paragraph>
			<list ordered="false">
				<item>The version from 
					<code>
						<string>LIST</string>
					</code> is called in 
					<code>
						<string>LIST</string>
					</code> itself by the function 
					<code>
						<string>is_equal</string>
					</code> .  
				</item>
				<item>The version from 
					<code>
						<string>LIST's</string>
					</code> descendant 
					<code>
						<string>ARRAYED_CIRCULAR</string>
					</code> is not called directly in this system, although it 
					<bold>could</bold> be called through dynamic binding (on an entity declared of type 
					<code>
						<string>LIST</string>
					</code> but dynamically attached to an instance of 
					<code>
						<string>ARRAYED_CIRCULAR</string>
					</code> ).  
				</item>
				<item>About 60% down, 
					<code>
						<string>forth</string>
					</code> from 
					<code>
						<string>ARRAYED_LIST</string>
					</code>, a version in another descendant of 
					<code>
						<string>LIST</string>
					</code>, is called by two routines of 
					<code>
						<string>ARRAYED_CIRCULAR</string>
					</code>, one routine of 
					<code>
						<string>ARRAYED_LIST</string>
					</code>, and two routines of 
					<code>
						<string>MULTI_ARRAY_LIST</string>
					</code> .  
				</item>
				<item>Also note, in the following entry, that after renaming 
					<code>
						<string>forth</string>
					</code> is called 
					<code>
						<string>back</string>
					</code> in the descendant 
					<code>
						<string>ARRAYED_STACK</string>
					</code> .  
				</item>
			</list>
			<heading>
				<size>2</size>
				<content>What happens to my feature through the inheritance hierarchy?</content>
			</heading>
			<paragraph>Now click the next view button, 
				<code>
					<keyword>Implementers</keyword>
				</code> :
			</paragraph>
			<div>
				<image_link>
					<url>index-57.png</url>
					<target>screenshots</target>
					<image>
						<url>index-57.png</url>
						<width>100</width>
					</image>
				</image_link>
			</div>
			<paragraph>This is a very useful view, showing all the ancestors and descendants of 
				<code>
					<string>LIST</string>
				</code> that provide a separate version of 
				<code>
					<string>forth</string>
				</code>, including the original introduction of this feature in 
				<code>
					<string>LINEAR</string>
				</code> and subsequent redeclarations(redefinitions or effectings).  The mention 
				<code>
					<keyword>from) (version</keyword>
				</code> signals the version applicable to the current class, here 
				<code>
					<string>LIST</string>
				</code> .  
			</paragraph>
			<paragraph>Since all class and feature names on these views are hyperlinks, you can display any of the listed versions in a new Development Window by control-right-clicking it (we will see shortly how to display it in the 
				<span>same</span> tool).  Control-right-click on the feature name 
				<code>
					<string>forth</string>
				</code> on the line that reads 
				<code>
					<string>forth MULTI_ARRAY_LIST</string>
				</code> (line 4).  This brings up a tool targeted to the routine 
				<code>
					<string>forth</string>
				</code> from 
				<code>
					<string>MULTI_ARRAY_LIST</string>
				</code>, so that you can see the implementation of the routine in that class:
			</paragraph>
			<div>
				<image_link>
					<url>index-58.png</url>
					<target>screenshots</target>
					<image>
						<url>index-58.png</url>
						<width>100</width>
					</image>
				</image_link>
			</div>
			<paragraph>You can get rid of this new Development Window (just close it, but don't exit EiffelStudio!) and come back to the original Development Window, where we still have two unexplored views, 
				<code>
					<keyword>Ancestor versions</keyword>
				</code> and 
				<code>
					<keyword>Descendant versions</keyword>
				</code> .  Click the first of these to obtain the ancestor versions of 
				<code>
					<string>forth</string>
				</code> from 
				<code>
					<string>LIST</string>
				</code>:
			</paragraph>
			<div>
				<image_link>
					<url>index-59.png</url>
					<target>screenshots</target>
					<image>
						<url>index-59.png</url>
						<width>100</width>
					</image>
				</image_link>
			</div>
			<paragraph>The format is self-explanatory: for each ancestor of 
				<code>
					<string>LIST</string>
				</code> that has a version of 
				<code>
					<string>LIST</string>
				</code> 's 
				<code>
					<string>forth</string>
				</code> feature, it indicates the name of that feature -- which could be something else than 
				<code>
					<string>forth</string>
				</code> as a result of renaming, although here this happens only in descendants, not ancestors -- and the version of the feature applicable to the given class.  
			</paragraph>
			<paragraph>The list is labeled 
				<code>
					<keyword>History branch #1</keyword>
				</code> because in the case of feature merging (combining several features inherited from different parents, in conformance with the rules of the language) there could be more than one history branch.  
			</paragraph>
			<paragraph>The next button, 
				<code>
					<keyword>Descendant versions</keyword>
				</code>, similarly tells you all that happens to a feature in the descendants of the current class.  
			</paragraph>
		</div>
		<div>
			<heading>
				<size>2</size>
				<content>Who has the same name?</content>
			</heading>
			<paragraph>The last button, 
				<code>
					<keyword>Homonyms</keyword>
				</code>, displays all the features of the system which, related or not to the current feature by redeclaration, have the same name.  You can then explore any such feature to see if the relationship is more than casual.  
			</paragraph>
			<paragraph>In any system or library that takes advantage of inheritance and its associated mechanisms -- renaming, redefinition, effecting, undefinition, multiple and repeated inheritance, polymorphism, dynamic binding -- the feature browsing facilities that we have just explored are invaluable to track what happens to features.  What makes them even more precious is their connection with the rest of the browsing and documentation capabilities, especially the pick-and-drop which we will now study.  </paragraph>
		</div>
	</paragraph>
</document>