<document title="EiffelBase, Tables">
	<meta_data>
		<help>
			<toc>
				<envision_location>Class Libraries\EiffelBase\EiffelBase\EiffelBase Data Structures Overview</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph> Hash tables are a convenient mechanism tostore and retrieve objects identified by unique keys. 
			<heading>
				<size>2</size>Why use hash tables?
			</heading> The main advantage of hash tables is the efficiency of the basic operations: store ( 
			<link>
				<url>../../reference/structures/table/hash_table.html#f_put</url>
				<label>put</label>
			</link>) and retrieve ( 
			<link>
				<url>../../reference/structures/table/hash_table.html#f_item</url>
				<label>item</label>
			</link>, 
			<link>
				<url>../../reference/structures/table/hash_table.html#f_remove</url>
				<label>remove</label>
			</link>).
			<line_break/> The idea behind hash tables is to try to emulate the data structure that provides the ultimate in efficiency: the array. On an array 
			<code>
				<local_variable>a</local_variable>
			</code>, for some integer 
			<code>
				<local_variable>i</local_variable>
			</code> whose value lies within the bounds of 
			<code>
				<local_variable>a</local_variable>
			</code>, the basic operations are
		</paragraph>
		<code_block>
	<feature_name>a</feature_name>.<feature_name>put</feature_name> <symbol>(</symbol><feature_name>x</feature_name>, i<symbol>)</symbol>
	<feature_name>x</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>a</feature_name>.<feature_name>item</feature_name> <symbol>(</symbol>i<symbol>)</symbol>
	<feature_name>x</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>a</feature_name> @ i 			
		</code_block>
		<paragraph> The first causes the value of a at index 
			<code>
				<local_variable>i</local_variable>
			</code> to be 
			<code>
				<local_variable>x</local_variable>
			</code>; the second (and the third, which is simply a syntactical variant) access the value at index 
			<code>
				<local_variable>i</local_variable>
			</code> and assign it to 
			<code>
				<local_variable>x</local_variable>
			</code>. With the usual computer architectures, these operations are very fast: because arrays items are stored contiguously in memory, a computer will need just one addition (base address plus index) and one memory access to perform a put or item.
			<line_break/> Not only are the operation times small; they are constant (or more precisely bounded by a constant). This is a great advantage over structures such as lists or trees which you must traverse at least in part to retrieve an item, so that access and modification times grow with the number of items. With an array, disregarding the influence of other factors such as memory paging, the time for a put or item is for all practical purposes the same whether the array has five items or five hundred thousand. These properties make arrays excellent data structures for keeping objects. Unfortunately, they are only applicable if the objects satisfy three requirements:
		</paragraph>
		<list ordered="false">
			<item>
				<bold>A1</bold>. For each object there must be an associated integer, which for the purpose of this  discussion we may call the object's index (since it will serve as index for the  object in the array.)
			</item>
			<item>
				<bold>A2</bold>. No two objects may have the same index.
			</item>
			<item>
				<bold>A3</bold>. If we want to avoid wasting huge amount of storage, all the indices must lie in a  contiguous or almost contiguous range.
			</item>
		</list>
		<paragraph> Hash tables may be viewed as a rehabilitation mechanism for objects that do not naturally possess these three properties. If we are unable to find a natural index, we can sometimes devise an artificial one. To do so we must be able to find a key. Each key must uniquely identify the corresponding object; this is the same as property 
			<bold>A2</bold>, making keys similar to indices. But keys are not necessarily integers (violating property 
			<bold>A1</bold>), although it must be possible to associate an integer with each key. The mechanism that maps keys to integers is called the hashing function.
			<line_break/> Thanks to the hashing mechanism we will indeed be able to store suitable objects into arrays, approaching the optimal efficiency of this data structure. The efficiency will not be quite as good, however, for two reasons:
		</paragraph>
		<list ordered="false">
			<item>We must pay the price of computing the hash function whenever we store or  retrieve an object.</item>
			<item>Different keys may hash into the same integer value, requiring extra processing  to find an acceptable index.</item>
		</list>
		<paragraph> With good implementations, however, it is possible to use hash tables with a performance that is not much worse than that of arrays and, most importantly, may be treated as if the time for a put, an item or a remove were constant. This will mean that you can consider operations such as</paragraph>
		<code_block>			
	<feature_name>h</feature_name>.<feature_name>put</feature_name> <symbol>(</symbol><feature_name>x</feature_name>, <feature_name>k</feature_name><symbol>)</symbol>
	<feature_name>h</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>a</feature_name>.<feature_name>item</feature_name> <symbol>(</symbol><feature_name>k</feature_name><symbol>)</symbol> 	
		</code_block>
		<paragraph> where 
			<code>
				<local_variable>h</local_variable>
			</code> is a hash-table and 
			<code>
				<local_variable>k</local_variable>
			</code> is a key (for example a string) as conceptually equivalentto the array operations mentioned above.
			<line_break/> The quality of a hashed implementation will depend both on the data structure that will store the objects, and on the choice of hashing function. Class 
			<link>
				<url>../../reference/structures/table/hash_table_chart.html</url>
				<label>HASH_TABLE</label>
			</link> attempts to address the first concern; for the second, client developers will be responsible for choosing the proper hashing function, although Base provides a few predefined functions, in particular for class 
			<link>
				<url>/libraries/base/reference/kernel/string_chart.html</url>
				<label>STRING</label>
			</link>.
		</paragraph>
		<heading>
			<size>2</size>When hash tables are appropriate
		</heading>
		<paragraph>You may keep objects in a hash table if for each one of these objects you can find a key that uniquely identifies it. The objects and their keys may be of many possible kinds:</paragraph>
		<list ordered="false">
			<item>
				<bold>H1</bold>. In a simple example, the objects are integers; each integer serves as its own key.  (More precisely we will use its absolute value, since it is convenient to have non-negative  keys only.) This case is of more than theoretical interest, since it makes  hash tables appropriate for storing a set of integers with widely scattered values,  for which simple array storage would be a waste of space (see requirement 
				<bold>A3</bold>  above).
			</item>
			<item>
				<bold>H2</bold>. Frequently, the objects will be composite, that is to say, instances of a developer-defined  class, and one of the attributes of that class, of type  
				<link>
					<url>/libraries/base/reference/kernel/string_chart.html</url>
					<label>STRING</label>
				</link>, can serve as  the key. For example if you were writing an Eiffel compiler you would probably  need to keep a data structure that includes information about classes of the  system. Each class is represented by an object with several fields describing the  properties of the class; one of these fields, the class name, corresponding to an  attribute of type 
				<link>
					<url>/libraries/base/reference/kernel/string_chart.html</url>
					<label>STRING</label>
				</link>, will serve as key.
			</item>
			<item>
				<bold>H3</bold>. Instead of being the full object (as in case 
				<bold>H1</bold>) or one of the object's fields (as in  case 
				<bold>H2</bold>), the key may have to be computed through a function of the generating  class, which will take into account several attributes of the class (that is to say,  for each object, several fields).
			</item>
		</list>
		<paragraph> What this practically means is that in all cases you will need, in the generating class of the objects to be stored, a query (attribute or function) that gives the key. The type of the key is highly variable but must in all cases be a descendant of 
			<link>
				<url>/libraries/base/reference/kernel/hashable_chart.html</url>
				<label>HASHABLE</label>
			</link>. This is true of both 
			<link>
				<url>/libraries/base/reference/kernel/integer_chart.html</url>
				<label>INTEGER</label>
			</link> (case 
			<bold>H1</bold>) and 
			<link>
				<url>/libraries/base/reference/kernel/string_chart.html</url>
				<label>STRING</label>
			</link> (case 
			<bold>H2</bold>). The requirements for being a 
			<link>
				<url>/libraries/base/reference/kernel/hashable_chart.html</url>
				<label>HASHABLE</label>
			</link> are not harsh: all you need is a function hash_code that returns a non-negative integer.&gt;
		</paragraph>
		<heading>
			<size>2</size>Using hash tables
		</heading>
		<paragraph>Class 
			<link>
				<url>../../reference/structures/table/hash_table_chart.html</url>
				<label>HASH_TABLE</label>
			</link> takes two generic parameters:
		</paragraph>
		<code_block>
	<keyword>class</keyword> <class_name>HASH_TABLE</class_name> <symbol>[</symbol><class_name>G</class_name>, <class_name>H</class_name> <symbol>-&gt;</symbol> <class_name>HASHABLE</class_name><symbol>]</symbol> ...
		</code_block>
		<paragraph> G represents the type of the objects to be stored in the hash table, H the type of their keys.
			<line_break/> When viewed as an implementation of containers, 
			<link>
				<url>../../reference/structures/table/hash_table_chart.html</url>
				<label>HASH_TABLE</label>
			</link>, in a strict sense, represents bags rather than sets: unlike the other classes in this chapter, it allows an object to have two or more distinct occurrences in a single container. But this is only true if we consider a hash table as a repository of objects of type G. In reality each item of the table is identified by a pair of values, one from G and one from H. Because the keys must uniquely identify objects, the hash table viewed as a container of such pairs is indeed a set. The creation procedure make takes an integer argument, as in
		</paragraph>
		<code_block>				
	<keyword>create</keyword> <feature_name>my_table</feature_name>.<feature_name>make</feature_name> <symbol>(</symbol><feature_name>n</feature_name><symbol>)</symbol>
		</code_block>
		<paragraph> The value of 
			<code>
				<local_variable>n</local_variable>
			</code> indicates how many items the hash table is expected to have to accommodate. This number of items is not a hardwired size, just information passed to the class. In particular:
		</paragraph>
		<list ordered="false">
			<item>The actual size of the underlying array representation will be higher than n since  efficient operation of hash table algorithms require the presence of enough  breathing space - unoccupied positions.</item>
			<item>If the number of items in the table grows beyond the initial allocation, the table  will automatically be resized.</item>
		</list>
		<paragraph> It is useful, however, to use a reasonable  upon creation: not too large to avoid wasting space, but not too small to avoid frequent applications of resizing, an expensive operation.</paragraph>
	</paragraph></document>