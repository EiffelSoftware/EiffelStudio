<document title="5 Types">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel, The Language\Tutorials\Invitation to Eiffel</envision_location>
				<envision_pseudo_name>50</envision_pseudo_name>
				<envision_title>Types</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Eiffel is strongly typed for readability and reliability.  Every entity is declared of a certain type, which may be either a reference type or an expanded type.  </paragraph>
		<paragraph>Any type 
			<code>
				<string>T</string>
			</code> is based on a class, which defines the operations that will be applicable to instances of 
			<code>
				<string>T</string>
			</code> .  The difference between the two categories of type affects the semantics of an entity 
			<code>
				<string>x</string>
			</code> declared of type 
			<code>
				<string>T</string>
			</code> : for a reference type, the most common case, possible values for 
			<code>
				<string>x</string>
			</code> are references to objects; for an expanded type, the values are objects.  In both cases, the type rules guarantee that the objects will be instances of 
			<code>
				<string>T</string>
			</code>.  
		</paragraph>
		<paragraph>A non-expanded class such as 
			<code>
				<string>ACCOUNT</string>
			</code> yields a reference type.  As a result, an entity of type 
			<code>
				<string>ACCOUNT</string>
			</code>, such as 
			<code>
				<string>acc</string>
			</code> in the earlier client example (see the declaration of 
			<code>
				<string>acc</string>
			</code> and the accompanying picture as given on page 
			<link>
				<url>invitation-00.html#FIRST PICTURE OF BANK ACCOUNT OBJECT</url>
			</link> ), denotes possible run-time references to objects of type 
			<code>
				<string>ACCOUNT.  </string>
			</code>
		</paragraph>
		<paragraph>In contrast, the value of an entity 
			<code>
				<string>acc</string>
			</code> declared of type 
			<code>
				<keyword>expanded </keyword>
			</code>  
			<code>
				<string>ACCOUNT</string>
			</code> is an object such as the one shown on the figure below, with no reference.  The only difference with the earlier figure is that the value of 
			<code>
				<string>acc</string>
			</code> is now an 
			<code>
				<string>ACCOUNT</string>
			</code> object, not a reference to such an object.  No creation instruction is needed in this case.  (The figure does not show the 
			<code>
				<string>PERSON</string>
			</code> object to which the 
			<code>
				<string>owner</string>
			</code> field of the 
			<code>
				<string>ACCOUNT</string>
			</code> object -- itself a reference -- is attached.  )
		</paragraph>
		<image>
			<url>invitation-3.png</url>
		</image>
		<paragraph>An important group of expanded types, based on library classes, includes the basic types 
			<code>
				<string>CHARACTER, DOUBLE, REAL, INTEGER, </string>
			</code> and 
			<code>
				<string>BOOLEAN</string>
			</code> .  Clearly, the value of an entity declared of type 
			<code>
				<string>INTEGER</string>
			</code> should be an integer, not a reference to an object containing an integer value.  Operations on these types are defined by prefix and infix operators such as "+" and "&lt;".  
		</paragraph>
		<paragraph>As a result of these conventions, the type system is uniform and consistent: all types, including the basic types, are defined from classes, either as reference types or as expanded types.  </paragraph>
		<paragraph>In the case of basic types, for obvious reasons of efficiency, the ISE Eiffel compilation mechanism implements the standard arithmetic and boolean operations directly through the corresponding machine operations, not through routine calls.  But this is only a compiler optimization, which does not hamper the conceptual homogeneity of the type edifice.  </paragraph>
	</paragraph></document>