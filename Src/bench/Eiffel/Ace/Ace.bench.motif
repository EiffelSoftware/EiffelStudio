system
	ec

root
	 EWB_MOTIF: "make"

default
	assertion(require)
	assertion (ensure)
	assertion (check)
	dead_code_removal (yes);
-- RTEA version
	exception_trace (yes);
-- Full optimized version
--	exception_trace (no);
--	array_optimization (yes);
--	inlining_size ("8");
--	inlining (yes);

	--trace(yes)
	--trace ("SERVER");
	--debug ("CACHE_SERVER");
	--debug ("Freeze_set");
	--debug ("SERVER");
	--debug ("DOCUMENT");
	--debug ("DEBUGGER_TRACE");
	--debug ("DRAWING")
	--debug ("PARSE")
	--debug ("FLAT_SHORT");
	--debug ("LOCAL_FEAT_ADAPTATION");
	--debug ("ACTIVITY")
	--debug ("DEBUG_RECV")
	--debug ("PASS3")
	--debug ("CACHE")
	--debug ("DEAD_CODE_REMOVAL")
	--debug ("SPLIT")

cluster

		-- EiffelBase:
	all base:				"$EIFFEL_SRC/library/base"
		exclude
			"table";"desc";"CVS"
		default
			assertion (require)
			assertion (ensure)
		end

		-- MEL
	all mel:             		"$EIFFEL_SRC/library/mel"
		exclude
			"CVS"
		end

		-- EiffelVision
    all vision:				"$EIFFEL_SRC/library/vision"
		exclude
			"CVS";"gtk";"mswin";"obsolete";"text_figure.e";"line.e"
		end

		-- Liman
	liman:				"$EIFFEL_SRC/Eiffel/limand";

	liman_bench(liman):		"$/bench";
	liman_client(liman):		"$/client";
	liman_shared(liman):		"$/shared";
	liman_bench_graphical(liman):	"$/bench_graphical";
	liman_abstract(liman):		"$/abstract";
	liman_graphical(liman):		"$/graphical";

-- EiffelNet
	net:                            "$EIFFEL_SRC/library/net";
	abstract_socket (net):          "$/abstract/socket";
	net_socket (net):               "$/network/socket";
	local_socket (net):             "$/local/socket";

	polling_abstract (net):         "$/polling/abstract";
	polling_implementation (net):   "$/polling/implementation";

	abstract_client_server (net):   "$/abstract/client_server";
	net_client_server (net):        "$/network/client_server";
	local_client_server (net):      "$/local/client_server";


	beurk:			"$EIFFEL_SRC/Eiffel/beurk";
	compiler_support:		"$EIFFEL_SRC/Eiffel/support";

		-- General compilation:
	common:				"$EIFFEL_SRC/Eiffel/common";
	common_parser (common):				"$/parser";
	common_eiffel_parser (common_parser):		"$/parser";

		-- Resources
	resources(common):		"$/resources";

	flat_short (common_parser):			"$/flat_short"
		exclude
			"format_context.e" ; "local_format.e" ;
		end

	flat_short_b:		"$EIFFEL_SRC/Eiffel/flat_short/bench";

	yacc:				"$EIFFEL_SRC/Eiffel/yacc";
	const:			"$EIFFEL_SRC/Eiffel/const";

		-- Gobo Eiffel Parse Library
	pr_skeleton:		"$EIFFEL_SRC/library/gobo/library/parse/skeleton";
		-- Gobo Eiffel Lexical Library
	lx_skeleton:		"$EIFFEL_SRC/library/gobo/library/lexical/skeleton";
		-- Gobo Eiffel Kernel Library
	kl_kernel:			"$EIFFEL_SRC/library/gobo/library/kernel";
	kl_kernel_spec:		"$EIFFEL_SRC/library/gobo/library/kernel/spec/ise";

		-- Documentation generation
	all documentation:				"$EIFFEL_SRC/Eiffel/case/documentation"
		exclude "CVS" end

		-- Lace compilation:
	all lace:				"$EIFFEL_SRC/Eiffel/lace"
		exclude
			"CVS"
		end

		-- Eiffel compilation:
	all compiler:		"$EIFFEL_SRC/Eiffel/eiffel"
		exclude
			"CVS";"com_il_generation";"kernel";"metadata_generation"
		end

	metadata_generation: "$EIFFEL_SRC/Eiffel/eiffel/metadata_generation/unix"

		-- API cluster
	all compiler_api:				"$EIFFEL_SRC/Eiffel/API"
		exclude
			"CVS"
		end

		-- INTERFACE CLUSTERS
	all interface:			"$EIFFEL_SRC/Eiffel/interface"
		exclude
			"CVS";"win32";"new_tty";"new_graphical"
		end
		-- SWITCH clusters (chose one cluster per directory in switch directory)
	switch:			"$EIFFEL_SRC/Eiffel/switch";
	interface_switch(switch):	"$/interface/graphical";
	--dle_switch(switch):	"$/dle/no_dle";
	license_switch(switch): "$/license/license";  	--unix
	--license_switch(switch): "$/license/no_license";	--win
	encryption:				"$EIFFEL_SRC/library/encryption"
		exclude
			"des_encoder.e"
		end

		-- Communications
	communications (switch):		"$/communication";
	status (communications):		"$/status";
	ipc (communications):		"$/ipc";
	debuging_class (communications):	"$/debug";
	debuging_commands (communications):	"$/commands";
	debuging_formatters (communications):	"$/formatters";
	io_watcher_implementation (communications): "$/spec/motif"

external
	include_path:
		"\$(EIFFEL_SRC)/library/mel/Clib",
		"\$(EIFFEL_SRC)/C/bench",
		"\$(EIFFEL_SRC)/C/liman/shared",
		"\$(EIFFEL_SRC)/library/gobo/library/kernel/include"

	object:
		"$(EIFFEL_SRC)/C/bench/libcompiler.a",
		"$(EIFFEL_SRC)/C/ipc/ewb/libewb.a",
		"$(EIFFEL_SRC)/C/ipc/shared/libipc.a",
		"$(EIFFEL_SRC)/C/platform/libplatform.a",
		"$(EIFFEL_SRC)/library/mel/spec/$(ISE_PLATFORM)/lib/libMel.a",
		"$(EIFFEL_SRC)/library/mel/spec/$(ISE_PLATFORM)/lib/libXpm.a",
		"$(EIFFEL_SRC)/library/net/spec/$(ISE_PLATFORM)/lib/libnet.a",
		"$(EIFFEL_SRC)/C/liman/lm/liblm.a",
		"$(EIFFEL_SRC)/C/liman/shared/libshared.a",
		"$(EIFFEL_SRC)/C/idrs/libidr.a",
		"$(EIFFEL_SRC)/C/minilzo/minilzo.o",
		"-L/usr/X11R6/lib -lXm -lXt -lX11 -lXext -lXp -lSM -lICE"
end
