#!/usr/bin/perl -w
#===============================================================================
# gen_key_classes
#-------------------------------------------------------------------------------
# interface/kernel/ev_key_constants.e
# implementation/mswin/support/ev_wel_key_conversion.e
# implementation/gtk/support/ev_gtk_key_conversion.e
#-------------------------------------------------------------------------------
# Date: $Date$
# Revision: $Revision$
#===============================================================================

# Initialize global soo-to-be-huge strings.

$v2_to_wel_array = "";
$wel_to_v2_array = "";
$v2_to_gtk_array = "";
$gtk_to_v2_array = "";
$key_strings = "";
$key_constants = "";

# For every line in the file from stdin.
while (<>) {

	# Init array.
	@fields = ();
	
	# Ignore empty lines, those starting with whitespace and comments.
	if (!/^[\n 	#].*/) {
		chomp;

		# Separate comma separated fields.
		# Ignore commas preceded by %.
		s/%,/THIS_IS_A_COMMA/g;
		s/,/SEPARATOR/g;
		s/THIS_IS_A_COMMA/,/g;
		
		@fields = split (/SEPARATOR[ 	]*/,$_);
		
		# Put the fields in separate named strings.
		$comment = shift (@fields);
		$comment = "-- Code representing $comment.";
		$identifier = shift (@fields);
		$identifier = "Key_$identifier";
		$string = shift (@fields);
		$string = "\"$string\"";
		$gtk_code = shift (@fields);
		$wel_code = shift (@fields);

		# Append to the big strings.
		$eif_statement = "Result.put ($identifier, $wel_code)";
		$v2_to_wel_array = "$v2_to_wel_array\t\t\t$eif_statement\n";

		$eif_statement = "Result.put ($wel_code, $identifier)";
		$wel_to_v2_array = "$wel_to_v2_array\t\t\t$eif_statement\n";

		$eif_statement = "Result.put ($identifier, $gtk_code)";
		$v2_to_gtk_array = "$v2_to_gtk_array\t\t\t$eif_statement\n";

		$eif_statement = "Result.put ($gtk_code, $identifier)";
		$gtk_to_v2_array = "$gtk_to_v2_array\t\t\t$eif_statement\n";

		$eif_statement = "Result.put ($identifier, $string)";
		$key_strings = "$key_strings\t\t\t$eif_statement\n";

		$eif_statement = "$identifier: INTEGER is unique";
		$key_constants = "$key_constants\n\t$eif_statement\n\t\t\t$comment\n";
	}
}

open (OH, ">" . "interface/kernel/ev_key_constants.e");
print OH <<EOT;
indexing
	description:
		"Eiffel Vision key constants. Each constant defined here %N%
		%corresponds to a possible value of {EV_KEY}.code"
	status: "See notice at end of class"
	keywords: "key, code, constant"
	date: "generated"
	revision: "generated"

class
	EV_KEY_CONSTANTS

feature -- Contract support

	valid_key_code (a_code: INTEGER): BOOLEAN is
			-- Is ``a_code'' a valid key code?
		do
			Result := a_code >= Key_0 and then a_code <= Key_z
		end

feature -- Constants
$key_constants
feature -- Access

	key_strings: ARRAY [STRING] is
			-- String representations of all key codes.
		once
			create Result.make (Key_0, Key_z)
$key_strings		end

end -- class EV_KEY_CONSTANTS

--!-----------------------------------------------------------------------------
--! EiffelVision Library: library of reusable components for ISE Eiffel.
--! Copyright (C) 1986-2000 Interactive Software Engineering Inc.
--! All rights reserved. Duplication and distribution prohibited.
--! May be used only with ISE Eiffel, under terms of user license. 
--! Contact ISE for any other use.
--!
--! Interactive Software Engineering Inc.
--! ISE Building, 2nd floor
--! 270 Storke Road, Goleta, CA 93117 USA
--! Telephone 805-685-1006, Fax 805-685-6869
--! Electronic mail <info\@eiffel.com>
--! Customer support e-mail <support\@eiffel.com>
--! For latest info see award-winning pages: http://www.eiffel.com
--!-----------------------------------------------------------------------------
EOT
close (OH);

open (OH, ">" . "implementation/mswin/support/ev_wel_key_conversion.e");
print OH <<EOT;
indexing
	description: "Eiffel Vision WEL key conversion. Provides a function%N%
		%for WEL to vision2 conversion and for vision2 to WEL conversion."
	status: "See notice at end of class"
	date: "generated"
	revision: "generated"

class
	EV_WEL_KEY_CONVERSION

inherit
	WEL_VK_CONSTANTS

	EV_KEY_CONSTANTS

feature -- Conversion

	key_code_to_wel (a_key_code: INTEGER): INTEGER is
			-- Corresponding WEL code for ``a_key_code''.
		require
			a_key_code_valid: valid_key_code (a_key_code)
		do
			Result := v2_to_wel_table @ a_key_code
		end

	key_code_from_wel (a_wel_code: INTEGER): INTEGER is
			-- Corresponding key code for ``a_wel_code''.
		require
				a_wel_code_valid: True --| FIXME
		do
			Result := wel_to_v2_table @ a_wel_code
		end

feature {NONE} -- Implementation

	v2_to_wel_table: ARRAY [INTEGER] is
			-- WEL keycodes indexed by Vision2 key code.
		once
			create Result.make (Key_0, Key_z)
$v2_to_wel_array		end

	wel_to_v2_table: ARRAY [INTEGER] is
			-- Vision2 keycodes indexed by WEL key code.
		once
			create Result.make (0, 999) --| FIXME
$wel_to_v2_array		end

end -- class EV_WEL_KEY_CONVERSION

--!-----------------------------------------------------------------------------
--! EiffelVision2: library of reusable components for ISE Eiffel.
--! Copyright (C) 1986-2000 Interactive Software Engineering Inc.
--! All rights reserved. Duplication and distribution prohibited.
--! May be used only with ISE Eiffel, under terms of user license. 
--! Contact ISE for any other use.
--!
--! Interactive Software Engineering Inc.
--! ISE Building, 2nd floor
--! 270 Storke Road, Goleta, CA 93117 USA
--! Telephone 805-685-1006, Fax 805-685-6869
--! Electronic mail <info\@eiffel.com>
--! Customer support e-mail <support\@eiffel.com>
--! For latest info see award-winning pages: http://www.eiffel.com
--!-----------------------------------------------------------------------------
EOT
close (OH);

open (OH, ">" . "implementation/gtk/support/ev_gtk_key_conversion.e");
print OH <<EOT;
indexing
	description: "Eiffel Vision GTK key conversion. Provides a function%N%
		%for GTK to vision2 conversion and for vision2 to GTK conversion."
	status: "See notice at end of class"
	date: "generated"
	revision: "generated"

class
	EV_GTK_KEY_CONVERSION

inherit
	EV_KEY_CONSTANTS

feature -- Conversion

	key_code_to_gtk (a_key_code: INTEGER): INTEGER is
			-- Corresponding WEL code for ``a_key_code''.
		require
			a_key_code_valid: valid_key_code (a_key_code)
		do
			Result := v2_to_gtk_table @ a_key_code
		end

	key_code_from_gtk (a_gtk_code: INTEGER): INTEGER is
			-- Corresponding key code for ``a_gtk_code''.
		require
				a_gtk_code_valid: gtk_to_v2_table.has (a_gtk_code)
		do
			Result := gtk_to_v2_table.item (a_gtk_code)
		end

feature {NONE} -- Implementation

	C: EV_C_EXTERNALS is
		once
			create Result
		end

	v2_to_gtk_table: ARRAY [INTEGER] is
			-- GTK keycodes indexed by Vision2 key code.
		once
			create Result.make (Key_0, Key_z)
$v2_to_gtk_array		end

	gtk_to_v2_table: HASH_TABLE [INTEGER, INTEGER] is
			-- Vision2 keycodes indexed by GTK key code.
		once
		create Result.make (10)
$gtk_to_v2_array		end

end -- class EV_GTK_KEY_CONVERSION

--!-----------------------------------------------------------------------------
--! EiffelVision2: library of reusable components for ISE Eiffel.
--! Copyright (C) 1986-2000 Interactive Software Engineering Inc.
--! All rights reserved. Duplication and distribution prohibited.
--! May be used only with ISE Eiffel, under terms of user license. 
--! Contact ISE for any other use.
--!
--! Interactive Software Engineering Inc.
--! ISE Building, 2nd floor
--! 270 Storke Road, Goleta, CA 93117 USA
--! Telephone 805-685-1006, Fax 805-685-6869
--! Electronic mail <info\@eiffel.com>
--! Customer support e-mail <support\@eiffel.com>
--! For latest info see award-winning pages: http://www.eiffel.com
--!-----------------------------------------------------------------------------
EOT
close (OH);

#===============================================================================
# CVS log
#===============================================================================
#
# $Log$
# Revision 1.3  2000/03/17 02:14:54  brendel
# Now generates the classes in the right directory.
#
# Revision 1.2  2000/03/17 02:06:38  brendel
# Now generates all 3 classes.
#
#
#===============================================================================
# End of CVS log
#===============================================================================
