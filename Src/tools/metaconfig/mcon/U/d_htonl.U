?RCS: $Id: d_htonl.U 78389 2004-11-30 00:17:17Z manus $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log$
?RCS: Revision 1.1  2004/11/30 00:17:18  manus
?RCS: Initial revision
?RCS:
?RCS: Revision 3.0.1.2  1994/08/29  16:09:25  ram
?RCS: patch32: now properly handles htonl() and friends when macros (ADO)
?RCS:
?RCS: Revision 3.0.1.1  1994/05/06  14:45:00  ram
?RCS: patch23: now also check for htonl() macro (ADO)
?RCS:
?RCS: Revision 3.0  1993/08/18  12:06:22  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_htonl: Inlibc Setvar i_niin i_sysin cat rm contains \
	cppstdin cppflags cppminus
?MAKE:	-pick add $@ %<
?S:d_htonl:
?S:	This variable conditionally defines HAS_HTONL if htonl() and its
?S:	friends are available to do network order byte swapping.
?S:.
?C:HAS_HTONL (HTONL):
?C:	This symbol, if defined, indicates that the htonl() routine (and
?C:	friends htons() ntohl() ntohs()) are available to do network
?C:	order byte swapping.
?C:.
?C:HAS_HTONS (HTONS):
?C:	This symbol, if defined, indicates that the htons() routine (and
?C:	friends htonl() ntohl() ntohs()) are available to do network
?C:	order byte swapping.
?C:.
?C:HAS_NTOHL (NTOHL):
?C:	This symbol, if defined, indicates that the ntohl() routine (and
?C:	friends htonl() htons() ntohs()) are available to do network
?C:	order byte swapping.
?C:.
?C:HAS_NTOHS (NTOHS):
?C:	This symbol, if defined, indicates that the ntohs() routine (and
?C:	friends htonl() htons() ntohl()) are available to do network
?C:	order byte swapping.
?C:.
?H:#$d_htonl HAS_HTONL		/**/
?H:#$d_htonl HAS_HTONS		/**/
?H:#$d_htonl HAS_NTOHL		/**/
?H:#$d_htonl HAS_NTOHS		/**/
?H:.
?LINT:set d_htonl
: see if htonl --and friends-- exists
val=''
set htonl val
eval $inlibc

: Maybe they are macros.
case "$val" in
$undef)
	$cat >htonl.c <<EOM
#include <stdio.h>
#include <sys/types.h>
#$i_niin I_NETINET_IN
#$i_sysin I_SYS_IN
#ifdef I_NETINET_IN
#include <netinet/in.h>
#endif
#ifdef I_SYS_IN
#include <sys/in.h>
#endif
#ifdef htonl
printf("Defined as a macro.");
#endif
EOM
	$cppstdin $cppflags $cppminus < htonl.c >htonl.E 2>/dev/null
	if $contains 'Defined as a macro' htonl.E >/dev/null 2>&1; then
		val="$define"
		echo "But it seems to be defined as a macro." >&4
	fi
	$rm -f htonl.?
	;;
esac
set d_htonl
eval $setvar

