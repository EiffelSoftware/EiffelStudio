/* ATokPtr.h
 *
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to the Purdue Compiler Construction Tool
 * Set (PCCTS) -- PCCTS is in the public domain.  An individual or
 * company may do whatever they wish with source code distributed with
 * PCCTS or the code generated by PCCTS, including the incorporation of
 * PCCTS, or its output, into commerical software.
 * 
 * We encourage users to develop software with PCCTS.  However, we do ask
 * that credit is given to us for developing PCCTS.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like PCCTS and have developed a nice tool with the
 * output, please mention that you developed it using PCCTS.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 *
 * ANTLR 1.33
 * Written by Russell Quong June 30, 1995
 * Adapted by Terence Parr to ANTLR stuff
 * Parr Research Corporation
 * with Purdue University and AHPCRC, University of Minnesota
 * 1989-1995
 */

#ifndef ATokPtr_h
#define ATokPtr_h

// pointer to a reference counted object
// robust in that an unused ANTLRTokenPtr can point to NULL.

class ANTLRAbstractToken;

class ANTLRTokenPtr {
public:
    ANTLRTokenPtr(ANTLRAbstractToken *addr=NULL){ptr_ = addr; ref();}
    ANTLRTokenPtr(const ANTLRTokenPtr &lhs)	{ptr_ = lhs.ptr_; lhs.ref();}
    ~ANTLRTokenPtr();

    // use ANTLRTokenPtr as a pointer to ANTLRToken
    ANTLRAbstractToken *operator-> () { return ptr_; }
    void operator = (const ANTLRTokenPtr lhs);
    void operator = (ANTLRAbstractToken *addr);
    unsigned operator != (const ANTLRTokenPtr &q)
	{ return this->ptr_ != q.ptr_; }
    unsigned operator == (const ANTLRTokenPtr &q)
	{ return this->ptr_ == q.ptr_; }
    void ref() const;
    void deref();

protected:
    ANTLRAbstractToken *ptr_;
};

//typedef ANTLRTokenPtr _ANTLRTokenPtr;

/*
 * Since you cannot redefine operator->() to return one of the user's
 * token object types, we must down cast.  This is a drag.  Here's
 * a macro that helps.  template: "mytoken(a-smart-ptr)->myfield".
 */
#define mytoken(tk) ((ANTLRToken *)(tk.operator->()))

#endif
