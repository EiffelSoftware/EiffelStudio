-- This file has been generated by EWG. Do not edit. Changes will be lost!

class CONTROL_TAB_ENTRY_STRUCT

inherit

	EWG_STRUCT

	CONTROL_TAB_ENTRY_STRUCT_EXTERNAL
		export
			{NONE} all
		end

create

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {ANY} -- Access

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	icon_struct: CONTROL_BUTTON_CONTENT_INFO_STRUCT is
			-- Access member `icon'
		require
			exists: exists
		do
			create Result.make_shared (get_icon_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = icon
		end

	set_icon_struct (a_value: CONTROL_BUTTON_CONTENT_INFO_STRUCT) is
			-- Set member `icon'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_icon_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = icon
		end

	icon: POINTER is
			-- Access member `icon'
		require
			exists: exists
		do
			Result := get_icon_external (item)
		ensure
			result_correct: Result = get_icon_external (item)
		end

	set_icon (a_value: POINTER) is
			-- Set member `icon'
		require
			exists: exists
		do
			set_icon_external (item, a_value)
		ensure
			a_value_set: a_value = icon
		end

	name_struct: CFSTRING_STRUCT is
			-- Access member `name'
		require
			exists: exists
		do
			create Result.make_shared (get_name_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = name
		end

	set_name_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `name'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_name_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = name
		end

	name: POINTER is
			-- Access member `name'
		require
			exists: exists
		do
			Result := get_name_external (item)
		ensure
			result_correct: Result = get_name_external (item)
		end

	set_name (a_value: POINTER) is
			-- Set member `name'
		require
			exists: exists
		do
			set_name_external (item, a_value)
		ensure
			a_value_set: a_value = name
		end

	enabled: INTEGER is
			-- Access member `enabled'
		require
			exists: exists
		do
			Result := get_enabled_external (item)
		ensure
			result_correct: Result = get_enabled_external (item)
		end

	set_enabled (a_value: INTEGER) is
			-- Set member `enabled'
		require
			exists: exists
		do
			set_enabled_external (item, a_value)
		ensure
			a_value_set: a_value = enabled
		end

end
