////////////////////////////////////////////////////////////////////////////////////////
//
// ISE.Compiler.idl
// Definitions for ISE Eiffel COM Compiler
//
// (c)2002 Eiffel Software
//
////////////////////////////////////////////////////////////////////////////////////////

//
// Header files
//

#include "ise_compiler_guid.h"

//
// Dependant IDL
//

import "oaidl.idl";


///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Forward Declarations
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////

#define EIFFEL_BASE_DISPID  10000

interface IEiffelProject;
interface IEiffelCompletionInfo;
interface IEiffelCompletionEntry;
interface IEiffelCompiler;
interface IEiffelCompilerEvents;
interface IEiffelSystemBrowser;
interface IEiffelClusterDescriptor;
interface IEiffelClassDescriptor;
interface IEiffelFeatureDescriptor;
interface IEiffelProjectProperties;
interface IEiffelClusterProperties;
interface IEiffelSystemExternals;
interface IEiffelSystemAssemblies;
interface IEiffelAssemblyProperties;
interface IEiffelSystemClusters;
interface IEnumEiffelClass;
interface IEnumCluster;
interface IEnumFeature;
interface IEnumClusterProp;
interface IEnumClusterExcludes;
interface IEnumIncludePaths;
interface IEnumObjectFiles;
interface IEnumAssembly;
interface IEnumCompletionEntry;
interface IEnumParameter;
interface IEiffelParameterDescriptor;
interface IEiffelHTMLDocGenerator;
interface IEiffelHTMLDocEvents;
interface IEiffelException;
enum EIF_ENTITY_IMAGES;
enum EIF_FEATURE_TYPES;
enum EIF_EXCEPTIONS;
enum EIF_PROJECT_TYPES;
enum EIF_ASSERTIONS;
enum EIF_CLUSTER_NAMESPACE_GENERATION;


///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Dispatch Id's
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////

enum
{
    // IEiffelProjectProperties Dispatch ID's
    DISPID_system_name = EIFFEL_BASE_DISPID,
    DISPID_root_class_name,
    DISPID_creation_routine,
    DISPID_namespace_generation,
    DISPID_default_namespace,
    DISPID_project_type,
    DISPID_dot_net_naming_convention,
    DISPID_generate_debug_info,
    DISPID_precompiled_library,
    DISPID_assertions,
    DISPID_clusters,
    DISPID_externals,
    DISPID_assemblies,
    DISPID_title,
    DISPID_description,
    DISPID_company,
    DISPID_product,
    DISPID_version,
    DISPID_trademark,
    DISPID_copyright,
    DISPID_culture,
    DISPID_key_file_name,
    DISPID_working_directory,
    DISPID_Apply,

    // IEiffelSystemClusters Dispatch ID's
    DISPID_cluster_tree,
    DISPID_flat_clusters,
    DISPID_store,
    DISPID_add_cluster,
    DISPID_remove_cluster,
    DISPID_cluster_properties,
    DISPID_cluster_properties_by_id,
    DISPID_change_cluster_name,
    DISPID_is_valid_name,
    DISPID_get_cluster_fullname,

    // IEiffelSystemAssemblies Dispatch ID's
    DISPID_add_assembly,
    DISPID_add_local_assembly,
    DISPID_remove_assembly,
    DISPID_assembly_properties,
    DISPID_is_valid_cluster_name,
    DISPID_contains_assembly,
    DISPID_contains_gac_assembly,
    DISPID_contains_local_assembly,
    DISPID_cluster_name_from_gac_assembly,
    DISPID_cluster_name_from_local_assembly,
    DISPID_is_valid_prefix,

    // IEiffelClusterProperties Dispatch ID's
    DISPID_name,
    DISPID_cluster_path,
    DISPID_override,
    DISPID_is_library,
    DISPID_all,
    DISPID_use_system_default,
    DISPID_evaluate_require_by_default,
    DISPID_evaluate_ensure_by_default,
    DISPID_evaluate_check_by_default,
    DISPID_evaluate_loop_by_default,
    DISPID_evaluate_invariant_by_default,
    DISPID_set_assertions,
    DISPID_excluded,
    DISPID_add_exclude,
    DISPID_remove_exclude,
    DISPID_parent_name,
    DISPID_has_parent,
    DISPID_subclusters,
    DISPID_has_children,
    DISPID_cluster_id,
    DISPID_is_eiffel_library,
    DISPID_expanded_cluster_path,
    DISPID_cluster_namespace,

    // IEiffelAssemblyProperties Dispatch ID's
    DISPID_assembly_name,
    DISPID_assembly_version,
    DISPID_assembly_culture,
    DISPID_assembly_public_key_token,
    DISPID_is_local,
    DISPID_assembly_cluster_name,
    DISPID_assembly_prefix,
    DISPID_is_prefix_read_only,

    // IEiffelSystemExternals Dispatch ID's
    DISPID_add_include_path,
    DISPID_remove_include_path,
    DISPID_replace_include_path,
    DISPID_include_paths,
    DISPID_add_object_file,
    DISPID_remove_object_file,
    DISPID_replace_object_file,
    DISPID_object_files
};



///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Enum Declarations
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////


[
    uuid (UUID_EnumEIF_EXCEPTIONS),
    helpstring ("Eiffel Exception Codes")
]
typedef enum EIF_EXCEPTIONS
{
    EIF_EXCEPTIONS_Unspecified = 0,
    EIF_EXCEPTIONS_Successful = 1,
    EIF_EXCEPTIONS_NoProjectLoaded = 2,
    EIF_EXCEPTIONS_ProjectIncompatible = 3,
    EIF_EXCEPTIONS_ProjectFileCorrupted = 4,
    EIF_EXCEPTIONS_UnableToRemoveProject = 5,
    EIF_EXCEPTIONS_UnableToCreateProject = 5,
    EIF_EXCEPTIONS_InvalidAceFile = 7,
    EIF_EXCEPTIONS_ProjectNotCompiled = 8,
    EIF_EXCEPTIONS_AceFileDoesNotExists = 9,
    EIF_EXCEPTIONS_ProjectAlreadyInitialized = 10,
    EIF_EXCEPTIONS_ProjectIncomplete = 11,
    EIF_EXCEPTIONS_IOError = 12,
    EIF_EXCEPTIONS_NonDotnetProject = 13

} EIF_EXCEPTIONS;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_ASSERTIONS),
    helpstring ("Assertion levels for project settings.")
]
typedef enum EIF_ASSERTIONS
{
    EIF_ASSERTIONS_None = 0,
    EIF_ASSERTIONS_Require = 1,
    EIF_ASSERTIONS_Ensure = 2,
    EIF_ASSERTIONS_Check = 4,
    EIF_ASSERTIONS_Invariant = 8,
    EIF_ASSERTIONS_Loop = 16
}EIF_ASSERTIONS;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_CLUSTER_NAMESPACE_GENERATION),
    helpstring ("Type of cluster namespace generation.")
]
typedef enum EIF_CLUSTER_NAMESPACE_GENERATION
{
    EIF_CLUSTER_NAMESPACE_GENERATION_None = 0,
    EIF_CLUSTER_NAMESPACE_GENERATION_ClusterName = 1,
    EIF_CLUSTER_NAMESPACE_GENERATION_FullClusterName = 2
}EIF_CLUSTER_NAMESPACE_GENERATION;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_PROJECT_TYPES),
    helpstring ("Type of compilation for projects.")
]
typedef enum EIF_PROJECT_TYPES
{
    EIF_PROJECT_TYPES_ConsoleApplication = 0,
    EIF_PROJECT_TYPES_WindowsApplication,
    EIF_PROJECT_TYPES_ClassLibrary,
    EIF_PROJECT_TYPES_PrecompiledLibrary
}EIF_PROJECT_TYPES;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_ENTITY_IMAGES),
    helpstring ("Image indexes associated with a feature.")
]
typedef enum EIF_ENTITY_IMAGES{
    EIF_ENTITY_IMAGES_FrozenOnce = 24,
    EIF_ENTITY_IMAGES_Obsolete = 23,
    EIF_ENTITY_IMAGES_FrozenAttribute = 22,
    EIF_ENTITY_IMAGES_Attribute = 19,
    EIF_ENTITY_IMAGES_Once = 18,
    EIF_ENTITY_IMAGES_FrozenExternal = 25,
    EIF_ENTITY_IMAGES_FrozenFeature = 21,
    EIF_ENTITY_IMAGES_ExternalFeature = 17,
    EIF_ENTITY_IMAGES_Deferred = 16,
    EIF_ENTITY_IMAGES_Feature = 4,
    EIF_ENTITY_IMAGES_Variable = 26
} EIF_ENTITY_IMAGES;
//---------------------------------------------------------------------

[
    uuid (UUID_EnumEIF_FEATURE_TYPES),
    helpstring ("Type of Eiffel feature.")
]
typedef enum EIF_FEATURE_TYPES
{
    EIF_FEATURE_TYPES_Attribute = 1,
    EIF_FEATURE_TYPES_Constant = 2,
    EIF_FEATURE_TYPES_Deferred = 4,
    EIF_FEATURE_TYPES_External = 8,
    EIF_FEATURE_TYPES_Frozen = 16,
    EIF_FEATURE_TYPES_Function = 32,
    EIF_FEATURE_TYPES_Infix = 64,
    EIF_FEATURE_TYPES_Obsolete = 128,
    EIF_FEATURE_TYPES_Once = 256,
    EIF_FEATURE_TYPES_Prefix = 512,
    EIF_FEATURE_TYPES_Procedure = 1024
} EIF_FEATURE_TYPES;


///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Interface Declarations
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////


[
    oleautomation,
    uuid (UUID_IEiffelException),
    helpstring ("A single exception object")
]
interface IEiffelException: IUnknown
{
    [helpstring ("Get inner exception"), propget]
    HRESULT inner_exception ([out, retval] IEiffelException** a_result);
    
    [helpstring ("Get exception message"), propget]
    HRESULT message ([out, retval] BSTR* a_result);
    
    [helpstring ("Retrieve exception type"), propget]
    HRESULT exception_code ([out, retval] EIF_EXCEPTIONS* a_result);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelProject),
    helpstring ("Eiffel Project.")
]
interface IEiffelProject: IUnknown
{
    [helpstring ("Retrieve Eiffel Project")]
    HRESULT retrieve_eiffel_project ([in] BSTR a_project_file_name);

    [helpstring ("Create new Eiffel project.")]
    HRESULT create_eiffel_project ([in] BSTR a_ace_file_name, [in] BSTR a_project_directory_path);

    [helpstring ("Full path to .epr file.")]
    HRESULT project_file_name ([out, retval] BSTR * return_value);

    [helpstring ("Full path to Ace file.")]
    HRESULT ace_file_name ([out, retval] BSTR * return_value);

    [helpstring ("Project directory.")]
    HRESULT project_directory ([out, retval] BSTR * return_value);

    [helpstring ("Is project valid?")]
    HRESULT valid_project ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Last exception raised")]
    HRESULT last_exception ([out, retval] IEiffelException** a_result);

    [helpstring ("Compiler.")]
    HRESULT compiler ([out, retval] IEiffelCompiler ** return_value);

    [helpstring ("Has system been compiled?")]
    HRESULT is_compiled ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Has the project updated since last compilation?")]
    HRESULT project_has_updated ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("System Browser.")]
    HRESULT system_browser ([out, retval] IEiffelSystemBrowser ** return_value);

    [helpstring ("Project Properties.")]
    HRESULT project_properties ([out, retval] IEiffelProjectProperties ** return_value);

    [helpstring ("Completion information")]
    HRESULT completion_information ([out, retval] IEiffelCompletionInfo ** return_value);

    [helpstring ("Help documentation generator")]
    HRESULT html_doc_generator ([out, retval] IEiffelHTMLDocGenerator ** return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompletionInfo),
    helpstring ("Eiffel Completion info.")
]
interface IEiffelCompletionInfo: IUnknown
{
    [helpstring ("Add a local variable used for solving member completion list")]
    HRESULT add_local ([in] BSTR name, [in] BSTR type);

    [helpstring ("Add an argument used for solving member completion list")]
    HRESULT add_argument ([in] BSTR name, [in] BSTR type);

    [helpstring ("Features accessible from target.")]
    HRESULT target_features ([in] BSTR target, [in] BSTR feature_name, [in] BSTR file_name, [out] VARIANT* return_names, [out] VARIANT* return_signatures, [out] VARIANT* return_image_indexes);

    [helpstring ("Feature information")]
    HRESULT target_feature ([in] BSTR target, [in] BSTR feature_name, [in] BSTR file_name, [out, retval] IEiffelFeatureDescriptor** return_value);

    [helpstring ("Flush temporary completion features for a specifi file")]
    HRESULT flush_completion_features ([in] BSTR a_file_name);

    [helpstring ("Initialize a feature for completion without compiltation")]
    HRESULT initialize_feature ([in] BSTR a_name, [in] VARIANT a_arguments, [in] VARIANT a_argument_types, [in] BSTR a_return_type, [in] ULONG a_feature_type, [in] BSTR a_file_name);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompiler),
    helpstring ("Eiffel Compiler.")
]
interface IEiffelCompiler: IUnknown
{
    [helpstring ("Compile.")]
    HRESULT compile ();

    [helpstring ("Finalize.")]
    HRESULT finalize ();

    [helpstring ("Precompile.")]
    HRESULT precompile ();

    [helpstring ("Compile with piped output.")]
    HRESULT compile_to_pipe ();

    [helpstring ("Finalize with piped output.")]
    HRESULT finalize_to_pipe ();

    [helpstring ("Precompile with piped output.")]
    HRESULT precompile_to_pipe ();

    [helpstring ("Was last compilation successful?")]
    HRESULT is_successful ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Did last compile warrant a call to finish_freezing?")]
    HRESULT freezing_occurred ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Compiler version.")]
    HRESULT compiler_version ([out, retval] BSTR * return_value);

    [helpstring ("Takes a path and expands it using the env vars.")]
    HRESULT expand_path ([in] BSTR a_path, [out, retval] BSTR * return_value);

    [helpstring ("Generate a cyrptographic key filename.")]
    HRESULT generate_msil_keyfile ([in] BSTR filename);

    [helpstring ("Eiffel Freeze command name")]
    HRESULT freeze_command_name ([out, retval] BSTR * return_value);

    [helpstring ("Eiffel Freeze command arguments")]
    HRESULT freeze_command_arguments ([out, retval] BSTR * return_value);

    [helpstring ("Is the compiler a trial version.")]
    HRESULT has_signable_generation ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Remove file locks")]
    HRESULT remove_file_locks ();

    [helpstring ("Output pipe's name")]
    HRESULT output_pipe_name ([out, retval] BSTR * return_value);

    [helpstring ("Set output pipe's name")]
    HRESULT set_output_pipe_name ([in] BSTR return_value);

    [helpstring ("Is compiler output sent to pipe `output_pipe_name'")]
    HRESULT is_output_piped ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Can product be run? (i.e. is it activated or was run less than 10 times)")]
    HRESULT can_run ([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelCompilerEvents),
    helpstring ("Eiffel Compiler Events.")
]
interface IEiffelCompilerEvents: IUnknown
{
    [helpstring ("Should compilation continue.")]
    HRESULT should_continue ([in, out] VARIANT_BOOL * a_boolean);

    [helpstring ("Output string.")]
    HRESULT output_string ([in] BSTR a_string);

    [helpstring ("Last error.")]
    HRESULT last_error ([in] BSTR error_message, [in] BSTR file_name, [in] ULONG line_number);
};
//---------------------------------------------------------------------
[
    oleautomation,
    uuid (UUID_IEiffelHTMLDocGenerator),
    helpstring ("Eiffel Project HTML Documentation Generator.")
]
interface IEiffelHTMLDocGenerator: IUnknown
{
    [propget, helpstring ("Is the project loaded?")]
    HRESULT is_loaded ([out, retval] VARIANT_BOOL* return_value);

    [propget, helpstring ("Is the project oorrupted?")]
    HRESULT is_corrupted ([out, retval] VARIANT_BOOL* return_value);

    [propget, helpstring ("Is the project incompatible with the current version of the compiled?")]
    HRESULT is_incompatible ([out, retval] VARIANT_BOOL* return_value);

    [helpstring ("Add a callback interface.")]
    HRESULT add_status_callback ([in] IEiffelHTMLDocEvents* new_callback);

    [helpstring ("Remove a callback interface.")]
    HRESULT remove_status_callback ([in] IEiffelHTMLDocEvents* old_callback);

    [helpstring ("Exclude a cluster from being generated.")]
    HRESULT add_excluded_cluster ([in] BSTR cluster_full_name);

    [helpstring ("Include a cluster to be generated.")]
    HRESULT remove_excluded_cluster ([in] BSTR cluster_full_name);

    [helpstring ("Generate the HTML documents into path.")]
    HRESULT generate ([in] BSTR path);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelHTMLDocEvents),
    helpstring ("Callback interface for HTML Documentation Generator.")
]
interface IEiffelHTMLDocEvents: IUnknown
{

    [helpstring ("Put a header message to the output")]
    HRESULT put_header ([in] BSTR new_value);

    [helpstring ("Put a string to the output")]
    HRESULT put_string ([in] BSTR new_value);

    [helpstring ("Put a class name to the output")]
    HRESULT put_class_document_message ([in] BSTR new_value);

    [helpstring ("Notify that documentation generating is initializing")]
    HRESULT put_initializing_documentation ();

    [helpstring ("Notify that the percentage completed has changed")]
    HRESULT put_percentage_completed ([in] ULONG new_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumEiffelClass),
    helpstring ("Eiffel Class Enumeration.")
]
interface IEnumEiffelClass: IUnknown
{
    HRESULT Next([out] IEiffelClassDescriptor **rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumEiffelClass ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelClassDescriptor **rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
        oleautomation,
        uuid(UUID_IEnumCluster),
        helpstring ("Eiffel Cluster Enumeration.")
]
interface IEnumCluster: IUnknown
{
    HRESULT Next([out] IEiffelClusterDescriptor **rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumCluster ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelClusterDescriptor **rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumFeature),
    helpstring ("Eiffel Feature Enumeration.")
]
interface IEnumFeature: IUnknown
{
    HRESULT Next(
            [out] IEiffelFeatureDescriptor **rgelt,
            [out] ULONG *pceltFetched);

    HRESULT Skip(
            [in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone(
            [out] IEnumFeature ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelFeatureDescriptor **rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEnumParameter),
    helpstring ("Feature paramaters enumeration.")
]
interface IEnumParameter: IUnknown
{
    HRESULT Next(
            [out] IEiffelParameterDescriptor ** rgelt,
            [out] ULONG *pceltFetched);

    HRESULT Skip(
            [in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone(
            [out] IEnumParameter ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelParameterDescriptor ** rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};

//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumClusterProp),
    helpstring ("Eiffel Cluster Properties Enumeration.")
]
interface IEnumClusterProp: IUnknown
{
    HRESULT Next([out] IEiffelClusterProperties **rgelt,[out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumClusterProp ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelClusterProperties **rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(CA8DB208-5E92-426e-953D-2660C131C618),
    helpstring ("Eiffel Cluster Exluded Directories Enumeration.")
]

interface IEnumClusterExcludes: IUnknown
{
    HRESULT Next([out] BSTR *rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumClusterExcludes ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] BSTR *rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumAssembly),
    helpstring ("Eiffel Assembly Enumeration.")
]
interface IEnumAssembly: IUnknown
{
    HRESULT Next([out] IEiffelAssemblyProperties ** rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumAssembly ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelAssemblyProperties ** rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(UUID_IEnumIncludePaths),
    helpstring ("Include Path Enumeration.")
]
interface IEnumIncludePaths: IUnknown
{
    HRESULT Next([out] BSTR *rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumIncludePaths ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] BSTR *rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};

//---------------------------------------------------------------------
[
    oleautomation,
    uuid(UUID_IEnumObjectFiles),
    helpstring ("Object File Enumeration.")
]
interface IEnumObjectFiles: IUnknown
{
    HRESULT Next([out] BSTR *rgelt, [out] ULONG *pceltFetched);

    HRESULT Skip([in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone([out] IEnumObjectFiles ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] BSTR *rgelt);

    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelSystemBrowser),
    helpstring ("System Browser.")
]
interface IEiffelSystemBrowser: IUnknown
{
    [helpstring ("List of classes in system.")]
    HRESULT system_classes ([out, retval] IEnumEiffelClass ** some_classes);

    [helpstring ("Number of classes in system.")]
    HRESULT class_count ([out, retval] ULONG * return_value);

    [helpstring ("List of system's clusters.")]
    HRESULT system_clusters ([out, retval] IEnumCluster ** some_clusters);

    [helpstring ("List of system's external clusters.")]
    HRESULT external_clusters ([out, retval] IEnumCluster ** some_clusters);

    [propget, helpstring ("Returns all of the assemblies in an enumerator")]
    HRESULT assemblies ([out, retval] IEnumAssembly ** return_value);

    [helpstring ("Number of top-level clusters in system.")]
    HRESULT cluster_count ([out, retval] ULONG * return_value);

    [propget, helpstring ("Number of top-level clusters in system.")]
    HRESULT root_cluster ([out, retval] IEiffelClusterDescriptor ** return_value);

    [helpstring ("Cluster descriptor.")]
    HRESULT cluster_descriptor ([in] BSTR cluster_name, [out, retval] IEiffelClusterDescriptor ** return_value);

    [helpstring ("Class descriptor.")]
    HRESULT class_descriptor ([in] BSTR class_name, [out, retval] IEiffelClassDescriptor ** return_value);

    [helpstring ("Feature descriptor.")]
    HRESULT feature_descriptor ([in] BSTR class_name, [in] BSTR feature_name, [out, retval] IEiffelFeatureDescriptor ** return_value);

    [helpstring ("Search classes with names matching `a_string'.")]
    HRESULT search_classes ([in] BSTR a_string, [in] VARIANT_BOOL is_substring, [out, retval] IEnumEiffelClass ** some_classes);

    [helpstring ("Search feature with names matching `a_string'.")]
    HRESULT search_features ([in] BSTR a_string, [in] VARIANT_BOOL is_substring, [out, retval] IEnumFeature ** some_features);

    [helpstring ("Retrieve description from dotnet type")]
    HRESULT description_from_dotnet_type ([in] BSTR a_assembly_name, [in] BSTR a_full_dotnet_type, [out, retval] BSTR *return_value);

    [helpstring ("Retrieve description from dotnet feature")]
    HRESULT description_from_dotnet_feature ([in] BSTR a_assembly_name, [in] BSTR a_full_dotnet_type, [in] BSTR a_feature_signature, [out, retval] BSTR *return_value);

};
//---------------------------------------------------------------------


[
    oleautomation,
    uuid (UUID_IEiffelClusterDescriptor),
    helpstring ("Eiffel Cluster Descriptor.")
]
interface IEiffelClusterDescriptor: IUnknown
{
    [helpstring ("Cluster name.")]
    HRESULT name ([out, retval] BSTR * return_value);

    [helpstring ("Cluster description.")]
    HRESULT description ([out, retval] BSTR * return_value);

    [helpstring ("Cluster Tool Tip.")]
    HRESULT tool_tip ([out, retval] BSTR * return_value);

    [helpstring ("List of classes in cluster.")]
    HRESULT classes ([out, retval] IEnumEiffelClass ** some_classes);

    [helpstring ("Number of classes in cluster.")]
    HRESULT class_count ([out, retval] ULONG * return_value);

    [helpstring ("List of subclusters in cluster.")]
    HRESULT clusters ([out, retval] IEnumCluster ** some_clusters);

    [helpstring ("Number of subclusters in cluster.")]
    HRESULT cluster_count ([out, retval] ULONG * return_value);

    [helpstring ("Full path to cluster.")]
    HRESULT cluster_path ([out, retval] BSTR * path);

    [helpstring ("Relative path to cluster.")]
    HRESULT relative_path ([out, retval] BSTR * path);

    [helpstring ("Should this cluster classes take priority over other classes with same name?")]
    HRESULT is_override_cluster ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Should this cluster be treated as library?")]
    HRESULT is_library ([out, retval] VARIANT_BOOL * path);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelClassDescriptor),
    helpstring ("Eiffel Class Descriptor.")
]
interface IEiffelClassDescriptor: IUnknown
{
    [helpstring ("Class name.")]
    HRESULT name ([out, retval] BSTR * return_value);

    [helpstring ("Class description.")]
    HRESULT description ([out, retval] BSTR * return_value);

    [helpstring ("Class external name.")]
    HRESULT external_name ([out, retval] BSTR * return_value);

    [helpstring ("Class Tool Tip.")]
    HRESULT tool_tip ([out, retval] BSTR * return_value);

    [helpstring ("Is class in system?")]
    HRESULT is_in_system ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("List of names of class features.")]
    HRESULT feature_names ([out, retval] SAFEARRAY (BSTR) * names);

    [helpstring ("List of class features.")]
    HRESULT features ([out, retval] IEnumFeature ** some_features);

    [helpstring ("Number of class features.")]
    HRESULT feature_count ([out, retval] ULONG * return_value);

    [helpstring ("List of class features including ancestor features.")]
    HRESULT flat_features ([out, retval] IEnumFeature ** some_features);

    [helpstring ("Number of flat class features.")]
    HRESULT flat_feature_count ([out, retval] ULONG * return_value);

    [helpstring ("List of class inherited features.")]
    HRESULT inherited_features ([out, retval] IEnumFeature ** some_features);

    [helpstring ("Number of inherited features.")]
    HRESULT inherited_feature_count ([out, retval] ULONG * return_value);

    [helpstring ("List of class creation routines.")]
    HRESULT creation_routines ([out, retval] IEnumFeature ** some_features);

    [helpstring ("Number of creation routines.")]
    HRESULT creation_routine_count ([out, retval] ULONG * return_value);

    [helpstring ("List of class clients.")]
    HRESULT clients ([out, retval] IEnumEiffelClass ** some_clients);

    [helpstring ("Number of class clients.")]
    HRESULT client_count ([out, retval] ULONG * return_value);

    [helpstring ("List of class suppliers.")]
    HRESULT suppliers ([out, retval] IEnumEiffelClass ** some_suppliers);

    [helpstring ("Number of class suppliers.")]
    HRESULT supplier_count ([out, retval] ULONG * return_value);

    [helpstring ("List of direct ancestors of class.")]
    HRESULT ancestors ([out, retval] IEnumEiffelClass ** some_ancestors);

    [helpstring ("Number of direct ancestors.")]
    HRESULT ancestor_count ([out, retval] ULONG * return_value);

    [helpstring ("List of direct descendants of class.")]
    HRESULT descendants ([out, retval] IEnumEiffelClass ** some_descendants);

    [helpstring ("Number of direct descendants.")]
    HRESULT descendant_count ([out, retval] ULONG * return_value);

    [helpstring ("Full path to file.")]
    HRESULT class_path ([out, retval] BSTR * path);

    [helpstring ("Is class deferred?")]
    HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is class external?")]
    HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is class generic?")]
    HRESULT is_generic ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is class part of a library?")]
    HRESULT is_library ([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelFeatureDescriptor),
    helpstring ("Eiffel Feature Descriptor.")
]
interface IEiffelFeatureDescriptor: IUnknown
{
    [helpstring ("Feature name.")]
    HRESULT name ([out, retval] BSTR * return_value);

    [helpstring ("Feature external name.")]
    HRESULT external_name ([out, retval] BSTR * return_value);

    [helpstring ("Name of class where feature is written in.")]
    HRESULT written_class ([out, retval] BSTR * return_value);

    [helpstring ("Name of class where feature was evaluated in.")]
    HRESULT evaluated_class ([out, retval] BSTR * return_value);

    [helpstring ("Feature signature.")]
    HRESULT signature ([out, retval] BSTR * return_value);

    [helpstring ("Feature description.")]
    HRESULT description ([out, retval] BSTR * return_value);

    [helpstring ("Feature parameters.")]
    HRESULT parameters ([out, retval] IEnumParameter** params);

    [helpstring ("Feature return type.")]
    HRESULT return_type ([out, retval] BSTR* return_value);

    [helpstring ("Feature location, full path to file and line number")]
    HRESULT feature_location (    [in, out] BSTR * file_path,
                                [in, out] ULONG * line_number);

    [helpstring ("List of all feature callers, including callers of ancestor and descendant versions.")]
    HRESULT all_callers ([out, retval] IEnumFeature ** some_callers);

    [helpstring ("Number of all callers.")]
    HRESULT all_callers_count ([out, retval] ULONG * return_value);

    [helpstring ("List of feature callers.")]
    HRESULT local_callers ([out, retval] IEnumFeature ** some_callers);

    [helpstring ("Number of local callers.")]
    HRESULT local_callers_count ([out, retval] ULONG * return_value);

    [helpstring ("List of feature callers, including callers of descendant versions.")]
    HRESULT descendant_callers ([out, retval] IEnumFeature ** some_callers);

    [helpstring ("Number of descendant callers.")]
    HRESULT descendant_callers_count ([out, retval] ULONG * return_value);

    [helpstring ("List of implementers.")]
    HRESULT implementers ([out, retval] IEnumFeature ** some_implementers);

    [helpstring ("Number of feature implementers.")]
    HRESULT implementer_count ([out, retval] ULONG * return_value);

    [helpstring ("List of ancestor versions.")]
    HRESULT ancestor_versions ([out, retval] IEnumFeature ** some_implementers);

    [helpstring ("Number of ancestor versions.")]
    HRESULT ancestor_version_count ([out, retval] ULONG * return_value);

    [helpstring ("List of descendant versions.")]
    HRESULT descendant_versions ([out, retval] IEnumFeature ** some_implementers);

    [helpstring ("Number of descendant versions.")]
    HRESULT descendant_version_count ([out, retval] ULONG * return_value);

    [helpstring ("Is feature exported to all classes?")]
    HRESULT exported_to_all ([out, retval] VARIANT_BOOL * names);

    [helpstring ("Is once feature?")]
    HRESULT is_once ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is external feature?")]
    HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is deferred feature?")]
    HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is constant?")]
    HRESULT is_constant ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("is frozen feature?")]
    HRESULT is_frozen ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is infix?")]
    HRESULT is_infix ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is prefix?")]
    HRESULT is_prefix ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is attribute?")]
    HRESULT is_attribute ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is procedure?")]
    HRESULT is_procedure ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is function?")]
    HRESULT is_function ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is unique?")]
    HRESULT is_unique ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Is obsolete feature?")]
    HRESULT is_obsolete ([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Does feature have precondition?")]
    HRESULT has_precondition([out, retval] VARIANT_BOOL * return_value);

    [helpstring ("Does feature have postcondition?")]
    HRESULT has_postcondition([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid (UUID_IEiffelParameterDescriptor),
    helpstring ("Feature parameter info.")
]
interface IEiffelParameterDescriptor: IUnknown
{
    [helpstring ("Parameter name")]
    HRESULT name ([out, retval] BSTR* return_value);

    [helpstring ("Parameter display")]
    HRESULT display ([out, retval] BSTR* return_value);
};

//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelProjectProperties),
    helpstring ("Eiffel Project Properties.")
]
interface IEiffelProjectProperties: IDispatch
{
    [id (DISPID_system_name), helpstring ("System name."), propget]
    HRESULT system_name ([out, retval] BSTR * return_value);

    [id (DISPID_system_name), helpstring ("System name."), propput]
    HRESULT system_name ([in] BSTR a_name);

    [id (DISPID_root_class_name), helpstring ("Root class name."), propget]
    HRESULT root_class_name ([out, retval] BSTR * return_value);

    [id (DISPID_root_class_name), helpstring ("Root class name."), propput]
    HRESULT root_class_name ([in] BSTR a_name);

    [id (DISPID_creation_routine), helpstring ("Creation routine name."), propget]
    HRESULT creation_routine ([out, retval] BSTR * return_value);

    [id (DISPID_creation_routine), helpstring ("Creation routine name."), propput]
    HRESULT creation_routine ([in] BSTR a_routine);

    [id (DISPID_namespace_generation), helpstring ("Namespace generation for cluster"), propget]
    HRESULT namespace_generation ([out, retval] EIF_CLUSTER_NAMESPACE_GENERATION* penuClusterNamespaceGeneration);

    [id (DISPID_namespace_generation), helpstring ("Namespace generation for cluster"), propput]
    HRESULT namespace_generation ([in] EIF_CLUSTER_NAMESPACE_GENERATION enuClusterNamespaceGeneration);

    [id (DISPID_default_namespace), helpstring ("Default namespace."), propget]
    HRESULT default_namespace ([out, retval] BSTR * return_value);

    [id (DISPID_default_namespace), helpstring ("Default namespace."), propput]
    HRESULT default_namespace ([in] BSTR a_namespace);

    [id (DISPID_project_type), helpstring ("Project type"), propget]
    HRESULT project_type ([out, retval] EIF_PROJECT_TYPES* penumProjectType);

    [id (DISPID_project_type), helpstring ("Project type"), propput]
    HRESULT project_type ([in] EIF_PROJECT_TYPES enumProjectType);

    [id (DISPID_dot_net_naming_convention), helpstring (".NET Naming convention"), propget]
    HRESULT dot_net_naming_convention ([out, retval] VARIANT_BOOL* pvbNamingConvention);

    [id (DISPID_dot_net_naming_convention), helpstring (".NET Naming convention"), propput]
    HRESULT dot_net_naming_convention ([in] VARIANT_BOOL pvbNamingConvention);

    [id (DISPID_generate_debug_info), helpstring ("Generate debug info?"), propget]
    HRESULT generate_debug_info ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_generate_debug_info), helpstring ("Generate debug info?"), propput]
    HRESULT generate_debug_info ([in] VARIANT_BOOL new_value);

    [id (DISPID_precompiled_library), helpstring ("Precompiled file."), propget]
    HRESULT precompiled_library ([out, retval] BSTR * return_value);

    [id (DISPID_precompiled_library), helpstring ("Precompiled file."), propput]
    HRESULT precompiled_library([in] BSTR new_value);

    [id (DISPID_assertions), helpstring ("Project assertions"), propget]
    HRESULT assertions ([out, retval] ULONG* pAssertions);

    [id (DISPID_assertions), helpstring ("Project assertions"), propput]
    HRESULT assertions ([in] ULONG pAssertions);

    [id (DISPID_clusters), helpstring ("Project Clusters."), propget]
    HRESULT clusters ([out, retval] IEiffelSystemClusters ** return_value);

    [id (DISPID_externals), helpstring ("Externals."), propget]
    HRESULT externals ([out, retval] IEiffelSystemExternals ** return_value);

    [id (DISPID_assemblies), helpstring ("Assemblies."), propget]
    HRESULT assemblies ([out, retval] IEiffelSystemAssemblies ** return_value);

    [id (DISPID_title), helpstring ("Project title."), propget]
    HRESULT title ([out, retval] BSTR * return_value);

    [id (DISPID_title), helpstring ("Project title."), propput]
    HRESULT title ([in] BSTR new_value);

    [id (DISPID_description), helpstring ("Project description."), propget]
    HRESULT description ([out, retval] BSTR * return_value);

    [id (DISPID_description), helpstring ("Project description."), propput]
    HRESULT description ([in] BSTR new_value);

    [id (DISPID_company), helpstring ("Project company."), propget]
    HRESULT company ([out, retval] BSTR * return_value);

    [id (DISPID_company), helpstring ("Project company."), propput]
    HRESULT company ([in] BSTR new_value);

    [id (DISPID_product), helpstring ("Product."), propget]
    HRESULT product ([out, retval] BSTR * return_value);

    [id (DISPID_product), helpstring ("Product."), propput]
    HRESULT product ([in] BSTR new_value);

    [id (DISPID_version), helpstring ("Project version."), propget]
    HRESULT version ([out, retval] BSTR * return_value);

    [id (DISPID_version), helpstring ("Project version."), propput]
    HRESULT version ([in] BSTR new_value);

    [id (DISPID_trademark), helpstring ("Project trademark."), propget]
    HRESULT trademark ([out, retval] BSTR * return_value);

    [id (DISPID_trademark), helpstring ("Project trademark."), propput]
    HRESULT trademark ([in] BSTR new_value);

    [id (DISPID_copyright), helpstring ("Project copyright."), propget]
    HRESULT copyright ([out, retval] BSTR * return_value);

    [id (DISPID_copyright), helpstring ("Project copyright."), propput]
    HRESULT copyright ([in] BSTR new_value);

    [id (DISPID_culture), helpstring ("Asembly culture."), propget]
    HRESULT culture ([out, retval] BSTR * return_value);

    [id (DISPID_culture), helpstring ("Asssembly culture."), propput]
    HRESULT culture ([in] BSTR new_value);

    [id (DISPID_key_file_name), helpstring ("Asembly signing key file name."), propget]
    HRESULT key_file_name ([out, retval] BSTR * return_value);

    [id (DISPID_key_file_name), helpstring ("Assembly signing key file name."), propput]
    HRESULT key_file_name ([in] BSTR new_value);

    [id (DISPID_working_directory), helpstring ("Project working directory"), propget]
    HRESULT working_directory ([out, retval] BSTR* pbstrWorkingDirectory);

    [id (DISPID_working_directory), helpstring ("Project working directory"), propput]
    HRESULT working_directory ([in] BSTR bstrWorkingDirectory);

    [id (DISPID_Apply), helpstring ("Apply changes")]
    HRESULT Apply ();
};
//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelSystemClusters),
    helpstring ("Eiffel System Clusters.")
]
interface IEiffelSystemClusters: IDispatch
{
    [id (DISPID_cluster_tree), helpstring ("Cluster tree.")]
    HRESULT cluster_tree ([out, retval] IEnumClusterProp ** return_value);

    [id (DISPID_flat_clusters), helpstring ("Cluster in a flat form.")]
    HRESULT flat_clusters ([out, retval] IEnumClusterProp ** return_value);

    [id (DISPID_store), helpstring ("Save changes.")]
    HRESULT store ();

    [id (DISPID_add_cluster), helpstring ("Add a cluster to the project.")]
    HRESULT add_cluster ([in] BSTR cluster_name, [in] BSTR parent_name, [in] BSTR cluster_path);

    [id (DISPID_remove_cluster), helpstring ("Remove a cluster from the project.")]
    HRESULT remove_cluster ([in] BSTR cluster_name);

    [id (DISPID_cluster_properties), helpstring ("Cluster properties.")]
    HRESULT cluster_properties ([in] BSTR cluster_name, [out, retval] IEiffelClusterProperties ** return_value);

    [id (DISPID_cluster_properties_by_id), helpstring ("Cluster properties.")]
    HRESULT cluster_properties_by_id ([in] ULONG cluster_id, [out, retval] IEiffelClusterProperties ** return_value);

    [id (DISPID_change_cluster_name), helpstring ("Change cluster name.")]
    HRESULT change_cluster_name ([in] BSTR a_name, [in] BSTR a_new_name);

    [id (DISPID_is_valid_name), helpstring ("Checks to see if a cluster name is valid")]
    HRESULT is_valid_name ([in] BSTR cluster_name, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_get_cluster_fullname), helpstring ("Retrieves a clusters full name from its name")]
    HRESULT get_cluster_fullname ([in] BSTR cluster_name, [out, retval] BSTR * return_value);
};

//---------------------------------------------------------------------`

[
    dual,
    object,
    uuid (UUID_IEiffelSystemAssemblies),
    helpstring ("Eiffel System Assemblies.")
]
interface IEiffelSystemAssemblies: IDispatch
{
    [id (DISPID_store), helpstring ("Save changes.")]
    HRESULT store ();

    [id (DISPID_add_assembly), helpstring ("Add a signed assembly to the project.")]
    HRESULT add_assembly ([in] BSTR assembly_prefix, [in] BSTR cluster_name, [in] BSTR a_name, [in] BSTR a_version, [in] BSTR a_culture, [in] BSTR a_publickey);

    [id (DISPID_add_local_assembly), helpstring ("Add a local assembly to the project.")]
    HRESULT add_local_assembly ([in] BSTR assembly_prefix, [in] BSTR cluster_name, [in] BSTR a_path);

    [id (DISPID_remove_assembly), helpstring ("Remove an assembly from the project.")]
    HRESULT remove_assembly ([in] BSTR assembly_identifier);

    [id (DISPID_assembly_properties), helpstring ("Assembly properties.")]
    HRESULT assembly_properties ([in] BSTR cluster_name, [out, retval] IEiffelAssemblyProperties ** return_value);

    [id (DISPID_is_valid_cluster_name), helpstring ("Checks to see if a assembly cluster name is valid")]
    HRESULT is_valid_cluster_name ([in] BSTR cluster_name, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_contains_assembly), helpstring ("Checks to see if a assembly cluster name has already been added to the project")]
    HRESULT contains_assembly ([in] BSTR cluster_name, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_contains_gac_assembly), helpstring ("Checks to see if a signed assembly has already been added to the project")]
    HRESULT contains_gac_assembly ([in] BSTR a_name, [in] BSTR a_version, [in] BSTR a_culture, [in] BSTR a_publickey, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_contains_local_assembly), helpstring ("Checks to see if a unsigned assembly has already been added to the project")]
    HRESULT contains_local_assembly ([in] BSTR a_path, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_cluster_name_from_gac_assembly), helpstring ("Retrieves the cluster name for a signed assembly in the project")]
    HRESULT cluster_name_from_gac_assembly ([in] BSTR a_name, [in] BSTR a_version, [in] BSTR a_culture, [in] BSTR a_publickey, [out, retval] BSTR * return_value);

    [id (DISPID_cluster_name_from_local_assembly), helpstring ("Retrieves the cluster name for a unsigned assembly in the project")]
    HRESULT cluster_name_from_local_assembly ([in] BSTR a_path, [out, retval] BSTR * return_value);

    [id (DISPID_is_valid_prefix), helpstring ("Is 'prefix' a valid assembly prefix")]
    HRESULT is_valid_prefix ([in] BSTR assembly_prefix, [out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_assemblies), helpstring ("Returns all of the assemblies in an enumerator"), propget]
    HRESULT assemblies ([out, retval] IEnumAssembly ** return_value);
};

//---------------------------------------------------------------------

[
    dual,
    object,
    uuid (UUID_IEiffelClusterProperties),
    helpstring ("Eiffel Cluster Properties (for Ace file).")
]
interface IEiffelClusterProperties: IDispatch
{
    [id (DISPID_name), helpstring ("Cluster name."), propget]
    HRESULT name ([out, retval] BSTR * return_value);

    [id (DISPID_cluster_path), helpstring ("Full path to cluster."), propget]
    HRESULT cluster_path ([out, retval] BSTR * path);

    [id (DISPID_cluster_path), helpstring ("Full path to cluster."), propput]
    HRESULT cluster_path ([in] BSTR path);

    [id (DISPID_override), helpstring ("Should this cluster classes take priority over other classes with same name?"), propget]
    HRESULT override ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_override), helpstring ("Should this cluster classes take priority over other classes with same name?"), propput]
    HRESULT override ([in] VARIANT_BOOL a_bool);

    [id (DISPID_is_library), helpstring ("Should this cluster be treated as library?"), propget]
    HRESULT is_library ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_is_library), helpstring ("Should this cluster be treated as library?"), propput]
    HRESULT is_library ([in] VARIANT_BOOL a_bool);

    [id (DISPID_all), helpstring ("Should all subclusters be included?"), propget]
    HRESULT all ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_all), helpstring ("Should all subclusters be included?"), propput]
    HRESULT all ([in] VARIANT_BOOL new_value);

    [id (DISPID_use_system_default), helpstring ("Should use system default?"), propget]
    HRESULT use_system_default ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_use_system_default), helpstring ("Should use system default?"), propput]
    HRESULT use_system_default ([in] VARIANT_BOOL new_value);

    [id (DISPID_evaluate_require_by_default), helpstring ("Should preconditions be evaluated by default?"), propget]
    HRESULT evaluate_require_by_default ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_evaluate_ensure_by_default), helpstring ("Should postconditions be evaluated by default?"), propget]
    HRESULT evaluate_ensure_by_default ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_evaluate_check_by_default), helpstring ("Should check assertions be evaluated by default?"), propget]
    HRESULT evaluate_check_by_default ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_evaluate_loop_by_default), helpstring ("Should loop assertions be evaluated by default?"), propget]
    HRESULT evaluate_loop_by_default ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_evaluate_invariant_by_default), helpstring ("Should class invariants be evaluated by default?"), propget]
    HRESULT evaluate_invariant_by_default ([out, retval] VARIANT_BOOL *return_value);

    [id (DISPID_set_assertions), helpstring ("Set assertions for cluster.")]
    HRESULT set_assertions ([in] VARIANT_BOOL evaluate_check, [in] VARIANT_BOOL evaluate_require, [in] VARIANT_BOOL evaluate_ensure, [in] VARIANT_BOOL evaluate_loop, [in] VARIANT_BOOL evaluate_invariant);

    [id (DISPID_excluded), helpstring ("List of excluded directories.")]
    HRESULT excluded ([out, retval] IEnumClusterExcludes ** return_value);

    [id (DISPID_add_exclude), helpstring ("Add a directory to exclude.")]
    HRESULT add_exclude ([in] BSTR dir_name);

    [id (DISPID_remove_exclude), helpstring ("Remove a directory to exclude.")]
    HRESULT remove_exclude ([in] BSTR dir_name);

    [id (DISPID_parent_name), helpstring ("Name of the parent cluster."), propget]
    HRESULT parent_name ([out, retval] BSTR * return_value);

    [id (DISPID_has_parent), helpstring ("Does the current cluster have a parent cluster?"), propget]
    HRESULT has_parent ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_subclusters), helpstring ("List subclusters (list of IEiffelClusterProperties*)."), propget]
    HRESULT subclusters ([out, retval] IEnumClusterProp ** return_value);

    [id (DISPID_has_children), helpstring ("Does the current cluster have children?"), propget]
    HRESULT has_children ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_cluster_id), helpstring ("Cluster identifier."), propget]
    HRESULT cluster_id ([out, retval] ULONG * return_value);

    [id (DISPID_is_eiffel_library), helpstring ("Is the cluster in the Eiffel library")]
    HRESULT is_eiffel_library ([out, retval] VARIANT_BOOL * return_value);

    [id (DISPID_expanded_cluster_path), helpstring ("Full path to cluster with ISE_EIFFEL env var expanded."), propget]
    HRESULT expanded_cluster_path ([out, retval] BSTR * path);

    [id (DISPID_cluster_namespace), helpstring ("Cluster namespace."), propget]
    HRESULT cluster_namespace ([out, retval] BSTR * a_namespace);

    [id (DISPID_cluster_namespace), helpstring ("Cluster namespace."), propput]
    HRESULT cluster_namespace ([in] BSTR a_namespace);
};
//---------------------------------------------------------------------

[
    object,
    uuid (UUID_IEiffelAssemblyProperties),
    helpstring ("Eiffel Assembly Properties (for Ace file).")
]
interface IEiffelAssemblyProperties: IUnknown
{
    [id (DISPID_assembly_name), helpstring ("Assembly name."), propget]
    HRESULT assembly_name ([out, retval] BSTR * return_value);

    [id (DISPID_assembly_version), helpstring ("Assembly version."), propget]
    HRESULT assembly_version ([out, retval] BSTR * path);

    [id (DISPID_assembly_culture), helpstring ("Assembly culture."), propget]
    HRESULT assembly_culture ([out, retval] BSTR *path);

    [id (DISPID_assembly_public_key_token), helpstring ("Assembly public key token"), propget]
    HRESULT assembly_public_key_token ([out, retval] BSTR * return_value);

    [id (DISPID_is_local), helpstring ("Is the assembly local"), propget]
    HRESULT is_local ([out, retval] VARIANT_BOOL * a_bool);

    [id (DISPID_assembly_cluster_name), helpstring ("Assembly cluster name."), propget]
    HRESULT assembly_cluster_name ([out, retval] BSTR * return_value);

    [id (DISPID_assembly_prefix), helpstring ("Prefix."), propget]
    HRESULT assembly_prefix ([out, retval] BSTR * return_value);

    [id (DISPID_assembly_prefix), helpstring ("Prefix."), propput]
    HRESULT assembly_prefix ([in] BSTR a_prefx);

    [id (DISPID_is_prefix_read_only), helpstring ("Is assembly prefix read only.")]
    HRESULT is_prefix_read_only ([out, retval] VARIANT_BOOL* is_prefix_read_only);
};
//---------------------------------------------------------------------

[
    object,
    uuid (UUID_IEiffelSystemExternals),
    helpstring ("Eiffel System Externals.")
]
interface IEiffelSystemExternals: IUnknown
{
    [id (DISPID_store), helpstring ("Save changes.")]
    HRESULT store ();

    [id (DISPID_add_include_path), helpstring ("Add a include path to the project.")]
    HRESULT add_include_path ([in] BSTR include_path);

    [id (DISPID_remove_include_path), helpstring ("Remove a include path from the project.")]
    HRESULT remove_include_path ([in] BSTR include_path);

    [id (DISPID_replace_include_path), helpstring ("Replace an include path in the project.")]
    HRESULT replace_include_path ([in] BSTR new_include_path, [in] BSTR old_include_path);

    [id (DISPID_include_paths), helpstring ("Include paths.")]
    HRESULT include_paths ([out, retval] IEnumIncludePaths ** return_value);

    [id (DISPID_add_object_file), helpstring ("Add a object file to the project.")]
    HRESULT add_object_file ([in] BSTR object_file);

    [id (DISPID_remove_object_file), helpstring ("Remove a object file from the project.")]
    HRESULT remove_object_file ([in] BSTR object_file);

    [id (DISPID_replace_object_file), helpstring ("Replace an object file in the project.")]
    HRESULT replace_object_file ([in] BSTR new_include_path, [in] BSTR old_object_file);

    [id (DISPID_object_files), helpstring ("Object files.")]
    HRESULT object_files ([out, retval] IEnumObjectFiles ** return_value);
};


///////////////////////////////////////////////////////////////////////
//---------------------------------------------------------------------
//
// Library Declarations
//
//---------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////


[
    uuid (UUID_LibEiffelCompiler),
    helpstring ("Eiffel language compiler library.")
]
library eiffel_compiler
{
    //
    // Dendant IDL/Type libraries
    //
    importlib ("stdole2.tlb");
    importlib ("stdole2.tlb");
    
    //
    // Interfaces
    //
    interface IEiffelProject;
    interface IEiffelCompletionInfo;
    interface IEiffelCompletionEntry;
    interface IEiffelCompiler;
    interface IEiffelCompilerEvents;
    interface IEiffelSystemBrowser;
    interface IEiffelClusterDescriptor;
    interface IEiffelClassDescriptor;
    interface IEiffelFeatureDescriptor;
    interface IEiffelProjectProperties;
    interface IEiffelSystemClusters;
    interface IEiffelClusterProperties;
    interface IEiffelSystemExternals;
    interface IEiffelSystemAssemblies;
    interface IEiffelAssemblyProperties;
    interface IEnumEiffelClass;
    interface IEnumCluster;
    interface IEnumFeature;
    interface IEnumClusterProp;
    interface IEnumClusterExcludes;
    interface IEnumIncludePaths;
    interface IEnumObjectFiles;
    interface IEnumAssembly;
    interface IEnumCompletionEntry;
    interface IEnumParameter;
    interface IEiffelParameterDescriptor;
    interface IEiffelHTMLDocGenerator;
    interface IEiffelHTMLDocEvents;
    interface IEiffelException;
    
    //
    // Enums
    //
    enum EIF_ENTITY_IMAGES;
    enum EIF_FEATURE_TYPES;
    enum EIF_EXCEPTIONS;
    enum EIF_PROJECT_TYPES;
    enum EIF_ASSERTIONS;
    enum EIF_CLUSTER_NAMESPACE_GENERATION;

    //
    // CoClasses
    //
    [uuid (UUID_CEiffelProject)]
    coclass CEiffelProject
    {
        [default] interface IEiffelProject;
    };

    [uuid (UUID_CEiffelCompiler), noncreatable]
    coclass CEiffelCompiler
    {
        [default] interface IEiffelCompiler;
        [default, source] interface IEiffelCompilerEvents;
    };

    [uuid (UUID_CEiffelCompletionInfo), noncreatable]
    coclass CEiffelCompletionInfo
    {
        [default] interface IEiffelCompletionInfo;
    };
};
