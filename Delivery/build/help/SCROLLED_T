WIDGET     : Scrolled text
DESCRIPTION: A text editor.

CLIENT INTERFACE:
-----------------

class interface
	SCROLLED_T

creation 
	make,
	make_word_wrapped,
	make_unmanaged,
	make_word_wrapped_unmanaged

feature

	font: FONT
			-- Font name of label
			-- (from FONTABLE)
		require -- from FONTABLE
			exists: not destroyed
		
	set_font (a_font: FONT)
			-- Set font label to font_name.
			-- (from FONTABLE)
		require -- from FONTABLE
			exists: not destroyed;
			a_font_exists: not (a_font = void);
			a_font_specified: a_font.is_specified
		
	set_font_name (a_font_name: STRING)
			-- Set font label to a_font_name.
			-- (from FONTABLE)
		require -- from FONTABLE
			exists: not destroyed;
			a_font_name_exists: not (a_font_name = void)
		
	add_modify_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed before
			-- text is deleted from or inserted in current text widget.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			valid_command: a_command /= void
		
	add_motion_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed before insert
			-- cursor is moved to a new position.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_modify_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command from the list of action to be executed before
			-- text is deleted from or inserted in current text widget.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			not_a_command_void: a_command /= void
		
	remove_motion_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command from the list of action to be executed before
			-- insert cursor is moved to a new position.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			not_a_command_void: a_command /= void
		
feature  -- Color

	foreground_color: COLOR
			-- Foreground color of Current widget
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed
		ensure -- from PRIMITIVE
			valid_result: Result /= void
		
	set_foreground_color (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed;
			valid_color: new_color /= void
		ensure -- from PRIMITIVE
			foreground_set: foreground_color = new_color
		
feature  -- Resize policies

	disable_resize
			-- Disable that current text widget attempts to resize its width and
			-- height to accommodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	disable_resize_height
			-- Disable that current text widget attempts to resize its height
			-- to accommodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	disable_resize_width
			-- Disable that current text widget attempts to resize its width
			-- to accommodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	enable_resize
			-- Enable that current text widget attempts to resize its width and
			-- height to accommodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	enable_resize_height
			-- Enable that current text widget attempts to resize its height to
			-- accomodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	enable_resize_width
			-- Enable that current text widget attempts to resize its width to
			-- accommodate all the text contained.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_any_resizable: BOOLEAN
			-- Is width and height of current text resizable?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_height_resizable: BOOLEAN
			-- Is height of current text resizable?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_width_resizable: BOOLEAN
			-- Is width of current text resizable?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
feature  -- Scrollbar visibility and orientation

	hide_horizontal_scrollbar
			-- Make horizontal scrollbar invisible.
		require
			exists: not destroyed
		
	hide_vertical_scrollbar
			-- Make vertical scrollbar invisible.
		require
			exists: not destroyed
		
	is_horizontal_scrollbar: BOOLEAN
			-- Is horizontal scrollbar visible?
		require
			exists: not destroyed
		
	is_vertical_scrollbar: BOOLEAN
			-- Is vertical scrollbar visible?
		require
			exists: not destroyed
		
	show_horizontal_scrollbar
			-- Make horizontal scrollbar visible.
		require
			exists: not destroyed
		
	show_vertical_scrollbar
			-- Make vertical scrollbar visible.
		require
			exists: not destroyed
		
feature  -- Text cursor position

	cursor_position: INTEGER
			-- Current position of the text cursor (it indicates the position
			-- where the next character pressed by the user will be inserted)
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		ensure -- from TEXT
			Result >= 0;
			Result <= count
		
	end_of_selection: INTEGER
			-- Position of the end of the current selection highlightened
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			selection_active: is_selection_active;
			realized: realized
		ensure -- from TEXT
			Result > 0;
			Result <= count
		
	set_cursor_position (a_position: INTEGER)
			-- Set cursor_position to a_position.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			a_position_positive_not_null: a_position >= 0;
			a_position_fewer_than_count: a_position <= count
		ensure -- from TEXT
			cursor_position = a_position
		
feature  -- Text manipulation

	append (a_text: STRING)
			-- Append a_text at the end of current text.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_a_text_void: a_text /= void
		
	clear
			-- Clear current text field.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed
		
	insert (a_text: STRING; a_position: INTEGER)
			-- Insert a_text in current text field at a_position.
			-- Same as replace (a_position, a_position, a_text).
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_a_text_void: a_text /= void;
			a_position_large_enough: a_position >= 0;
			a_position_small_enough: a_position <= count
		ensure -- from TEXT_FIELD
			a_text.count > 0 implies a_text.is_equal (text.substring (a_position + 1, a_position + a_text.count))
		
	replace (from_position, to_position: INTEGER; a_text: STRING)
			-- Replace text from from_position to to_position by a_text.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_text_void: a_text /= void;
			from_position_smaller_th_to_position: from_position <= to_position;
			from_position_large_enough: from_position >= 0;
			to_position_small_enough: to_position <= count
		ensure -- from TEXT_FIELD
			a_text.count > 0 implies a_text.is_equal (text.substring (from_position + 1, from_position + a_text.count))
		
	set_text (a_text: STRING)
			-- Set text to a_text.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_a_text_void: a_text /= void
		
	text: STRING
			-- Value of current text field
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed
		ensure -- from TEXT_FIELD
			Result.count = count
		
feature  -- Text margin

	margin_height: INTEGER
			-- Distance between top edge of text window and current text,
			-- and between bottom edge of text window and current text.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	margin_width: INTEGER
			-- Distance between left edge of text window and current text,
			-- and between right edge of text window and current text.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	set_margin_height (new_height: INTEGER)
			-- Set margin_height to new_height.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			new_height_large_enough: new_height >= 0
		
	set_margin_width (new_width: INTEGER)
			-- Set margin_width to new_width.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			new_width_large_enough: new_width >= 0
		
feature  -- Text mode

	allow_action
			-- Allow the cursor to move or the text to be modified
			-- during a motion or a modify action.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	disable_verify_bell
			-- Disable the bell when an action is forbidden
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	enable_verify_bell
			-- Enable the bell when an action is forbidden
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	forbid_action
			-- Forbid the cursor to move or the text to be modified
			-- during a motion or a modify action.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_bell_enabled: BOOLEAN
			-- Is the bell enabled when an action is forbidden
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_cursor_position_visible: BOOLEAN
			-- Is the insert cursor position marked
			-- by a blinking text cursor?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_multi_line_mode: BOOLEAN
			-- Is Current editing a multiline text?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_read_only: BOOLEAN
			-- Is current text in read only mode?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	is_word_wrap_mode: BOOLEAN
			-- Is specified that lines are to be broken at word breaks?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	rows: INTEGER
			-- Height of Current widget measured in character
			-- heights.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			is_multi_line_mode: is_multi_line_mode
		
	set_cursor_position_visible (flag: BOOLEAN)
			-- Set is_cursor_position_visible to flag.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	set_editable
			-- Set current text to be editable.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	set_multi_line_mode
			-- Set editing for multiline text.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		ensure -- from TEXT
			is_multi_line_mode: is_multi_line_mode
		
	set_read_only
			-- Set current text to be read only.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	set_rows (i: INTEGER)
			-- Set the character height of Current widget to i.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			is_multi_line_mode: is_multi_line_mode;
			valid_i: i > 0
		
	set_single_line_mode
			-- Set editing for single line text.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		ensure -- from TEXT
			is_single_line_mode: not is_multi_line_mode
		
feature  -- Text selection

	begin_of_selection: INTEGER
			-- Position of the beginning of the current selection highlightened
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			selection_active: is_selection_active;
			realized: realized
		ensure -- from TEXT
			Result >= 0;
			Result < count
		
	character_position (x_pos, y_pos: INTEGER): INTEGER
			-- Character position at cursor position x and y
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		
	clear_selection
			-- Clear a selection
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			selection_active: is_selection_active;
			realized: realized
		ensure -- from TEXT
			not is_selection_active
		
	is_selection_active: BOOLEAN
			-- Is there a selection currently active ?
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			realized: realized
		
	set_selection (first, last: INTEGER)
			-- Select the text between first and last.
			-- This text will be physically highlightened on the screen.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			first_positive_not_null: first >= 0;
			last_fewer_than_count: last <= count;
			first_fewer_than_last: first <= last;
			realized: realized
		ensure -- from TEXT
			is_selection_active;
			begin_of_selection = first;
			end_of_selection = last
		
	set_top_character_position (char_pos: INTEGER)
			-- Set first character displayed to char_pos.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			valid_position: char_pos >= 0 and then char_pos <= count
		ensure -- from TEXT
			valid_position: top_character_position = char_pos
		
	top_character_position: INTEGER
			-- Character position of first character displayed
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed
		ensure -- from TEXT
			valid_result: Result >= 0 and then Result <= count
		
	x_coordinate (char_pos: INTEGER): INTEGER
			-- X coordinate relative to the upper left corner
			-- of Current text widget at character position char_pos.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			valid_position: char_pos >= 0 and then char_pos <= count
		
	y_coordinate (char_pos: INTEGER): INTEGER
			-- Y coordinate relative to the upper left corner
			-- of Current text widget at character position char_pos.
			-- (from TEXT)
		require -- from TEXT
			exists: not destroyed;
			valid_position: char_pos >= 0 and then char_pos <= count
		
feature  -- Text size

	add_activate_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when
			-- an activate event occurs.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			valid_command: a_command /= void
		
	count: INTEGER
			-- Number of character in current text field
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed
		ensure -- from TEXT_FIELD
			Result >= 0
		
	maximum_size: INTEGER
			-- Maximum number of characters in current
			-- text field
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed
		
	remove_activate_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command from the list of action to be executed
			-- when an activate event occurs.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_a_command_void: a_command /= void
		
	set_maximum_size (a_max: INTEGER)
			-- Set maximum_size to a_max.
			-- (from TEXT_FIELD)
		require -- from TEXT_FIELD
			exists: not destroyed;
			not_negative_maximum: a_max >= 0
		
feature  -- Widget hierarchy

	parent: COMPOSITE
			-- Parent of Current widget
			-- (from PRIMITIVE)
		require -- from STACKABLE
			exists: not destroyed
		
invariant
	-- from PRIMITIVE
	has_parent: not destroyed implies parent /= void;
	
end -- class SCROLLED_T
