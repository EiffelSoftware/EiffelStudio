<document title="15 GRAPHICS-BASED DESIGN" output="studio"><meta_data ><help /></meta_data><paragraph ><heading ><size >1</size>15 Graphics Based Design</heading><paragraph ><link ><url >tour-help.xml</url><label >Help reading this manual</label></link></paragraph><paragraph >So far the project modifications that we have made used the text editor in the Editing Tool.  We used graphics, but as a way to reflect system structures, not to build them (<link ><url >index-07.html#46460</url></link>, and subsequent discussions).  </paragraph><paragraph >In line with the principles of seamlessness and reversibility recalled at the beginning of this Tour, EiffelStudio's text-diagram interaction is bi-directional.  When you make a textual modification, the next incremental recompilation will update the diagram; but you can also work directly from the diagram, and the text will be generated or updated after each graphical operation.  </paragraph><paragraph >Many people like to use the graphical mechanisms at the beginning of a project, to draft the overall structure of a system in "bubbles-and-arrows" style, then concentrate on text as they get closer to implementation.  But there is really no such obligation.  At any point in the development, just use the form that is more suited to your taste and to your needs of the moment.  </paragraph><div ><heading ><size >2</size><content >Displaying a cluster view</content></heading><paragraph >We are going to play with the root cluster.  Make sure the Cluster tree and the Context Tool are up.  Also make sure that the Context tool is in Isolate rather than Linked behavior (<link ><url >index-11.html#89659</url></link> ); you can see this by going to the <code ><keyword >Edit menu</keyword></code> : if there is an entry <code ><keyword >Unlink context tool</keyword></code>, select it; otherwise (the corresponding entry reads "Link context tool") don't do anything, you're fine.  (You can also use the Link/Isolate button added earlier to the Browsing toolbar for this very purpose.  )</paragraph><paragraph >The earlier diagrams were "class views", giving a picture of the world around a class.  For a change, we are now going to start working with <bold >cluster views</bold>, showing the content of a cluster.  Select the Diagram Tab in the Context Tool; from the Cluster Tree, pick-and-drop <code ><string >root_cluster</string></code> to the Context Tool.  This displays the graphical view of the root cluster in the Context Tool:</paragraph><div ><image_link ><url >index-113.png</url><target >screenshots</target><image ><url >index-113.png</url><width >100</width></image></image_link></div></div><div ><heading ><size >2</size><content >Hiding a class</content></heading><paragraph >First we decide that we don't want to be bothered with class <code ><string >INVALID</string></code> .  We could delete it altogether from the system by pick-and-drop its bubble to the Delete hole.  This is not what we want, but try this now to see the confirmation request:</paragraph><div ><image_link ><url >index-114.png</url><target >screenshots</target><image ><url >index-114.png</url><width >100</width></image></image_link></div><paragraph >Make sure to answer <code ><keyword >No</keyword></code> to that confirmation request (you want to keep the class even though it wouldn't be a catastrophe to lose it) and instead pick-and-drop the <code ><string >INVALID</string></code> bubble into the <code ><keyword >Hide</keyword></code> hole.  This time there is no confirmation request, since the operation is reversible -- it just affects what's displayed in the cluster view -- and the class is removed from the display:</paragraph><div ><image_link ><url >index-115.png</url><target >screenshots</target><image ><url >index-115.png</url><width >100</width></image></image_link></div><paragraph >You can try undoing this change, then redoing it:</paragraph><div ><image_link ><url >index-116png</url><target >screenshots</target><image ><url >index-116.png</url><width >100</width></image></image_link></div><paragraph >You can also click <code ><keyword >History</keyword></code> which, during the rest of the session, will display the list of executed operations, and let you undo or redo many operations at once by clicking the oldest to be kept or the youngest to be redone.  </paragraph><paragraph >For the rest of this discussion we assume <code ><string >INVALID</string></code> is hidden.  </paragraph></div><div ><heading ><size >2</size><content >Adding a class</content></heading><paragraph >We are now going to add a class graphically to our system.  This means you don't have to worry about creating and initializing a file; EiffelStudio will take care of the details.  </paragraph><paragraph >The useful button here is <code ><keyword >New class</keyword></code> :</paragraph><div ><image_link ><url >index-117.png</url><target >screenshots</target><image ><url >index-117.png</url><width >100</width></image></image_link></div><paragraph >This button is a pebble, meant to be dropped into the diagram.  Drop it somewhere above the bubble for <code ><string >TESTROOT</string></code> ; the exact place doesn't matter, but it has to be within the area of the cluster <code ><string >root_cluster</string></code> because we'll want our class to part of it.  You're asked to name the class:</paragraph><div ><image_link ><url >index-118.png</url><target >screenshots</target><image ><url >index-118.png</url><width >100</width></image></image_link></div><paragraph >Overwrite the default name being proposed, <code ><string >NEW_CLASS</string></code>, by the name <code ><string >HEIR2</string></code>, as we are going to create a new heir of <code ><string >PARENT</string></code> .  Don't touch the file name in the second field; as you type the class name EiffelStudio automatically sets the file name to <code ><string >heir2</string></code> <span >.  </span> <code ><string >e</string></code>, so you would only set it if you wanted to override the default convention for names of class files.  </paragraph><paragraph >The new class is now in the diagram, part of <code ><string >root_cluster</string></code> :</paragraph><div ><image_link ><url >index-119.png</url><target >screenshots</target><image ><url >index-119.png</url><width >100</width></image></image_link></div><paragraph >Using conventional drag-and-drop (not pick-and-drop), move the class bubbles for <code ><string >HEIR2</string></code>, <code ><string >TESTROOT</string></code> and <code ><string >PARENT</string></code> so that the display looks approximately like the following.  The double circle around <code ><string >TESTROOT</string></code> is the BON convention to identify a system's root class.  </paragraph><div ><image_link ><url >index-120.png</url><target >screenshots</target><image ><url >index-120.png</url><width >100</width></image></image_link></div></div><div ><heading ><size >2</size><content >Adding an inheritance link</content></heading><paragraph >Now we are going to make <code ><string >HEIR2</string></code> an heir of <code ><string >PARENT</string></code> .  To create inter-class relations, you will select a relation by clicking one of the "Create link" buttons, then use pick-and-drop from the source class to the target class.  There are three possibilities:</paragraph><div ><image_link ><url >index-121.png</url><target >screenshots</target><image ><url >index-121.png</url><width >100</width></image></image_link></div></div><paragraph >Click the button marked <code ><keyword >heir</keyword></code> above.  Now pick-and-drop from the <code ><string >HEIR2</string></code> bubble to the <code ><string >PARENT</string></code> bubble.  (Now you see why conventional drag-and-drop is used to move bubbles: pick-and-drop on the diagram serves to add links between classes).  </paragraph><div ><image_link ><url >index-122.png</url><target >screenshots</target><image ><url >index-122.png</url><width >100</width></image></image_link></div><paragraph >To convince yourself that the new class has been made an heir of <code ><string >PARENT</string></code>, in its text and not just in the diagram, pick-and-drop <code ><string >HEIR2</string></code> bubble to the Editing Tool at the top to see its text.  (You could also control-right-click to the bubble to bring up a new Development Window on this class.  ) All the code has been generated from your graphical operations: creating the class produced a class template with all the standard style and clauses, and the reparenting operation made <code ><string >HEIR2</string></code> inherit from <code ><string >PARENT</string></code> .  </paragraph><div ><image_link ><url >index-123.png</url><target >screenshots</target><image ><url >index-123.png</url><width >100</width></image></image_link></div><paragraph >In a moment we'll use this Editing Tool to see how, conversely, EiffelStudio will automatically reflect in the diagram a change made to the text.  For the moment go back to the Development Window.  </paragraph><paragraph >In the Cluster Tree in the top-left pane, you will notice that the name of <code ><string >HEIR2</string></code> appears grayed out; so does the name of <code ><string >INVALID</string></code> :</paragraph><div ><image_link ><url >index-124.png</url><target >screenshots</target><image ><url >index-124.png</url><width >100</width></image></image_link></div><paragraph >This is EiffelStudio's way of telling us that these two classes, listed because they appear in one of the system's clusters, are not actually in the system because the root class doesn't reference them directly or indirectly.  </paragraph><div ><heading ><size >2</size><content >Adding a client link</content></heading><paragraph >Let's add <code ><string >HEIR2</string></code> to the system by making <code ><string >TESTROOT</string></code> a client of this class.  Click the button that selects <code ><keyword >Client</keyword></code> as the next relation to make links (the link creation buttons were shown on page <link ><url >index.html#LINK CREATION</url></link> ).  Pick-and-drop from the <code ><string >TESTROOT</string></code> bubble to the <code ><string >HEIR2</string></code> bubble.  This asks you what kind of client link you want:</paragraph><div ><image_link ><url >index-125.png</url><target >screenshots</target><image ><url >index-125.png</url><width >100</width></image></image_link></div><paragraph >This technique gives you many option and in fact is a convenient way to build your classes, whether at the analysis, design or implementation level.  Here, fill the fields as follows.  For the top choice, keep the default, <code ><keyword >Attribute</keyword></code> ; we'll give class <code ><string >TESTROOT</string></code> an attribute of type  <code ><string >HEIR2</string></code> .  In the <code ><keyword >feature</keyword></code> clause, which will indicate its export status, replace the default choice <code ><string >NONE</string></code> by <code ><string >ANY</string></code>, so that the attribute will be public.  For its feature category, keep the choice currently displayed, <code ><string >Access</string></code> .  For its name, replace the default, <code ><string >new_feature</string></code>, by the name <code ><string >my_heir</string></code> .  In the <code ><keyword >invariant</keyword></code> clause, enter</paragraph>

<code_block >
	my_heir /= Void
</code_block>

<paragraph >to specify the invariant property that this attribute should never be void.  Finally, to see how EiffelStudio can generate the full accompaniment to an attribute, check the box <code ><keyword >Generate set procedure</keyword></code> .  Click <code ><keyword >OK</keyword></code> .  </paragraph><paragraph >The diagram -- shown below after a slight move of the bubble for <code ><string >TESTROOT</string></code> for more readability -- shows that <code ><string >TESTROOT</string></code> is now a client of <code ><string >HEIR2</string></code> .  By default it only displays inheritance links; now it has switched automatically to a mode that shows client links as well, so that we also see that <code ><string >TESTROOT</string></code> is (and always was) a client of <code ><string >PARENT</string></code> through attributes including <code ><string >o2</string></code> .  </paragraph><div ><image_link ><url >index-126.png</url><target >screenshots</target><image ><url >index-126.png</url><width >100</width></image></image_link></div><paragraph >Now pick-and-drop the class bubble <code ><string >TESTROOT</string></code> to the top Editing Tool to see how the class has been modified.  The situation here is different from what we saw earlier with <code ><string >HEIR2</string></code>, which had been generated from scratch by the diagram.  Here <code ><string >TESTROOT</string></code> existed before, in text form; so the diagram mechanisms have had to preserve the existing feature and feature clauses, and add the elements corresponding to what you have specified through the diagram mechanisms.  Here is the beginning of class <code ><string >TESTROOT</string></code> in its updated form:</paragraph><div ><image_link ><url >index-127.png</url><target >screenshots</target><image ><url >index-127.png</url><width >100</width></image></image_link></div><paragraph >Note how EiffelStudio has generated both the attribute and the associated "set" procedure, <code ><string >set_my_heir</string></code>, complete with a precondition -- deduced from the invariant you have specified, <code ><string >Void /= my_heir</string></code> -- and a postcondition.  The unlabeled Feature clause of the existing class has been kept; the new features have been entered into clauses labeled <code ><string >Access</string></code> and <code ><string >change Element</string></code>, observing the Eiffel standard for common feature clauses in libraries.  </paragraph><paragraph >If you look at the end of the class, you will see an <code ><keyword >invariant</keyword></code> clause listing the invariant that you have entered.  </paragraph></div><div ><heading ><size >2</size><content >Updating the diagram from the text</content></heading><paragraph >In this tour of the diagram facilities we have, so far, worked on the diagram and see the text updated immediately.  Of course we want full reversibility.  So let's make a change in the text and check the diagram.  </paragraph><paragraph >The change will be very simple.  We'll make <code ><string >TESTROOT</string></code> a client of <code ><string >HEIR</string></code> .  In the top Editing Tool, use the editor to add an attribute declaration</paragraph>

<code_block >
	other: HEIR
</code_block>

<paragraph >without further ado, as this is just a simple check.  </paragraph><note >If you are concerned about the correctness of the class, you may with to update its creation procedure <code ><string >make</string></code> to add a creation instruction <code ><keyword >create</keyword></code> <code ><string >my_heir</string></code> .  Without it the just added invariant would be violated upon creation.  </note><paragraph >Nothing happens yet to the diagram.  This is normal: EiffelStudio doesn't update the diagram every time you type some text (which, for one thing, might be syntactically incorrect, or invalid).  You need to recompile first.  Click the <code ><keyword >Compile</keyword></code> button.  Then on the Context Tool click <code ><keyword >Diagram</keyword></code> ; the new relation appears:</paragraph><div ><image_link ><url >index-128.png</url><target >screenshots</target><image ><url >index-128.png</url><width >100</width></image></image_link></div><paragraph >If the label <code ><string >other</string></code> of that relation doesn't appear in the exact place shown here, try moving it using conventional drag-and-drop.  You can only move such a link label within a small area on either side of the link.  </paragraph></div><div ><heading ><size >2</size><content >Creating a cluster</content></heading><paragraph >Earlier on, we saw how to create a class from the EiffelStudio diagram, letting EiffelStudio take care of creating and initializing the file.  Similarly, you can create a new cluster graphically, and let EiffelStudio create the corresponding directory.  </paragraph><paragraph >To create a cluster, you can go through <code ><keyword >Project</keyword></code> <code ><symbol >--&gt;</symbol></code> <code ><keyword >Project settings</keyword></code>, or you can click the little Cluster Creation button at the top of the Cluster Tree:</paragraph><div ><image_link ><url >index-129.png</url><target >screenshots</target><image ><url >index-129.png</url><width >100</width></image></image_link></div><paragraph >Click this button.  The resulting dialog asks you for the cluster name, and the existing cluster (non-precompiled) of which you want to make it a subcluster, here leaving only one choice:</paragraph><div ><image_link ><url >index-130.png</url><target >screenshots</target><image ><url >index-130.png</url><width >100</width></image></image_link></div><paragraph >Instead of the <code ><string >NEW_CLUSTER</string></code> default name, type <code ><string >my_cluster</string></code> ; select the only possible supercluster, <code ><string >root_cluster</string></code>, and click <code ><keyword >Create</keyword></code> at the bottom of the dialog.  </paragraph><paragraph >This technique only allows you to create a new cluster as a subcluster of an existing one.  You can create a top-level cluster by going through <code ><keyword >Project</keyword></code> <code ><symbol >--&gt;</symbol></code> <code ><keyword >Project settings</keyword></code></paragraph><paragraph >Recompile the project and bring up the cluster diagram again.  It shows the subcluster:</paragraph><div ><image_link ><url >index-131.png</url><target >screenshots</target><image ><url >index-131.png</url><width >100</width></image></image_link></div><paragraph >Make sure that the display looks approximately like the above; you may have to resize either or both clusters (drag a corner), and move the small cluster (drag-and-drop).  </paragraph></div><div ><heading ><size >2</size><content >Moving a class to a different cluster</content></heading><paragraph >Among the many operations you can do graphically is to move a class from one cluster to another.  Drag-and-drop (again, using conventional drag and drop) the <code ><string >HEIR2</string></code> class bubble to the rounded rectangle for <code ><string >MY_CLUSTER</string></code> .  Make sure the bubble fits entirely (that's why we wanted the cluster rectangle to be big enough).  </paragraph><paragraph >This graphical manipulation has caused a structural change: class <code ><string >HEIR2</string></code> is now part of <code ><string >MY_CLUSTER</string></code> .  Check this by expanding the Cluster Tree on the left:</paragraph><div ><image_link ><url >index-132.png</url><target >screenshots</target><image ><url >index-132.png</url><width >100</width></image></image_link></div><paragraph >If you like, you can also look into the project directory -- using the Windows Explorer, or <code ><keyword >cd</keyword></code> and <code ><keyword >ls</keyword></code> on Unix/Linux -- and check that it now has a subdirectory <code ><string >my_cluster</string></code> with a file <code ><string >heir2</string></code> <span >.  </span> <code ><keyword >e</keyword></code> containing the text of class <code ><string >HEIR2</string></code>.  </paragraph><paragraph >Clearly, it's much more convenient to use EiffelStudio for such manipulations than to move files around manually.  </paragraph></div><div ><heading ><size >2</size><content >Changing a class name</content></heading><paragraph >Here is another operation that would be even more tedious if you had to perform it manually: changing a class name.  You must make sure that <span >every</span> reference to the class in the system is updated; but that's difficult to do with a text editor since -- assuming we are changing the name of <code ><string >HEIR</string></code> to <code ><string >HEIR1</string></code> -- you must check references one by one to avoid, for example, changing an occurrence of the word in a string.  </paragraph><paragraph >Instead, find the icon whose tooltip reads "Change class name and generics":</paragraph><div ><image_link ><url >index-133.png</url><target >screenshots</target><image ><url >index-133.png</url><width >100</width></image></image_link></div><paragraph >This is not a button but a hole (as you'll be reminded if you try just clicking it).  Pick-and-drop <code ><string >HEIR</string></code> to it:</paragraph><div ><image_link ><url >index-134.png</url><target >screenshots</target><image ><url >index-134.png</url><width >100</width></image></image_link></div><paragraph >As you can see, this dialog also serves to change the name of formal generic parameters when the selected class is generic.  Type <code ><string >HEIR1</string></code> (or <code ><string >heir1</string></code>, EiffelStudio always converts class names to upper case) under <code ><keyword >name New</keyword></code> and click <code ><keyword >OK</keyword></code>.  </paragraph><paragraph >As EiffelStudio traverses the system to update all references to <code ><string >HEIR</string></code>, a progress bar appears so that you know what's going on.  Everything is updated, including the current cluster diagram, which displays the new name in the class bubble:</paragraph> <div ><image_link ><url >index-135.png</url><target >screenshots</target><image ><url >index-135.png</url><width >100</width></image></image_link></div></div><div ><heading ><size >2</size><content >Adjusting the display</content></heading><paragraph >A number of buttons enable you to customize the display:</paragraph><div ><image_link ><url >index-136.png</url><target >screenshots</target><image ><url >index-136.png</url><width >100</width></image></image_link></div><paragraph >So far all class bubbles had the same default color (yellow).  Try pick-and-dropping a bubble into the <code ><keyword >Color hole</keyword></code> to get a color palette that enables you to select a different color.  This is useful if you want to highlight classes possessing certain properties, for example classes that are part of a certain Design Pattern.  </paragraph><paragraph ><code ><keyword >Relation depth</keyword></code> enables you to select the depth at which inter-class relations will be displayed.  (Don't change this setting now.  ) <code ><keyword >Extend to cluster</keyword></code> is more useful for class diagrams than for the cluster diagram we have now, which by default included all classes of the cluster; if you click it here it will add the class <code ><string >INVALID</string></code> that you removed earlier.  There is no need to do this now.  </paragraph></div><div ><heading ><size >2</size><content >Views</content></heading><paragraph >So far the top-right <code ><keyword >View</keyword></code> field has always shown <code ><keyword >DEFAULT</keyword></code> .  You can define any number of views in your project, and apply them to various class and cluster diagrams.  </paragraph><paragraph >For example, using the buttons to show and hide links of various kinds</paragraph><div ><image_link ><url >index-137.png</url><target >screenshots</target><image ><url >index-137.png</url><width >100</width></image></image_link></div><paragraph >you can produce diagrams that only show the inheritance links, and others that only show the client links.  If you want to keep both kinds of diagram, simply define views by typing view names -- such as <code ><string >Inheritance</string></code>, <code ><string >Client</string></code>, <code ><string >All_links</string></code> -- into the <code ><keyword >View</keyword></code> field.  </paragraph><paragraph >You can also use views to retain some of the choices seen just before, such as different colors and depths.  </paragraph><paragraph >To load a previously defined view, just use the menu associated with the <code ><keyword >View</keyword></code> field.  </paragraph><paragraph >You may remember that when we generated HTML documentation, the dialog (page <link ><url >index.html#DOCUMENTATION VIEW</url></link> ) asked you to select a view among the available ones.  You can choose a different view for each cluster.  </paragraph></div><div ><heading ><size >2</size><content >Class diagrams, cluster diagrams</content></heading><paragraph >Whereas our initial encounter with diagrams at the beginning of this Tour used class diagrams, in the present discussion we have used cluster diagrams.  Both are interesting.  To obtain a class diagram, you will target a Context Tool to a class, and select the <code ><keyword >Diagram</keyword></code> Tab.  By default, this shows the parents of the class.  Do this now for <code ><string >TESTROOT</string></code> :</paragraph><div ><image_link ><url >index-138.png</url><target >screenshots</target><image ><url >index-138.png</url><width >100</width></image></image_link></div><paragraph >It's for class diagrams that the <code ><keyword >Relation depth</keyword></code> button is most interesting.  It will let you select the exact depth that you wish displayed for every relation:</paragraph><div ><image_link ><url >index-139.png</url><target >screenshots</target><image ><url >index-139.png</url><width >100</width></image></image_link></div><paragraph >This will conclude our review of the Diagram facilities of EiffelStudio, although you'll surely discover some further riches by yourself and through the rest of the documentation.  We hope the complete seamlessness between text and pictures will enable you to increase the effectiveness of your analysis work, or your design work, or your programming -- whatever level of system development you need to tackle.  </paragraph></div></paragraph></document>