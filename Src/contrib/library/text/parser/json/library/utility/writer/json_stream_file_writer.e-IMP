note
	description: "Summary description for {JSON_STREAM_FILE_WRITER}."
	date: "$Date$"
	revision: "$Revision$"

class
	JSON_STREAM_FILE_WRITER

inherit
	JSON_STREAM_WRITER

create
	make_with_file

feature {NONE} -- Intialization

	make_with_file (f: FILE)
		require
			f.is_open_write
		do
			output := f
			create active_stack.make (3)
		end

	output: FILE

feature -- Writing

	put_object_start
		do
			enter_object
			output_character (object_start_character)
		end

	put_object_end
		do
			output_character (object_end_character)
			leave_object
		end

	put_array_start
		do
			enter_array
			output_character (array_start_character)
		end

	put_array_end
		do
			output_character (array_end_character)
			leave_array
		end

	write_property_name (a_name: READABLE_STRING_GENERAL)
		do
			enter_property
			output_character ('%"')
			output_string ((create {JSON_STRING}.make_from_string_general (a_name)).item)
			output_character ('%"')
			output_character (property_delimiter)
		end

	write_string_value (a_value: READABLE_STRING_GENERAL)
		do
			output_character ('%"')
			output_string ((create {JSON_STRING}.make_from_string_general (a_value)).item)
			output_character ('%"')
			leave_property
		end

	write_integer_64_value (a_value: INTEGER_64)
		do
			output_string ((create {JSON_NUMBER}.make_integer (a_value)).item)
			leave_property
		end

	write_real_64_value (a_value: REAL_64)
		do
			output_string ((create {JSON_NUMBER}.make_real (a_value)).item)
			leave_property
		end

	write_boolean_value (a_value: BOOLEAN)
		do
			if a_value then
				output_string ("true")
			else
				output_string ("false")
			end
			leave_property
		end

	write_null_value
		do
			output_string ("null")
			leave_property
		end

feature -- Status report

	active_is_object: BOOLEAN
		do
			Result := active_stack.item = object_start_character
		end

	active_is_array: BOOLEAN
		do
			Result := active_stack.item = array_start_character
		end

	active_is_property: BOOLEAN
		do
			Result := active_stack.item = property_delimiter
		end

feature {NONE} -- Implementation

	output_string (s: READABLE_STRING_8)
		do
			output.put_string (s)
		end

	output_character (c: CHARACTER)
		do
			output.put_character (c)
		end

	enter_object
		do
			active_stack.extend (object_start_character)
		end

	leave_object
		require
			active_is_object
		do
			active_stack.remove
		end

	enter_array
		do
			active_stack.extend (array_start_character)
		end

	leave_array
		require
			active_is_array
		do
			active_stack.remove
		end

	enter_property
		do
			active_stack.extend (property_delimiter)
		end

	leave_property
		require
			active_is_property
		do
			active_stack.remove
		end

	object_start_character: CHARACTER = '{'

	object_end_character: CHARACTER = '}'

	array_start_character: CHARACTER = '['

	array_end_character: CHARACTER = ']'

	property_delimiter: CHARACTER = ':'

	active_stack: ARRAYED_STACK [CHARACTER]

invariant

note
	copyright: "2010-2022, Javier Velilla, Jocelyn Fiat, Eiffel Software and others https://github.com/eiffelhub/json."
	license: "https://github.com/eiffelhub/json/blob/master/License.txt"
end
