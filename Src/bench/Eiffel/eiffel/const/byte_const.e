-- Constant for byte code.
-- Those character values have to match C values defined in "interp.h"

class BYTE_CONST
	
feature {NONE}

	Bc_start: 			CHARACTER is '%/000/';
	Bc_precond:			CHARACTER is '%/001/';
	Bc_postcond:		CHARACTER is '%/002/';
	Bc_deferred:		CHARACTER is '%/003/';
	Bc_reverse:			CHARACTER is '%/004/';
	Bc_check:			CHARACTER is '%/005/';
	Bc_assert:			CHARACTER is '%/006/';
	Bc_null:			CHARACTER is '%/007/';
	Bc_pre:				CHARACTER is '%/008/';
	Bc_pst:				CHARACTER is '%/009/';
	Bc_chk:				CHARACTER is '%/010/';
	Bc_linv:			CHARACTER is '%/011/';
	Bc_lvar:			CHARACTER is '%/012/';
	Bc_inv:				CHARACTER is '%/013/';
	Bc_end_assert:		CHARACTER is '%/014/';
	Bc_tag:				CHARACTER is '%/015/';
	Bc_notag:			CHARACTER is '%/016/';
	Bc_jmp_f:			CHARACTER is '%/017/';
	Bc_jmp:				CHARACTER is '%/018/';
	Bc_loop:			CHARACTER is '%/019/';
	Bc_end_variant:		CHARACTER is '%/020/';
	Bc_init_variant:	CHARACTER is '%/021/';
	Bc_debug:			CHARACTER is '%/022/';
	Bc_rassign:			CHARACTER is '%/023/';
	Bc_lassign:			CHARACTER is '%/024/';
	Bc_assign:			CHARACTER is '%/025/';
	Bc_create:			CHARACTER is '%/026/';
	Bc_ctype:			CHARACTER is '%/027/';
	Bc_carg:			CHARACTER is '%/028/';
	Bc_clike:			CHARACTER is '%/029/';
	Bc_ccur:			CHARACTER is '%/030/';
	Bc_inspect:			CHARACTER is '%/031/';
	Bc_range:			CHARACTER is '%/032/';
	Bc_inspect_excep:	CHARACTER is '%/033/';
	Bc_lreverse:		CHARACTER is '%/034/';
	Bc_rreverse:		CHARACTER is '%/035/';
	Bc_feature:			CHARACTER is '%/036/';
	Bc_metamorphose:	CHARACTER is '%/037/';
	Bc_current:			CHARACTER is '%/038/';
	Bc_rotate:			CHARACTER is '%/039/';
	Bc_feature_inv:		CHARACTER is '%/040/';
	Bc_attribute:		CHARACTER is '%/041/';
	Bc_attribute_inv:	CHARACTER is '%/042/';
	Bc_extern:			CHARACTER is '%/043/';
	Bc_extern_inv:		CHARACTER is '%/044/';
	Bc_char:			CHARACTER is '%/045/';
	Bc_bool:			CHARACTER is '%/046/';
	Bc_int:				CHARACTER is '%/047/';
	Bc_float:			CHARACTER is '%/048/';
	Bc_result:			CHARACTER is '%/049/';
	Bc_local:			CHARACTER is '%/050/';
	Bc_arg:				CHARACTER is '%/051/';
	Bc_uplus:			CHARACTER is '%/052/';
	Bc_uminus:			CHARACTER is '%/053/';
	Bc_not:				CHARACTER is '%/054/';
	Bc_lt:				CHARACTER is '%/055/';
	Bc_gt:				CHARACTER is '%/056/';
	Bc_minus:			CHARACTER is '%/057/';
	Bc_xor:				CHARACTER is '%/058/';
	Bc_ge:				CHARACTER is '%/059/';
	Bc_eq:				CHARACTER is '%/060/';
	Bc_ne:				CHARACTER is '%/061/';
	Bc_star:			CHARACTER is '%/062/';
	Bc_power:			CHARACTER is '%/063/';
	Bc_le:				CHARACTER is '%/064/';
	Bc_div:				CHARACTER is '%/065/';
	Bc_implies:			CHARACTER is '%/066/';
	Bc_and:				CHARACTER is '%/067/';
	Bc_slash:			CHARACTER is '%/068/';
	Bc_mod:				CHARACTER is '%/069/';
	Bc_plus:			CHARACTER is '%/070/';
	Bc_or:				CHARACTER is '%/071/';
	Bc_addr:			CHARACTER is '%/072/';
	Bc_string:			CHARACTER is '%/073/';
	Bc_and_then:		CHARACTER is '%/074/';
	Bc_or_else:			CHARACTER is '%/075/';
	Bc_protect:			CHARACTER is '%/076/';
	Bc_release:			CHARACTER is '%/077/';
	Bc_jmp_t:			CHARACTER is '%/078/';
	Bc_debuggable:		CHARACTER is '%/079/';
	Bc_rescue: 			CHARACTER is '%/080/';
	Bc_end_rescue:		CHARACTER is '%/081/';
	Bc_retry:			CHARACTER is '%/082/';
	Bc_exp_assign:		CHARACTER is '%/083/';
	Bc_clone:			CHARACTER is '%/084/';
	Bc_exp_excep:		CHARACTER is '%/085/';
	Bc_void:			CHARACTER is '%/086/';
	Bc_none_assign:		CHARACTER is '%/087/';
	Bc_lexp_assign:		CHARACTER is '%/088/';
	Bc_rexp_assign:		CHARACTER is '%/089/';
	Bc_clone_arg:		CHARACTER is '%/090/';
	Bc_no_clone_arg:	CHARACTER is '%/091/';
	Bc_false_compar:	CHARACTER is '%/092/';
	Bc_true_compar:		CHARACTER is '%/093/';
	Bc_standard_equal:	CHARACTER is '%/094/';
	Bc_not_standard_equal:	CHARACTER is '%/095/';
	Bc_break:			CHARACTER is '%/096/';
	Bc_cont:			CHARACTER is '%/097/';

end
