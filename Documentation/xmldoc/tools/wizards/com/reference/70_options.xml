<document title="Wizards: Command Line Options" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>
			The EiffelCOM Wizard can be used from the command line for example in batch scripts. The command line utility is 
			<code>com_wizard.exe</code> and is located in <code>$ISE_EIFFEL\wizards\com</code>. Each command line 
			option has both a long and a short name. The long names are all prefixed with <code>--</code> while the short 
			names are all prefixed with <code>-</code>. Options that take an argument should have the argument directly 
			following the option with a space or a <code>=</code> sign in between the option name and the argument as in:
		</paragraph>
		<code_block>
--ace=<string>"mysystem.ecf"</string></code_block>
		this option is equivalent to:
		<code_block>
-a "mysystem.ecf"</code_block>
		<paragraph>
			The list of options is the following:
		</paragraph>
		<list ordered="false">
			<item>
				<bold>--client, -c</bold> &lt;DEFINITION_FILE&gt;: Build client to access COM component described by &lt;DEFINITION_FILE&gt;.
			</item>
			<item>
				<bold>--server, -s</bold> &lt;DEFINITION_FILE&gt;: Build new COM component as described by &lt;DEFINITION_FILE&gt;.
			</item>
			<item>
				<bold>--eiffel, -e</bold> &lt;PROJECT_FILE&gt;: Add COM interface to Eiffel project with project file (*.epr) &lt;PROJECT_FILE&gt;.
			</item>
			<item>
				<bold>--ace, -a</bold> &lt;ECF_FILE&gt;: Path to ecf file of Eiffel project to be added a COM interface. Use together with <code>'--eiffel'</code>.
			</item>
			<item>
				<bold>--facade, -f</bold> &gt;FACADE_CLASS&gt;: Name of facade class to generate IDL from. Use together with <code>'--eiffel'</code>.
			</item>
			<item>
				<bold>--cluster, -u</bold> &gt;CLUSTER&gt;: Name of facade class cluster. Use together with <code>'--eiffel'</code>.
			</item>
			<item>
				<bold>--outofprocess, -o</bold>: Access or build out of process component. By default access or build in-process component (DLL).
			</item>
			<item>
				<bold>--compilec, -i</bold>: Compile generated C code.
			</item>
			<item>
				<bold>--compileeiffel, -l</bold>: Compile generated Eiffel code. Implies '--compilec'.
			</item>
			<item>
				<bold>--marshaller, -m</bold>: Build marshaller DLL, can only be used with '--server' and if definition file is an IDL file.
			</item>
			<item>
				<bold>--destination, -d</bold> &lt;DESTINATION&gt;: Generate files in &lt;DESTINATION&gt; folder. By default files are generated in current folder.
			</item>
			<item>
				<bold>--cleanup, -p</bold>: Cleanup destination folder prior to generation. This option cannot be used together with <code>'--backup'</code>.
			</item>
			<item>
				<bold>--backup, -b</bold>: Backup overriden files by adding extension '.bac'. This option cannot be used together with <code>'--cleanup'</code>.
			</item>
			<item>
				<bold>--graphical, -g</bold>: Launch GUI, all other options are ignored.
			</item>
			<item>
				<bold>--nologo, -n</bold>: Do not display copyright information.
			</item>
			<item>
				<bold>--version, -v</bold>: Print version information.
			</item>
			<item>
				<bold>--help, -h</bold>: Display help on how to use the EiffelCOM Wizard command line utility.
			</item>
 		</list>
		<seealso>
			<bold>See Also</bold>: <link><url>10_how_wizard_works.xml</url><label>How the EiffelCOM Wizard Works</label></link>, 
			<link><url>20_generated_files.xml</url><label>Generated Files</label></link>, 
			<link><url>30_class_hierarchy.xml</url><label>Class Hierarchy</label></link>, 
			<link><url>40_eiffel_project.xml</url><label>Adding a COM Interface to an Eiffel Project</label></link>, 
			<link><url>50_reusing.xml</url><label>Accessing a COM Component</label></link>, 
			<link><url>60_building.xml</url><label>Building a COM Component</label></link>
		</seealso>
	</paragraph>
</document>
