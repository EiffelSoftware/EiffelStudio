system
	ebuild

root
	ebuild (root_cluster): "make"

default
--	precompiled ("$EIFFEL4\precomp\spec\$PLATFORM\vision");
--		rename
--			HASH_TABLE as NEW_HASH_TABLE
--		end;
	exception_trace (yes);
	assertion (require);
--	array_optimization (yes);
	dead_code_removal (no)
	profile (no);

cluster 

-- EiffelLex and EiffelParse
--
--	lex:						"$BUILD_SRC\library\lex"
--	parse:						"$BUILD_SRC\library\parse"

-- EiffelBase
	base:							"$EIFFEL4\library\base";
		kernel(base):				"$\kernel";
		support(base):				"$\support";
		structures(base):			"$\structures";
		access(structures):			"$\access";
		cursors(structures):		"$\cursors";
		dispenser(structures):		"$\dispenser";
		list(structures):			"$\list";
		set(structures):			"$\set";
		sort(structures):			"$\sort";
		storage(structures):		"$\storage";
		table(structures):			"$\table"
			default
				assertion (no);
			end;
		traversing(structures):		"$\traversing";
		tree(structures):			"$\tree";
		iteration(structures):		"$\iteration";
		cursor_tree(structures):	"$\cursor_tree";

 -- WEL
	wel:							"g:\Build43dev\library\wel"
		default
			assertion (no)
		end;
	wel_constants (wel):			"$\consts"
		default
			assertion (no)
		end;
	wel_controls (wel):				"$\controls"
		default
			assertion (no)
		end;
	wel_gdi (wel):					"$\gdi"
		default
			assertion (no)
		end;
	wel_gdi_stocks (wel): 			"$\gdistock"
		default
			assertion (no)
		end;
	wel_standard_dialogs (wel):		"$\stddlgs"
		default
			assertion (no)
		end;
	wel_messages (wel):				"$\messages"
		default
			assertion (no)
		end;
	wel_structures (wel): 			"$\structs"
		default
			assertion (no)
		end;
	wel_support (wel):				"$\support"
		default
			assertion (no)
		end;
	wel_windows (wel):				"$\windows"
		default
			assertion (no)
		end; 

-- EiffelVision
 
	vision:                 "g:\Build43dev\library\vision";
	vision_kernel (vision):         "$\oui\kernel"
		default
			assertion (no)
		end;
	vision_widgets (vision):        "$\oui\widgets"
		default
			assertion (no)
		end;
	vision_context_data (vision): "$\oui\context_data"
		default
			assertion (no)
		end;
 
	vision_figures (vision): "$\figures"
		default
			assertion (no)
		end;
	vision_tools (vision): "$\tools"
		default
			assertion (no)
		end;
 
-- Toolkit
	vision_toolkit (vision): "$\implement\toolkit"
		default
			assertion (no)
		end;
	vision_toolkit_kernel (vision_toolkit): "$\kernel"
		default
			assertion (no)
		end;
	vision_toolkit_widgets (vision_toolkit): "$\widgets"
		default
			assertion (no)
		end;
	vision_toolkit_support (vision_toolkit): "$\support"
		default
			assertion (no)
		end;
 
-- Implementation clusters for Ms Windows
	vision_imp (vision):          "$\implement\mswin"
		default
			assertion (no)
		end;
	vision_imp_kernel (vision_imp):         "$\kernel"
		default
			assertion (no)
		end;
	vision_imp_widgets (vision_imp):        "$\widgets"
		default
			assertion (no)
--		option
--			assertion (require): TOGGLE_B_IMP, SCROLLED_T_IMP
--			assertion (require): MENU_PULL_IMP, BAR_IMP
		end;
	vision_imp_support (vision_imp):        "$\support"
		default
			assertion (no)
		end;
	vision_imp_command (vision_imp):        "$\commands"
		default
			assertion (no)
		end;
	vision_obsolete_mswin (vision): "$\obsolete\mswin"
		default
			assertion (no)
		end;
	vision_obsolete_oui (vision):   "$\obsolete\oui"
		default
			assertion (no)
		end;
	vision_obsolete_toolkit (vision):"$\obsolete\toolkit"
		default
			assertion (no)
		end;

-- EiffelBuild clusters

	build:										"g:\Build43dev\build";
	

	root_cluster (build):	 					"$\Main";

	build_eiffel (build):						"$\eiffel";
--	build_rescue (build_eiffel): 				"$\rescue";
--	build_shared (build_eiffel):				"$\shared";
	build_ast (build_eiffel):					"$\AST";
	build_special_ast (build_ast):				"$\special_ast";
--	build_skeleton (build_ast):					"$\skeleton";

	build_merger (build):						"$\merger";

	build_shared (build):						"$\Shared";

	build_catalog (build):						"$\Catalog";
	build_catalog_commands (build_catalog):		"$\Commands";

	build_utility (build):						"$\Utility";

	build_constants (build):					"$\Constants";

	build_icon (build):							"$\Icon";

	build_structures (build):					"$\Structures";

	build_windows (build):						"$\Windows";

	build_window_mgr (build):					"$\WindowMgr";

	build_liman (build):						"$\liman\build";
--	build_liman_common (build):					"$\liman\common";
--	build_liman_graphical (build):				"$\liman\common\graphical";

	build_storage (build):						"$\Storage";
	build_storage_command (build_storage):		"$\Command";
	build_storage_context (build_storage):		"$\Context";
	build_storage_control (build_storage):		"$\Control";
	build_storage_function (build_storage):		"$\Function";
	build_storage_application (build_storage):	"$\Application";

	build_generation (build):					"$\Generation";

	build_transport (build):					"$\Transport";

	build_context (build): 						"$\Context";
	build_context_commands (build_context):		"$\Commands";
	build_context_editor (build_context):		"$\Editor";
	build_context_catalog (build_context):		"$\Catalog";
	build_context_widgets (build_context):		"$\Widgets";
	build_context_new_widgets (build_context):	"$\NewWidgets";
	build_context_tree (build_context):	"$\Tree";

	build_application (build):					"$\Application";
	build_application_control (build_application):	"$\Control"
		option
			assertion (no): APP_GRAPH
		end;
	build_application_commands (build_application):	"$\Commands";

	build_event (build):						"$\Event";

	build_focusable_widgets (build):			"$\Focusable_widgets";

	build_modes (build): 						"$\Modes";
	build_mode_commands (build_modes):			"$\Commands";
	build_command_instantiator (build_modes):	"$\Instantiator";
	build_shared_mode (build_modes):			"$\Shared";

	build_menus (build):						"$\Menus";
	
	build_function (build):						"$\Function";
	build_function_commands (build_function):	"$\Commands";
	build_function_editor (build_function):		"$\Editor";
	build_function_functions (build_function):	"$\Functions";
	build_function_holes (build_function):		"$\Holes";
	build_function_stones (build_function):		"$\Stones";
	build_function_icon_box (build_function):	"$\IconBox";

	build_command (build):						"$\Command";
	build_command_catalog (build_command):		"$\Catalog";
	build_command_commands (build_command):		"$\Commands";
	build_command_editor (build_command):		"$\Editor";
	build_command_predef (build_command):		"$\Predef";
	build_command_stones (build_command):		"$\Stones";
	build_command_instance (build_command):		"$\Instance";

	build_patches (build):						"$\patches";

	build_object (build):						"$\Object";
	build_object_commands (build_object):		"$\Commands";
	build_object_generator (build_object):		"$\Generator";
	build_object_selector (build_object):		"$\Selector";
	build_object_shared (build_object):			"$\Shared";

		--| Paltform dependant clusters
	build_spec (build):							"$\Spec";
	build_spec_widgets (build_spec):			"$\Widgets";

			--| Win32 clusters
	build_widgets_win32 (build_spec_widgets):	"$\win32";

			--| Motif clusters
--	build_widgets_motif (build_spec_widgets):	"$\motif";
	
-- Common

	common:										"g:\Build43dev\common";
	
        -- API cluster
	common_api (common):  						"$\eiffel\API";

	common_constants(common_api):				"$\constants"; 
	      -- Error processing
	common_error_common(common_api):			"$\error\common"
		exclude
			"syntax_error.e" 
		end;

	common_structured_text (common_api):		"$\structured_text"; 	

	common_shared(common_api):        "$\shared";

	common_eiffel (common):						"$\eiffel";

--	common_const (common_eiffel):				"$\const" -- from bench: Eiffel\const\
--		default
--  			assertion(no);
--		end;

	common_lace_env (common_eiffel):			"$\lace\env";
--		default
--			assertion(no);
--		end;
	common_yacc (common_eiffel):				"$\yacc"; -- Eiffel\yacc
--		default
--			assertion(no);
--		end;

	--These seem to be build specific
--	eiffel_rescue (build):		"$\eiffel\rescue"; -- these classes are in patches
--	eiffel_shared (build):		"$\eiffel\shared"; -- these classes are in patches
	eiffel_clicking (build):					"$\eiffel\shared\clicking";

-- Patches from case: syntax_error, compiler_exporter
	case_patches:	"g:\Build43dev\case\eiffel\patches";
--              exclude
--                    "syntax_error.e" 
--        end;
-- Patches from build: syntax_error
--	patches (build):	"$\patches";

	common_resources (common):					"$\resources"
		default
			assertion (no)
		end;
	common_parser (common):						"$\parser";
	common_parser_ast (common_parser):			"$\AST";
	common_skeleton (common_parser_ast):		"$\skeleton";
--		exclude
--			"access_assert_as.e";
--			"access_feat_as.e";
--			"access_id_as.e"
--		end;
	common_expressions (common_parser_ast):		"$\expressions";
	common_instructions (common_parser_ast):	"$\instructions";
	common_clickable (common_parser_ast):		"$\clickable";

	common_flat_short (common_parser):			"$\flat_short"
		default
			assertion (no)
		end;

	liman:										"g:\Build43dev\limand";

--	liman_bench(liman):							"$\bench";
	liman_abstract(liman):						"$\abstract";
--	win time_lock(liman):						"$\time_lock";--win
	liman_graphical(liman):						"$\graphical";
--	liman_shared(liman):						"$\shared";--unix
--	liman_client(liman):						"$\client";--unix


-- Eiffel Bench Clusters

	bench_eiffel (common_eiffel):				"$\eiffel";
--	bench_interface (bench_eiffel): 			"$\interface";
--	bench_shared (bench_eiffel):				"$\shared";
--	bench_ast (bench_eiffel):					"$\AST";
--	bench_clickable (bench_ast):				"$\clickable";
--	bench_skeleton (bench_ast):					"$\skeleton";
	bench_compiler (bench_eiffel):				"$\compiler"
		exclude
			"counter.e"
		end;
	bench_genericity (bench_eiffel):			"$\genericity";
	bench_server (bench_eiffel):				"$\server";

--	bench_API (bench):							"$\API";

	bench_error (common_api):					"$\error";
	bench_API_eiffel (bench_error):				"$\eiffel";

--	bench_parents (bench_API_eiffel):			"$\parents";

--	bench_API_interface (bench_API):			"$\interface";

	bench_ids (common_api):						"$\ids";

	bench_evaluated_type (common_api):			"$\evaluated_type";

	bench_output (common_api):					"$\output";

	bench_const (common_eiffel):				"$\const";



external
	include_path: 	
			"g:\Build43dev\C\parsing\shared",
			"g:\Build43dev\library\wel\spec\windows\include",
			"g:\Build43dev\library\wel\Clib";

	object:
			"g:\Build43dev\library\wel\spec\msc\lib\wel.lib",
			"g:\Build43dev\C\parsing\eiffel\weiffel.lib",
			"g:\Build43dev\C\parsing\lace\lace.lib",
			"g:\Build43dev\C\parsing\shared\parsing.lib",
			"g:\Build43dev\C\platform\platform.lib";
end


