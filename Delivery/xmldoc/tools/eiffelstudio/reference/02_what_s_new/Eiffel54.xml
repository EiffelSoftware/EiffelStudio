<document title="Release notes of EiffelStudio 5.4" output="studio">
	<meta_data>
		<help/>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>Graphical environment
		</heading>
		<heading>
			<size>3</size>Improvements
		</heading>
		<list ordered="false">
			<item>Added support for mouse wheel in editor and associated parameterization in preferences.</item>
			<item>Cluster tree is not collapsed anymore between compilation.</item>
			<item>All callers will not show empty entries.</item>
		</list>
		<heading>
			<size>3</size>Bug fixes
		</heading>
		<list ordered="false">
			<item>Fixed issue where setting the string background color to `auto' in the preferences will set it to a black color next time your relaunch EiffelStudio.</item>
			<item>Fixed issue where typing in an empty features tree will close down EiffelStudio.</item>
			<item>Fixed issue with BON diagram where expanded client links were not properly displayed (the expanded bar was drawn on top of classes instead of on the link itself).</item>
		</list>
		<heading>
			<size>2</size>Debugger
		</heading>
		<heading><size>3</size>Improvements</heading>
		<list ordered="false">
			<item>Ability to debug .NET applications from EiffelStudio. It behaves like the traditional debugger except with the current limitations:
				<list ordered="false">
					<item>no conditional breakpoints</item>
					<item>no expression evaluation</item>
					<item>no expansion to see attributes of non-Eiffel objects</item>
				</list>
			</item>
		</list>
		<heading><size>3</size>Bug fixes</heading>
		<list ordered="false"><item>Fixed issue on Unix platforms where passing more than 5 arguments will disable debugging and ultimately crash the environment.</item></list>
		<heading><size>2</size>EiffelBuild</heading>
		<list ordered="false">
			<item>Click 
				<link>
					<url>../../../eiffelbuild/reference/70_history/index.xml</url>
					<label>here</label>
				</link> for the EiffelBuild release notes.
			</item>
		</list>
		<heading><size>2</size>Compiler</heading>
		<list ordered="false">
			<item>Click 
				<link>
					<url>../30_compiler/60_version_history/04_54_release/00_53_to_54_changes.xml</url>
					<label>here</label>
				</link> for the compiler release notes.
			</item>
		</list>
		<heading><size>2</size>Libraries</heading>
		<heading><size>3</size>Eiffel2Java</heading>
		<list ordered="false">
			<item>Fixed incorrect memory freeing in <code><feature_name>get_string</feature_name></code> in <code><class_name>JNI_ENVIRONMENT</class_name></code> that could cause some memory corruption.</item>
			<item>Fixed <code><compiler_error>VDRD</compiler_error></code> error in method_id from <code><class_name>JAVA_OBJECT</class_name></code>.</item>
		</list>
		<heading><size>3</size>EiffelBase</heading>
		<list ordered="false">
			<item>Optimized <code><feature_name>i_th</feature_name></code> from <code><class_name>PRIMES</class_name></code> for the first 200 prime numbers.</item>
			<item>Fixed bug in <code><feature_name>generic_typecode</feature_name></code> from <code><class_name>TUPLE</class_name></code> in .NET implementation which fixed an issue with <code><feature_name>is_reference_item</feature_name></code>.</item>
			<item>Made <code><class_name>TUPLE</class_name></code> a descendant of <code><class_name>HASHABLE</class_name></code> and defined <code><feature_name>hash_code</feature_name></code> (based on the hash_codes of the elements of a <code><class_name>TUPLE</class_name></code>).</item>
			<item>Added <code><feature_name>default_create</feature_name></code> as creation procedure of <code><class_name>TUPLE</class_name></code> and made <code><feature_name>make</feature_name></code> obsolete.</item>
			<item>Added convenience features to <code><class_name>TUPLE</class_name></code>: <code><feature_name>put_XX_item</feature_name></code> where `XX' can be replaced by `character, boolean, integer, double,...'.</item>
			<item>Optimized <code><class_name>ROUTINE</class_name></code>, <code><class_name>PROCEDURE</class_name></code> and <code><class_name>FUNCTION</class_name></code> implementation to speed up agent calls by a factor of 2 to 3. Removed <code><feature_name>open_operand_type</feature_name></code> from <code><class_name>ROUTINE</class_name></code> as its specification was only used internally and specification was not precise enough to be used by clients of <code><class_name>ROUTINE</class_name></code>.</item>
			<item>Fixed <code><feature_name>append</feature_name></code> from <code><class_name>SEQUENCE</class_name></code> to not perform a <code><feature_name>deep_clone</feature_name></code> when passed argument is the same reference as Current. This was a problem when the base class of the type of the elements inherited from <code><class_name>MEMORY</class_name></code> and redefined <code><feature_name>dispose</feature_name></code>. You could possibly end up freeing twice an external resource.</item>
			<item>Changed implementation of <code><class_name>INTERACTIVE_LIST</class_name></code> to be based on <code><class_name>ARRAYED_LIST</class_name></code> rather than on <code><class_name>LINKED_LIST</class_name></code>.</item>
			<item>Added efficient implementation of <code><feature_name>append</feature_name></code> in <code><class_name>ARRAYED_LIST</class_name></code>.</item>
			<item>Fixed bug in multithreaded mode when you open in two different threads a different file with a different mode. For example one is in read mode, the other one is in write mode. If the operation happens at the same time, you could end up with two files open in read mode or two files open in write mode, which is not the expected behavior.</item>
		</list>
		<heading><size>3</size>EiffelNet</heading>
			<list ordered="false">
				<item>Fixed bug in <code><feature_name>set_delay</feature_name></code> and <code><feature_name>set_nodelay</feature_name></code> in <code><class_name>NETWORK_STREAM_SOCKET</class_name></code>, because their implementations were inverted.</item>
				<item>Fixed incorrect spelling of <code><feature_name>maximum_seg_size</feature_name></code> in <code><class_name>NETWORK_STREAM_SOCKET</class_name></code>.</item>
				<item>Added recoverable storable to EiffelNet (was not included in previous version although recoverable storable was available for files).</item>
				<item>Fixed <code><class_name>SMTP_PROTOCOL</class_name></code> to follow more closely SMTP RFCs.</item>
				<item>Added support for multi-line error codes in <code><class_name>SMTP_PROTOCOL</class_name></code>.</item>
			</list>
		<heading><size>3</size>EiffelTime</heading>
			<list ordered="false">
				<item>Improved speed of <code><class_name>DATE</class_name></code> and <code><class_name>TIME</class_name></code> comparison.</item>
				<item>In <code><class_name>DATE_VALUE</class_name></code> added <code><feature_name>ordered_compact_date</feature_name></code> and made <code><feature_name>compact_date</feature_name></code> obsolete.</item>
				<item>In <code><class_name>DATE</class_name></code> added <code><feature_name>make_by_ordered_compact_date</feature_name></code> and <code><feature_name>make_by_compact_date</feature_name></code> obsolete.</item>
				<item>In <code><class_name>DATE_VALIDITY_CHECKER</class_name></code> added <code><feature_name>ordered_compact_date_valid</feature_name></code>.</item>
				<item>Fixed <code><class_name>C_DATE</class_name></code> to bufferize the current time rather than querying it for each of the time components. Not doing that was causing a bug in <code><class_name>DATE</class_name></code>, <code><class_name>DATE_TIME</class_name></code> and <code><class_name>TIME</class_name></code> where if the computation was done on December 31st at 23:59:59 2003, we could end up with a date of January 1st 2003, therefore being one year off. This is a breaking change from before and if you are using <code><class_name>C_DATE</class_name></code>, use <code><feature_name>update</feature_name></code> before each call to the *_now queries if you expected to reflect the time at the time of the query.</item>
			</list>
		<heading><size>3</size>EiffelThread</heading>
			<list ordered="false">
				<item>Added support for .NET</item>
				<item>Made <code><class_name>OBJECT_OWNER</class_name></code> obsolete</item>
				<item>Added <code><feature_name>wait_with_timeout</feature_name></code> in <code><class_name>CONDITION_VARIABLE</class_name></code></item>
				<item>Added <code><class_name>READ_WRITE_LOCK</class_name></code> class to be used in a system where few writes are done compare to reads. A typical example of its use would be to have a thread safe lookup table where few insertions are done.</item>
				<item>Now a C externals that might block the execution of a system, should be marked `blocking'. <link>
					<url>../30_compiler/60_version_history/04_54_release/00_53_to_54_changes.xml</url>
					<label>See compiler changes for more details</label>
				</link>.</item>
			</list>
		<heading><size>3</size>EiffelVision2</heading>
			<list ordered="false">
				<item><link><url>../../../../libraries/vision2/content/0-_revisions/index.xml</url><label>Click here to see list of update and modification to EiffelVision2</label></link>.</item>
			</list>
		<heading><size>3</size>EiffelWeb</heading>
			<list ordered="false">
				<item>Fixed issue when sending exception trace to browser. On most servers you were getting an internal error rather than the exception trace.</item>
				<item>Fixed issue with <code><feature_name>cookies</feature_name></code> from <code><class_name>CGI_ENVIRONMENT</class_name></code> as keys were stored as items, now the keys are stored as keys, items as items.</item>
			</list>
		<heading><size>3</size>WEL</heading>
			<list ordered="false">
				<item>Renamed <code><feature_name>convert</feature_name></code> from <code><class_name>CONVERTER</class_name></code> class into <code><feature_name>extract_definition</feature_name></code>.</item>
				<item>Renamed <code><feature_name>convert</feature_name></code> from <code><class_name>WEL_FONT_FAMILY_ENUMERATOR</class_name></code> class into <code><feature_name>update_current</feature_name></code>.</item>
				<item>In <code><class_name>WEL_TREE_VIEW</class_name></code>, calling <code><feature_name>deselect_item</feature_name></code> will now really deselect the item, whereas previously, it only caused the item to be redrawn without selection.</item>
				<item>In <code><class_name>WEL_REGISTRY</class_name></code>, <code><feature_name>open_value_key</feature_name></code> will now accept an empty string so that the default key value can be read.</item>
				<item>Fixed issue with <code><feature_name>dword_value</feature_name></code> in <code><class_name>WEL_REGISTRY_KEY_VALUE</class_name></code> which returned incorrect values.</item>
				<item>Made <code><feature_name>make</feature_name></code> in <code><class_name>WEL_REGISTRY_KEY_VALUE</class_name></code> accepts only string values, if you want to create a new instance with a value of a different type you need to use the new creation procedure <code><feature_name>make_with_value</feature_name></code>.</item>
			</list>
		<heading><size>3</size>.NET libraries</heading>
			<list ordered="false">
				<item>Renamed <code><class_name>THREAD</class_name></code> and <code><class_name>MUTEX</class_name></code> into <code><class_name>SYSTEM_THREAD</class_name></code> and <code><class_name>SYSTEM_MUTEX</class_name></code> to avoid name conflicts with EiffelThread.</item>
			</list>
		<paragraph>
			<link><url>index.xml</url><label>Click here to check out what was new in previous versions</label></link>
		</paragraph>
	</paragraph>
</document>
