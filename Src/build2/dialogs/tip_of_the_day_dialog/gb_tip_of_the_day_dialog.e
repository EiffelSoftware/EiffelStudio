indexing
	description: "Objects that represent an EV_DIALOG.%
		%The original version of this class was generated by EiffelBuild."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	GB_TIP_OF_THE_DAY_DIALOG

inherit
	GB_TIP_OF_THE_DAY_DIALOG_IMP
	
	GB_SHARED_PREFERENCES
		undefine
			default_create, copy
		end
		
	GB_TIPS
		export
			{NONE} all
		undefine
			default_create, copy
		end
		
	GB_SHARED_PIXMAPS
		export
			{NONE} all
		undefine
			default_create, copy
		end

feature {NONE} -- Initialization

	user_initialization is
			-- called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			set_default_cancel_button (close_button)
			set_default_push_button (close_button)
			tip_counter := Preferences.integer_resource_value (preferences.tip_of_day_index, 1)
			if Preferences.boolean_resource_value (Preferences.Show_tip_of_the_day, True) then
				show_tips_button.enable_select
			else
				show_tips_button.disable_select
			end
			tip_label.resize_actions.force_extend (agent show_tip)
			tip_label.set_minimum_width (100)
			show_actions.force_extend (agent set_text (all_tips @ tip_counter))
			set_icon_pixmap (Icon_build_window @ 1)
		end
		
feature -- Basic operations

	show_modal_and_centered_to_window (a_window: EV_WINDOW) is
			-- Show `Current' modal to an centered on `a_window'.
		require
			a_window_not_void: a_window /= Void
		do
			set_position (a_window.x_position + a_window.width // 2 - width // 2,
					a_window.y_position + a_window.height // 2 - height // 2)
			show_modal_to_window (a_window)
		end

feature {NONE} -- Implementation

	tip_counter: INTEGER
		-- Current tip to be displayed.

	next_tip_selected is
			-- Called by `select_actions' of `next_tip_button'.
		do
			tip_counter := get_next_tip_index (tip_counter)
			set_text (all_tips @ tip_counter)
		end
		
	get_next_tip_index (current_index: INTEGER): INTEGER is
			-- `Result' is next valid tip index based on `current_index'.
		do
			Result := current_index + 1
			if result > tip_count then
				Result := 1
			end
		ensure
			Result_valid: Result >= 1 and Result <= tip_count
		end

	close_button_selected is
			-- Called by `select_actions' of `close_button'.
		do
			Preferences.set_boolean_resource (preferences.Show_tip_of_the_day, show_tips_button.is_selected)
			Preferences.set_integer_resource (preferences.tip_of_day_index, get_next_tip_index (tip_counter))
			Preferences.save_resources
			destroy
		end
		
feature {NONE} -- Implementation

	previous_lines: ARRAYED_LIST [STRING] is
			-- Previous contents of lines displayed.
			-- Used to prevent continuous redrawing of label when
			-- nothign has changed.
		once
			create Result.make (20)
		end
		
	show_tip is
			-- Display current tip on `tip_label'.
		do
			set_text (all_tips @ tip_counter)
		end

	set_text (tip: STRING) is
			-- Display `tip' as a wrapped text within `tip_label'.
			-- Replace all '%N' characters as spaces.
		local
			counter: INTEGER
			font: EV_FONT
			current_width: INTEGER
			last_string: STRING
			temp_string: STRING
			modified_tip: STRING
			lines: ARRAYED_LIST [STRING]
			start_pos: INTEGER
			output: STRING
			maximum_string_width: INTEGER
			lines_changed: BOOLEAN
			all_space_indexes: ARRAYED_LIST [INTEGER]
		do
			create all_space_indexes.make (20)
			create lines.make (4)
			font := tip_label.font
			modified_tip := tip.twin
			modified_tip.replace_substring_all ("%N", " ")
			modified_tip.append_character (' ')
			maximum_string_width := tip_label.width - 10

				-- Set up all space indexes which stores the index of each space in the
				-- text, as these are the wrapping criterion.
				-- Note that if a word is contained that is longer than the width of the label,
				-- this will probable lead to problems. No attempt to prevent this is made in the code.
			from
				counter := 1
			until
				counter > modified_tip.count
			loop
				if modified_tip.item (counter).is_equal(' ') then
					all_space_indexes.extend (counter)
				end
				counter := counter + 1
			end
			
				-- Perform calculations to determine where wrapping must occur.
			from
				start_pos := 1
				counter := 1
			until
				counter > all_space_indexes.count
			loop
				from
					current_width := 0
				until
					current_width > maximum_string_width or
					counter > all_space_indexes.count
				loop
					
					temp_string := modified_tip.substring (start_pos, all_space_indexes.i_th (counter) - 1)
					current_width := font.string_width (temp_string)
					if current_width <= maximum_string_width then
						last_string := temp_string
						counter := counter + 1
					else
						counter := counter - 1
					end	
				end
				start_pos := all_space_indexes.i_th (counter) + 1
				lines.extend (last_string)
			end
			
				-- Now determine if the contents of the line have actually changed.
				-- If they have not, then there is no need to set the text again, as it
				-- causes flicker.
			from
				lines.start
				Previous_lines.start
			until
				lines.off or lines_changed or previous_lines.off
			loop
				if lines.item.count /= previous_lines.item.count then
					lines_changed := True
				end
				lines.forth
				Previous_lines.forth
			end
			if previous_lines.is_empty then
				lines_changed := True
			end
			
				-- Now create and set the text on the label if
				-- it needs to be changed.
			if lines_changed then
				output := ""
				from
					lines.start
				until
					lines.off
				loop
					output.append (lines.item)
					if lines.index < lines.count then
						output.append_character ('%N')
					end
					lines.forth
				end
				previous_lines.make_from_array (lines)
				tip_label.set_text (output)
			end
		end

end -- class GB_TIP_OF_THE_DAY_DIALOG

