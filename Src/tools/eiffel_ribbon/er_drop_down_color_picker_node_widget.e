note
	description: "EiffelVision Widget ER_DROP_DOWN_COLOR_PICKER_NODE_WIDGET.%
		%The original version of this class was generated by EiffelBuild."
	generator: "EiffelBuild"
	date: "$Date$"
	revision: "$Revision$"

class
	ER_DROP_DOWN_COLOR_PICKER_NODE_WIDGET

inherit
	ER_DROP_DOWN_COLOR_PICKER_NODE_WIDGET_IMP


feature {NONE} -- Initialization

	user_create_interface_objects
			-- Create any auxilliary objects needed for ER_DROP_DOWN_COLOR_PICKER_NODE_WIDGET.
			-- Initialization for these objects must be performed in `user_initialization'.
		do
				-- Create attached types defined in class here, initialize them in `user_initialization'.
			create checker
			create large_image.make
		end

	user_initialization
			-- Perform any initialization on objects created by `user_create_interface_objects'
			-- and from within current class itself.
		local
			l_item: EV_LIST_ITEM
		do
				-- Initialize types defined in current class
			create l_item.make_with_text ({ER_TREE_NODE_DROP_DOWN_COLOR_PICKER_DATA}.standard_colors)
			color_template.extend (l_item)
			create l_item.make_with_text ({ER_TREE_NODE_DROP_DOWN_COLOR_PICKER_DATA}.theme_colors)
			color_template.extend (l_item)
			create l_item.make_with_text ({ER_TREE_NODE_DROP_DOWN_COLOR_PICKER_DATA}.highlight_colors)
			color_template.extend (l_item)
			color_template.set_text ("")

			large_image.set_browse_for_open_file ("")

			go_i_th (7) -- Go to "large image" EV_LABEL
			put_right (large_image)
			disable_item_expand (large_image)
			if attached large_image.field as l_field then
				l_field.change_actions.extend (agent on_large_image_change)
			end
		end

feature -- Command

	set_tree_node_data (a_data: detachable ER_TREE_NODE_DROP_DOWN_COLOR_PICKER_DATA)
			-- Update GUI with tree node data
		do
			tree_node_data := a_data
			if attached a_data as l_data then
				if attached a_data.command_name as l_command_name then
					command_name.set_text (l_command_name)
				else
					command_name.remove_text
				end

				if attached a_data.label_title as l_label_title then
					label.set_text (l_label_title)
				else
					label.remove_text
				end

				if attached a_data.large_image as l_large_image then
					large_image.set_text (l_large_image)
				else
					large_image.remove_text
				end

				if attached l_data.color_template as l_color_template then
					color_template.set_text (l_color_template)
				end

			end
		end

feature {NONE} -- Implementation

	large_image: EV_PATH_FIELD
			-- Large image path field

	checker: ER_IDENTIFIER_UNIQUENESS_CHECKER
			-- Identifier uniqueness checker

	tree_node_data: detachable ER_TREE_NODE_DROP_DOWN_COLOR_PICKER_DATA
			-- Dropdown color picker tree node data

	on_command_name_focus_out
			-- <Precursor>
		do
			checker.on_focus_out (command_name, tree_node_data)
		end

	on_command_name_text_changes
			-- <Precursor>
		do
			checker.on_identifier_name_change (command_name, tree_node_data)
		end

	on_label_text_change
			-- Called by `change_actions' of `label'.
		do
			if attached tree_node_data as l_data then
				l_data.set_label_title (label.text)
			end
		end

	on_large_image_change
			-- Called by `change_actions' of `large_image'.
		do
			if attached tree_node_data as l_data then
				l_data.set_large_image (large_image.text)
			end
		end

	on_color_template_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_color_template (color_template.text)
			end
		end
end
