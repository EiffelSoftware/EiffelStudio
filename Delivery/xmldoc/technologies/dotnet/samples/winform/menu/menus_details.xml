<document title="Menu Details">
	<meta_data>
		<help>
			<toc>
				<envision_location>Samples\.NET Framework Samples\Windows Forms\Menus</envision_location>
				<envision_title>Using Menus</envision_title>
				<envision_location>Samples\Windows Forms\Menus</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Windows Forms supports menus and context menus. Main menus are displayed on a menu bar that is located immediately below the title bar of a form. The menu bar contains top-level menu items that are used to group related submenu items. For example, by clicking a 
			<bold>File</bold> top-level menu item, you can display menu items that are related to file operations. Menu items typically appear as commands for your application (such as 
			<bold>New</bold> and 
			<bold>Open</bold>),but they can also appear as separator bars and submenu items. You  can display a check mark next to a menu item to display the state of a command or a the state of a feature in your application. In Windows Forms, main menus are represented by the 
			<bold>MainMenu</bold> control.
		</paragraph>
		<paragraph>Context menus can be displayed for a specific control or area of your form. They are typically accessed by clicking the right mouse button. In Windows Forms, context menus are represented by the 
			<bold>ContextMenu</bold> control.
		</paragraph>
		<paragraph>
			<bold>ContextMenu</bold> and 
			<bold>MainMenu</bold> derive from 
			<bold>Menu</bold>. They share many properties, methods, and events.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Adding a
				<bold>MainMenu</bold> to a Form
			</content>
		</heading>
		<paragraph>The following code demonstrates how to add a 
			<bold>MainMenu</bold> to a form.
		</paragraph>
		<code_block>
	main_menu: WINFORMS_MAIN_MENU
</code_block>
		<code_block>
	create main_menu. make
	set_menu (main_menu)
</code_block>
		<heading>
			<size>2</size>Adding a Context Menu to a Control
		</heading>
		<paragraph>The following code demonstrates how to 
			<span>create</span> a 
			<bold>ContextMenu</bold> and assign it to a control.
		</paragraph>
		<code_block>
	<local_variable>label_1</local_variable>: <class_name>WINFORMS_LABEL</class_name>
	<local_variable>label_1_context_menu</local_variable>: WINFORMS_CONTEXT_MENU
</code_block>
		<code_block>
	create label_1.make
	create label_1_context_menu.make
	label_1. set_context_menu (label_1_context_menu)
</code_block>
		<heading>
			<size>2</size>Adding Menu Items
		</heading>
		<paragraph>In the following example, a 
			<bold>File</bold> menu item is added to the 
			<bold>MainMenu</bold>. The 
			<bold>File</bold> menu item contains submenu items called 
			<bold>Open</bold> and 
			<bold>Exit</bold>.
		</paragraph>
		<code_block>
	<local_variable>mi_file</local_variable>: WINFORMS_MAIN_MENU
</code_block>
		<code_block>
	mi_file := main_menu. get_menu_items.add (("&amp;File").to_cil )
	dummy := mi_file. get_menu_items.add_menu_item (create {WINFORMS_MENU_ITEM}.make_from_text (("&amp;Open...").to_cil ))
	dummy := mi_file. get_menu_items.add (("-").to_cil ) -- Gives us a seperator
	dummy := mi_file. get_menu_items.add_menu_item (create  {WINFORMS_MENU_ITEM}.make_from_text(("E&amp;xit").to_cil )
</code_block>
		<paragraph>
			<line_break/>
		</paragraph>
		<paragraph>The following code demonstrates how to handle the 
			<bold>Click</bold> event for both the 
			<bold>Open</bold> and 
			<bold>Exit</bold> menu items 
			<span>create</span>d in the previous code example.
		</paragraph>
		<code_block>
	mi_file := main_menu.get_menu_items.add (("&amp;File").to_cil)
	dummy := mi_file.get_menu_items.add_menu_item (create {WINFORMS_MENU_ITEM}.make_from_text_and_on_click_and_shortcut
		(("&amp;Open...").to_cil, create {EVENT_HANDLER}.make (Current, $FileOpen_Clicked), feature {WINFORMS_SHORTCUT}.ctrl_O))
	dummy := mi_file.get_menu_items.add (("-").to_cil) -- Gives us a seperator
	dummy := mi_file.get_menu_items.add_menu_item (create {WINFORMS_MENU_ITEM}.make_from_text_and_on_click_and_shortcut
		(("E&amp;xit").to_cil, create {EVENT_HANDLER}.make (Current, $FileExit_Clicked), feature {WINFORMS_SHORTCUT}.ctrl_X))
</code_block>
		<paragraph>
			<line_break/>
		</paragraph>
		<paragraph>The following example demonstrates how to define shortcut keys for the menu items 
			<span>create</span>d in the previous example.
		</paragraph>
		<code_block>
	mi_file := main_menu.get_menu_items.add (("&amp;File").to_cil)
	dummy := mi_file.get_menu_items.add_menu_item (create {WINFORMS_MENU_ITEM}.make_from_text_and_on_click_and_shortcut
		(("&amp;Open...").to_cil, create {EVENT_HANDLER}.make (Current, $FileOpen_Clicked), feature {WINFORMS_SHORTCUT}.ctrl_O))
	dummy := mi_file.get_menu_items.add (("-").to_cil) -- Gives us a seperator
	dummy := mi_file.get_menu_items.add_menu_item (create {WINFORMS_MENU_ITEM}.make_from_text_and_on_click_and_shortcut
		(("E&amp;xit").to_cil, create {EVENT_HANDLER}.make (Current, $FileExit_Clicked), feature {WINFORMS_SHORTCUT}.ctrl_X))
</code_block>
		<paragraph/>
		<heading>
			<size>2</size>Adding Submenus
		</heading>
		<paragraph>The following example demonstrates how to 
			<span>create</span> submenus.
		</paragraph>
		<code_block>
	mi_format: WINFORMS_MAIN_MENU
</code_block>
		<code_block>
	-- Add Format Menu
	mi_format := main_menu.get_menu_items.add (("F&amp;ormat").to_cil)

	-- Font Face sub-menu
	create mmi_sans_serif.make_from_text_and_on_click ((("").to_cil).concat_string_string (("&amp;1. ").to_cil,
		sans_serif_font_family.get_name), create {EVENT_HANDLER}.make (Current, $FormatFont_Clicked))
	mmi_sans_serif.set_checked (True)
	mmi_sans_serif.set_default_item (True)
	create mmi_serif.make_from_text_and_on_click ((("").to_cil).concat_string_string(("&amp;2. ").to_cil,
		serif_font_family.get_name), create {EVENT_HANDLER}.make (Current, $FormatFont_Clicked))
	create mmi_mono_space.make_from_text_and_on_click ((("").to_cil).concat_string_string(("&amp;3. ").to_cil,
	mono_space_font_family.get_name), create {EVENT_HANDLER}.make (Current, $FormatFont_Clicked))

	create l_array_menu_item.make (3)
	l_array_menu_item.put (0, mmi_sans_serif)
	l_array_menu_item.put (1, mmi_serif)
	l_array_menu_item.put (2, mmi_mono_space)
	dummy := mi_format.get_menu_items.add_string_menu_item_array (("Font &amp;Face").to_cil, l_array_menu_item)
</code_block>
		<paragraph/>
		<heading>
			<size>2</size>Adding Default Menu Items
		</heading>
		<paragraph>The following example demonstrates how to specify a default menu item. </paragraph>
		<code_block>
	mmi_sans_serif: WINFORMS_MAIN_MENU
</code_block>
		<code_block>
	create mmi_sans_serif.make_from_text_and_on_click ((("").to_cil).concat_string_string (("&amp;1. ").to_cil,
		 sans_serif_font_family.get_name), create {EVENT_HANDLER}.make (Current, $format_font_clicked))
	mmi_sans_serif.set_checked (True)
</code_block>
		<paragraph/>
		<paragraph/>
		<heading>
			<size>2</size>Adding Check Marks to Menu Items
		</heading>
		<paragraph>The following example demonstrates how to display a check mark next to a menu item. The code also demonstrates how to track which item is checked. </paragraph>
		<code_block>
	mi_medium: WINFORMS_MAIN_MENU
</code_block>
		<code_block>
	create mi_medium.make_from_text_and_on_click (("&amp;Medium").to_cil, create {EVENT_HANDLER}.make (Current, $format_size_clicked))
	mi_medium.set_checked (True)
</code_block>
		<paragraph>
			<line_break/>
		</paragraph>
		<heading>
			<size>2</size>Cloning Menus
		</heading>
		<paragraph>In many cases, the context menu for a control is a subset of the main menu. You cannot add the same menu items to multiple menus, but you can clone a menu item or set of menu items. The following code demonstrates how to clone the 
			<bold>Format</bold> menu 
			<span>create</span>d previously and add it to the context menu of a 
			<bold>Label</bold>.
		</paragraph>
		<code_block>	mmy := label_1_context_menu.get_menu_items.add_menu_item (mi_format.clone_menu)
</code_block>
		<paragraph/>
	</paragraph></document>