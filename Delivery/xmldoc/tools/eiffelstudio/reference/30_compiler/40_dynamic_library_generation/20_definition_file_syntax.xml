<document title="Definition file" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>Compiler</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The syntax is pretty simple when you understand what you need to export a feature: you need the name of the 
			<bold>feature</bold>, the name of the concerned 
			<bold>class</bold>, and the name of a 
			<bold>creation procedure</bold>. What is optional is to specify an 
			<bold>alias</bold>, an 
			<bold>index</bold> and a 
			<bold>calling convention</bold>. The index and calling convention are mainly used to create a DLL for windows, and the alias to export the feature under a different name.
		</paragraph>
		<heading>
			<size>3</size>Syntax
		</heading>
		<paragraph>
			<table>
				<row>
					<cell>
						<bold>Export_feature</bold>
					</cell>
					<cell>Class_name [Creation_part] ":" Feature [Optional_part]</cell>
				</row>
				<row>
					<cell>
						<bold>Creation_part</bold>
					</cell>
					<cell>"(" feature_name ")"</cell>
				</row>
				<row>
					<cell>
						<bold>Optional_part</bold>
					</cell>
					<cell>[Index_part] [Alias_part]</cell>
				</row>
				<row>
					<cell>
						<bold>Index_part</bold>
					</cell>
					<cell>"@" integer</cell>
				</row>
				<row>
					<cell>
						<bold>Alias_part</bold>
					</cell>
					<cell>"Alias" alias_name</cell>
				</row>
				<row>
					<cell>
						<bold>Call_type_part</bold>
					</cell>
					<cell>"call_type" call_type_name</cell>
				</row>
			</table>
		</paragraph>
		<heading>
			<size>3</size>Example
		</heading>
		<paragraph>
			<code_block>ROOT_CLASS (make): foo @ 4 Alias my_foo call_type __stdcall</code_block>
		</paragraph>
		<heading>
			<size>3</size>Constraint
		</heading>
		<div>
			<list ordered="false">
				<item>on the class:
					<div>The class cannot be deferred or generic.</div>
				</item>
				<item>on the feature:
					<div>It could be any feature except an attribute, an external feature or a deferred feature.</div>
				</item>
				<item>on the creation procedure:
					<div>It must have zero argument, and no return type.</div>
				</item>
				<item>on the alias name:
					<div>It must be a valid name for a C function.</div>
				</item>
				<item>on the index:
					<div>It must be strictly positive.</div>
				</item>
				<item>on the call type:
					<div>It must be a valid call type for the targeted platform (useful for Windows only). For Visual C++, the valid calling conventions are __stdcall, __cdecl and __fastcall.</div>
				</item>
			</list>
			<paragraph>  For each feature the required fields are the 
				<bold>class</bold>, the 
				<bold>creation procedure</bold>, and of course the 
				<bold>feature</bold> itself.
			</paragraph>
			<list ordered="false">
				<item>If the feature is a creation procedure then do not specify any creation, it will use the feature as creation. For example 
					<bold>ROOT_CLASS: make</bold>.
				</item>
				<item>If the class has no creation procedure, do not specify any creation. default_create will be automatically used.</item>
			</list>
			<heading>
				<size>3</size>A definition file
			</heading>
			<paragraph>
				<code_block>
-- EXPORTED FEATURE(s) OF THE SHARED LIBRARY
-- SYSTEM : demo

-- CLASS [BAR]
-- Here get_string uses make_b as creation
BAR (make_b) : get_string
-- Here print_bar uses make_a as creation
BAR (make_a) : print_bar

-- CLASS [ROOT_CLASS]
-- Here the feature is also a creation
ROOT_CLASS : make
ROOT_CLASS (make) : foo
ROOT_CLASS (make) : test_bar</code_block>
			</paragraph>
		</div>
	</paragraph></document>
