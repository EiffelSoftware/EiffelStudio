The following information is intended for users who wish to utilize the
"C/Eiffel call-in library" (or "Cecil") facilities of Eiffel 4.

1) Building a Cecil archive

The ISE-Eiffel 4 compiler produces C code and a "Makefile" to compile
and link that C code in a directory below the EIFGEN of a project.
If you are using the ISE Eiffel 4 environment to simply develop and build 
Eiffel applications, you will never have to directly manipulate the generated
files. 

Using frozen/melted code you will use the W_code directory.  Using finalized
code you will use the F_code directory.

If you want to produce a Cecil library you will need go to the directory
and type:

	make cecil

a library archive is then produced. The name of that archive is derived from
the name <system nameof the Eiffel system, as follows:

	lib<system name>.a

(For instance for an Eiffel system called "test", the corresponding Cecil
archive will be called: "libtest.a")

You may build a Cecil archive with "finalized" C code or alternatively
with ISE Eiffel 4 workbench mode C code (usually for testing purposes). 
In the latter case you must copy the "melted.eif" file located in 
"EIFGEN/W_code" to the directory where you intend to execute your C 
application from. Note that each time you melt the Eiffel system, the 
"melted.eif" file is updated. Calling
"melted" routines through the Cecil interface is not supported in the current
version (Calling a melted routine raises the exception "$ applied to melted 
routine").

2) Using a Cecil archive

2.a) Linking the Cecil archive into a program

The Cecil archive already incorporates the Eiffel 4 run-time. To use the
functions provided in the Cecil archive, simply write the C programs according
to the Cecil specifications of ETL, and include the cecil archive in the linking
line of your C application.

	cc [your C files object files and archives] lib<system name>.a -lm

Note that the "-lm" is required since the Eiffel 4 run-time uses the
standard math libraries.

2.b) Initializing the Eiffel 4 run-time

Even though the main thread of control resides in the "C side" of the program,
the Eiffel 4 run-time must be intialized correctly before using Cecil facilities
to communicate with the Eiffel world.

In the C file containing the "main" C function, you must include the header 
file "eif_setup.h" provided with this example adding the line below:. 

========================= Code segment =========================================
#include "eif_setup.h"
========================= End code segment =====================================

Your "main" function must have the three standard arguments of the C "main"
function" "argc", "argv" and "envp" and include the following macros defined 
in "eif_setup.h":    
========================= Code segment =========================================

main(int argc, char **argv, char **envp)
{
	EIF_INITIALIZE(failure)

	/* ...
	 * 	body of your "main" function 
	 *				... */

	EIF_DISPOSE_ALL /* Not necessary: reclaim all the Eiffel objects */
}

========================= End code segment =====================================

Note that the above mentioned macros must imperatively be in the body of the
"main" function for the Eiffel 4 exception handling mechanism to function
correctly.

Note that you need to add the Eiffel 4 run time directory to the list of
directories in which the C compiler searches for #include files. You may
do so by using the "-I" option of your C compiler.

2.c) The Cecil interface

To use the Cecil functions, you must include the header file "eiffel.h"
(and not "cecil.h" as specified in ETL)

"eif_field" does not return an EIF_OBJ but a "raw", unprotected object.
If you wish to protect it you may use the function "henter", and "hfree"
to later release it.

The second argument of "eif_proc" is a EIF_TYPE_ID (not an EIF_OBJ)

4) Restrictions

You can only link one Cecil library into your C applications at the time.

5) Notes

Even though external object files and archives are correctly specified in 
the "object" clause of the Ace file, you will need to explicitely link them
to your C application.
