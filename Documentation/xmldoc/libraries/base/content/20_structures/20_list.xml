<document title="EiffelBase Data Structures, Lists">
	<meta_data>
		<help>
			<toc>
				<envision_title>Lists</envision_title>
				<envision_pseudo_name>20</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Many applications need sequential structures, also called linear structures, in particular lists and circular chains. Apart from three classes describing individual list cells, all the classes involved are descendants of class <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>, one of the deferred classes describing general traversal properties and introduced in the chapter that described the general data structure taxonomy. More precisely, all but one of the classes of interest for the present discussion are descendants, direct or indirect, from a class called <link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link> which describes general sequential structures possessing a cursor as well as insertion properties. The exception is class <link><url>/libraries/base/reference/countable_sequence_chart.xml</url><label>COUNTABLE_SEQUENCE</label></link>, which describes infinite structures; all the others describe finite structures.
			<line_break/><link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link> is an heir of <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link>, which describes a more general notion of sequence. <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> is a descendant of <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>. There are two main categories of sequential structures: some, called circular chains, are cyclic; others, called lists, are not. Another distinction exists between dynamic structures, which may be extended at will, and fixed ones, which have a bounded capacity.
			<line_break/>  In all of the structures under review you may insert two or more occurrences of a given item in such a way that the occurrences are distinguishable. In other words, the structures are bags rather than just sets, although it is possible to use them to implement sets.
		</paragraph>
		<heading>
			<size>1</size>Higher Level Traversal Classes
		</heading>
		<paragraph>The list and chain classes are characterized, for their traversal properties, as being linear and, more precisely, bilinear. In the traversal hierarchy, the relevant deferred classes are <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> and <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>, introduced in the
			<link>
				<url>10_taxonomy.xml</url>
				<label>discussion</label>
			</link> of the general taxonomy.
		</paragraph>
		<heading>
			<size>2</size>Linear structures
		</heading>
		<paragraph><link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> describes sequential structures that may be traversed one way. It introduces in particular the following features, illustrated on the figure below:</paragraph>
		<list ordered="false">
			<item><feature_name>after</feature_name>, a boolean-valued query which determines whether you have moved past the last position (a more precise specification is given below).</item>
			<item><feature_name>off</feature_name>, a boolean-valued query which is false if and only if there is no item at the current position; for <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> this is the same as:
				<code_block><feature_name>is_empty</feature_name> <keyword>and</keyword> <keyword>not</keyword> <feature_name>after</feature_name></code_block>
			</item>
			<item><feature_name>item</feature_name>, a query which returns the item at the current position - provided of course there is one, as expressed by the precondition:
				<code_block><keyword>not</keyword> <feature_name>off</feature_name></code_block>
			</item>
			<item><feature_name>start</feature_name>, a command to move to the first position if any (if is_empty is true the command has no effect).</item>
			<item><feature_name>forth</feature_name>, a command to advance by one position; the precondition is not after.</item>
			<item><feature_name>finish</feature_name>, a command to move to the last position; the precondition is:
				<line_break/>
				<code_block><keyword>not</keyword> <feature_name>is_empty</feature_name></code_block>
			</item>
		</list>
		<image>
			<url>linear.png</url>
			<legend>fig.1: Linear Structure</legend>
		</image>
		<paragraph> There is also a procedure <feature_name>search</feature_name> with one argument, which determines whether the value of that argument appears in the structure at or after the current position, and if not makes <feature_name>after</feature_name> become true. This procedure is internally used by the default implementation of the <feature_name>has</feature_name> function (the general membership test) for linear structures. Like has for all containers, <feature_name>search</feature_name> uses object or reference equality depending on the value set for <feature_name>object_comparison</feature_name>.</paragraph>
		<paragraph> An invariant property of <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> structures is that the current position may go off one step past the last item if any, but no further. The precondition of <feature_name>forth</feature_name> - not after - helps ensure this. The first item (if any) being at position 1, the maximum allowable position is <feature_name>count</feature_name> + 1, where <feature_name>count</feature_name> is the number of items.</paragraph>
		<heading>
			<size>2</size>Bilinear structures
		</heading>
		<paragraph><link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link> describes linear structures which may be traversed both ways. It inherits from <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> and extends it with two new features which ensure complete symmetry between the two directions of movement:</paragraph>
		<list ordered="false">
			<item><feature_name>before</feature_name>, a boolean-valued query which determines whether you have moved to the left of the first position (a more precise specification is given below).</item>
			<item><feature_name>back</feature_name>, a command to move backward by one position; the precondition is not before.</item>
		</list>
		<paragraph> For bilinear structures the position can range between 0 (not just 1) and count + 1. Query off is accordingly redefined so as to yield the value of after or before.</paragraph>
		<image>
			<url>bilinear.png</url>
			<legend>fig.2: Bilinear Structure</legend>
		</image>
		<heading>
			<size>2</size>Invariant properties for after, before and off
		</heading>
		<paragraph> The redefinition of <feature_name>off</feature_name> illustrates a general methodological advice about invariants: be careful about not over-constraining the invariant by including properties that may be made more general in descendants. It might have been tempting to include in <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> an invariant clause of the form</paragraph>
		<code_block>off <symbol>=</symbol> <feature_name>is_empty</feature_name> <keyword>or</keyword> <feature_name>after</feature_name></code_block>
		<paragraph>This property, however, would be too constraining. More precisely, it is always true that the right-hand side implies the left-hand-side: if a linear structure is either empty or after, then it is off. But the converse is not true, since certain kinds of linear structure, for example bilinear ones, may be off but neither empty nor after.
			<line_break/>  The actual invariant for class <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link> is obtained in three stages. In class <link><url>/libraries/base/reference/traversable_chart.xml</url><label>TRAVERSABLE</label></link> the feature off is deferred and a basic property of that feature is expressed by the invariant clause
		</paragraph>
		<code_block>empty_constraint<symbol>:</symbol><feature_name>is_empty</feature_name> <keyword>implies</keyword> <feature_name>off</feature_name></code_block>
		<paragraph>In <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>, feature <feature_name>off</feature_name> is effected through an implementation which returns the value of the expression <feature_name>is_empty</feature_name> or <feature_name>after</feature_name>. The class adds an invariant clause which, however, says less than the implementation to leave some room for variation:</paragraph>
		<code_block>after_constraint<symbol>:</symbol><feature_name>after</feature_name> <keyword>implies</keyword> <feature_name>off</feature_name></code_block>
		<paragraph>Finally <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>, an heir of <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>, redefines <feature_name>off</feature_name> to return the value of the expression</paragraph>
		<code_block><feature_name>before</feature_name> <keyword>or</keyword> <feature_name>after</feature_name></code_block>
		<paragraph> and adds the invariant clause</paragraph>
		<code_block><indexing_tag>before_constraint</indexing_tag><symbol>:</symbol> <feature_name>before</feature_name> <keyword>implies</keyword> <feature_name>off</feature_name></code_block>
		<paragraph>The new implementation of <feature_name>off</feature_name> </paragraph>
		<code_block><feature_name>after</feature_name> <keyword>or</keyword> <feature_name>before</feature_name></code_block>
		<paragraph> would not guarantee the invariant clause inherited from <link><url>/libraries/base/reference/traversable_chart.xml</url><label>TRAVERSABLE</label></link> were it not for another clause introduced in <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>:</paragraph>
		<code_block><indexing_tag>empty_property</indexing_tag><symbol>: </symbol><feature_name>is_empty</feature_name> <keyword>implies</keyword> <symbol>(</symbol><feature_name>after</feature_name> <keyword>or</keyword> <feature_name>before</feature_name> <symbol>)</symbol></code_block>
		<paragraph>which indicates that an empty bilinear structure must always be <feature_name>after</feature_name> or <feature_name>before</feature_name> but not both, however, as stated by the last new clause, the reason for which is discussed in detail below:</paragraph>
		<code_block><indexing_tag>not_both</indexing_tag><symbol>: </symbol>not<symbol>(</symbol><feature_name>after</feature_name> <keyword>and</keyword> <feature_name>before</feature_name><symbol>)</symbol></code_block>
		<paragraph> The flat-short form of <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link> shows the complete reconstructed invariant:</paragraph>
		<code_block>
<indexing_tag>not_both</indexing_tag><symbol>: </symbol> <keyword>not</keyword> <symbol>(</symbol>after <keyword>and</keyword> before<symbol>)</symbol>
<indexing_tag>empty_property</indexing_tag><symbol>: </symbol> is_empty <keyword>implies</keyword> <symbol>(</symbol>after <keyword>or</keyword> before<symbol>)</symbol>
<indexing_tag>before_constraint</indexing_tag><symbol>: </symbol> before <keyword>implies</keyword> off
<indexing_tag>after_constraint</indexing_tag><symbol>: </symbol> after <keyword>implies</keyword> off
<indexing_tag>empty_constraint</indexing_tag><symbol>: </symbol> is_empty <keyword>implies</keyword> off</code_block>
		<heading>
			<size>2</size> Iteration patterns
		</heading>
		<paragraph>For a more general form of this scheme, applicable to circular chains as well as other linear structures, replace <feature_name>off</feature_name> by <feature_name>exhausted</feature_name>. With the features shown above, a typical iteration mechanism on a non-empty linear structure 'lin' is of the form:</paragraph>
		<code_block>
<keyword>from</keyword>
	<feature_name>lin</feature_name>.<feature_name>start</feature_name>
	some_optional_initializing_operation <symbol>(</symbol>lin<symbol>)</symbol>
<keyword>until</keyword>
	<feature_name>lin</feature_name>.<feature_name>off</feature_name>
<keyword>loop</keyword>
	<feature_name>lin</feature_name>.<feature_name>some_action</feature_name> <symbol>(</symbol><feature_name>lin</feature_name>.<feature_name>item</feature_name><symbol>)</symbol>
	<feature_name>lin</feature_name>.<feature_name>forth</feature_name>
<keyword>end</keyword></code_block>
		<paragraph>The value of
			<code>
				<local_variable>lin</local_variable>
			</code>
			<code>
				<symbol>.</symbol>
			</code>off is always true for an empty structure, so in this case the loop will, correctly, execute only its initialization actions if present.
			<line_break/>  This is a very common pattern, which you will find in the library classes themselves (for example has is implemented in this way) and many application clients. The iterator classes corresponding to linear structures (<link><url>/libraries/base/reference/linear_iterator_chart.xml</url><label>LINEAR_ITERATOR</label></link>, <link><url>/libraries/base/reference/two_way_chain_iterator_chart.xml</url><label>TWO_WAY_CHAIN_ITERATOR</label></link>) turn this pattern and several related ones into actual reusable routines.
			<line_break/>  For bilinear structures there is another traversal mechanism going backward rather than forward; it is the same as above except that <feature_name>finish</feature_name> replaces <feature_name>start</feature_name> and <feature_name>back</feature_name> replaces <feature_name>finish</feature_name>. The exit condition remains <feature_name>off</feature_name> since <feature_name>before</feature_name>, like <feature_name>after</feature_name>, implies <feature_name>off</feature_name>.
		</paragraph>
		<heading>
			<size>2</size>A precise view of after and before
		</heading>
		<paragraph> Getting the specification of <feature_name>after</feature_name> and before <feature_name>right</feature_name>, so that it will handle all cases properly, requires some care.
			<line_break/> For every one of the structures under discussion there is a notion of current position, which we may call the cursor position even though for the moment the cursor is a virtual notion only. (Actual cursor objects will come later when we combine <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>, <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link> and other classes from the traversal hierarchy with <link><url>/libraries/base/reference/cursor_structure_chart.xml</url><label>CURSOR_STRUCTURE</label></link> and other classes from the collection hierarchy.) The informal definition is that <feature_name>after</feature_name> is true if and only if the cursor - in this informal sense of a fictitious marker signaling the current position - is one position after the last item, if any, and that <feature_name>before</feature_name> is true if and only if the cursor is one position before the first item. When the cursor is on any of the items, <feature_name>after</feature_name> and <feature_name>before</feature_name> are false; <feature_name>after</feature_name> holds when the cursor is to the right of the last item, and <feature_name>before</feature_name> when it is to the left of the first item. This leaves open the question of what conventions to take for an empty structure. If iteration schemes of the above type are to work, then <feature_name>after</feature_name> must be true for an empty structure. For a bilinear structure, however, we should have total symmetry between the two pairs of features
		</paragraph>
		<list ordered="false">
			<item><feature_name>start</feature_name>, <feature_name>forth</feature_name>, <feature_name>after</feature_name>.</item>
			<item><feature_name>finish</feature_name>, <feature_name>back</feature_name>, <feature_name>before</feature_name>.</item>
		</list>
		<paragraph>So for an empty list both <feature_name>before</feature_name> and <feature_name>after</feature_name> should be true. This scheme was used in early version of the Base libraries. It has some disadvantages, however; in particular it is not compatible with the simple, symmetric properties:</paragraph>
		<code_block><feature_name>after</feature_name> <symbol>=</symbol> <symbol>(</symbol><feature_name>index</feature_name> <symbol>=</symbol> <feature_name>count</feature_name> <symbol>+</symbol> 1<symbol>)</symbol>
<feature_name>before</feature_name> <symbol>=</symbol> <symbol>(</symbol><feature_name>index</feature_name> <symbol>=</symbol> 0<symbol>)</symbol></code_block>
		<paragraph> which express elementary definitions for <feature_name>after</feature_name> and <feature_name>before</feature_name> in terms of <feature_name>index</feature_name>, the current position, and <feature_name>count</feature_name>, the number of items (items being numbered from 1 to count). For an empty structure <feature_name>count</feature_name> is zero, so if we want <feature_name>after</feature_name> and <feature_name>before</feature_name> to be both true in this case we have to sacrifice one of the above properties, since the first would imply index to 1 and the second to 0. But again symmetry reigns supreme: we should either keep both properties or renounce both. The solution was to renounce both and replace them by slightly more complicated ones:</paragraph>
		<code_block><feature_name>after</feature_name> <symbol>=</symbol> <symbol>(</symbol>is_empty <keyword>or</keyword> <symbol>(</symbol><feature_name>index</feature_name> <symbol>=</symbol> <feature_name>count</feature_name> <symbol>+</symbol> 1<symbol>)</symbol><symbol>)</symbol>
<feature_name>before</feature_name> <symbol>=</symbol> <symbol>(</symbol><feature_name>is_empty</feature_name> <keyword>or</keyword> <symbol>(</symbol>index <symbol>=</symbol> 0<symbol>)</symbol><symbol>)</symbol></code_block>
		<paragraph> When a structure is created, some initializations will have to be made; the default initializations will usually lead to a value of 0 rather than 1 for index, although this dissymetry is not apparent in the assertions. Although acceptable, this solution leads to small but unpleasant complications, in particular frequent conditional instructions of the form</paragraph>
		<code_block><keyword>if</keyword> <feature_name>after</feature_name> <keyword>and</keyword> <keyword>not</keyword> <feature_name>is_empty</feature_name> <feature_name>then</feature_name>.<feature_name/>.<feature_name/>.<feature_name/></code_block>
		<paragraph> The solution finally retained for the Base libraries uses a different technique, which has turned out to be preferable. The idea is to replace the conceptual picture by one in which there are always two fictitious sentinel items. The two sentinel items are only present conceptually. They are of course not taken into account for the computation of <feature_name>count</feature_name> and, although it is possible to conceive of an implementation which would actually reserve space for them (for example in an array representation), none of the implementations used in Base for the classes of this documentation and other descendants of <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> do. The only purpose of the sentinels is to provide two valid theoretical cursor positions, which exist regardless of the number of actual (non-sentinel) items in the structure.
			<line_break/> The sentinel items always appear at positions 0 and <feature_name>count</feature_name> + 1; this property is true even if the structure is empty of items, in which case count is zero. As a result, the following properties are part of the invariant:
		</paragraph>
		<code_block>0 <symbol>&lt;</symbol><symbol>=</symbol> <feature_name>index</feature_name>
<feature_name>index</feature_name> <symbol>&lt;</symbol><symbol>=</symbol> <feature_name>count</feature_name> <symbol>+</symbol> 1
<feature_name>before</feature_name> <symbol>=</symbol> <symbol>(</symbol><feature_name>index</feature_name> <symbol>=</symbol> 0<symbol>)</symbol>
<feature_name>after</feature_name> <symbol>=</symbol> <symbol>(</symbol><feature_name>index</feature_name> <symbol>=</symbol> <feature_name>count</feature_name> <symbol>+</symbol> 1<symbol>)</symbol>
<keyword>not</keyword> <symbol>(</symbol><feature_name>after</feature_name> <keyword>and</keyword> <feature_name>before</feature_name><symbol>)</symbol></code_block>
		<paragraph> The last property given indicates that a structure can never be both <feature_name>after</feature_name> <code><keyword>and</keyword></code> <feature_name>before</feature_name>, since even in an empty structure the two sentinels are still present, with the cursor on one of them. For an empty structure, <feature_name>index</feature_name> will be zero by convention, so that <feature_name>before</feature_name> will be true and <feature_name>after</feature_name> false. But this property is not reflected in any of the invariant clauses.</paragraph>
		<heading>
			<size>2</size>Some lessons
		</heading>
		<paragraph>This discussion has illustrated some of the important patterns of reasoning that are frequently involved in serious object-oriented design. Among the lessons are four ideas which you may find useful in many different cases. First, consistency is once again the central principle. Throughout the design of a class library we must constantly ask ourselves:</paragraph>
		<list ordered="false">
			<item>How do I make my next design decision compatible with the previous ones?</item>
			<item>How do I take my next design decision so that it will be easy - or at least possible - to make future ones compatible with it?</item>
		</list>
		<paragraph>Another frequent concern, partly a consequence of consistency, is symmetry. To mathematicians and physicists, symmetry considerations are often important in guiding the search for a solution to a problem; if the problem exhibits a certain symmetry, a candidate solution will be rejected if it does not satisfy that symmetry. Such was the situation here: since the structure's specification is symmetric with respect to the two possible directions of traversal, so too should the feature design be.
			<line_break/> The third lesson is also well-known in mathematics and physics: the usefulness of looking at limit cases. To check that a design is sound it is often useful to examine what becomes of it when it is applied to extreme situations - in particular, as was done in this example, empty structures.
			<line_break/> Finally, the only way to make delicate design decisions is to express the issues clearly through assertions, most notably invariants. To analyze the properties under discussion, and weigh the various alternatives, we need the precision of mathematical logic. Once again note that without assertions it would be impossible to build a good library; we would have no way to know precisely what we are talking about.
		</paragraph>
		<heading>
			<size>1</size>Sequences And Chains
		</heading>
		<paragraph>Still deferred, classes <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> and<link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link> provide the basis for all list and chain classes, as well as for many trees and for dispensers.
			<line_break/>SEQUENCE is constructed with the full extent of the technique described in the discussion of the taxonomy: using multiple inheritance to combine one class each from the access, traversal and storage hierarchy. <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> indeed has three parents:
		</paragraph>
		<list ordered="false">
			<item><link><url>/libraries/base/reference/active_chart.xml</url><label>ACTIVE</label></link> gives the access properties. A sequence is an active structure with a notion of current item. Remember that active structures are a special case of bags.</item>
			<item><link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>, as studied above, indicates that a sequence may be traversed both ways.</item>
			<item>FINITE, from the storage hierarchy, indicates that the class describes finite sequences. (A class <link><url>/libraries/base/reference/countable_sequence_chart.xml</url><label>COUNTABLE_SEQUENCE</label></link> is also present, as described below.)</item>
		</list>
		<paragraph>To the features of <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>, <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> principally adds features for adding, changing and removing items. A few procedures in particular serve to insert items at the end:</paragraph>
		<list ordered="false">
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol><feature_name>put</feature_name>
					<symbol>(</symbol>
					<local_variable>v</local_variable>
					<symbol>)</symbol> adds
					<local_variable>v</local_variable> at the end of a sequence
					<local_variable>s</local_variable>
				</code>.
			</item>
			<item><feature_name>extend</feature_name> and <feature_name>force</feature_name>, at the <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> level, do the same as <feature_name>put</feature_name>.</item>
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol><feature_name>append</feature_name>
					<symbol>(</symbol>
					<local_variable>s1</local_variable>
					<symbol>)</symbol> adds to the end of
					<local_variable>s</local_variable> the items of
					<local_variable>s1</local_variable> (another sequence), preserving their
					<local_variable>s1</local_variable>
				</code> order.
			</item>
		</list>
		<paragraph>Other procedures work on the current position:</paragraph>
		<list ordered="false">
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol>
				</code><feature_name>remove</feature_name> removes the item at current position.
			</item>
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol><feature_name>replace</feature_name>
					<symbol>(</symbol>
					<local_variable>v</local_variable>
					<symbol>)</symbol> replaces by
					<local_variable>v</local_variable>
				</code> the item at current position.
			</item>
		</list>
		<paragraph>SEQUENCE, however, does not provide a procedure to insert an item at the current position, since not all implementations of sequences support this possibility; you will find it in descendants of <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> seen below.
			<line_break/>  Yet another group of features are based on the first occurrence of a certain item, or on all occurrences:
		</paragraph>
		<list ordered="false">
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol><feature_name>prune</feature_name>
					<symbol>(</symbol>
					<local_variable>v</local_variable>
					<symbol>)</symbol> removes the first occurrence of
					<local_variable>v</local_variable> in
					<local_variable>s</local_variable>
				</code>, if any.
			</item>
			<item>
				<code>
					<local_variable>s</local_variable>
					<symbol>.</symbol><feature_name>prune_all</feature_name>
					<symbol>(</symbol>
					<local_variable>v</local_variable>
					<symbol>)</symbol> removes all occurrences of
					<local_variable>v</local_variable>
				</code>.
			</item>
		</list>
		<paragraph>These procedures have various abstract preconditions:
			<code>
				<local_variable>s</local_variable>
				<symbol>.</symbol><feature_name>extendible</feature_name> for additions,
				<local_variable>s</local_variable>
				<symbol>.</symbol><feature_name>writable</feature_name> for replacements,
				<local_variable>s</local_variable>
				<symbol>.</symbol>
			</code><feature_name>prunable</feature_name> for removals. Properties <feature_name>extendible</feature_name> and <feature_name>prunable</feature_name> characterize general categories of container structures rather than individual instances; for example <feature_name>extendible</feature_name> is always true for the 'dynamic' structures seen below. In contrast, <feature_name>writable</feature_name> depends on the current status of each instance. In general <feature_name>writable</feature_name> will be true if there is an item at the current position.
		</paragraph>
		<heading>
			<size>2</size>Chains
		</heading>
		<paragraph>Chains are sequences with a few more properties: items may be accessed through their indices, and it is possible to define cursor objects attached to individual items.
			<line_break/> Class <link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link>is an heir of <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link>. It gets its access properties from <link><url>/libraries/base/reference/cursor_structure_chart.xml</url><label>CURSOR_STRUCTURE</label></link> (which adds the notion of cursor to the features of <link><url>/libraries/base/reference/active_chart.xml</url><label>ACTIVE</label></link>, already present in <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link>) and is also an heir of <link><url>/libraries/base/reference/indexable_chart.xml</url><label>INDEXABLE</label></link>. This ancestry implies in particular the presence of the following features:
		</paragraph>
		<list ordered="false">
			<item><feature_name>cursor</feature_name>, from <link><url>/libraries/base/reference/cursor_structure_chart.xml</url><label>CURSOR_STRUCTURE</label></link>, which makes it possible to keep a reference to an item of the structure.</item>
			<item><feature_name>i_th</feature_name> and <feature_name>put_i_th</feature_name> from <link><url>/libraries/base/reference/table_chart.xml</url><label>TABLE</label></link>, via <link><url>/libraries/base/reference/indexable_chart.xml</url><label>INDEXABLE</label></link>, which make it possible to access and replace the value of an item given by its integer index.</item>
		</list>
		<paragraph>These features were called <feature_name>item</feature_name> and <feature_name>put</feature_name> in <link><url>/libraries/base/reference/table_chart.xml</url><label>TABLE</label></link>, but are renamed here to remove the conflict with homonymous features from <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link>.
			<line_break/> Procedure <feature_name>put</feature_name> for chains is the version obtained from <link><url>/libraries/base/reference/cursor_structure_chart.xml</url><label>CURSOR_STRUCTURE</label></link>, which has the same effect as <feature_name>replace</feature_name> - replacing the value of the item at cursor position. The <feature_name>put</feature_name> procedure from <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> is renamed <feature_name>sequence_ put</feature_name>. This feature is not exported by <link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link>, however, since its effect (adding an item at the end) may be obtained through the simpler name <feature_name>extend</feature_name>.
		</paragraph>
		<heading>
			<size>2</size>Dynamic chains
		</heading>
		<paragraph>By default, chains can only be extended at the end, through <feature_name>extend</feature_name> and <feature_name>sequence_put</feature_name>. Of particular interest are those chains where clients can insert and remove items at any position. Such chains are said to be dynamic, and described by <link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link>'s heir <link><url>/libraries/base/reference/dynamic_chain_chart.xml</url><label>DYNAMIC_CHAIN</label></link>. The new features are predictable:</paragraph>
		<list ordered="false">
			<item>Procedure <feature_name>put_front</feature_name> adds an item before the first. (As noted, the procedures to add an item after the last are already available in chains.)</item>
			<item>Procedures <feature_name>put_left</feature_name> and <feature_name>put_right</feature_name> add an item at the left and right of the cursor position.</item>
			<item>Procedures <feature_name>remove_left</feature_name> and remove_right remove an item at the left and right or the cursor position.</item>
			<item>Procedures <feature_name>merge_left</feature_name> and <feature_name>merge_right</feature_name> are similar to <feature_name>put_left</feature_name> and <feature_name>put_right</feature_name> but insert another dynamic chain rather than a single item. As the word 'merge' suggests, the merged structure, passed as argument, does not survive the process; it is emptied of its items. To preserve it, perform a <feature_name>clone</feature_name> or <feature_name>copy</feature_name> before the merge operation.</item>
		</list>
		<paragraph>The class also provides implementations of <feature_name>prune</feature_name>, <feature_name>prune_all</feature_name> and <feature_name>wipe_out</feature_name> from
			<link>
				<url>../../reference/collection_chart.xml</url>
				<label><link><url>/libraries/base/reference/collection_chart.xml</url><label>COLLECTION</label></link></label>
			</link>. To make these implementations useful, it defines queries <feature_name>extendible</feature_name> and <feature_name>prunable</feature_name> so that they return the value true.
		</paragraph>
		<heading>
			<size>1</size>Lists And Circular Structures
		</heading>
		<paragraph>A chain is a finite sequential structure. This property means that items are arranged in a linear order and may be traversed from the first to the last. To do this you may use a loop of the form shown above, based on procedures <feature_name>start</feature_name> and <feature_name>forth</feature_name>.
			<line_break/> This property leaves room for several variants. In particular chains may be straight or circular.
		</paragraph>
		<list ordered="false">
			<item> A straight chain, which from now on will be called a list, has a beginning and an end.</item>
			<item> A circular chain, as represented by class <link><url>/libraries/base/reference/circular_chart.xml</url><label>CIRCULAR</label></link> and its descendants, has a much more flexible notion of first item. It is organized so that every item has a successor.</item>
		</list>
		<paragraph>This representation is conceptual only; in fact the implementations of circular chains found in the Base libraries are based on lists, implemented in one of the ways described below (in particular linked and arrayed).
			<line_break/>  The major originality of circular chains is that unless the structure is empty procedure <feature_name>forth</feature_name> is always applicable: it will cycle past the last item, coming back to the
			<line_break/>  first. The symmetric property applies to <feature_name>back</feature_name>. The cyclic nature of <feature_name>forth</feature_name> and <feature_name>back</feature_name> for circular chains is expressed precisely by the assertions. The version of <feature_name>forth</feature_name> for class <link><url>/libraries/base/reference/chain_chart.xml</url><label>CHAIN</label></link>, which comes from <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link>, has precondition
		</paragraph>
		<code_block><keyword>not</keyword> <feature_name>after</feature_name></code_block>
		<paragraph>Similarly, the precondition for back is</paragraph>
		<code_block><keyword>not</keyword> <feature_name>before</feature_name></code_block>
		<paragraph>For lists, after becomes true when the cursor moves past the last item. For circular chains, however, after and before are never true except for an empty structure; this is expressed by the invariant clauses of class <link><url>/libraries/base/reference/circular_chart.xml</url><label>CIRCULAR</label></link>:</paragraph>
		<code_block><keyword>not</keyword> before</code_block>
		<paragraph>For a non-empty circular chain, then, you can circle forever around the items, using forth or back.</paragraph>
		<heading>
			<size>2</size>Choosing the first item
		</heading>
		<paragraph>For a list, the first and last items are fixed, and correspond to specific places in the physical representation.
			<line_break/>  A circular chain also needs a notion of first item, if only to enable a client to initiate a traversal through procedure start. Similarly, there is a last item - the one just before the first in a cyclic traversal. (If the chain has just one item, it is both first and last.)
			<line_break/> For circular chains, however, there is no reason why the first item should always remain the same. One of the benefits that clients may expect from the use of a circular
			<line_break/> structure is the ability to choose any item as the logical first. Class <link><url>/libraries/base/reference/circular_chart.xml</url><label>CIRCULAR</label></link> offers for that purpose the procedure <feature_name>set_start</feature_name> which designates the current cursor position as the first in the circular chain. Subsequent calls to <feature_name>start</feature_name> will move the cursor to this position; calls to <feature_name>finish</feature_name> will move the cursor to the cyclically preceding position. With most implementations, there will then be two notions of first position: the logical first, which clients may freely choose through calls to <feature_name>set_start</feature_name>; and the <feature_name>physical first</feature_name>, which results from the implementation. In a representation using an array with indices from 1 to <feature_name>capacity</feature_name>, for example, the physical first is position 1, and the logical first may be any index in the permitted range. In a linked representation, there will be a cell first element corresponding to the physical first, but the logical first is any cell in the chain.
			<line_break/>  In such cases the circular chain classes have features called
			<feature_name>standard_first</feature_name>,
			<feature_name>standard_last</feature_name>,
			<feature_name>standard_start</feature_name> and so on, which are not exported (so that you will not see them in the flat-short forms) but serve to implement visible features such as <feature_name>first</feature_name>, <feature_name>last</feature_name> and <feature_name>forth</feature_name>. For example a possible implementation of <feature_name>forth</feature_name> for circular chains is
		</paragraph>
		<code_block><feature_name>forth</feature_name> <keyword>is</keyword>
		<comment>-- Move cursor to next item, cyclically.</comment>
	<keyword>do</keyword>
		<feature_name>standard_forth</feature_name>
		<keyword>if</keyword> standard_after <keyword>then</keyword>
			<feature_name>standard_start</feature_name>
		<keyword>end</keyword>
		<keyword>if</keyword> isfirst <keyword>then</keyword>
      			<feature_name>exhausted</feature_name> <symbol>:</symbol><symbol>=</symbol> True
	   	<keyword>end</keyword>
	<keyword>end</keyword></code_block>
		<heading>
			<size>2</size>Traversing a list or circular chain
		</heading>
		<paragraph>The properties of <feature_name>forth</feature_name> for circular chains imply that a traversal loop written as</paragraph>
		<code_block><keyword>from</keyword>
	<feature_name>lin</feature_name>.<feature_name>start</feature_name>
<keyword>until</keyword>
	<feature_name>lin</feature_name>.<feature_name>off</feature_name>
<keyword>loop</keyword>
   	...
 	<feature_name>lin</feature_name>.<feature_name>forth</feature_name>
<keyword>end</keyword> </code_block>
		<paragraph>would not work if
			<code>
				<local_variable>lin</local_variable>
			</code> is a non-empty circular structure: <feature_name>off</feature_name> would never become true, so that the loop would forever cycle over the structure's items. The same would apply to a loop using finish and back instead of <feature_name>start</feature_name> and <feature_name>forth</feature_name>. This behavior is the natural result of the semantics defined for <feature_name>off</feature_name> , <feature_name>forth</feature_name> and <feature_name>back</feature_name> for circular structures. But it prevents us from using these features to perform a single traversal which will visit every item once.
			<line_break/> Using <feature_name>exhausted</feature_name> in lieu of off solves this problem. In class <link><url>/libraries/base/reference/circular_chart.xml</url><label>CIRCULAR</label></link>, <feature_name>exhausted</feature_name> is an attribute which is set to false by <feature_name>start</feature_name> and <feature_name>finish</feature_name>, and is set to true by <feature_name>forth</feature_name> when advancing from the last item to the first and by <feature_name>back</feature_name> when backing up from the first item to the last. So you should write the loop as
		</paragraph>
		<code_block><keyword>from</keyword>
	<feature_name>lin</feature_name>.<feature_name>start</feature_name>
   	<feature_name>some_optional_initializing_operation</feature_name> <symbol>(</symbol>lin<symbol>)</symbol>
<keyword>until</keyword>
   	<feature_name>lin</feature_name>.<feature_name>exhausted</feature_name>
<keyword>loop</keyword>
   	...
   	<feature_name>lin</feature_name>.<feature_name>some_action</feature_name> <symbol>(</symbol><feature_name>lin</feature_name>.<feature_name>item</feature_name><symbol>)</symbol>
   	<feature_name>lin</feature_name>.<feature_name>forth</feature_name>
<keyword>end</keyword></code_block>
		<paragraph>This form is applicable to all linear structures, circular or not, since <feature_name>exhausted</feature_name> is introduced in class <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> as a function which returns the same value as <feature_name>off</feature_name> .Its redefinition into an attribute, modified by <feature_name>start</feature_name>,<feature_name> finish</feature_name>, <feature_name>forth</feature_name> and <feature_name>back</feature_name>, does not occur until class <link><url>/libraries/base/reference/circular_chart.xml</url><label>CIRCULAR</label></link>.
			<line_break/> Because <feature_name>exhausted</feature_name> is more general than <feature_name>off</feature_name> , the iteration scheme just given (and its equivalent going backwards) is preferable to the earlier one using <feature_name>off </feature_name>, especially if there is any chance that the iteration might one day be applied to a lin structure that is circular. Classes of the Iteration library, in particular <link><url>/libraries/base/reference/linear_iterator_chart.xml</url><label>LINEAR_ITERATOR</label></link>, rely on this scheme for iterating over linear structures.
		</paragraph>
		<heading>
			<size>2</size>Dynamic structures
		</heading>
		<paragraph>For both lists and circular chains, the most flexible variants, said to be dynamic, allow insertions and deletions at any position.
			<line_break/>  The corresponding classes are descendants of <link><url>/libraries/base/reference/dynamic_list_chart.xml</url><label>DYNAMIC_LIST</label></link> and <link><url>/libraries/base/reference/dynamic_circular_chart.xml</url><label>DYNAMIC_CIRCULAR</label></link>, themselves heirs of <link><url>/libraries/base/reference/dynamic_chain_chart.xml</url><label>DYNAMIC_CHAIN</label></link> studied above.
			<line_break/>
		</paragraph>
		<heading>
			<size>2</size>Infinite sequences
		</heading>
		<paragraph>Class <link><url>/libraries/base/reference/countable_sequence_chart.xml</url><label>COUNTABLE_SEQUENCES</label></link>, built by inheritance from <link><url>/libraries/base/reference/countable_chart.xml</url><label>COUNTABLE</label></link>, <link><url>/libraries/base/reference/linear_chart.xml</url><label>LINEAR</label></link> and <link><url>/libraries/base/reference/active_chart.xml</url><label>ACTIVE</label></link>, is similar to <link><url>/libraries/base/reference/sequence_chart.xml</url><label>SEQUENCE</label></link> but describes infinite rather than finite sequences.</paragraph>
		<heading>
			<size>1</size>Implementations
		</heading>
		<paragraph>We have by now seen the concepts underlying the linear structures of the Base libraries, especially lists and circular chains. Let us look at the techniques used to implement them.</paragraph>
		<heading>
			<size>2</size>Linked and arrayed implementations
		</heading>
		<paragraph>Most of the implementations belong to one of four general categories, better described
			<line_break/> as two categories with two subcategories each:
		</paragraph>
		<list ordered="false">
			<item>Linked implementations, which may be one-way or two-way.</item>
			<item>Arrayed implementations, which may be resizable or fixed.</item>
		</list>
		<paragraph>A linked implementation uses linked cells, each containing an item and a reference to the next cell. One-way structures are described by classes whose names begin with LINKED_, for example <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link>. Two-way structures use cells which, in addition to the reference to the next cell, also include a reference to the previous one. Their names begin with TWO_WAY_.
			<line_break/> An arrayed implementation uses an array to represent a linear structure. If the array is resizable, the corresponding class name begins with ARRAYED_, for example
			<line_break/><link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link>; if not, the prefix is FIXED_.
		</paragraph>
		<heading>
			<size>2</size>Linked structures
		</heading>
		<paragraph>A linked structure requires two classes: one, such as <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link>, describes the list proper; the other, such as <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link>, describes the individual list cells. The figure should help understand the difference; it describes a linked list, but the implementation of linked circular chains is similar.</paragraph>
		<image>
			<url>linked_list.png</url>
			<legend>fig.3: Linked list and linked cells</legend>
		</image>
		<paragraph> The instance of type <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link> shown at the top contains general information about the list, such as the number of items (<feature_name>count</feature_name>) and a reference to the first element (first). Because lists are active structures with a notion of current position, there is also a reference active to the cell at the current position. An entity declared as</paragraph>
		<code_block><feature_name>my_list</feature_name>: <class_name>LINKED_LIST</class_name> <symbol>[</symbol><class_name>SOME_TYPE</class_name><symbol>]</symbol> </code_block>
		<paragraph>will have as its run-time value (if not void) a reference to such an object, which is really a list header. The actual list content is given by the <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link> instances, each of which contains a value of type
			<class_name>SOME_TYPE</class_name> and a reference to the next item, called <feature_name>right</feature_name>.
			<line_break/> Clearly, a header of type <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link>
			<code>
				<symbol>[</symbol>
			</code>
			<class_name>SOME_TYPE</class_name>
			<code>
				<symbol>]</symbol> will be associated with cells of type <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link>
				<symbol> [</symbol>
			</code>
			<class_name>SOME_TYPE</class_name>
			<code>
				<symbol>]</symbol>
			</code>.
			<line_break/> Features such as active and first are used only for the implementation; they are not exported, and so you will not find them in the flat-short specifications, although the figures show them to illustrate the representation technique.
			<line_break/>  A similar implementation is used for two-way-linked structures such as two-way lists and two-way circular chains.
		</paragraph>
		<image>
			<url>two_way_list.png</url>
			<legend>fig.4: Two way linked list</legend>
		</image>
		<heading>
			<size>2</size>Linked cells
		</heading>
		<paragraph> The classes describing list cells are descendants of a deferred class called <link><url>/libraries/base/reference/cell_chart.xml</url><label>CELL</label></link>, whose features are:</paragraph>
		<list ordered="false">
			<item><feature_name>item</feature_name>, the contents of the cell.</item>
			<item><feature_name>put </feature_name>
				<code>
					<symbol>(</symbol>
					<local_variable>v</local_variable>
					<symbol>:</symbol>
				</code>
				<code>
					<keyword>like </keyword>
				</code>
				<feature_name>item</feature_name>
				<code>
					<symbol>)</symbol>
				</code>, which replaces the contents of the cell by a new value.
			</item>
		</list>
		<paragraph> Class <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link> is an effective descendant of <link><url>/libraries/base/reference/cell_chart.xml</url><label>CELL</label></link>, used for one-way linked structures. It introduces features <feature_name>right</feature_name>, a reference to another cell to which the current
			<line_break/> cell will be linked. Two-way linked structures use <link><url>/libraries/base/reference/bi_linkable_chart.xml</url><label>BI_LINKABLE</label></link>, an heir of <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link> which to the above features adds <feature_name>left</feature_name>, a reference to the preceding cell in the structure.
		</paragraph>
		<warning>
			<bold>Caution</bold>: Do not confuse the <feature_name>item</feature_name> feature of <link><url>/libraries/base/reference/cell_chart.xml</url><label>CELL</label></link> and its descendants, such as <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link>, with the <feature_name>item</feature_name> feature of the classes describing linear structures, such as <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link>. For a linked list, <feature_name>item</feature_name> returns the item at cursor position.
		</warning>
		<paragraph>It may be implemented as</paragraph>
		<code_block><feature_name>item</feature_name><symbol>:</symbol> <class_name>G</class_name> <keyword>is</keyword>
		<comment>-- Current item</comment>
	<keyword>do</keyword>
		Result <symbol>:</symbol><symbol>=</symbol> <feature_name>active</feature_name>.<feature_name>item</feature_name>
	<keyword>end</keyword></code_block>
		<paragraph>using the <feature_name>item</feature_name> feature of <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link>, applied to <feature_name>active</feature_name>.</paragraph>
		<heading>
			<size>2</size>One-way and two-way linked chains
		</heading>
		<paragraph>If you look at the interfaces of one-way and two-way linked structures, you will notice that they are almost identical. This is because it is possible to implement features such as <feature_name>back</feature_name> for one-way structures such as described by <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link> and <link><url>/libraries/base/reference/linked_circular_chart.xml</url><label>LINKED_CIRCULAR</label></link>. A simple implementation of <feature_name>back</feature_name> stores away a reference to the current active item, executes <feature_name>start</feature_name>, and then performs <feature_name>forth</feature_name> until the item to the right of the cursor position is the previous <feature_name>active</feature_name>.
			<line_break/> Although correct, such an implementation is of course rather inefficient since it requires a traversal of the list. In terms of algorithmic complexity, it is in O (<feature_name>count</feature_name>), meaning that its execution time is on the average proportional to the number of items in the structure. In contrast, <feature_name>forth</feature_name> is O (1), that is to say, takes an execution time bounded by a constant.
		</paragraph>
		<warning>
			<bold>Caution</bold>: As a consequence, you should not use one-way linked structures if you need to execute more than occasional <feature_name>back</feature_name> operations (and other operations requiring access to previous items, such as <feature_name>remove_left</feature_name>).
		</warning>
		<paragraph>Two-way linked structures, such as those described by <link><url>/libraries/base/reference/two_way_list_chart.xml</url><label>TWO_WAY_LIST</label></link> and <link><url>/libraries/base/reference/two_way_circular_chart.xml</url><label>TWO_WAY_CIRCULAR</label></link>, treat the two directions symmetrically, so that <feature_name>back</feature_name> will be just as efficient as <feature_name>forth</feature_name>. Hence the following important advice: If you need to traverse a linked structure both ways, not just left to right, use the
			<class_name>TWO_WAY_</class_name> classes, not the
			<class_name>LINKED_</class_name> versions. The
			<class_name>TWO_WAY_</class_name> structures will take up more space, since they use <link><url>/libraries/base/reference/bi_linkable_chart.xml</url><label>BI_LINKABLE</label></link> rather than <link><url>/libraries/base/reference/linkable_chart.xml</url><label>LINKABLE</label></link> cells, but for most applications this space penalty is justified by the considerable gains in time that will result if right-to-left operations are frequently needed.
		</paragraph>
		<heading>
			<size>2</size>Arrayed chains
		</heading>
		<paragraph> Arrayed structures as described by <link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link>, <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link> and <link><url>/libraries/base/reference/arrayed_circular_chart.xml</url><label>ARRAYED_CIRCULAR</label></link> use arrays for their implementations. A list or circular chain of <feature_name>count</feature_name> items may be stored in positions 1 to <feature_name>count</feature_name> of an array of <feature_name>capacity</feature_name> items, where <feature_name>capacity</feature_name> &gt;= <feature_name>count</feature_name>.
			<line_break/>  An instance of <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link>, as the name suggests, has a fixed number of items. In particular:
		</paragraph>
		<list ordered="false">
			<item>Query extendible has value false for <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link>: you may replace existing items, but not add any, even at the end. A <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link> is created with a certain number of items and retains that number.</item>
			<item>As a result, <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link> joins the deferred feature count of <link><url>/libraries/base/reference/list_chart.xml</url><label>LIST</label></link> with the feature count of ARRAY, which satisfies the property <feature_name>count</feature_name> = <feature_name>capacity</feature_name>.</item>
			<item>Query <feature_name>prunable </feature_name>has value false too: it is not possible to remove an item from a fixed list.</item>
		</list>
		<paragraph>In contrast, <link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link> has almost the same interface as <link><url>/libraries/base/reference/linked_list_chart.xml</url><label>LINKED_LIST</label></link>. In particular, it is possible to add items at the end using procedure <feature_name>extend</feature_name>; if the call causes the list to grow beyond the current array's capacity, it will trigger a resizing. This is achieved by using the procedure <feature_name>force</feature_name> of class ARRAY to implement <feature_name>extend</feature_name>. <link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link> even has the insertion procedures (<feature_name>put_front</feature_name>, <feature_name>put_left</feature_name>, <feature_name>put_right</feature_name>) and removal procedures (<feature_name>prune</feature_name>, <feature_name>remove</feature_name>, <feature_name>remove_left</feature_name>, <feature_name>remove_right</feature_name>) that apply to arbitrary positions and appear in the linked implementations. These procedures, however, are rather inefficient, since they usually require moving a whole set of array items, an O (count) operation. (Procedure <feature_name>extend</feature_name> does not suffer from this problem, since it is easy to add an item to the end of an array, especially if there is still room so that no resizing is necessary.)</paragraph>
		<warning>
			<bold>Caution</bold>: The situation of these features in <link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link> is similar to the situation of <feature_name>back</feature_name> in classes describing one-way linked structures: it is convenient to include them because they may be needed once in a while and an implementation exists; but using them more than occasionally may result in serious inefficiencies. If you do need to perform arbitrary insertions and removal, use linked structures, not arrayed ones.
		</warning>
		<paragraph>Arrayed structures, however, use up less space than linked representations. So they are appropriate for chains on which, except possibly for insertions at the end, few insertion and removal operations or none at all are expected after creation. <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link> offers few advantages over <link><url>/libraries/base/reference/arrayed_list_chart.xml</url><label>ARRAYED_LIST</label></link>. <link><url>/libraries/base/reference/fixed_list_chart.xml</url><label>FIXED_LIST</label></link> may be useful, however, for cases in which the fixed number of items is part of the specification, and any attempt to add more items must be treated as an error. For circular chains only one variant is available, <link><url>/libraries/base/reference/arrayed_circular_chart.xml</url><label>ARRAYED_CIRCULAR</label></link>, although writing a
			<class_name>FIXED_</class_name> version would be a simple exercise.
		</paragraph>
		<heading>
			<size>2</size>Multi-arrayed lists
		</heading>
		<paragraph>For lists one more variant is available, combining some of the advantages of arrayed and linked implementations: <link><url>/libraries/base/reference/multi_array_list_chart.xml</url><label>MULTI_ARRAY_LIST</label></link>. With this implementation a list is
			<line_break/> divided into a number of blocks. Each block is an array, but the successive arrays are linked.
		</paragraph>
		<heading>
			<size>1</size>Sorted Linear Structures
		</heading>
		<paragraph>The class <link><url>/libraries/base/reference/comparable_struct_chart.xml</url><label>COMPARABLE_STRUCT</label></link>, an heir of <link><url>/libraries/base/reference/bilinear_chart.xml</url><label>BILINEAR</label></link>, is declared as</paragraph>
		<code_block><keyword>deferred</keyword> <keyword>class</keyword>
	<class_name>COMPARABLE_STRUCT</class_name> <symbol>[</symbol><class_name>G</class_name> <symbol>-></symbol> <class_name>COMPARABLE</class_name><symbol>]</symbol>
		<keyword>inherit</keyword>
			<class_name>BILINEAR</class_name>
		<keyword>feature</keyword>
   		... </code_block>
		<paragraph>As indicated by the constrained generic parameter it describes bilinear structures whose items may be compared by a total order relation.</paragraph>
		<warning>
			<bold>Caution</bold>: Note that the class name, chosen for brevity's sake, is slightly misleading: it is not the structures that are comparable but their items.
		</warning>
		<paragraph>COMPARABLE_STRUCT introduces the features <feature_name>min</feature_name> and <feature_name>max</feature_name>, giving access to the minimum and maximum elements of a structure; these are always present for a finite
			<line_break/> structure with a total order relation. <link><url>/libraries/base/reference/sorted_struct_chart.xml</url><label>SORTED_STRUCT</label></link>, an heir of <link><url>/libraries/base/reference/comparable_struct_chart.xml</url><label>COMPARABLE_STRUCT</label></link>, describes structures that can be sorted; it introduces the query sorted and the command sort.
			<line_break/> The deferred class <link><url>/libraries/base/reference/part_sorted_list_chart.xml</url><label>PART_SORTED_LIST</label></link> describes lists whose items are kept ordered in a way that is compatible with a partial order relation defined on them. The class is declared as
		</paragraph>
		<code_block><keyword>deferred</keyword> <keyword>class</keyword>
	<class_name>PART_SORTED_LIST</class_name> <symbol>[</symbol><class_name>G</class_name> <symbol>-></symbol> <class_name>COMPARABLE</class_name><symbol>]</symbol>...</code_block>
		<paragraph>An implementation based on two-way linked lists is available through the effective heir <link><url>/libraries/base/reference/sorted_two_way_list_chart.xml</url><label>SORTED_TWO_WAY_LIST</label></link>.
			<line_break/> The deferred class <link><url>/libraries/base/reference/sorted_list_chart.xml</url><label>SORTED_LIST</label></link>, which inherits from <link><url>/libraries/base/reference/part_sorted_list_chart.xml</url><label>PART_SORTED_LIST</label></link>, assumes that the order relation on G is a total order. As a result, the class is able to introduce features <feature_name>min</feature_name>, <feature_name>max</feature_name> and <feature_name>median</feature_name>. Here too a two-way linked list implementation is available, through the effective class <link><url>/libraries/base/reference/sorted_two_way_list_chart.xml</url><label>SORTED_TWO_WAY_LIST</label></link>.
		</paragraph>
	</paragraph></document>
