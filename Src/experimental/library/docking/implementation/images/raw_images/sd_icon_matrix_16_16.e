note
	description: "Pixel buffer that replaces orignal image file.%
		%The orignal version of this class has been generated by Image Eiffel Code."
	status: "See notice at end of class."
	legal: "See notice at end of class."

class
	SD_ICON_MATRIX_16_16

inherit
	EV_PIXEL_BUFFER

create
	make

feature {NONE} -- Initialization

	make
			-- Initialization
		do
			make_with_size (52, 18)
			fill_memory
		end

feature {NONE} -- Image data

	c_colors_0 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"[
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				
				A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,FF,55,00)A(FF,FF,55,00)A(FF,FF,55,00)A(FF,DC,49,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D3,D4,DF,F2)A(8D,34,60,AC)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(8D,34,60,AC)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(D7,D4,D9,F7)A(FF,EE,EE,F8)A(FF,EC,EC,F8)A(FF,EA,EA,F8)A(FF,E8,E9,F8)A(FF,E3,E5,F8)A(FF,D4,DF,F2)A(FF,34,60,AC)A(8D,34,60,AC)A(BF,4A,86,DE)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(8D,34,60,AC)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,CE,CE,CE)A(FF,F2,F2,F2)A(FF,CE,CE,CE)A(FF,FF,55,00)A(FF,B9,3D,00)A(FF,B9,3D,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(DF,E6,E6,FF)A(DF,CC,D2,FE)
				A(DD,B1,BF,FC)A(DB,97,AB,FB)A(D9,7C,98,F9)A(8D,34,60,AC)A(FF,D4,DF,F2)A(CB,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(8D,34,60,AC)A(CB,BD,CE,EB)A(FF,D4,DF,F2)A(8D,34,60,AC)A(00,FF,FF,FF)A(D7,C3,CC,F6)A(FF,ED,ED,F8)A(FF,F2,F2,F8)A(FF,E6,E6,FF)A(FF,CC,D2,FE)A(FF,B1,BF,FC)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,BD,CE,EB)A(8D,34,60,AC)A(D9,68,86,F9)A(D9,68,86,F9)A(8D,34,60,AC)A(CB,BD,CE,EB)A(FF,D4,DF,F2)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,00,FF,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,9E,9E,9E)A(FF,B9,3D,00)A(FF,B9,3D,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(DF,D0,D6,FE)A(FF,F2,F2,FF)A(FF,EF,F0,FF)A(FF,ED,ED,FF)A(FF,EA,EB,FF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(CB,BD,CE,EB)A(8D,34,60,AC)A(8D,34,60,AC)A(CB,BD,CE,EB)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(D5,B3,BF,F5)A(FF,EC,EC,F8)A(FF,F1,F2,F8)A(FF,D0,D6,FE)A(FF,F2,F2,FF)A(FF,EF,F0,FF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(FF,34,60,AC)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)
				A(FF,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,49,DC,00)A(FF,00,FF,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,96,00)A(FF,9E,9E,9E)A(FF,96,00,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(DD,BA,C5,FD)A(FF,F1,F1,FF)A(FF,F7,F8,FF)A(FF,F6,F7,FF)A(FF,F6,F7,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(D5,A2,B3,F4)A(FF,EB,EB,F8)A(FF,F0,F1,F8)A(FF,BA,C5,FD)A(FF,F1,F1,FF)A(FF,F7,F8,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(FF,A4,B5,FC)A(FF,96,AE,FB)A(FF,89,A6,FA)A(FF,7C,9E,F8)A(FF,6B,96,F6)A(FF,5A,8E,F5)A(FF,4A,85,F4)A(FF,49,DC,00)A(FF,00,FF,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,92,92,92)A(FF,96,00,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(DD,A4,B5,FC)A(FF,EF,F0,FF)A(FF,F6,F7,FF)A(FF,F5,F6,FF)A(FF,F5,F6,FF)A(FF,F3,F3,FF)
				A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,D4,DF,F2)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D3,91,A6,F3)A(FF,EA,EA,F8)A(FF,BB,BB,BB)A(FF,A4,B5,FC)A(FF,EF,F0,FF)A(FF,F6,F7,FF)A(FF,F5,F6,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,A4,B5,FC)A(FF,F2,F2,FF)A(FF,F0,F1,FF)A(FF,EF,EF,FF)A(FF,EE,EE,FF)A(FF,EC,EC,FF)A(FF,00,B9,00)A(FF,00,FF,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,96,00)A(FF,7A,7A,7A)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(DB,8E,A5,FA)A(FF,EE,EE,FF)A(FF,F5,F6,FF)A(FF,F4,F4,FF)A(FF,F4,F4,FF)A(FF,F2,F2,FF)A(FF,F2,F2,FF)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,D4,DF,F2)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D1,6F,96,F0)A(FF,E8,E9,F8)A(FF,EE,EE,F8)A(FF,8E,A5,FA)A(FF,EE,EE,FF)A(FF,F5,F6,FF)A(FF,F4,F4,FF)A(FF,F4,F4,FF)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(CF,1F,73,EF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,92,AB,FA);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			]"
		end

	c_colors_1 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"[
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(FF,F0,F0,FF)A(FF,F4,F5,FF)A(FF,F3,F4,FF)A(FF,F2,F3,FF)A(FF,00,B9,00)A(FF,00,FF,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,73,25)A(FF,50,50,00)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D9,78,94,F9)A(FF,ED,ED,FF)A(FF,DF,DF,DF)A(FF,CF,CF,CF)A(FF,BF,BF,BF)A(FF,AF,AF,AF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(CB,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(CF,69,94,EF)A(FF,E6,E8,F8)A(FF,BB,BB,BB)A(FF,78,94,F9)A(FF,ED,ED,FF)A(FF,AF,AF,AF)A(FF,A3,A3,A3)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,80,A1,F9)A(FF,EE,EF,FF)A(FF,F3,F4,FF)A(FF,F2,F3,FF)A(FF,00,B9,00)A(FF,00,B9,00)A(FF,49,DC,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,73,25)A(FF,50,50,00)A(FF,26,5A,A3)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D5,4B,7E,F5)A(FF,EA,EB,FF)A(FF,F2,F2,FF)A(FF,F0,F1,FF)A(FF,F0,F1,FF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(FF,34,60,AC)
				A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(CB,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(CF,63,93,EF)A(FF,E5,E6,F8)A(FF,EC,EC,F8)A(FF,4B,7E,F5)A(FF,EA,EB,FF)A(FF,F2,F2,FF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(FF,BD,CE,EB)A(FF,34,60,AC)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,FF,FF,FF)A(CB,BD,CE,EB)A(8D,34,60,AC)A(00,FF,FF,FF)A(FF,5E,90,F5)A(FF,ED,ED,FF)A(FF,E6,E6,E6)A(FF,E6,E6,E6)A(FF,96,96,00)A(FF,DC,DC,00)A(FF,00,96,00)A(FF,00,96,00)A(FF,00,B9,00)A(FF,00,96,00)A(FF,00,73,25)A(FF,50,50,00)A(FF,A4,A7,CD)A(FF,39,61,9E)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D5,44,7C,F4)A(FF,E8,EA,FF)A(FF,DF,DF,DF)A(FF,D7,D7,D7)A(FF,CF,CF,CF)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,BD,CE,EB)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,E3,E5,FF)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,D4,DF,F2)A(8D,34,60,AC)A(00,FF,FF,FF)A(CD,58,90,ED)A(FF,E3,E5,F8)A(FF,BB,BB,BB)A(FF,44,7C,F4)A(FF,E8,EA,FF)A(FF,AF,AF,AF)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,BD,CE,EB)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,8B,8B,8B)A(FF,34,60,AC)A(FF,BD,CE,EB)A(FF,D4,DF,F2)A(8D,34,60,AC)A(00,FF,FF,FF)A(FF,4F,88,F4)A(FF,EB,EB,FF)A(FF,F1,F2,FF)A(FF,F1,F2,FF)A(FF,DC,DC,00)
				A(FF,B9,B9,00)A(FF,B9,B9,00)A(FF,00,73,25)A(FF,00,96,00)A(FF,00,73,25)A(FF,50,50,00)A(FF,BD,BE,CD)A(FF,C4,C4,CD)A(FF,1A,6A,DB)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D3,3C,7B,F3)A(FF,E7,E8,FF)A(FF,EF,F0,FF)A(FF,EE,EF,FF)A(FF,EE,EF,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,E7,E9,FF)A(FF,E5,E7,FF)A(AD,15,62,CC)A(8D,34,60,AC)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(CD,52,8F,EC)A(FF,E2,E4,F8)A(FF,E9,EA,F8)A(FF,3C,7B,F3)A(FF,E7,E8,FF)A(FF,EF,F0,FF)A(FF,D4,DF,F2)A(FF,34,60,AC)A(FF,34,60,AC)A(FF,D4,DF,F2)A(FF,E8,EA,FF)A(FF,E7,E9,FF)A(FF,E7,E9,FF)A(FF,34,60,AC)A(8D,34,60,AC)A(D3,D4,DF,F2)A(00,FF,FF,FF)A(FF,3F,81,F2)A(FF,E9,EA,FF)A(FF,C5,C5,C5)A(FF,C0,C0,C0)A(FF,92,92,92)A(FF,B9,B9,00)A(FF,96,96,00)A(FF,73,73,00)A(FF,00,73,25)A(FF,50,50,00)A(FF,B3,B3,BB)A(FF,BD,BD,CD)A(FF,EF,EF,FF)A(FF,17,64,D1)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D1,2D,77,F1)A(FF,E4,E6,FF)A(FF,DF,DF,DF)A(FF,D7,D7,D7)A(FF,CF,CF,CF)A(FF,C7,C7,C7)A(FF,BF,BF,BF)A(FF,B7,B7,B7)A(FF,AF,AF,AF)A(FF,A7,A7,A7)A(FF,EA,EA,FF)A(9B,10,59,BA)A(00,FF,FF,FF)A(00,FF,FF,FF)
				A(00,FF,FF,FF)A(00,FF,FF,FF)A(CD,4D,8D,EC)A(FF,E2,E2,F8)A(FF,BB,BB,BB)A(FF,2D,77,F1)A(FF,E4,E6,FF)A(FF,AF,AF,AF)A(FF,A9,A9,A9)A(FF,A3,A3,A3)A(FF,9D,9D,9D)A(FF,97,97,97)A(FF,91,91,91)A(FF,8B,8B,8B)A(FF,85,85,85)A(FF,EA,EA,FF)A(9B,10,59,BA)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,2F,7A,F1)A(FF,E7,E8,FF)A(FF,F0,F1,FF)A(FF,EF,F0,FF)A(FF,4A,4A,4A)A(FF,4A,4A,4A)A(FF,73,73,00)A(FF,73,73,00)A(FF,00,73,25)A(FF,AE,AF,BB)A(FF,B1,B1,BB)A(FF,E6,E7,FF)A(FF,EC,EC,FF)A(FF,14,5F,C6)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D1,25,75,F0)A(FF,E3,E5,FF)A(FF,EC,ED,FF)A(FF,EB,EC,FF)A(FF,EB,EC,FF)A(FF,E8,EA,FF)A(FF,E6,E8,FF)A(FF,E5,E6,FF)A(FF,E4,E5,FF)A(FF,E4,E5,FF)A(FF,EC,EC,FF)A(9B,10,59,BA)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(CD,5D,97,EC)A(FF,EE,EE,F8)A(FF,EC,ED,F8)A(FF,25,75,F0)A(FF,E3,E5,FF)A(FF,EC,ED,FF)A(FF,EB,EC,FF)A(FF,EB,EC,FF)A(FF,E8,EA,FF)A(FF,E6,E8,FF)A(FF,E5,E6,FF)A(FF,E4,E5,FF)A(FF,E4,E5,FF)A(FF,EC,EC,FF)A(9B,10,59,BA)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,1F,73,EF)A(FF,E6,E6,FF)A(FF,B1,B1,B1)A(FF,AE,AE,AE)A(FF,AA,AA,AA)A(FF,8E,8E,8E)A(FF,8C,8C,8C)A(FF,8A,8A,8A)A(FF,88,88,88)
				A(FF,86,86,86)A(FF,E8,E9,FF)A(FF,8D,8D,8D)A(FF,E8,E9,FF)A(FF,17,64,D1)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(CF,1F,73,EF)A(FF,E2,E3,FF)A(FF,DF,DF,DF)A(FF,D7,D7,D7)A(FF,CF,CF,CF)A(FF,C7,C7,C7)A(FF,BF,BF,BF)A(FF,B7,B7,B7)A(FF,AF,AF,AF)A(FF,A7,A7,A7)A(FF,EE,EE,FF)A(A3,0E,5D,C3)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(CF,7C,AA,EF)A(CF,6D,A0,EE)A(CD,5D,97,EC)A(CF,1F,73,EF)A(FF,E2,E3,FF)A(FF,AF,AF,AF)A(FF,A9,A9,A9)A(FF,A3,A3,A3)A(FF,9D,9D,9D)A(FF,97,97,97)A(FF,91,91,91)A(FF,8B,8B,8B)A(FF,85,85,85)A(FF,EE,EE,FF)A(A3,0E,5D,C3)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,33,80,F0)A(FF,F2,F2,FF)A(FF,F1,F1,FF)A(FF,EF,F0,FF)A(FF,EE,EE,FF)A(FF,EA,EA,FF)A(FF,E9,E9,FF)A(FF,E7,E8,FF)A(FF,E6,E7,FF)A(FF,E5,E6,FF)A(FF,E5,E6,FF)A(FF,E5,E6,FF)A(FF,E5,E6,FF)A(FF,0E,67,D9)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D1,33,80,F0)A(FF,F2,F2,FF)A(FF,F0,F1,FF)A(FF,EF,EF,FF)A(FF,ED,EE,FF)A(FF,EA,EB,FF)A(FF,E7,E8,FF)A(FF,E5,E7,FF)A(FF,E4,E5,FF)A(FF,E2,E4,FF)A(FF,F0,F0,FF)A(AD,0C,61,CC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF);
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			]"
		end

	c_colors_2 (a_ptr: POINTER; a_offset: INTEGER)
			-- Fill `a_ptr' with colors data from `a_offset'.
		external
			"C inline"
		alias
			"[
			{
				#define B(q) \
					#q
				#ifdef EIF_WINDOWS
				#define A(a,r,g,b) \
					B(\x##b\x##g\x##r\x##a)
				#else
				#define A(a,r,g,b) \
					B(\x##r\x##g\x##b\x##a)
				#endif
				char l_data[] = 
				A(00,FF,FF,FF)A(D1,33,80,F0)A(FF,F2,F2,FF)A(FF,F0,F1,FF)A(FF,EF,EF,FF)A(FF,ED,EE,FF)A(FF,EA,EB,FF)A(FF,E7,E8,FF)A(FF,E5,E7,FF)A(FF,E4,E5,FF)A(FF,E2,E4,FF)A(FF,F0,F0,FF)A(AD,0C,61,CC)A(00,FF,FF,FF)A(00,FF,FF,FF)A(FF,5C,99,F3)A(FF,53,91,EC)A(FF,4B,8A,E4)A(FF,42,82,DD)A(FF,39,7A,D6)A(FF,31,73,CE)A(FF,28,6B,C7)A(FF,1F,63,C0)A(FF,17,5C,B8)A(FF,10,59,BA)A(FF,0E,5D,C3)A(FF,0E,5D,C3)A(FF,0C,61,CC)A(FF,0B,65,D6)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D3,5C,99,F3)A(D3,48,8C,F2)A(D1,33,80,F0)A(BB,19,69,DA)A(B3,17,65,D3)A(A5,13,5E,C5)A(99,10,58,B8)A(91,0E,54,B1)A(9B,10,59,BA)A(A3,0E,5D,C3)A(AD,0C,61,CC)A(B7,0B,65,D6)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(D3,5C,99,F3)A(D3,48,8C,F2)A(D1,33,80,F0)A(BB,19,69,DA)A(B3,17,65,D3)A(A5,13,5E,C5)A(99,10,58,B8)A(91,0E,54,B1)A(9B,10,59,BA)A(A3,0E,5D,C3)A(AD,0C,61,CC)A(B7,0B,65,D6)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)A(00,FF,FF,FF)
				
				memcpy ((EIF_NATURAL_32 *)$a_ptr + $a_offset, &l_data, sizeof l_data - 1);
			}
			]"
		end

	build_colors (a_ptr: POINTER)
			-- Build `colors'.
		do
			c_colors_0 (a_ptr, 0)
			c_colors_1 (a_ptr, 400)
			c_colors_2 (a_ptr, 800)
		end

feature {NONE} -- Image data filling.

	fill_memory
			-- Fill image data into memory.
		local
			l_imp: EV_PIXEL_BUFFER_IMP
			l_pointer: POINTER
		do
			l_imp ?= implementation
			check not_void: l_imp /= Void end

			l_pointer := l_imp.data_ptr
			if l_pointer /= default_pointer then
				build_colors (l_pointer)
				l_imp.unlock
			end
		end

note
	library:	"SmartDocking: Library of reusable components for Eiffel."
	copyright:	"Copyright (c) 1984-2006, Eiffel Software and others"
	license:	"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"


end -- SD_ICON_MATRIX_16_16
