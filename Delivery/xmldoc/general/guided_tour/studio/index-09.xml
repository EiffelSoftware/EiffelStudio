<document title="8 PRODUCING AND EXPORTING DOCUMENTATION" output="studio">
	<meta_data></meta_data>
	<paragraph>
		<paragraph>
			<link>
				<url>tour-help.xml</url>
				<label>Help reading this manual</label>
			</link>
		</paragraph>
		<paragraph>Software development is, most of the time, cooperative work.  You must tell the rest of the team what you're up to, and find out what they can offer you.  Bring in distributed development -- increasingly common these days, with some people working at headquarters, others at home, others traveling, an offshore team half a world away 
			<span>...</span> -- and the problem becomes even more critical.
		</paragraph>
		<paragraph>EiffelStudio provides unique facilities to make such distributed development possible in a safe, effective, harmonious way.  Some of the key criteria are:</paragraph>
		<list ordered="false">
			<item>You must be able to export the information easily to the World-Wide Web, the most general and widely available interaction mechanism.  </item>
			<item>The documentation must be 
				<span>faithful</span> to the software.  Because of the ever-changing nature of software, this goal is impossible to satisfy unless the documentation is 
				<span>extracted</span> from the software -- as opposed to the traditional approach, still perpetuated by many CASE tools, of treating the two as separate.
			</item>
			<item>The task of updating the documentation after a software change must be straightforward and automatic.  </item>
			<item>It's not enough to support HTML; many other formats are useful too.  </item>
			<item>Users must have the ability to adapt the mechanism to support 
				<span>new</span> formats.
			</item>
			<item>For existing formats, they must have a way to tune the output easily to any specific style standards, company policies, local variants.  </item>
		</list>
		<paragraph>EiffelStudio's documentation generation satisfies all these requirements.  </paragraph>
		<heading>
			<size>2</size>
			<content>Documentation filters</content>
		</heading>
		<note>Note: Exporting documentation is not possible if you are using the free version of EiffelStudio.  </note>
		<paragraph>Let's see how documentation works by starting to generate it for our Guided Tour system -- which really means for EiffelBase, since that's what it mostly consists of.  The HTML result is available as part of the present documentation (we'll tell you where in just a minute), so you don't have to regenerate it unless you want to.  Indeed we'll show you when to click 
			<code>
				<keyword>Cancel</keyword>
			</code> if you are happy with the pre-generated version.  But let's get started anyway to understand the principles and possibilities.
		</paragraph>
		<paragraph>Click the following menu entry, used to generate documentation:</paragraph>
		<code_block>
	<keyword>Project --&gt; Generate documentation...</keyword>
		</code_block>
		<paragraph>This is the next-to-last entry in the 
			<code>
				<keyword>Project</keyword>
			</code> menu.  The last one, by the way, 
			<code>
				<keyword>XMI Export</keyword>
			</code>
			<span>...</span>, is directly relevant too: it will make it possible to export information in the standard XML representation for UML, for consumption by third-party products such as Rational Rose.  But for the moment we choose the 
			<code>
				<keyword>Documentation</keyword>
			</code> entry to start the Eiffel Documentation Wizard.
		</paragraph>
		<paragraph>The Wizard starts with a list of available output formats, also called 
			<span>filters</span>:
		</paragraph>
		<div>
			<image_link>
				<url>index-37.png</url>
				<target>screenshots</target>
				<image>
					<url>index-37.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The filter names correspond to major documentation formats which EiffelStudio supports by default.  Among the most important, listed here in rough order of appearance in the list:</paragraph>
		<list ordered="false">
			<item>
				<code>
					<keyword>ASCII</keyword>
				</code> : plain text, no formatting codes.
			</item>
			<item>
				<code>
					<keyword>eiffel</keyword>
				</code> : essentially the same as ASCII; useful if you want EiffelStudio to pretty-print your class texts and replace the originals, as explained below.
			</item>
			<item>
				<code>
					<keyword>MML</keyword>
				</code> : internal format for Adobe FrameMaker.
			</item>
			<item>
				<code>
					<keyword>Postscript</keyword>
				</code> : to generate Adobe Postscript output, suitable for printing on a Postscript printer, display on a Postscript previewer such as Ghostscript, or distilling to Adobe PDF.
			</item>
			<item>
				<code>
					<keyword>COM</keyword>
				</code> : to generate class specifications in the form of an Interface Description Language (IDL) interface for Microsoft's COM component model.
			</item>
			<item>
				<code>
					<keyword>RTF</keyword>
				</code> : Microsoft's Rich Text Format, used in particular for Windows "Help" files.
			</item>
			<item>
				<code>
					<keyword>TeX1</keyword>
				</code>, 
				<code>
					<keyword>TeX2</keyword>
				</code> : two variants for Donald Knuth's TEX processing format.
			</item>
			<item>
				<code>
					<keyword>troff</keyword>
				</code> : if you already know what this is, congratulations (or condolences), you've been around the industry for a while.  This is a traditional text-processing format available on Unix systems.  Also works for the 
				<span>gtroff</span> variant.
			</item>
			<item>
				<code>
					<keyword>html-classic</keyword>
				</code> : HTML, no style sheets.  The next variant, 
				<span>with</span> style sheets, is strongly recommended unless your colleagues will be reading your documentation with Mosaic 1, vintage 1993, or Netscape 2, Vintage 1995.
			</item>
			<item>
				<code>
					<keyword>html-stylesheet</keyword>
				</code> : HTML with style sheets.  This is particularly attractive for Web publishing not only because the output makes full use of style sheet capabilities (fonts, colors, layout, formatting) but also because it becomes trivial to change the look-and-feel to support any style you or your users like, even 
				<span>after</span> generation, simply by editing the style sheet file.
			</item>
		</list>
		<paragraph>Not only do these predefined filters provide support for a number of important industry formats; better yet, if you want 
			<span>another</span> format not represented on the list, or would like to adapt an existing format to your own style preferences, it's easy to define a new filter.  The list that EiffelStudio displays comes from the files with a 
			<span>.</span>
			<code>
				<keyword>fil</keyword>
			</code> extension that it finds in a subdirectory of the installation:
		</paragraph>
		<code_block>
			<keyword>$ISE_EIFFEL/examples/studio/filters</keyword>
		</code_block>
		<paragraph>To define a new filter, simply add a file to this directory.  Filters are expressed in a simple notation called EFF ( 
			<span>Eiffel Filter Format</span> ), general enough to support a wide variety of tools for text processing, project management, Web publishing etc.  The best way to define a new filter is usually to start from an existing one and adapt it.  You will find the specification of EFF at the end of this manual, 
			<link>
				<label>here</label>
				<url>index-20.xml</url><anchor_name>35873</anchor_name>
			</link> .
		</paragraph>
		<heading>
			<size>2</size>
			<content>Generating an HTML record of your project</content>
		</heading>
		<paragraph>Let's select the most obviously attractive of the predefined filters: HTML with stylesheets.  Click the line 
			<code>
				<keyword>html-stylesheet</keyword>
			</code> in the list to make it active, then click 
			<code>
				<keyword>Next</keyword>
			</code> at the bottom of the Documentation Wizard window.  The next window appears:
		</paragraph>
		<div>
			<image_link>
				<url>index-38.png</url>
				<target>screenshots</target>
				<image>
					<url>index-38.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This is to let you decide which clusters of your system the documentation will include.  Initially all clusters -- down to the level of nested subclusters, for example 
			<code>
				<keyword>base.structures.list</keyword>
			</code> -- appear in the 
			<code>
				<keyword>Include</keyword>
			</code> list on the right; but you might want to exclude some standard libraries or other clusters from the documentation.
		</paragraph>
		<paragraph>To move a cluster from the right column to the left one, click it to select it, and click the left arrow button; for the reverse, use the right arrow.  </paragraph>
		<paragraph>You can play with moving a couple of clusters back and forth, but for this Tour we'll want to generate everything, including EiffelBase, so make sure that in the end all clusters appear in the right column, as on the last figure.  Then click 
			<code>
				<keyword>Next</keyword>
			</code> .
		</paragraph>
		<heading>
			<size>2</size>
			<content>Generating Metatags from Indexing entries</content>
		</heading>
		<paragraph>The next step of the documentation wizard asks you to select indexing entries:</paragraph>
		<div>
			<image_link>
				<url>index-39.png</url>
				<target>screenshots</target>
				<image>
					<url>index-39.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Eiffel classes, as you know, may start with an 
			<code>
				<syntax>Indexing</syntax>
			</code> entry that enables class authors to include documentary information in any category they like.  It is standard (and part of the official style guidelines) to include at the very least an entry of the form 
			<code>
				<keyword>description:</keyword>
			</code> 
			<code>
				<string>Descriptive text</string>
			</code> in every class.  The earlier displays of class 
			<code>
				<string>LIST</string>
			</code> showed that entry, which read "
			<code>
				<keyword>Sequential lists, without commitment to a particular representation</keyword>
			</code>".
		</paragraph>
		<paragraph>You may have noted that the purpose of Eiffel's 
			<code>
				<syntax>Indexing</syntax>
			</code> clauses is, conceptually, similar to that of 
			<bold>metatags</bold> in HTML.  Metatags carry information which Web page visitors do not normally see in the browser; this information is available, however, to search engines and other tools that explore and classify Web pages.  So it seems quite appropriate to generate metatags from 
			<code>
				<syntax>Indexing</syntax>
			</code> entries.
		</paragraph>
		<paragraph>The dialog illustrated in the last figure lets you select the entries you wish to transform into metatags.  It appears only if you have selected an HTML filter.  It lists all the 
			<code>
				<syntax>Indexing</syntax>
			</code> tags found anywhere in the system; those on the right will be retained for metatags.  Initially the 
			<code>
				<keyword>Exclude</keyword>
			</code> list on the left contains three tags conventionally used -- at Eiffel Software  and other Eiffel sites -- for interfacing with configuration management tools, and hence of internal interest only.
		</paragraph>
		<paragraph>There is no need to change the default selection, so just click 
			<code>
				<keyword>Next</keyword>
			</code>.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Choosing a level of detail</content>
		</heading>
		<paragraph>The next step of the Documentation Wizard lets you specify what kinds of documents you want to generate:</paragraph>
		<div>
			<image_link>
				<url>index-40.png</url>
				<target>screenshots</target>
				<image>
					<url>index-40.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This is a very important facility since it gives you control over how much you want to publish about the properties of the software:</paragraph>
		<list ordered="false">
			<item>You may want to publish 
				<span>everything</span>, source included, for example on your Intranet for a group of developers working closely together on the same classes, or on the Internet for open-source software.
			</item>
			<item>You may want to publish only the 
				<span>interfaces</span> (Contract or Flat-Contract views).  This is not necessarily to protect proprietary information; even if you don't care about showing your source code, it is usually too detailed for client programmers, especially in the case of libraries.  If various teams work on separate parts of a project, what each releases to the other should usually be the specification, not the implementation.
			</item>
			<item>You may of course want to publish 
				<span>both</span> the text and the interface, and let the recipients use the version that best suits their needs for each use.
			</item>
			<item>You may want to publish the 
				<span>diagrams</span>, showing the structure in graphical form.  Note the warning -- which we are about to ignore -- telling us this may take a while.
			</item>
			<item>The class list, cluster list, cluster hierarchy view, cluster chart (following the conventions of BON) are also optional.  </item>
		</list>
		<paragraph>The dialog shown on the last figure lets you specify the exact combination you wish.  The figure indicates the default options.  </paragraph>
		<paragraph>This time, if we generate anything, we'll generate everything.  Please check 
			<bold>all</bold> the boxes (the generation won't occur until the last step) and click 
			<code>
				<keyword>Next</keyword>
			</code> to move to the next dialog of the Documentation Wizard.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Specifying cluster views</content>
		</heading>
		<paragraph>The next dialog only appears when you have asked to generate diagrams:</paragraph>
		<div>
			<image_link>
				<url>index-41.png</url>
				<target>screenshots</target>
				<image>
					<url>index-41.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Although we didn't use this possibility yet, the Diagram view lets you define different subviews of any cluster.  One view might show inheritance only, the other client links only; one might include all classes, the other hide some library classes.  The last dialog shown will allow you, for any cluster, to select a subview other than the default for the generated diagram.  </paragraph>
		<paragraph>Here we only have the default view, so just click 
			<code>
				<keyword>Next</keyword>
			</code> .
		</paragraph>
		<heading>
			<size>2</size>
			<content>Generating</content>
		</heading>
		<paragraph>The last dialog simply asks you where you want to generate the result:</paragraph>
		<div>
			<image_link>
				<url>index-42.png</url>
				<target>screenshots</target>
				<image>
					<url>index-42.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>By default, as shown, EiffelStudio will produce the documentation in a subdirectory -- created for the occasion, if it doesn't exist yet -- of the project directory:</paragraph>
		<code_block>
	Project_directory /<keyword>Documentation</keyword>
		</code_block>
		<paragraph>You may, however, select any other location you like.  In the case of HTML generation, as here, EiffelStudio takes great care to use only 
			<bold>relative hyperlinks</bold> so that you can move the 
			<code>
				<keyword>Documentation</keyword>
			</code> directory around, for use either on a file system or on your Web site, with the guarantee that the hyperlinks will work -- as long as you move the entire directory together.
		</paragraph>
		<paragraph>To continue the Guided Tour, you do 
			<bold>not</bold> need to complete the generation now unless you want to.  If you are happy to continue without generating the documentation at the moment then click 
			<code>
				<keyword>Cancel</keyword>
			</code> on the last dialog.
		</paragraph>
		<note>
			<italic>If you prefer to produce your own, click "Finish".  For our example system the process takes 7 minutes on the Thinkpad configuration mentioned earlier, and generates a 48 megabyte documentation directory.  </italic>
		</note>
		<heading>
			<size>2</size>
			<content>Browsing generated documentation</content>
		</heading>
		<paragraph>Let's take a look at the generated documentation.  We start with the root of the generated documentation, 
			<code>
				<keyword>index-09A/index.xml</keyword>
			</code> :
		</paragraph>
		<div>
			<image_link>
				<url>index-43.png</url>
				<target>screenshots</target>
				<image>
					<url>index-43.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This root page shows overall information about the system.  The top set of links, repeated at the bottom, enables you to browse the system from its list of classes, its list of clusters, or the cluster hierarchy; note the box labeled 
			<code>
				<keyword>to Go</keyword>
			</code>, which provides a built-in search engine, enabling you to type any class list and go directly to the corresponding page.  Let's look at the class list: click the box 
			<code>
				<keyword>Classes</keyword>
			</code> at the top left.
		</paragraph>
		<div>
			<image_link>
				<url>index-44.png</url>
				<target>screenshots</target>
				<image>
					<url>index-44.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This shows the beginning of the list of classes, alphabetically sorted.  You could click any class to get the corresponding information, but wait; we'll look at individual classes in a moment.  Instead, click 
			<code>
				<keyword>Cluster hierarchy</keyword>
			</code> to see the overall organization of the system into clusters:
		</paragraph>
		<div>
			<image_link>
				<url>index-45.png</url>
				<target>screenshots</target>
				<image>
					<url>index-45.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Note the convention for denoting nested clusters: 
			<code>
				<keyword>BASE</keyword>
			</code>, 
			<code>
				<keyword>BASE.STRUCTURES</keyword>
			</code>, 
			<code>
				<keyword>BASE.  STRUCTURES.  LIST</keyword>
			</code> .  Click 
			<code>
				<keyword>BASE.STRUCTURES.LIST</keyword>
			</code> to see details of the List cluster of EiffelBase where (under EiffelStudio) we had found the class 
			<code>
				<string>LIST</string>
			</code> used as example in the preceding sections:
		</paragraph>
		<div>
			<image_link>
				<url>index-46.png</url>
				<target>screenshots</target>
				<image>
					<url>index-46.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This indicates the relations of the cluster to others in the hierarchy, and its list of classes.  Again you could click any class name but instead note the mention 
			<code>
				<keyword>(diagram)</keyword>
			</code> next to the cluster name near the top.  Remember that when generating the documentation we elected to generate everything, diagrams included.  Hadn't we checked the corresponding check box, the 
			<code>
				<keyword>(diagram)</keyword>
			</code> link wouldn't be there.  Click it now to get the generated diagrams:
		</paragraph>
		<div>
			<image_link>
				<url>index-47.png</url>
				<target>screenshots</target>
				<image>
					<url>index-47.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The output is a diagram showing graphically the classes of the cluster and their inheritance relations.  All EiffelStudio-generated HTML diagrams use the PNG graphics format ( 
			<span>Portable Network Graphics</span> ), supported by all recent browsers.
		</paragraph>
		<paragraph>The class bubbles in a diagram are all hyperlinks.  To see the HTML documentation for our old friend the class 
			<code>
				<string>LIST</string>
			</code> -- which you could also obtain by clicking its name on one of the preceding diagrams, or typing it in the 
			<code>
				<keyword>Go to</keyword>
			</code> field -- just click its bubble (left on the figure, third from the top):
		</paragraph>
		<div>
			<image_link>
				<url>index-48.png</url>
				<target>screenshots</target>
				<image>
					<url>index-48.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The display shows key information on the class, in a form called the "Chart format" listing the ancestors and then the features, divided into 
			<code>
				<keyword>Queries</keyword>
			</code> (shown in part on the figure) and 
			<code>
				<keyword>Commands</keyword>
			</code> .  Note that all class names and feature names are hyperlinks, which would lead you to the appropriate place in a class text.
		</paragraph>
		<paragraph>The top row of hyperlinks now includes class formats corresponding to those we discovered under EiffelStudio (
			<link>
				<url>index-08.xml</url>
				<label>"CLASS VIEWS"</label>
			</link>): 
			<code>
				<keyword>Relations</keyword>
			</code> (covering ancestors, descendants, clients, suppliers, ), full 
			<code>
				<keyword>Text</keyword>
			</code>, 
			<code>
				<keyword>Contracts</keyword>
			</code>, 
			<code>
				<keyword>Flat contracts</keyword>
			</code> .  Click 
			<code>
				<keyword>Flat contracts</keyword>
			</code> to see the full interface of the class:
		</paragraph>
		<div>
			<image_link>
				<url>index-49.png</url>
				<target>screenshots</target>
				<image>
					<url>index-49.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>We'll stop this brief review here but you may continue browsing through the HTML pages if you like.  Note how closely the appearance of the class texts, flat forms, contract forms, diagrams and other forms of documentation matches the corresponding formats under EiffelStudio.  </paragraph>
		<paragraph>Although we suggest staying with the standard, you can easily change any convention that doesn't match your own preferences:</paragraph>
		<list ordered="false">
			<item>For the EiffelStudio appearance, use 
				<code>
					<keyword>Tools</keyword>
				</code>
				<code>
					<symbol>--&gt;</symbol>
				</code>
				<code>
					<keyword>Preferences</keyword>
				</code>.
			</item>
			<item>For the HTML appearance, if you know about Cascading Style Sheets (CSS) for HTML, edit the style sheet 
				<code>
					<keyword>default.css</keyword>
				</code> .  You will find this file in the generated documentation directory; alternatively, to ensure the changes are applicable to the generated documentation of all future projects, edit 
				<code>
					<keyword>defaults.css</keyword>
				</code> in the directory after backing it up.  For more profound changes in the structure of the generated HTML, you may also backup and edit the Eiffel Filter Format file 
				<code>
					<keyword>html-stylesheet.fil</keyword>
				</code> in the same directory.  EFF is described in 
				<link>
					<url>index-20.xml</url><anchor_name>35873</anchor_name>
					<label> Chapter 19, "Appendix"</label>
				</link>.
				<code_block>
	<keyword>$ISE_EIFFEL/examples/studio/filters</keyword>
				</code_block>
			</item>
		</list>
		<paragraph>The documentation generation mechanisms, using HTML or other formats, let you publish your designs, at the level of detail you desire, on an Intranet, the Internet, or as part of documents you release.  They are an important part of the power of EiffelStudio for quality software development.</paragraph>
		<paragraph>
			<link>
				<url>index-08.xml</url>
				<label>&lt;&lt; Previous</label>
			</link> 
			<link>
				<url>index-10.xml</url>
				<label>Next &gt;&gt;</label>
			</link>
</paragraph>
	</paragraph></document>
