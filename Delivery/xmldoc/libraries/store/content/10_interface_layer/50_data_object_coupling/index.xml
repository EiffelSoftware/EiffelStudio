<document output="studio" title="Data Object Coupling">
	<meta_data/>
	<paragraph>
		<paragraph>A smart way to work with relational databases is to have Eiffel objects directly mapping relational tables. 3 EiffelStore main capabilities enable this coupling:</paragraph>
		<list ordered="false">
			<item>DB_REPOSITORY objects 
				<link>
					<url>#describe</url>
					<label>describe a relational table</label>
				</link> and enable to create Eiffel objects mapping database tables.
			</item>
			<item>DB_STORE enables to 
				<link>
					<url>#insert</url>
					<label>insert data into relational tables</label>
				</link> using directly DB_REPOSITORY objects.
			</item>
			<item>DB_SELECTION can 
				<link>
					<url>#map</url>
					<label>map a database query result into Eiffel objects</label>
				</link>. 
			</item>
		</list>
		<heading>
			<size>2</size>Describing relational tables with DB_REPOSITORY
		</heading>
		<paragraph>A DB_REPOSITORY object stores available information about a table. To access this information, you mainly have to give the table name and load the table description:</paragraph>
		<code_block>Missing</code_block>
		<tip>
			<bold>Tip</bold>: Loading a table description is often a costly operation: table has to be fetched among existing tables then every table column description must be loaded. Hence it is better to store and reuse a repository (maybe with a HASH_TABLE) once it has been loaded.
		</tip>
		<paragraph>Using the table information, DB_REPOSITORY then helps generating Eiffel classes mapping relational tables: </paragraph>
		<list ordered="false">
			<item>You can directly use {DB_REPOSITORY}.generate_class. Generated class may look like:
				<code_block>Missing</code_block>
				<note>
					<bold>Note</bold>: The EiffelStore Wizard uses the generation.generator cluster to generate the classes mapped to your database.
				</note>
			</item>
		</list>
		<heading>
			<size>2</size>Inserting data in the database
		</heading>
		<paragraph>DB_STORE lets you easily insert rows into a table using: 
			<list ordered="false">
				<item>the table description provided by DB_REPOSITORY.</item>
				<item>a class mapping the relational table. </item>
			</list> This is straight-forward since you only have to give DB_STORE the object filled with the table values. Suppose you want to add a contact into your database:
		</paragraph>
		<code_block>Missing</code_block>
		<heading>
			<size>2</size>Accessing database content with Eiffel objects
		</heading>
		<paragraph>DB_SELECTION lets you map data retrieved from the database into Eiffel objects: Result column names must match object attributes names so you can use for instance classes created by DB_REPOSITORY. Class DB_ACTION redefines ACTION and can be used to retrieve Eiffel objects directly into an ARRAYED_LIST:</paragraph>
		<code_block>Missing</code_block>
		<note>
			<bold>Note</bold>: You can see how actions are used in DB_SELECTION.
		</note>
		<line_break/>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>../30_database_selection/index.xml</url>
				<label>Performing a database selection.</label>
			</link>
			<line_break/>
			<link>
				<url>../../30_data_structures_generation/10_data_structures_use/index.xml</url>
				<label>Database-specific structures use.</label>
			</link>
			<line_break/>
		</seealso>
	</paragraph></document>