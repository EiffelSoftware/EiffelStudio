<document title="Notation" output="envision">
	<meta_data>
		<help>
			<toc>
				<envision_pseudo_name>10</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph> This page contains descriptions of terms found within this documentation.</paragraph>
		<heading>
			<size>2</size>Object
		</heading>
		<paragraph> An object is a representation of a EiffelVision 2 component and its properties. When developing with this tool, you manipulate objects to build the desired interface.</paragraph>
		<paragraph>Each object type has a different set of properties that may be manipulated, and these correspond directly to the properties available within the 
			<link>
				<url>/libraries/vision2/00_introduction.xml</url>
				<label>EiffelVision 2</label>
			</link> type. There is property which is specific to an EiffelBuild object, 
			<bold>Name</bold> which is used for your identification purposes and as the attribute name in the generated code.
		</paragraph>
		<paragraph> For more information on manipulating objects, see:</paragraph>
		<list ordered="false">
			<item>  How to 
				<link>
					<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/how_to_s/20_create_an_object/index.xml</url>
					<label>   create an object</label>
				</link>
			</item>
			<item>  How to 
				<link>
					<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/how_to_s/50_reparent_an_object/index.xml</url>
					<label>   re-parent an object</label>
				</link>.
			</item>
			<item>
				<link>
					<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/40_object_editor/index.xml</url>
					<label>Object editor</label>
				</link> for details on modifying object properties.
			</item>
		</list>
		<paragraph> Within this wizard, there may be multiple views of a single object displayed simultaneously. Any modifications to an object will immediately update all views. Both the 
			<link>
				<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/20_layout_constructor/index.xml</url>
				<label>layout constructor</label>
			</link> and the 
			<link>
				<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/60_builder_window/index.xml</url>
				<label>builder window</label>
			</link> provide views of the objects within your project, and in these, the objects may be manipulated. The 
			<link>
				<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/50_layout_window/index.xml</url>
				<label>  display window</label>
			</link> also provides a view of the objects in your system, except the objects cannot be manipulated from this view. It can be thought of as a preview of the project you are developing.
		</paragraph>
		<heading>
			<size>2</size>Component
		</heading>
		<paragraph>Components are templates representing user defined object structures. From a component, you can quickly build a matching structure of objects. Components are available in this wizard so that you do not repeatedly create the same structures over and over again while developing your projects.</paragraph>
		<paragraph>You specify a new component by creating it from an existing object structure. Each time you re-start the Wizard, the components defined in the previous session will be loaded automatically.</paragraph> See 
		<link>
			<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/63_component_selector/index.xml</url>
			<label>component_selector</label>
		</link> for more detailed instructions on the use of components.
		<paragraph>To view an existing component, use the 
			<link>
				<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/65_component_viewer/index.xml</url>
				<label>  component_viewer</label>
			</link>.
		</paragraph>
		<paragraph>It is not possible to modify a component once created, except to 
			<link>
				<url>/10_Developing/10_Getting_Started/10_Using_ENViSioN/10_Adding_A_New_Project/interactive_gui_project/eiffelbuild/reference/63_component_selector/index.xml</url><anchor_name>delete_component</anchor_name>
				<label>  delete</label>
			</link> it.
			<heading>
				<size>2</size>Pick and Drop
			</heading>
		</paragraph>
		<paragraph>The pick and drop mechanism is one of Eiffel Software's exclusive technologies and is provided by 
			<link>
				<url>/libraries/vision2/00_introduction.xml</url>
				<label>EiffelVision 2</label>
			</link>. In this tool, it allows you to easily send data from a component of the interface to another.
		</paragraph>
		<paragraph>You can 
			<bold>Pick</bold> a reference to a 
			<bold>development object</bold>, such as an object or component with a single click of the 
			<bold>right</bold> mouse button. Then as you start moving the mouse around - not pressing any of its buttons - a pebble tracks the cursor position, and a line continuously connects the pebble to the object's original position.
		</paragraph>
		<paragraph>You may terminate this situation in either of two ways:</paragraph>
		<list ordered="false">
			<item>  If the pebble you are dragging is the regular cursor, you can right-click again  to confirm the pick-and-drop and so effectively send the dragged development  object to the targeted component. This is known as 
				<bold>Dropping</bold>. Right-clicking when the pebble is the 
				<bold>no</bold>  cursor, will only stop the pick-and-drop because the component you are hovering  with the mouse does not accept your development object.
			</item>
			<item>  If, for any reason, you change your mind, you can cancel the pick-and-drop by  left-clicking anywhere or by pressing the Escape key. </item>
		</list>
	</paragraph></document>
