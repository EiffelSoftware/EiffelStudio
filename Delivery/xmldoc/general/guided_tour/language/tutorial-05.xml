<document title="4 Hello World">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>40</envision_pseudo_name>
				<envision_title>Hello World</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>When discovering any approach to software construction, however ambitious its goals, it is reassuring to see first a small example of the big picture -- a complete program to print the famous "Hello World" string.  Here is how to perform this fascinating task in the Eiffel notation.  </paragraph>
		<paragraph>You write a class 
			<code>
				<class_name>HELLO</class_name>
			</code> with a single procedure, say 
			<code>
				<feature_name>make</feature_name>
			</code>, also serving as creation procedure.  If you like short texts, here is a minimal version:
		</paragraph>
		<code_block>
<keyword>class</keyword> 
	<class_name>HELLO</class_name>

<keyword>create</keyword>
	<feature_name>make</feature_name>

<keyword>feature</keyword>

	<feature_name>make</feature_name> <keyword>is</keyword>
		<keyword>do</keyword> 
			<feature_name>print</feature_name> <symbol>(</symbol><string>"Hello World%N"</string><symbol>)</symbol> 
		<keyword>end</keyword>

<keyword>end</keyword>
</code_block>
		<paragraph>In practice, however, the Eiffel style rules suggest a better documented version:</paragraph>
		<code_block>
<keyword>indexing</keyword>    
	description: <string>"Root for trivial system printing a message" </string>
	author: <string>"Elizabeth W. Brown"</string>

<keyword>class</keyword> 
	<class_name>HELLO</class_name> 

<keyword>create</keyword>    
	<feature_name>make</feature_name>

<keyword>feature</keyword>

	<feature_name>make</feature_name> <keyword>is</keyword>
			<comment>-- Print a simple message.  </comment>       
		<keyword>do</keyword>      
			<feature_name>io</feature_name>.<feature_name>put_string</feature_name> (<string>"Hello World"</string>)
			<feature_name>io</feature_name>.<feature_name>put_new_line</feature_name>
		<keyword>end</keyword>

<keyword>end</keyword> <comment>-- class HELLO</comment>
</code_block>
		<paragraph>The two versions perform identically; the following comments will cover the more complete second one.  </paragraph>
		<paragraph>Note the absence of semicolons and other syntactic clatter or clutter.  You may in fact use semicolons to separate instructions and declarations.  But the language's syntax is designed to make the semicolon optional (regardless of text layout) and it's best for readability to omit it, except in the special case of successive elements on a single line.  </paragraph>
		<paragraph>The 
			<code>
				<keyword>indexing</keyword>
			</code> clause does not affect execution semantics; you may use it to associate documentation with the class, so that browsers and other indexing and retrieval tools can help users in search of reusable components satisfying certain properties.  Here we see two indexing entries, labeled 
			<code>
				<string>description</string>
			</code> and 
			<code>
				<string>author</string>
			</code>.  
		</paragraph>
		<paragraph>The name of the class is 
			<code>
				<class_name>HELLO</class_name>
			</code>.  Any class may contain "features"; 
			<code>
				<class_name>HELLO </class_name>
			</code>has just one, called 
			<code>
				<feature_name>make</feature_name>
			</code>. The 
			<code>
				<keyword>create</keyword>
			</code> clause indicates that 
			<code>
				<feature_name>make</feature_name>
			</code> is a "creation procedure", that is to say an operation to be executed at class instantiation time.  The class could have any number of creation procedures.  
		</paragraph>
		<paragraph>The definition of 
			<code>
				<feature_name>make</feature_name>
			</code> appears in a 
			<code>
				<keyword>feature</keyword>
			</code> clause.  There may be any number of such clauses (to separate features into logical categories), and each may contain any number of feature declarations.  Here we have only one.  
		</paragraph>
		<paragraph>The line starting with 
			<code>
				<comment>--</comment>
			</code> (two hyphen signs) is a comment; more precisely it is a "header comment", which style rules invite software developers to write for every such feature, just after the 
			<code>
				<keyword>is</keyword>
			</code>.  As will be seen in 
			<link>
				<url>tutorial-09.xml#78482</url>
				<label>"The contract form of a class", page 44</label>
			</link>, the tools of EiffelStudio know about this convention and use it to include the header comment in the automatically generated class documentation.  
		</paragraph>
		<paragraph>The body of the feature is introduced by the 
			<code>
				<keyword>do</keyword>
			</code> keyword and terminated by 
			<code>
				<keyword>end</keyword>
			</code>.  It consists of two output instructions.  They both use 
			<code>
				<feature_name>io</feature_name>
			</code>, a generally available reference to an object that provides access to standard input and output mechanisms; the notation 
			<code>
				<feature_name>io</feature_name>
			</code>
			<span>.</span>
			<code>
				<feature_name>f</feature_name>
			</code>, for some feature 
			<code>
				<feature_name>f</feature_name>
			</code> of the corresponding library class (
			<code>
				<class_name>STD_FILES</class_name>
			</code>), means "apply 
			<code>
				<feature_name>f</feature_name>
			</code> to 
			<code>
				<feature_name>io</feature_name>
			</code>".  Here we use two such features:
		</paragraph>
		<list ordered="false">
			<item>
				<code>
					<feature_name>put_string</feature_name>
				</code> outputs a string, passed as argument, here 
				<code>
					<string>"Hello World"</string>
				</code>.  
			</item>
			<item>
				<code>
					<feature_name>put_new_line</feature_name>
				</code> terminates the line.  
			</item>
		</list>
		<paragraph>Rather than using a call to 
			<code>
				<feature_name>put_new_line</feature_name>
			</code>, the first version of the class simply includes a new-line character, denoted as 
			<code>
				<string>%N</string>
			</code>, at the end of the string.  Either technique is acceptable.  
		</paragraph>
		<paragraph>To build the system and execute it:</paragraph>
		<list ordered="false">
			<item>Start EiffelStudio</item>
			<item>When prompted, ask EiffelStudio to build a system for you; specify 
				<code>
					<class_name>HELLO</class_name>
				</code> as the "root class" and 
				<code>
					<feature_name>make</feature_name>
				</code> as the "root procedure".  
			</item>
			<item>You can either use EiffelStudio to type in the above class text, or you may use any text editor and store the result into a file 
				<code>
					<string>hello.</string><keyword>e</keyword>
				</code> in the current directory.  
			</item>
			<item>Click the "Compile" icon.  </item>
			<item>Click the "Run" icon.  </item>
		</list>
		<paragraph>Execution starts and outputs 
			<code>
				<string>Hello World</string>
			</code> on the appropriate medium: under Windows, a Console; under Unix or VMS, the windows from which you started EiffelStudio.  
		</paragraph>
	</paragraph></document>
