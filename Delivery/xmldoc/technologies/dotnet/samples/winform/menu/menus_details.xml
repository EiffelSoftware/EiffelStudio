<document title="Menu Details">
	<meta_data>
		<help>
			<toc>
				<envision_location>Samples\Windows Forms\Menus</envision_location>
				<envision_title>Using Menus</envision_title>
				<envision_location>Samples\Windows Forms\Menus</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>1</size>Menu Details
		</heading>
		<paragraph>Windows Forms supports menus and context menus. Main menus are displayed on a menu bar that is located immediately below the title bar of a form. The menu bar contains top-level menu items that are used to group related submenu items. For example, by clicking a
			<bold>File</bold> top-level menu item, you can display menu items that are related to file operations. Menu items typically appear as commands for your application (such as 
			<bold>New</bold> and 
			<bold>Open</bold>),but they can also appear as separator bars and submenu items. You  can display a check mark next to a menu item to display the state of a command or a the state of a feature in your application. In Windows Forms, main menus are represented by the 
			<bold>MainMenu</bold> control. 
		</paragraph>
		<paragraph>Context menus can be displayed for a specific control or area of your form. They are typically accessed by clicking the right mouse button. In Windows Forms, context menus are represented by the
			<bold>ContextMenu</bold> control. 
		</paragraph>
		<paragraph>
			<bold>ContextMenu</bold> and 
			<bold>MainMenu</bold> derive from 
			<bold>Menu</bold>. They share many properties, methods, and events. 
		</paragraph>
		<heading>
			<size>2</size>
			<content>Adding a 
				<bold>MainMenu</bold> to a Form
			</content>
		</heading>
		<paragraph>The following code demonstrates how to add a 
			<bold>MainMenu</bold> to a form. 
		</paragraph>
		<code>main_menu: </code>
		<code> main_menu. 
			<line_break></line_break>    set_menu (main_menu)
		</code> 
		<heading>
			<size>2</size>Adding a Context Menu to a Control
		</heading>
		<paragraph>The following code demonstrates how to 
			<span>create</span> a 
			<bold>ContextMenu</bold> and assign itto a control. 
		</paragraph>
		<code>
			<local_variable>label_1</local_variable>: 
			<local_variable>label_1_context_menu</local_variable>: 
		</code>
		<code>    label_1. 
			<line_break></line_break>  label_1_context_menu. 
			<line_break></line_break>    label_1. set_context_menu (label_1_context_menu)
		</code>
		<heading>
			<size>2</size>Adding Menu Items
		</heading>
		<paragraph>In the following example, a 
			<bold>File</bold> menu item is added tothe 
			<bold>MainMenu</bold>. The 
			<bold>File</bold> menu item contains submenu items called 
			<bold>Open</bold> and 
			<bold>Exit</bold>. 
		</paragraph>
		<code>
			<local_variable>mi_file</local_variable>: 
		</code>
		<code>mi_file := main_menu. get_menu_items. (("&amp;File"). )dummy := mi_file. get_menu_items. ( {}. _from_text (("&amp;Open..."). ))dummy := mi_file. get_menu_items. (("-"). ) -- Gives us a seperatordummy := mi_file. get_menu_items. ( {}. _from_text(("E&amp;xit"). )</code>
		<paragraph>
			<line_break></line_break> 
		</paragraph>
		<paragraph>The following code demonstrates how to handle the 
			<bold>Click</bold>event for both the 
			<bold>Open</bold> and 
			<bold>Exit</bold> menu items 
			<span>create</span>d in the previous code example. 
		</paragraph>
		<code>mi_file := main_menu. get_menu_items. (("&amp;File"). )dummy := mi_file. get_menu_items. ( {}. _and_shortcut    (("&amp;Open..."). ,  {}. (, $FileOpen_Clicked), feature {}. ctrl_O))dummy := mi_file. get_menu_items. (("-"). ) -- Gives us a seperatordummy := mi_file. get_menu_items. ( {}. _and_shortcut    (("E&amp;xit"). ,  {}. (, $FileExit_Clicked), feature {}. ctrl_X))</code>
		<paragraph>
			<line_break></line_break> 
		</paragraph>
		<paragraph>The following example demonstrates how to define shortcut keysfor the menu items 
			<span>create</span>d in the previous example. 
		</paragraph>
		<code>mi_file := main_menu. get_menu_items. (("&amp;File"). )dummy := mi_file. get_menu_items. ( {}. _and_shortcut    (("&amp;Open..."). ,  {}. (, $FileOpen_Clicked), feature {}. ctrl_O))dummy := mi_file. get_menu_items. (("-"). ) -- Gives us a seperatordummy := mi_file. get_menu_items. ( {}. _and_shortcut    (("E&amp;xit"). ,  {}. (, $FileExit_Clicked), feature {}. ctrl_X))</code>
		<paragraph></paragraph>
		<heading>
			<size>2</size>Adding Submenus
		</heading>
		<paragraph>The following example demonstrates how to 
			<span>create</span> submenus. 
		</paragraph>
		<code>
			<local_variable>mi_format</local_variable>: 
		</code>
		<code>-- Add Format Menumi_format := main_menu. get_menu_items. (("F&amp;ormat"). )-- Font Face sub-menu mmi_sans_serif. (((""). ). (("&amp;1. ").     sans_serif_font_family. ),  {}. (, $FormatFont_Clicked))mmi_sans_serif. set_checked ()mmi_sans_serif. set_default_item () mmi_serif. (((""). ). (("&amp;2. "). ,    serif_font_family. ),  {}. (, $FormatFont_Clicked)) mmi_mono_space. (((""). ). (("&amp;3. "). ,    mono_space_font_family. ),  {}. (, $FormatFont_Clicked)) l_array_menu_item. (3)l_array_menu_item. (0, mmi_sans_serif)l_array_menu_item. (1, mmi_serif)l_array_menu_item. (2, mmi_mono_space)dummy := mi_format. get_menu_items. (("Font &amp;Face"). , l_array_menu_item)</code>
		<paragraph></paragraph>
		<heading>
			<size>2</size>Adding Default Menu Items
		</heading>
		<paragraph>The following example demonstrates how to specify a default menuitem. </paragraph>
		<code>
			<local_variable>mmi_sans_serif</local_variable>: 
		</code>
		<code> mmi_sans_serif. (((""). ). (("&amp;1. "). ,         sans_serif_font_family. ),  {}. (, $format_font_clicked))mmi_sans_serif. set_checked ()</code>
		<paragraph></paragraph>
		<paragraph></paragraph>
		<heading>
			<size>2</size>Adding Check Marks to Menu Items
		</heading>
		<paragraph>The following example demonstrates how to display a check mark next to a menu item. The code also demonstrates how to track which item is checked. </paragraph>
		<code>mi_medium: </code>
		<code> mi_medium. (("&amp;Medium"). ,  {}. (, $format_size_clicked))mi_medium. set_checked ()</code>
		<paragraph>
			<line_break></line_break> 
		</paragraph>
		<heading>
			<size>2</size>Cloning Menus
		</heading>
		<paragraph>In many cases, the context menu for a control is a subset of the main menu. You cannot add the same menu items to multiple menus, but you can clone a menu item or set of menu items. The following code demonstrates how to clone the 
			<bold>Format</bold> menu 
			<span>create</span>d previously and add it to the context menu of a 
			<bold>Label</bold>. 
		</paragraph>
		<code>dummy := 
			<local_variable>label_1_context_menu</local_variable>. get_menu_items. (mi_format. clone_menu)
		</code>
		<paragraph></paragraph>
	</paragraph>
</document>