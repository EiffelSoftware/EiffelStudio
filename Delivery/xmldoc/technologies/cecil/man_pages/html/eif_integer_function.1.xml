<document title="Reference for `eif_integer_function'" output="studio">
	<meta_data>
		<help><!-- This file has been generated by unroff 1. 0, 11/15/99 17:06:03. --><!-- Do not edit! --></help>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>SYNOPSYS
		</heading>
		<code>
			<bold>#include "eif_cecil. h"</bold>
			<bold>EIF_REFERENCE_FUNCTION eif_reference_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_INTEGER_FUNCTION eif_integer_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_CHARACTER_FUNCTION eif_character_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_REAL_FUNCTION eif_real_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_DOUBLE_FUNCTION eif_double_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_BOOLEAN_FUNCTION eif_boolean_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_POINTER_FUNCTION eif_pointer_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
			<bold>EIF_BIT_FUNCTION eif_bit_function (char *</bold> 
			<italic>name</italic>
			<bold>, int *</bold> 
			<italic>tid</italic>
			<bold>);</bold>
		</code>
		<heading>
			<size>2</size>DESCRIPTION
		</heading>These functions return the address of the Eiffel function of name
		<italic>name</italic> from the class, which type identifier is 
		<italic>tid</italic>.  
		<line_break></line_break>Use 
		<bold>eif_reference_function</bold> for an Eiffel function returning an Eiffel reference.  
		<line_break></line_break>Use 
		<bold>eif_integer_function</bold> for an Eiffel function returning an Eiffel integer.  
		<line_break></line_break>Use 
		<bold>eif_character_function</bold> for an Eiffel function returning an Eiffel character.  
		<line_break></line_break>Use 
		<bold>eif_real_function</bold> for an Eiffel function returning an Eiffel real.  
		<line_break></line_break>Use 
		<bold>eif_double_function</bold> for an Eiffel function returning an Eiffel double.  
		<line_break></line_break>Use 
		<bold>eif_boolean_function</bold> for an Eiffel function returning an Eiffel boolean.  
		<line_break></line_break>Use 
		<bold>eif_pointer_function</bold> for an Eiffel function returning an Eiffel pointer.  
		<line_break></line_break>Use 
		<bold>eif_bit_function</bold> for an Eiffel function returning an Eiffel bit.  
		<paragraph>If the visible exception is enabled, it raises an visible exception upon failure. </paragraph>
		<heading>
			<size>2</size>RETURN VALUE
		</heading>It returns NULL when it fails (function does not exist or is not visible). Otherwise, the address of the function is returned. 
		<heading>
			<size>2</size>NOTES
		</heading>The Eiffel function cannot be a C external. In this case, you must directly call the C routine.  
		<line_break></line_break>The return value is an address: to use it as a routine, you must call it with arguments or at least with ().  
		<line_break></line_break>No argument type checking is done. You may cast the address of an Eiffel routine, obtained with these functions, when calling it with real arguments. 
		<line_break></line_break>If the function returns an Eiffel reference, you must protect it with 
		<bold>eif_protect()</bold>.  
		<heading>
			<size>2</size>CONFORMANCE
		</heading>ISE Eiffel 4. 4 and later.  
		<heading>
			<size>2</size>COMPATIBILITY
		</heading>
		<line_break></line_break>
		<bold>eif_reference_function()</bold> is equivalent to
		<bold>eif_fn_ref()</bold>, which is deprecated.  
		<line_break></line_break>
		<bold>eif_integer_function()</bold> is equivalent to 
		<bold>eif_fn_int()</bold>,which is deprecated.  
		<line_break></line_break>
		<bold>eif_real_function()</bold> is equivalent to 
		<bold>eif_fn_float()</bold>,which is deprecated.  
		<line_break></line_break>
		<bold>eif_double_function()</bold> is equivalent to
		<bold>eif_fn_double()</bold>, which is deprecated.  
		<line_break></line_break>
		<bold>eif_character_function()</bold> is equivalent to
		<bold>eif_fn_char()</bold>, which is deprecated.  
		<line_break></line_break>
		<bold>eif_bit_function()</bold> is equivalent to 
		<bold>eif_fn_bit()</bold>,which is deprecated.  
		<line_break></line_break>
		<bold>eif_boolean_function()</bold> is equivalent to
		<bold>eif_fn_bool()</bold>, which is deprecated.  
		<line_break></line_break>
		<bold>eif_pointer_function()</bold> is equivalent to
		<bold>eif_fn_pointer()</bold>, which is deprecated.  
		<heading>
			<size>2</size>SEE ALSO
		</heading>
		<bold>eif_type_id</bold>(1), 
		<bold>eif_protect</bold>(1),
		<bold>eif_procedure</bold>(1).  Markup created by  1. 0, November 15, 1999. 
	</paragraph>
</document>