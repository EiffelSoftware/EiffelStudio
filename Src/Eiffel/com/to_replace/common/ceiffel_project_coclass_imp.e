indexing
	description: "CEIFFEL_PROJECT_COCLASS Implementation."
	legal: "See notice at end of class."
	status: "See notice at end of class."
	Note: "Automatically generated by the EiffelCOM Wizard."

class
	CEIFFEL_PROJECT_COCLASS_IMP

inherit
	CEIFFEL_PROJECT_COCLASS

creation
	make,
	make_from_pointer

feature {NONE}	-- Initialization

	make is
			-- Creation. Implement if needed.
		do
			create compiler_kernel.make
		end

	make_from_pointer (cpp_obj: POINTER) is
			-- Creation.
		do
			set_item (cpp_obj)
			make
		end

feature -- Access

	compiler_kernel: PROJECT_MANAGER
			-- Implementation.

	project_file_name: STRING is
			-- Full path to .epr file.
		do
			Result := compiler_kernel.project_file_name
		end

	ace_file_name: STRING is
			-- Full path to Ace file.
		do
			Result := compiler_kernel.ace_file_name
		end

	project_directory: STRING is
			-- Project directory.
		do
			Result := compiler_kernel.project_directory
		end
		
	is_valid_project: BOOLEAN is
			-- Is project valid?
		do
			Result := compiler_kernel.valid_project
		end

	is_compiled: BOOLEAN is
			-- Has system been compiled?
		do
			Result := compiler_kernel.is_compiled
		end
		
	project_has_updated: BOOLEAN is
			-- Has project been updated since last compilation?
		do
			Result := compiler_kernel.project_has_updated
		end
	
	last_exception: IEIFFEL_EXCEPTION_INTERFACE is
			-- Last exception raised
		do
			Result := compiler_kernel.last_exception
		end

	compiler: IEIFFEL_COMPILER_INTERFACE is
			-- Compiler.
		do
			Result := compiler_kernel.compiler
		end

	system_browser: IEIFFEL_SYSTEM_BROWSER_INTERFACE is
			-- System Browser.
		do
			Result := compiler_kernel.system_browser
		end

	project_properties: IEIFFEL_PROJECT_PROPERTIES_INTERFACE is
			-- Project Properties.
		do
			Result := compiler_kernel.project_properties
		end

	completion_information: IEIFFEL_COMPLETION_INFO_INTERFACE is
			-- Completion information
		do
			Result := compiler_kernel.completion_information
		end
		
	html_documentation_generator: IEIFFEL_HTML_DOCUMENTATION_GENERATOR_INTERFACE is
			-- html documentation generator
		do
			Result := compiler_kernel.html_doc_generator
		end
		
	compiler_support: IEIFFEL_SUPPORT_INTERFACE is
			-- compiler support
		do
			Result := compiler_kernel.compiler_support
		end

feature -- Basic Operations

	create_item is
			-- Initialize `item'
		do
			item := ccom_create_item (Current)
		end

	retrieve_eiffel_project (a_project_file_name: STRING) is
			-- Retrieve Eiffel Project
			-- `a_project_file_name' [in].	
		do
			compiler_kernel.retrieve_eiffel_project (a_project_file_name)
		end
		
	generate_new_eiffel_project (a_project_name: STRING; a_ace_file_name: STRING; a_root_class_name: STRING; a_creation_routine: STRING; a_project_directory: STRING) is
			-- Create new Eiffel project from scratch.
			-- `a_project_name' [in].	
			-- `a_ace_file_name' [in].	
			-- `a_root_class_name' [in].	
			-- `a_creation_routine' [in].	
			-- `a_project_directory' [in].	
		do
			compiler_kernel.generate_new_eiffel_project (a_project_name, a_ace_file_name, a_root_class_name, a_creation_routine, a_project_directory)
		end

	create_eiffel_project (a_ace_file_name: STRING; a_project_directory_path: STRING) is
			-- Create new Eiffel project.
			-- `a_ace_file_name' [in].	
			-- `a_project_directory_path' [in].	
		do
			compiler_kernel.create_eiffel_project (a_ace_file_name, a_project_directory_path)
		end

	create_in_memory_eiffel_project (bstr_project_directory: STRING) is
			-- Create new Eiffel project from scratch in memory (no need for ace file).
			-- `bstr_project_directory' [in].
		do
			compiler_kernel.create_in_memory_eiffel_project (bstr_project_directory)
		end

feature {NONE}	-- Externals

	ccom_create_item (eif_object: like Current): POINTER is
			-- Initialize `item'
		external
			"C++ [new ecom_EiffelComCompiler::CEiffelProject %"ecom_EiffelComCompiler_CEiffelProject_s.h%"](EIF_OBJECT)"
		end

indexing
	copyright:	"Copyright (c) 1984-2006, Eiffel Software"
	license:	"GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options:	"http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful,	but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the	GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
		]"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"
end -- CEIFFEL_PROJECT_COCLASS_IMP

