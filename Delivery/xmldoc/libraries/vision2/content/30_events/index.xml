<document title="Events">
	<meta_data>
		<help>
			<toc>
				<envision_location>Class Libraries\EiffelVision 2\EiffelVision Interface Content</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>  This cluster contains classes for event handling within Vision2. To  view the classes contained in the the events cluster click 
			<link>
				<url>/libraries/vision2/reference/interface/events/index.xml</url>
				<label>here</label>
			</link>. 
		</paragraph>
		<heading>
			<size>2</size>What is an event?
		</heading>
		<paragraph>  An event is considered to be an external action that occurs during a program's execution. Correctly dealing with events is an important part of developing  a Vision2 application. For example, if a user clicks on a button, you  will want to respond to this event by calling a routine that deals with  the request. Vision2 contains action sequences for all kinds of  widget events, to view the kind of events available to every widget,  click 
			<link>
				<url>../../reference/interface/events/ev_widget_action_sequences_chart.xml</url>
				<label>here</label>
			</link>. 
		</paragraph>
		<heading>
			<size>2</size>How do I connect to an event?
		</heading>
		<paragraph>  Every widget and item has an action sequence associated with it that  relates to some kind of event, for example an <link><url>../../reference/interface/widgets/primitives/ev_button_chart.xml</url><label>EV_BUTTON</label></link> has a  select_actions action sequence. This gets fired when the user  clicks/selects the button. To have a procedure called on this  event, you need to create an agent based on this procedure, and then add  this to the action sequence (via extend). For a more detailed description of agents and their uses click 
			<link>
				<url>/general/guided_tour/language/tutorial-12.xml</url>
				<label>here</label>
			</link>. 
		</paragraph>
		<paragraph>  An example of adding an agent to an action_sequence is as follows. </paragraph>
<code_block>
	<feature_name>button</feature_name>.<feature_name>select_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> print <symbol>(</symbol><string>"Button Clicked!%N"</string><symbol>)</symbol><symbol>)</symbol> 
</code_block>
		<paragraph>  All Vision2 action sequences inherit <link><url>../../reference/interface/events/ev_action_sequence_chart.xml</url><label>EV_ACTION_SEQUENCE</label></link> and  when it is called, all of the agents held within are fired, thus calling all of the procedures represented by the agents. The signature of any agent that you place in an action sequence must conform to those of the action sequences actual generic parameter. </paragraph>
		<paragraph>  When you want an agent to be called from a certain action sequence and  the signatures do not match, you may use 
			<link>
				<url>../../reference/interface/events/ev_action_sequence_chart.xml</url><anchor_name>f_force_extend</anchor_name>
				<label>force_extend</label>
			</link>, this will call  your agent but has no guarantees on the arguments passed to your  procedure. 
		</paragraph>
	</paragraph></document>
