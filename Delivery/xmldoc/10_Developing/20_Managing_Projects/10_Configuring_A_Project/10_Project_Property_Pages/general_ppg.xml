<document output="envision" title="General Property Page">
	<meta_data>
		<help>
			<toc>
				<envision_pseudo_name>10</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<table>
			<row>
				<cell>
					<paragraph>The General Property Page is used to configure all of your project(s) basic  compilation details.
						<line_break/>
					</paragraph>
					<heading>
						<size>2</size>General
					</heading>
					<paragraph>
						<bold>System Name</bold>
					</paragraph>
					<paragraph>The name of the output file that will hold the assembly manifest. Changing this  property will also change the Output File property.</paragraph>
					<paragraph>
						<bold>Default Namespace</bold>
					</paragraph>
					<paragraph>The root namespace for the output file. Cluster namespaces, then class  namespaces will be append to the default namespace to yeild their fully  qualified type names. </paragraph>
					<warning>
						<bold>Note</bold>: A namespaces must begin with an alpha  character and succeeded by and alphanumberical, underscore (_) or period (.).  The character following a period must also only be an alpha character.
					</warning>
					<paragraph>
						<bold>Root Class Name</bold>
					</paragraph>
					<paragraph>The name of the class that you want to be called on program startup. (For Class  Library and Precompile Library project types this option is not available).</paragraph>
					<paragraph>
						<bold>Creation Routine</bold>
					</paragraph>
					<paragraph>The name of the creation routine to be called to create and instance of the  specified root class name. (For Class Library and Precompile Library project  types this option is not available).
						<line_break/>
					</paragraph>
					<heading>
						<size>2</size>Precompiled Library
					</heading>
					<paragraph>
						<bold>Precompiled Library Path</bold>
					</paragraph>
					<paragraph> Path to precompiled library folder which contains the precomp.epr file.  Changing this property will also change the Precompiled File Name property. For  more information about precompiled libraries refer to Using Precompiled  Libraries.
						<paragraph>
							<bold>Precompiled File Name</bold>
						</paragraph>
						<paragraph>The file name of the precompiled library assembly that will be used at runtime.  If the selected precompile library is incompatible with the current version of  the compiler or is an invalid precompiled library, this property will remain  empty.
							<line_break/>
							<line_break/>
							<line_break/>
							<heading>
								<size>2</size>Output
							</heading>
							<paragraph>
								<bold>Output Type</bold>
							</paragraph>
							<paragraph>The type of application to build. There are six different project output types  to choose from:</paragraph>
							<list ordered="false">
								<item>  Console Application: Use this project output type if you intend to use the  Windows console to display output.  </item>
								<item>  Windows Application: Intented for project that do not require to output  information to the Windows console.</item>
								<item>  Class Library: Reusable library of classes. When compiling, all classes found  in the selected clusters will be compiled into the library. Class libraries  projects should not be referenced from other Eiffel ENViSioN! projects.  </item>
								<item>  Class Library with Root: Reusable library of classes. When compiling, only  those classes reachablefrom the root class will be compiled into the  library. Class libraries projects should not be referenced from other Eiffel  ENViSioN! projects.</item>
								<item>  Precompile Library: Reusable library of classes with additional compilation  information that other Eiffel ENViSioN! project can consume. When compiling,  all classes found in the selected clusters will be compiled into the library.  </item>
								<item>  Precompile Library with Root: Reusable library of classes with additional  compilation information that other Eiffel ENViSioN! project can consume. When  compiling, only those classes reachable from the root class will be compiled  into the library.</item>
							</list>
							<warning>
								<bold>Note</bold>: Precompile and Precompile with  Rootproject outputtypes require a rebuild for every compilation.
							</warning>
							<line_break/>
							<heading>
								<size>2</size>Assembly PrivateKey
							</heading>
							<paragraph>If you wish to protect your project from malicious attacks when released, then  you shouldsign your project. To do this make use of the following signing  key option. </paragraph>
							<paragraph>
								<bold>Signing Key</bold>
							</paragraph>
							<paragraph>This option allows you to add and existing private key or generate a new private  key for you project. The Browse... options will prompt for the location of an  existing private key. Generate... will prompt for the location where to  generate a private key to and then set that key as the one to use when  compiling.</paragraph>
							<paragraph>This option is only available in the Enterprise Edition.</paragraph>
							<seealso>
								<bold>See also</bold>
								<line_break/>
								<link>
									<url>project_configuration.htm</url>
									<label>Property Page Overview</label>
								</link>
								<line_break/>
								<link>
									<url>assembly_info.htm</url>
									<label>AssemblyInfo Property Page</label>
								</link>
							</seealso>
						</paragraph>
					</paragraph>
				</cell>
			</row>
		</table>
	</paragraph></document>