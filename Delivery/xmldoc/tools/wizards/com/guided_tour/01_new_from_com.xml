<document title="Creating a new COM component" output="studio">
	<meta_data>
		<help>
			<meta>
				<content>EiffelCOM</content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<content>EiffelCOM Wizard</content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<content>EiffelCOM Wizard, Guided Tour</content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<content>EiffelCOM Wizard, Guided Tour, Creating a new COM component</content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>1</size>Creating a new COM component
		</heading>The first tutorial describes creating a COM component from a COM definition file that is either an IDL file or a Type Library. The tutorial focuses on creating an in-process (DLL) component, called
		<italic>StringManipulator</italic>. The component exposes one interface
		<italic>IString</italic> that includes the functions 
		<italic>ReplaceSubstring</italic>and 
		<italic>PruneAll</italic> corresponding respectively to the features
		<code>
			<feature_name>
				<url>../../../../libraries/base/reference/kernel/string.html#f_replace_substring</url>
				<label>replace_substring</label>
			</feature_name>
		</code> and 
		<code>
			<feature_name>
				<url>../../../../libraries/base/reference/kernel/string.html#f_prune_all</url>
				<label>prune_all</label>
			</feature_name>
		</code> of the EiffelBase 
		<code>
			<class_name>STRING</class_name>
			<link>
				<url>../../../../libraries/base/reference/kernel/string.xml</url>
				<label>STRING</label>
			</link>
		</code>and the property 
		<italic>String</italic> that represents the manipulated string. The property can be set or read. Other languages will be able to access these features. 
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>
				<link></link> Launch the EiffelCOM Wizard (from the Start menu, open Programs then EiffelXX and click EiffelCOM Wizard)
			</item>
			<item>
				<link></link>Choose 
				<italic>Create anew project from a COM definition</italic>.
			</item>
			<item>
				<link></link>Click
				<italic>Next</italic>
			</item>
			<item>
				<link></link>Choose 
				<italic>Server code for a new component</italic>
			</item>
			<item>
				<link></link>Click
				<italic>Next</italic>
			</item>
			<item>
				<link></link>Click the top
				<italic>Browse</italic> button and open the file
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\string_manipulator.idl</italic>where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL50directory.
			</item>
			<item>
				<link></link>Click the bottom
				<italic>Browse</italic> button and select the directory where you want to create the project (later referenced as destination folder). Choose
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated</italic>where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL50directory. If you work on a Windows9x machine, please choose a directory with a shorter path, for example c:\string_manipulatorbecause Windows9x are unable to handle long path names.
			</item>
			<item>
				<link></link>Click
				<italic>Next</italic>
			</item>
			<item>
				<link></link>Choose
				<italic>Automation</italic>
			</item>
			<item>
				<link></link>Click
				<italic>Next</italic>
			</item>
			<item>
				<link></link>Click
				<italic>Finish</italic>
			</item>
			<item>
				<link></link>Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>
		<paragraph>
			<link></link>At the end of the processing the wizard automatically launches EiffelStudio with the generated project to help you navigate created Eiffel classes. You might want to look at the file 
			<italic>generated.txt</italic> in the destination folder, which contains a list of files generated by the wizard. The file 
			<italic>string_manipulator.log</italic> holds summary of the processing and error and warning messages.
		</paragraph>
		<paragraph>The deferred class 
			<code>
				<class_name>STRING_MANIPULATOR_COCLASS</class_name>
			</code> represents component functionality. It inherits from 
			<code>
				<class_name>ISTRING_INTERFACE</class_name>
			</code> that corresponds to the
			<italic>IString</italic> interface. It has one descendant 
			<code>
				<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name>
			</code> thatimplements the deferred features. The default implementation isempty.
		</paragraph>
		<heading>
			<size>2</size> implementing thecomponent
		</heading>
		<link></link> To do something moreinteresting than merely return an error to a client edit theimplementation of the 
		<code>
			<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name>
		</code> class. Thewizard would not overwrite this class in future executions. Thereis an implementation of the class in
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\server</italic>\.Copy this file over to
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated\server\component</italic>and freeze the project. Voila!, you have your first EiffelCOMcomponent up and running. 
		<paragraph> </paragraph>
		<tip>Tips:
			<line_break></line_break>
			<line_break></line_break> To develop an EiffelCOM component you need to set the registryentry MELT_PATH because the system is not launched from thedirectory containing the byte code (by default EIFGEN\W_code). TheEiffelCOM component client launches the server from its currentlocation and causes the server to crash if the MELT_PATH key doesnot setup properly. To put this value in your registry, create akey under HKEY_CURRENT_USER\SOFTWARE\ISE\Eiffel51 with the samename as the name of your project (e.g. 
			<italic>string_manipulator</italic>)and add the string value named MELT_PATH containing the path to thebyte code (.melted file). You will find an example of such entry inthe file 
			<italic>melted_path.reg</italic> in $ISE_EIFFEL\wizard\config. Editthis file as needed (replace 
			<italic>string_manipulator</italic> with thename of your system and change the path to point on the correctlocation using `\\' as directory separator) and then double clickon it to enter the information into the registry.
			<line_break></line_break>
			<line_break></line_break>
			<link></link>To test thecomponent, you need to register it first. Register an in-processcomponent via the 
			<italic>regsvr32</italic> utility using the followingsyntax: 
			<italic>regsvr32 system_name.dll</italic> where 
			<italic>system_name</italic> isthe name of the dll (e.g. string_manipulator). Register anout-of-process component using the following syntax:
			<italic>system_name.exe -Regserver</italic> where 
			<italic>system_name</italic> is thename of the component executable file.
			<line_break></line_break>
			<line_break></line_break>
			<link></link>To complete thistutorial you need to register the component with the followingcommand (run from a dos console): 
			<italic>regsvr32string_manipulator.dll</italic> and to enter the information in
			<italic>$ISE_EIFFEL\wizard\config\melted_path.reg</italic>. You have tochange the content of this file if you have not installed Eiffelunder C:\ and/or have used a different destination directory.
		</tip>
		<seealso>
			<link>
				<url>02_new_from_eiffel.xml</url>
				<label>Creating a new component from anEiffel Project</label>
			</link>
			<link>
				<url>03_accessing.xml</url>
				<label>Accessing a COMcomponent.</label>
			</link>
		</seealso>
		<paragraph> </paragraph>
	</paragraph>
</document>