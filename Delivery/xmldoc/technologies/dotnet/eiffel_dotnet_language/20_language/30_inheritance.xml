<document title="Inheritance">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Eiffel for .NET</envision_location>
				<envision_pseudo_name>30</envision_pseudo_name>
				<envision_title>Inheritance</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>
			<link>
				<url/>
				<label>Inheritance</label>
			</link>, along with 
			<link>
				<url/>
				<label>client/supplier</label>
			</link>, are the two relationships that can exist between classes.
		</paragraph>
		<paragraph>Inheritance lets us mirror in software the types of abstractions that are common in many problem domains, i.e., the more general to the more specialized. </paragraph>
		<paragraph>Inheritance also gives a way us to combine these abstractions.</paragraph>
		<paragraph>Inheritance allows us to make extensions and adaptations to existing software, while at the same time, leaving the original software unaltered.</paragraph>
		<heading>
			<size>2</size>The Eiffel Inheritance Model
		</heading>
		<paragraph>If class 
			<code>
				<class_name>B</class_name>
			</code> inherits from class 
			<code>
				<class_name>A</class_name>
			</code>, then:
		</paragraph>
		<list ordered="false">
			<item>Every feature of 
				<code>
					<class_name>A</class_name>
				</code> is also a feature of 
				<code>
					<class_name>B</class_name>
				</code>
			</item>
			<item>In any case in which an 
				<link>
					<url/>
					<label>instance</label>
				</link> of 
				<code>
					<class_name>A</class_name>
				</code> is called for, then an instance of 
				<code>
					<class_name>B</class_name>
				</code> will suffice.
			</item>
		</list>
		<paragraph>Flexibility and adaptability are key qualities of the Eiffel inheritance model. On an informal level, this means that, except as prevented by certain constraints, a class can inherit from a set of classes containing just about any other classes.</paragraph>
		<paragraph>Eiffel classes can be 
			<link>
				<url/>
				<label>effective</label>
			</link> or 
			<link>
				<url/>
				<label>deferred</label>
			</link>. If a class is effective, then it is completely implemented. As a result, it is possible to create and use 
			<link>
				<url/>
				<label>direct instances</label>
			</link> of an effective class at runtime.
		</paragraph>
		<paragraph>If a class is deferred, then it is not completely implemented. A class is deferred if it contains at least one 
			<link>
				<url/>
				<label>deferred feature</label>
			</link>. So, it is possible for you to mark a feature (and by consequence also its class) as deferred when you code it. This means that the specification for this class dictates that such a feature exists, but there is no implementation for the feature included in the class. As a result, there can be no direct instances of deferred classes at runtime. However, a class that inherits from a deferred class can implement, or effect, the deferred features. This results in an effective descendant to the deferred class. And it is possible to create direct instances of this effective descendant. Such instances would also be instances (albeit not direct instances) of the original deferred class.
		</paragraph>
		<paragraph>What this means to us as software producers, is that in any development effort, we have available a great number of classes which can serve as potential starting points. That is, classes that we could make parents to the classes we produce. And, those classes do not have to chosen from a strict dichotomy of classes which are either completely abstract or completely implemented. Inheritance from classes that are deferred but have some implemented features is both possible and encouraged. It reuses existing software and it reduces the opportunity for error.</paragraph>
		<paragraph>Consider the deferred class 
			<code>
				<class_name>COMPARABLE</class_name>
			</code> from the Eiffel Base Library. A portion of 
			<code>
				<class_name>COMPARABLE</class_name>
			</code> is shown below:
		</paragraph>
		<code_block>
deferred class
    COMPARABLE

feature -- Comparison

    infix "&lt;" (other: like Current): BOOLEAN is
            -- Is current object less than `other'?
        deferred
    end

    infix "&lt;=" (other: like Current): BOOLEAN is
            -- Is current object less than or equal to `other'?
        do
            Result := not (other &lt; Current)
        end

    infix "&gt;" (other: like Current): BOOLEAN is
            -- Is current object greater than `other'?
        do
            Result := other &lt; Current
        end

    infix "&gt;=" (other: like Current): BOOLEAN is
            -- Is current object greater than or equal to `other'?
        do
            Result := not (Current &lt; other)
        end

    is_equal (other: like Current): BOOLEAN is
            -- Is `other' attached to an object of the same type
            -- as current object and identical to it?
        do
            Result := (not (Current &lt; other) and not (other &lt; Current))
        end
</code_block>
		<paragraph>If you are producing a class that you wish to support basic comparison operators, like "&lt;" and "&gt;", you can have that class inherit from 
			<code>
				<class_name>COMPARABLE</class_name>
			</code>, which has features which correspond to those operators. The text for 
			<code>
				<class_name>COMPARABLE</class_name>
			</code> contains eight features. Seven of these are effective and one is deferred.
		</paragraph>
		<paragraph>So through inheritance from 
			<code>
				<class_name>COMPARABLE</class_name>
			</code>, your class, let's call it 
			<code>
				<class_name>WHATZIT</class_name>
			</code>, would now have these features available. But how would the features of 
			<code>
				<class_name>COMPARABLE</class_name>
			</code> know what it means to compare 
			<code>
				<class_name>WHATZIT</class_name>
			</code>s?
		</paragraph>
		<paragraph>Of course, it would have no way of knowing, so you must show it. And you do that by writing the implementation for "&lt;", the one deferred feature that 
			<code>
				<class_name>WHATZIT</class_name>
			</code> inherits from the 
			<code>
				<class_name>COMPARABLE</class_name>
			</code> class.
		</paragraph>
		<paragraph>When you look closely at the effective features of 
			<code>
				<class_name>COMPARABLE</class_name>
			</code>, you see that their implementations are ultimately based on "&lt;". If we were not able to inherit from multiple partially implemented classes, then we would be forced to implement many more features, a process which invites error, or, in the case of comparison, to move to a less appealing model.
		</paragraph>
		<heading>
			<size>2</size>The Inheritance Part of Classes in Eiffel
		</heading>
		<paragraph>Because the inheritance model has such flexibility, it must also have adaptability. A consequence of inheriting from multiple classes is that it would be possible to inherit multiple features with the same name ... and you remember from 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features.xml</url>
				<label>Adding Class Features</label>
			</link> that a class is not allowed to have more than one feature with the same name. A process called feature adaptation allows us to resolve these issues in an heir. Feature adaptation is also done for reasons other than resolving name clashes as well.
		</paragraph>
		<paragraph>Feature adaptation is an enabling capability, but it is also one that takes some study to understand fully.</paragraph>
		<paragraph>We will look at the types of feature adaptation that will serve most useful to you as you begin to produce Eiffel software.</paragraph>
		<paragraph>In 
			<link>
				<url>../../eiffel_dotnet_language/20_language/10_eiffel_classes.xml</url>
				<label>Eiffel Classes</label>
			</link> you saw where the inheritance part fits into the class structure. Shown below is a portion of class 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> from the Eiffel libraries. 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> is an effective class which implements the abstract notion of a 
			<code>
				<class_name>QUEUE</class_name>
			</code> (a deferred class) with an implementation based on the services provided by 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code> (an effective class).
		</paragraph>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
     QUEUE [G]
        undefine
            is_empty,
            copy,
            is_equal
        redefine
            linear_representation,
            prune_all,
            extend
        select
            item,
            put
        end
    LINKED_LIST [G]
        rename
           item as ll_item,
            remove as ll_remove,
            make as ll_make,
            remove_left as remove,
            put as ll_put
        export
            {NONE}
                all
            {ANY}
                writable,
                extendible,
                wipe_out,
                readable
        undefine
            fill,
            append,
            prune,
            readable,
            writable,
            prune_all,
            extend,
            force,
            is_inserted
        redefine
            duplicate,
            linear_representation
        select
            remove
        end
</code_block>
		<paragraph>Okay ... now calm down ... please. This is an example from a very highly-evolved and sophisticated library which is replete with software reuse. 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> has two parents and uses considerable feature adaptation. In fact, it uses every feature adaptation option available. The benefit is obvious, though. 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> class has only seven features actually coded. In total there are only 26 lines of instructions!
		</paragraph>
		<paragraph>In practice you can use inheritance, even multiple inheritance, to do some quite productive programming in Eiffel without having to write anything that looks like the inheritance part of 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> above.
		</paragraph>
		<paragraph>Regardless, let's break 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code>'s inheritance part into chunks and take a look at some of them.
		</paragraph>
		<heading>
			<size>3</size>Rename
		</heading>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
    LINKED_LIST [G]


        rename
            item as ll_item,
            remove as ll_remove,
            make as ll_make,
            remove_left as remove,
            put as ll_put
</code_block>
		<paragraph>As you might have already guessed, the rename part, introduced oddly enough by the keyword " 
			<code>
				<keyword>rename</keyword>
			</code>", is used to rename features.
		</paragraph>
		<paragraph>Specifically, it is used when an heir wants to use a feature from a parent, but wants to use it under a different name than that by which the parent knows it. So in the example, the feature known as 
			<code>
				<feature_name>item</feature_name>
			</code> in 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code> is perfectly usable in 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code>, but must be applied as 
			<code>
				<feature_name>ll_item</feature_name>
			</code>.
		</paragraph>
		<paragraph>This is common when your class inherits two different features with the same name from two different parents and you want to be able to use them both. Because you can only have one feature with a given name, then rename one of the features.</paragraph>
		<heading>
			<size>3</size>New Exports
		</heading>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
    LINKED_LIST [G]


        export
            {NONE}
                all
            {ANY}
                writable,
                extendible,
                wipe_out,
                readable
</code_block>
		<paragraph>The new exports part is introduced by the keyword " 
			<code>
				<keyword>export</keyword>
			</code>". This section allows you to change the export status of inherited features. Remember from 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features.html </url>
				<label>Adding Class Features</label>
			</link> that features become available (or not) to clients by their export status. Export status of immediate features is controlled in the feature clause. But here we are dealing with inherited features, so we control their status in the export part of the class's inheritance section. Any feature not mentioned will have the same export status as it did in the parent class.
		</paragraph>
		<paragraph>In this example, the keyword " 
			<code>
				<keyword>all</keyword>
			</code>" is used first to say that all features inherited form 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code> are unavailable to any clients (export to class 
			<code>
				<class_name>NONE</class_name>
			</code>). This is typical for a class like 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> in which the features important to the client come from the deferred parent, in this case 
			<code>
				<class_name>QUEUE</class_name>
			</code>, and the class 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code> is used only for implementation. But, it seems that also in this case, the producer felt differently about the features 
			<code>
				<feature_name>writable</feature_name>
			</code>, 
			<code>
				<feature_name>extendible</feature_name>
			</code>, 
			<code>
				<feature_name>wipe_out</feature_name>
			</code>, and 
			<code>
				<feature_name>readable</feature_name>
			</code>, and decided the allow clients of 
			<code>
				<class_name>ANY</class_name>
			</code> type to utilize these features inherited from 
			<code>
				<class_name>LINKED_LIST</class_name>
			</code>.
		</paragraph>
		<heading>
			<size>3</size>Undefine
		</heading>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
    LINKED_LIST [G]


        undefine
            is_empty,
            copy,
            is_equal

</code_block>
		<paragraph>Next, undefine ... it's probably not what you think. You might assume that undefine is a way to banish forever any inherited features that you just do not want to deal with. But what happens to features whose names are listed in an undefine clause is that they become deferred features in the heir. </paragraph>
		<paragraph>Undefine is useful if you inherit two different features of the same name from different parents, a situation you cannot live with. If you like one and you don't like the other, then you can undefine the one you don't like. The the only version you get is the one you like.</paragraph>
		<paragraph>Another way you might use undefine is in the case in which you actually want a feature to be deferred in an heir that was effective in a parent.</paragraph>
		<heading>
			<size>3</size>Redefine
		</heading>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
    LINKED_LIST [G]


        redefine
            linear_representation,
            prune_all,
            extend

</code_block>
		<paragraph>The redefine part lists the names of effective features for which the producer of the heir class would like to provide implementations that replace the inherited implementations.</paragraph>
		<paragraph>So, in this example the implementation for 
			<code>
				<feature_name>linear_representation</feature_name>
			</code>, for example, that 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> would have inherited from 
			<code>
				<class_name>QUEUE</class_name>
			</code> will not be used. Instead 
			<code>
				<class_name>LINKED_QUEUE</class_name>
			</code> implements its own version of 
			<code>
				<feature_name>linear_representation</feature_name>
			</code>.
		</paragraph>
		<note>
			<bold>Note:</bold> When a class implements a version of an inherited feature which was deferred in its parent, this is known as "effecting" the feature. Because features being effected are getting their first implementation, it is not necessary to list their names in the redefine part, or anywhere else in the inheritance part of the heir.
		</note>
		<heading>
			<size>3</size>Select
		</heading>
		<code_block>
class
    LINKED_QUEUE [G]
inherit
    LINKED_LIST [G]


           select
            remove
</code_block>
		<paragraph>The select part is used only under special circumstances. The case in which select is required involves a situation called "repeated" inheritance. Repeated inheritance occurs when an heir inherits more than once from the same ancestor. Usually this means it has two or more parents who have a common proper ancestor (but it can occur directly). The features from the common ancestor are inherited by each of the parents and passed on to the heir. The rules and effects of repeated inheritance occupy an entire chapter in the official Eiffel language reference and will not be reproduced here. Justunderstand at this point that it is sometimes necessary to use 
			<code>
				<keyword>select</keyword>
			</code> to provide the dynamic binding system with an unambiguous choice of features in the presence of polymorphic attachment.
		</paragraph>
		<paragraph>You should note also that repeated inheritance can and does occur often without causing any problem at all. In fact it happens in every case of multiple inheritance, due to the fact that all classes inherit from class ANY and receive its features as a result. The reason it is not a problem is that in the case that any feature makes it from the original common ancestor along multiple paths to the heir with its name and implementation still intact, it will arrive as only one feature heir. This is called sharing and nothing special needs to be done to make it happen.</paragraph>
		<heading>
			<size>2</size>Polymorphism
		</heading>
		<paragraph>It is time now to see another way in which inheritance helps build more extendible software.</paragraph>
		<paragraph>Assume that we have to build classes that model different types of polygons. We would do this by building a class for polygon which would model a garden-variety polygon, a multi-sided closed figure. But when we consider that there are specialized types of polygons, like triangles and rectangles, we realize that to support these specializations, we need classes for them as well. And this is an obvious opportunity for inheritance. All triangles and rectangles are polygons. So, we start with class 
			<code>
				<class_name>POLYGON</class_name>
			</code> and its proper descendants 
			<code>
				<class_name>TRIANGLE</class_name>
			</code> and 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>.
		</paragraph>
		<paragraph>So we can make declarations like:</paragraph>
		<code_block>
        my_polygon: POLYGON
        your_polygon: POLYGON
        my_triangle: TRIANGLE
        my_rectangle: RECTANGLE
        another_rectangle: RECTANGLE
</code_block>
		<paragraph>Assume these declarations are in force for all the examples this section on polymorphism.</paragraph>
		<paragraph>We saw in 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features.xml</url>
				<label>Adding Class Features</label>
			</link> that we can say that one class conforms to another if it is the same class or one of its proper descendants. Therefore POLYGON conforms to 
			<code>
				<class_name>POLYGON</class_name>
			</code>. Also, 
			<code>
				<class_name>TRIANGLE</class_name>
			</code> and 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> conform to 
			<code>
				<class_name>POLYGON</class_name>
			</code>. But, importantly, 
			<code>
				<class_name>POLYGON</class_name>
			</code> does not conform to 
			<code>
				<class_name>TRIANGLE</class_name>
			</code> or 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>. This makes sense intuitively, because we know all rectangles and triangles are polygons ... and we also know that not all polygons are rectangles.
		</paragraph>
		<heading>
			<size>3</size>Polymorphic Attachment
		</heading>
		<paragraph>These facts affect how assignments can work. Using the declarations above:</paragraph>
		<code_block>
        my_polygon := your_polygon              -- Is valid
        your_polygon := my_polygon              -- Is valid
        my_polygon := my_rectangle              -- Is valid
        my_polygon := my_triangle               -- Is valid
</code_block>
		<paragraph>but</paragraph>
		<code_block>
        my_rectangle := my_polygon              -- Is not valid
        my_triangle := my_polygon               -- Is not valid
</code_block>
		<paragraph>and of course</paragraph>
		<code_block>
        my_rectangle := my_triangle             -- Is not valid

</code_block>
		<paragraph>Consider now the assignment below which is valid.</paragraph>
		<code_block>
        my_polygon := my_rectangle
</code_block>
		<paragraph>After an assignment like this executes the entity 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> will be holding at runtime a reference to an instance of a type which is not a direct instance of its declared type 
			<code>
				<class_name>POLYGON</class_name>
			</code>. But conformance ensures us that, although it may not be a direct instance, it will indeed by an instance. (all rectangles are polygons).
		</paragraph>
		<paragraph>Depending upon how many different types of polygons get modeled in classes, the entity " 
			<code>
				<feature_name>my_polygon</feature_name>
			</code>" could be attached objects of may different types ... it could take on many forms. This in fact is the basis for the term "polymorphism"; having many forms. So we speak of "polymorphic attachment" as the process by which at runtime entities can hold references to objects which are not of the entity's declared type ... but they are of conforming types.
		</paragraph>
		<paragraph>Now let's see how we get some value from this.</paragraph>
		<heading>
			<size>3</size>Dynamic Binding
		</heading>
		<paragraph>Suppose that one of the features of 
			<code>
				<class_name>POLYGON</class_name>
			</code> is a query 
			<code>
				<feature_name>perimeter</feature_name>
			</code> which returns an instance's perimeter. The producer of 
			<code>
				<class_name>POLYGON</class_name>
			</code> may have implemented 
			<code>
				<feature_name>perimeter</feature_name>
			</code> as a function that computes the perimeter by adding up the lengths of all the sides. This approach is guaranteed to work for all polygons, and we can apply the 
			<code>
				<feature_name>perimeter</feature_name>
			</code> feature to any polygon. Let's print some perimeters:
		</paragraph>
		<code_block>
        print (my_polygon.perimeter)
        print (my_triangle.perimeter)
        print (my_rectangle.perimeter)
</code_block>
		<paragraph>
			<code>
				<class_name>TRIANGLE</class_name>
			</code> and 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> might have properties, expressed as queries, which as a part of their specialization, distinguish them from run-of-the-mill polygons. Two features of rectangles are 
			<code>
				<feature_name>width</feature_name>
			</code> and 
			<code>
				<feature_name>height</feature_name>
			</code> the lengths of the sides.
		</paragraph>
		<paragraph>Armed with these 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>-specific features, the producer of 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> may say,"Now I no longer have to depend upon that crude implementation of 
			<code>
				<feature_name>perimeter</feature_name>
			</code> that is inherited from 
			<code>
				<class_name>POLYGON</class_name>
			</code>. I can build an efficient 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>-specific implementation of 
			<code>
				<feature_name>perimeter</feature_name>
			</code>, based on the knowledge that for all 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>s perimeter = 2*(width+height)"
		</paragraph>
		<paragraph>To implement this specialized version of 
			<code>
				<class_name>perimeter</class_name>
			</code>, the producer of 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> must add the feature to the class, but also must list its name in the " 
			<code>
				<keyword>redefine</keyword>
			</code>" part of the 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>'s inheritance clause.
		</paragraph>
		<code_block>
class RECTANGLE
inherit
        POLYGON
            redefine
                perimeter
            end
     .
     .
feature
    perimeter: REAL is
            -- Sum of lengths of all sides
        do
            Result := 2 * (width + height)
        end

</code_block>
		<paragraph>You would expect then, that this version of perimeter would be executed in the following context:</paragraph>
		<code_block>
        print (my_rectangle.perimeter)
</code_block>
		<paragraph>But what makes this interesting is that even in the context below</paragraph>
		<code_block>
        my_polygon := my_rectangle
        print (my_polygon.perimeter)
</code_block>
		<paragraph>in which 
			<code>
				<feature_name>perimeter</feature_name>
			</code> is being applied to a entity declared as 
			<code>
				<class_name>POLYGON</class_name>
			</code>, the specialized version of 
			<code>
				<feature_name>perimeter</feature_name>
			</code> from 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> is being used. It would be impossible to ensure at compile time which version of 
			<code>
				<feature_name>perimeter</feature_name>
			</code> is most appropriate. So it must be done at runtime. This ability to choose the best version of a feature to apply, just at the moment it needs to be applied, is called "dynamic binding".
		</paragraph>
		<paragraph>Static typing tells us at compile time that it is safe to apply 
			<code>
				<feature_name>perimeter</feature_name>
			</code> to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> No matter which of the types of polygons is attached to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code>, there will be a 
			<code>
				<feature_name>perimeter</feature_name>
			</code> feature that will work.
		</paragraph>
		<paragraph>Dynamic binding tells us that when we apply 
			<code>
				<feature_name>perimeter</feature_name>
			</code>, we know that the most appropriate version of the feature will get applied at runtime.
		</paragraph>
		<heading>
			<size>3</size>Assignment Attempt
		</heading>
		<paragraph>Now let's add another situation. Consider the code below:</paragraph>
		<code_block>
        my_polygon := my_rectangle
        print (my_polygon.perimeter)
        print (my_polygon.width)                -- Is invalid
</code_block>
		<paragraph>We could apply 
			<code>
				<feature_name>perimeter</feature_name>
			</code> to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> and everything is fine ... we even get 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>'s specialized version of the feature. But it is invalid for us to try to apply 
			<code>
				<feature_name>width</feature_name>
			</code> to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> even though we feel (with rather strong conviction) that at this point in execution, 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> will be attached to an object of type 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>, and we know that 
			<code>
				<feature_name>width</feature_name>
			</code> is a valid query on 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>s.
		</paragraph>
		<paragraph>The reason follows. When we declared 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> as type 
			<code>
				<class_name>POLYGON</class_name>
			</code>, we made a deal that says that the only features that can be applied to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> are the features of 
			<code>
				<class_name>POLYGON</class_name>
			</code>. Remember that static typing guarantees us at compile time that at runtime there will be at least one version of the feature available that can be applied.
		</paragraph>
		<code_block>
        print (my_polygon.width)                -- Is invalid
</code_block>
		<paragraph>But in the case above, the guarantee cannot be made. 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> is declared with class 
			<code>
				<class_name>POLYGON</class_name>
			</code> which has no 
			<code>
				<feature_name>width</feature_name>
			</code> feature, despite the fact that some of its proper descendants might.
		</paragraph>
		<paragraph>Does this mean that we can never do 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> things with this instance again, once we have attached it to 
			<code>
				<feature_name>my_polygon</feature_name>
			</code>?
		</paragraph>
		<paragraph>No. There is a language facility called the "assignment attempt" which will come to our rescue. The assignment attempt will allow us safely to attach our instance back to an entity typed as 
			<code>
				<class_name>RECTANGLE</class_name>
			</code>. After doing so, we are free use 
			<code>
				<class_name>RECTANGLE</class_name>
			</code> features.
		</paragraph>
		<code_block>
        my_polygon := my_rectangle
        print (my_polygon.perimeter)
        another_rectangle ?= my_polygon
        print (another_rectangle.width)
</code_block>
		<paragraph>The assignment attempt uses the syntax "?=", versus the ":=" of assignment.</paragraph>
		<paragraph>This is significant ... as is the name assignment attempt. The reason is that it is possible in some context that 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> will be attached to something other than a rectangle when we do this:
		</paragraph>
		<code_block>
        another_rectangle ?= my_polygon
</code_block>
		<paragraph>If it were true that 
			<code>
				<feature_name>my_polygon</feature_name>
			</code> were attached to an instance of say 
			<code>
				<class_name>TRIANGLE</class_name>
			</code> when the assignment attempt above was executed, then 
			<code>
				<feature_name>another_rectangle</feature_name>
			</code> would be left as a 
			<code>
				<keyword>Void</keyword>
			</code> reference. As a consequence, it is prudent to check to see if the attachment has actually been made before trying to apply features. Applying a feature to a 
			<code>
				<keyword>Void</keyword>
			</code> reference will cause an exception. Almost always, assignment attempt will be used in the following manner:
		</paragraph>
		<code_block>
        my_polygon := my_rectangle
        print (my_polygon.perimeter)
        another_rectangle ?= my_polygon
        if another_rectangle /= Void then    -- Make sure assignment happened
            print (another_rectangle.width)

        end
</code_block>
	</paragraph></document>