/*
 * Jmakefile for Eiffel C library
 */

RUN_TIME = ../../run-time
SHARED_CLIB = ../shared
DPFLAGS = -I$(SHARED_CLIB) -I$(RUN_TIME) -I$(TOP)
CFLAGS = $(DPFLAGS)
YFLAGS = -d

SRCS = eiffel_c.c eif_err.c encode.c pretrieve.c date.c keyword.c \
	byte.c offset.c parser.y lexic.l infix.c prefix.c

/* The following file needs to be compiled both in workbench mode and in
 * final mode to get the correct macros definitions from the run-time.
 */
SMODE = pstore.c

LSRCS = $(SRCS) $(SMODE)

/*
 * Objects for final mode archive.
 */
OBJS = \
|expand f!$(SRCS) $(SMODE)!
	!f:\.[cyl]=.o \
-expand \\

/*
 * Objects for workbench mode archive.
 */
WOBJS = \
|expand f!$(SRCS)!
	!f:\.[cyl]=.o \
-expand
|expand f!$(SMODE)!
	w!f:\.[cyl]=.o \
-expand \\

/* How to build a 'w' file from a normal file. The library for the workbench
 * is built from w*.c files, which are linked from normal files. Dependencies
 * for w*.c files will be strong enough to force recompilation of a w*.o if the
 * original .o was to be rebuilt.
 */

>LN
>RM
|expand f!$(SMODE)!
w!f: !f
	$(RM) w!f
	$(LN) !f w!f
remove::
	$(RM) w!f

-expand

|expand f!$(SMODE)!
w!f:\.[cyl]=.o: w!f
	$(CC) -c $(JCFLAGS) -DWORKBENCH $*.c
	$(RM) $*.c

-expand

local_clean:: remove

NormalLibraryTarget(eiffel,$(LSRCS),$(OBJS))
NormalLibraryTarget(weiffel,$(LSRCS),$(WOBJS))
NormalParserTarget(libeiffel.a,lexic,parser)
DependTarget()

/* Since keyword.c is produced via gperf, and that program is not installed
 * on every machine, the file is supposed to be up-to-date if present.
 */
keyword.c: eiffel.gperf
	@if test -s keyword.c; then \
		touch $@; \
	else \
		echo "	gperf -p -t -l -k 1,'$$',4 eiffel.gperf > $@"; \
		gperf -p -t -l -k 1,'$$',4 eiffel.gperf > $@ ; \
	fi

infix.c: infix.gperf
	@if test -s infix.c; then \
		touch $@; \
	else \
		echo "  gperf -l -k '1,2,$' -N std_infix infix.gperf > $@"; \
		gperf -l -k '1,2,$$' -N std_infix infix.gperf > $@ ; \
	fi

prefix.c: prefix.gperf
	@if test -s prefix.c; then \
		touch $@; \
	else \
		echo "  gperf -l -k '1,2,$' -N std_prefix prefix.gperf > $@"; \
		gperf -l -k '1,2,$$' -N std_prefix prefix.gperf > $@ ; \
	fi

keyword.o: parser.h
eif_err.o: parser.h
