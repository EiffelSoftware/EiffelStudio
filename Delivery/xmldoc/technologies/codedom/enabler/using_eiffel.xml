<document title="Using Eiffel (to write ASP.NET pages)">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>
			<content>Inheritance</content>
		</heading>

		Eiffel handles inheritance in a different way than most languages. In C# or VB.NET the behavior of a newly introduced 
		member in a class hierarchy is defined as part of the member declaration itself (for example C# will precede the 
		member declaration with the keyword <italic>override</italic> to accomplish the same result as an Eiffel 
		<italic>redefine</italic> clause). In Eiffel, classes are equipped with an inheritance clause which centralizes all the 
		feature adaptations.
		
		<paragraph>
			As a result, ASP.NET Enabler introduces <bold>inheritance snippets</bold>. Each Eiffel ASP.NET page may include at 
			most one inheritance snippet. Such a snippet must start with the <bold>inherit</bold> keyword and may then list any 
			valid Eiffel feature adaptation.
		</paragraph>

		<heading>
			<size>2</size>
			<content>String and Array Manifest Constants</content>
		</heading>

		The Eiffel language supports using <bold>manifest constants</bold> in source code. The type of these constants is inferred by the
		 Eiffel compiler. There are two manifest constant types that require special attention on .NET: string and array. Because the Eiffel
		 and the .NET types differ, writing code using string or array manifest constants requires additional care.
		
		<list ordered="false">
			<item>
				<bold>Strings</bold>: Eiffel strings cannot be mapped directly to .NET strings because Eiffel strings 
				are <italic>mutable</italic>: an Eiffel string can be resized while the size of a .NET string is set for 
				the lifetime of the object. However, the Eiffel class <code><class_name>STRING</class_name></code> 
				defines conversion features that will automatically convert to and from a .NET string. So when the 
				compiler expects an object of type <italic>System.String</italic> where an object of type 
				<code><class_name>STRING</class_name></code> is used, it will automatically call the right 
				conversion routine.<line_break/>
				However if an instance of <code><class_name>STRING</class_name></code> is passed as an 
				argument to an overloaded .NET function that can accept both an instance of <italic>System.Object</italic> 
				or an instance of <italic>System.String</italic> then the compiler will produce an error since it has no means 
				to know which type the Eiffel object should be converted to (any Eiffel object converts to 
				<italic>System.Object</italic>). When this happens, the conversion function 
				<code><feature_name>to_cil</feature_name></code> must be explicitely called.
			</item>
			<item>
				<bold>Arrays</bold>: The exact same problem also arises with arrrays. Instances of the Eiffel class 
				<code><class_name>ARRAY</class_name></code> are different from instances of 
				<code><class_name>NATIVE_ARRAY</class_name></code> which correspond to the .NET array type. 
				There are however features in <code><class_name>ARRAY</class_name></code> that will convert 
				to and from .NET arrays. If an overloaded .NET function can take an argument of type <italic>System.Object</italic> 
				or <italic>System.Array</italic>, any instance of <code><class_name>ARRAY</class_name></code> given to 
				it must first be converted explicitly to a .NET array by calling the <code><feature_name>to_cil</feature_name></code> 
				function.
			</item>
		</list>

		<heading>
			<size>2</size>
			<content>Compilation and Timeouts</content>
		</heading>

		Eiffel compilations can take longer than the default timouts set in ASP.NET. In particular ASP.NET will run batch compilations on the entire directory 
		that is being accessed by IIS each time the time stamp of that directory changes. If the batch compilation takes longer than the 
		<italic>batchTimeout</italic> property defined in the machine wide configuration file (<italic>machine.config</italic>) then ASP.NET will 
		start another compilation just for the requested file. This can be quite resource intensive for the Web server and thus it might be 
		beneficial to increase the default value of 15 seconds for <italic>batchTimeout</italic>.
	</paragraph>
</document>
