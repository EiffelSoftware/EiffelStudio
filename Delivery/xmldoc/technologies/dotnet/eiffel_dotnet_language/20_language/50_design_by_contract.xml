<document title="Design by Contract and Assertions">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Eiffel for .NET</envision_location>
				<envision_pseudo_name>50</envision_pseudo_name>
				<envision_title>Design by Contract and Assertions</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>Motivation: Concerning Correctness
		</heading>
		<paragraph>When you produce an element of software, how do you know that what you produced is correct?</paragraph>
		<paragraph>This is a difficult question for anyone to answer. Informally speaking, correct software is software that does what it is supposed to do. That is what makes answering the question so tricky. Before you can have any idea whether the software is correct, you must be able to express what it is supposed to do ... and that proves to be quite difficult itself.</paragraph>
		<paragraph>In conventional software engineering, a document called a software specification is written in order to describe what it is that a piece of software is supposed to do. Writers of software specifications tend to pursue one of two approaches: the informal or the formal.</paragraph>
		<paragraph>Informal specifications attempt to describe software behavior in the natural languages with which humans communicate on a daily basis. There are problems with this approach. Natural language is not precise. Informal specifications are subject to interpretation and affected by the ambiguities, noise, and contradiction inherent in natural language.</paragraph>
		<paragraph>In order to avoid these problems, proponents of formal methods of specification turn to the most precise language they know: mathematics. It may be no exaggeration that the study of formal methods has produced more PhD's in Computer Science than it has well-specified software systems. Still the idea that the precision of mathematics can be brought to bear on the problem of specifying software is quite appealing. But, problems lurk here as well. Formal specifications are difficult and time-consuming to construct and verify against themselves, and most software engineers do not have a working knowledge of the mathematics required to work with formal specifications.</paragraph>
		<paragraph>There is one more significant problem with both of these approaches. Even if you have a very precise specification, expressed in elegant text and graphics, and placed carefully in an expensive ring binder, how do you know that the software product actually reflects that specification and vice versa? If either is changed, the other must be as well. This is the document synchronization problem.</paragraph>
		<heading>
			<size>3</size>Design by Contract to the Rescue
		</heading>
		<paragraph>Design by Contract (DbC) begins as an implementation of some of the ideas from formal methods and matures into a powerful way of thinking about software. And it does it in a way that is easy for programmers and managers to understand. DbC also puts the software specification into the software document itself which makes it checkable at runtime and eliminates the document synchronization problem.</paragraph>
		<heading>
			<size>2</size>Model for Software Correctness
		</heading>
		<paragraph>Design by Contract is built around a model for software correctness that is really pretty simple.</paragraph>
		<paragraph>Suppose there is software routine called 
			<code>
				<feature_name>s</feature_name>
			</code>. If we were going to test 
			<code>
				<feature_name>s</feature_name>
			</code>, we would probably devise some test inputs or test values to be in place when 
			<code>
				<feature_name>s</feature_name>
			</code> starts and then observe what things look like after 
			<code>
				<feature_name>s</feature_name>
			</code> completes. If they look the way we think they should then that leads us to believe that S is working correctly for those test inputs.
		</paragraph>
		<paragraph>We can generalize and formalize that process a bit, taking it back from testing an into design. If indeed we know what it means for 
			<code>
				<feature_name>s</feature_name>
			</code> to be correct, then we should be able to make a statement of any conditions that must be true prior to executing 
			<code>
				<feature_name>s</feature_name>
			</code>. That is, we will state the conditions required for it to be possible for 
			<code>
				<feature_name>s</feature_name>
			</code> to run correctly. We call this statement of preconditions for success 
			<code>
				<feature_name>s</feature_name>
			</code>'s 
			<link>
				<url/>
				<label>precondition</label>
			</link>.
		</paragraph>
		<paragraph>Likewise we should be able to make a statement of the conditions that will be true always if 
			<code>
				<feature_name>s</feature_name>
			</code> works correctly. This we call 
			<code>
				<feature_name>s</feature_name>
			</code>'s 
			<link>
				<url/>
				<label>postcondition</label>
			</link>.
		</paragraph>
		<paragraph>As an example, suppose 
			<code>
				<feature_name>s</feature_name>
			</code> accepted an argument of type 
			<code>
				<class_name>REAL</class_name>
			</code> and returned another 
			<code>
				<class_name>REAL</class_name>
			</code> which was the square root of the argument. The precondition for 
			<code>
				<feature_name>s</feature_name>
			</code> would be that the argument could not be less that zero, as there is no real square root for negative numbers. 
			<code>
				<feature_name>s</feature_name>
			</code>'s postcondition would be that the result multiplied by itself would yield the value of the original argument (give or take a little to allow for floating point error).
		</paragraph>
		<heading>
			<size>2</size>Assertions in Eiffel
		</heading>
		<paragraph>Each Eiffel feature which is a routine, i.e. a function or procedure, can support one assertion for a precondition and one for a postcondition. We saw where precondition and postcondition fit into the structure of the routine in 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features</url>
				<label>Adding Class Features</label>
			</link> . An assertion is expressed as one or more assertion clauses which are logically 
			<code>
				<keyword>and</keyword>
			</code>-ed together to produce the assertion. Assertions clauses are boolean expressions that evaluate to true or false.
		</paragraph>
		<paragraph>Let's look at another example. Assume you need to produce a class to model a time of day. Each instance of 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> would hold some particular time of day accurate to the second between 00:00:00 and 23:59:59 inclusive.
		</paragraph>
		<paragraph>As a producer, you would be faced with a decision concerning how to maintain the time internally in each instance. For the purpose of our example, let us consider two alternatives:</paragraph>
		<list ordered="true">
			<item>Keep three instance of 
				<code>
					<class_name>INTEGER</class_name>
				</code>. One each for hour, minute, and second.
			</item>
			<item>Keep one instance of 
				<code>
					<class_name>INTEGER</class_name>
				</code> representing the time of day as the number of seconds since 00:00:00.
			</item>
		</list>
		<paragraph>This would be an implementation issue for the producer, because it would not affect the services that 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> could offer clients. If we have a query called 
			<code>
				<feature_name>minute</feature_name>
			</code> the first alternative allows us simply to provide the value from storage. Whereas the second alternative will likely cause us to compute 
			<code>
				<feature_name>minute</feature_name>
			</code> each time it is requested. But the service looks and works the same for the client in either alternative.
		</paragraph>
		<paragraph>For now let us assume that we are using the first design alternative. In that case we would code class features for 
			<code>
				<feature_name>hour</feature_name>
			</code>, 
			<code>
				<feature_name>minute</feature_name>
			</code>, and 
			<code>
				<feature_name>second</feature_name>
			</code>.
		</paragraph>
		<code_block>
<keyword>feature</keyword><comment> -- Access</comment>

	<feature_name>hour</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
			<comment>-- Hour expressed as 24-hour value</comment>

	<feature_name>minute</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
			<comment>-- Minutes past the hour</comment>

	<feature_name>second</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
			<comment>-- Seconds past the minute</comment>
</code_block>
		<paragraph>Below is the code for a procedure 
			<code>
				<feature_name>set_second</feature_name>
			</code> which receives an argument of type 
			<code>
				<class_name>INTEGER</class_name>
			</code> and sets the value of the 
			<code>
				<feature_name>second</feature_name>
			</code> feature to the argurment.
		</paragraph>
		<code_block>
	<feature_name>set_second</feature_name> <symbol>(</symbol>s<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Set the second from `s'</comment>
		<keyword>do</keyword>
			<feature_name>second</feature_name> <symbol>:</symbol><symbol>=</symbol> s
		<keyword>end</keyword>
</code_block>
		<paragraph>The routine is simple enough, but there is a problem with it. Suppose a client calls 
			<code>
				<feature_name>set_second</feature_name>
			</code> with an argument whose value is invalid, say 3574. Our routine would just stuff this value into 
			<code>
				<feature_name>second</feature_name>
			</code> and we would end up with an instance of 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> which is invalid. In the days before Design by Contract, as soon as we recognized that this problem exists, we would go into "defensive programming" mode and code some " 
			<code>
				<keyword>if</keyword>
			</code>" statements inside the routine to validate the argument, before acting.
		</paragraph>
		<paragraph>Consider though what we can do with Design by Contract. We will add a precondition assertion to 
			<code>
				<feature_name>set_second</feature_name>
			</code> that expresses the need for valid arguments.
		</paragraph>
		<code_block>
	<feature_name>set_second</feature_name> <symbol>(</symbol>s<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Set the second from `s'</comment>
		<keyword>require</keyword>
			valid_argument_for_second<symbol>:</symbol> 0 &lt;<symbol>=</symbol> s <keyword>and</keyword> s &lt;<symbol>=</symbol> 59
		<keyword>do</keyword>
			<feature_name>second</feature_name> <symbol>:</symbol><symbol>=</symbol> s
		<keyword>end</keyword>
</code_block>
		<paragraph>The precondition is introduced by the keyword " 
			<code>
				<keyword>require</keyword>
			</code>". The text " 
			<code>
				<indexing_tag>valid_argument_for_second</indexing_tag>
			</code>" is the label for the assertion clause. The boolean expression "0 &lt;= 
			<code>
				<indexing_tag>s</indexing_tag>
			</code> and 
			<code>
				<indexing_tag>s</indexing_tag>
			</code> &lt;= 59" says that a good value for 
			<code>
				<indexing_tag>s</indexing_tag>
			</code> will be between 0 and 59 inclusive.
		</paragraph>
		<paragraph>Remember that the precondition specifies those things that must be true if 
			<code>
				<feature_name>set_second</feature_name>
			</code> has a chance of working correctly. As such, upon execution, the body of this routine will never be executed if an attempt is made to call it in a state that does not meet its precondition. Instead, the caller will incur a precondition violation exception. We will investigate more about what exceptions mean further in 
			<link>
				<url>60_exception_mechanism</url>
				<label>Exception Mechanism</label>
			</link>.
		</paragraph>
		<paragraph>So, what about a postcondition? We noted earlier that a postcondition should make a statement of what will be true in the case that the routine does its work correctly. For 
			<code>
				<feature_name>set_second</feature_name>
			</code> this means that after it finishes, the query 
			<code>
				<feature_name>second</feature_name>
			</code> should have the same value as the argument that was received from the caller. Below is the feature with the postcondition added.
		</paragraph>
		<code_block>
	<feature_name>set_second</feature_name> <symbol>(</symbol>s<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Set the second from `s'</comment>
		<keyword>require</keyword>
			valid_argument_for_second<symbol>:</symbol> 0 &lt;<symbol>=</symbol> s <keyword>and</keyword> s &lt;<symbol>=</symbol> 59
		<keyword>do</keyword>
			<feature_name>second</feature_name> <symbol>:</symbol><symbol>=</symbol> s
		<keyword>ensure</keyword>
			second_set<symbol>:</symbol> <feature_name>second</feature_name> <symbol>=</symbol> s
		<keyword>end</keyword>
</code_block>
		<paragraph>The postcondition is introduced by the keyword " 
			<code>
				<keyword>ensure</keyword>
			</code>". Here the expression " 
			<code>
				<feature_name>second</feature_name>
			</code> = 
			<code>
				<indexing_tag>s</indexing_tag>
			</code>" makes certain that the routine did actually do the necessary work to ensure that the value of 
			<code>
				<feature_name>second</feature_name>
			</code> matches the value of the argument received.
		</paragraph>
		<paragraph>As you look at the postcondition, you may be tempted to think that the one-line body of the routine is so simple as to make the postconditon unnecessary. To answer this concern we need to look again for a moment at software specification.</paragraph>
		<heading>
			<size>3</size>Specification of a Routine
		</heading>
		<paragraph>If we remove the instructions from a routine and leave its signature, header comment and assertions, we have a specification for the routine.</paragraph>
		<code_block>
	<feature_name>set_second</feature_name> <symbol>(</symbol>s<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Set the second from `s'</comment>
		<keyword>require</keyword>
			valid_argument_for_second<symbol>:</symbol> 0 &lt;<symbol>=</symbol> s <keyword>and</keyword> s &lt;<symbol>=</symbol> 59
		<keyword>ensure</keyword>
			second_set<symbol>:</symbol> <feature_name>second</feature_name> <symbol>=</symbol> s
		<keyword>end</keyword>
</code_block>
		<paragraph>This specification of 
			<code>
				<feature_name>set_second</feature_name>
			</code> tells us what is required of reuse consumers if they wish to use 
			<code>
				<feature_name>set_second</feature_name>
			</code> and what 
			<code>
				<feature_name>set_second</feature_name>
			</code> promises to do for them. Importantly, it does that without revealing how it does it does what it does.
		</paragraph>
		<paragraph>So, this specification view, officially called the contract view, is how consumers of class 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> would view the feature.
		</paragraph>
		<paragraph>If this is the specification, then haven't we put the cart before the horse? The answer is yes. We have done so to illustrate the problems that assertion-based specification can help solve.</paragraph>
		<paragraph>Instead of starting with a routine and adding a specification, we really want to start in accepted software engineering fashion with specification first, and then add implementation. Therefore, the specification you see above would exist before the implementation.</paragraph>
		<paragraph>Now back to the concern over whether the postcondition is redundant for this simple one-line routine. Obviously, if this specification exists first, then the postcondition must be there, and it would be silly to remove it later. But, more importantly, suppose that when the producer of the class decided on an implementation, he or she chose the second design alternative we mentioned above. This would mean that the internal state of an instance of 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> would be only one 
			<code>
				<class_name>INTEGER</class_name>
			</code> with the number of seconds since midnight. That would mean that the query 
			<code>
				<feature_name>second</feature_name>
			</code> would probably be a function that computed seconds from that one 
			<code>
				<class_name>INTEGER</class_name>
			</code> instead of an attribute.
		</paragraph>
		<paragraph>What would change in the specification of 
			<code>
				<feature_name>set_second</feature_name>
			</code>? Nothing. The implementation for the routine would be more complex, but what it does, setting the second in an instance of 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code>, would stay the same.
		</paragraph>
		<paragraph>In summary, the precondition and postcondition ensure for use that the routine will only execute if called in a state in which the precondition is true, and then will either complete in a state in which the postcondition is true, or cause a postcondition violation exception.</paragraph>
		<heading>
			<size>3</size>The Contract for a Routine
		</heading>
		<paragraph>Having assertions on its routines forms a contract between the 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code> class and all potential reuse consumers. The contract is much like a contract in business, with obligations and benefits for both parties.
		</paragraph>
		<list ordered="false">
			<item>The client's benefits are outlined in the postcondition. </item>
			<item>The client's obligations come from the precondition. </item>
			<item>The supplier's obligations are in the postcondition. </item>
			<item>The supplier's benefits come from the precondition. </item>
		</list>
		<paragraph>We can see the specifics of these by using 
			<code>
				<feature_name>set_second</feature_name>
			</code> as an example.
		</paragraph>
		<list ordered="false">
			<item>The client gets the desired value for seconds set in the instance.</item>
			<item>The client must provide an argument that is valid for seconds.</item>
			<item>The supplier must update the instance successfully.</item>
			<item>The supplier need not risk disaster attempting to process in an invalid state nor waste time validating the argument received from the client.</item>
		</list>
		<heading>
			<size>3</size>Valid State for Instances
		</heading>
		<paragraph>Assertions on 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code>'s routines gives us specification for each routine and guarantees that if the specification of a routine gets violated at runtime we will be served immediately with an exception. This will go a long way toward preventing invalid instances from going unnoticed in a running system and fouling up lots of other stuff.
		</paragraph>
		<paragraph>What will help even more is something called a 
			<link>
				<url/>
				<label>class invariant</label>
			</link>. Using the class invariant we are able to state what it means for an instance of a class to be valid, or as it is sometimes put, in a stable state.
		</paragraph>
		<paragraph>The class invariant is an assertion like precondition and postcondition, but there is only one per class. Check 
			<link>
				<url>../../eiffel_dotnet_language/20_language/10_eiffel_classes</url>
				<label>Eiffel Classes</label>
			</link> to see how the class invariant fits into the class structure.
		</paragraph>
		<paragraph>How would we code the class invariant for 
			<code>
				<class_name>TIME_OF_DAY</class_name>
			</code>? An instance would be valid if its hour were between 0 and 23 inclusive, minute were between 0 and 59 inclusive, and its second were between 0 and 59 inclusive. We can code the invariant as shown below.
		</paragraph>
		<code_block>
	<keyword>invariant</keyword>

		hour_valid<symbol>:</symbol> 0 &lt;<symbol>=</symbol> <feature_name>hour</feature_name> <keyword>and</keyword> <feature_name>hour</feature_name> &lt;<symbol>=</symbol> 23
		minute_valid<symbol>:</symbol> 0 &lt;<symbol>=</symbol> <feature_name>minute</feature_name> <keyword>and</keyword> <feature_name>minute</feature_name> &lt;<symbol>=</symbol> 59
		second_valid<symbol>:</symbol> 0 &lt;<symbol>=</symbol> <feature_name>second</feature_name> <keyword>and</keyword> <feature_name>second</feature_name> &lt;<symbol>=</symbol> 59
</code_block>
		<paragraph>The name invariant implies that the assertion can never be false ... and that's true up to a point. It's really more like, "it must be true at times when it really counts".</paragraph>
		<paragraph>At runtime the invariant must be true for an instance at anytime that the instance is available to clients. In general, this means that the invariant must be true before and after the execution of every exported routine.</paragraph>
		<paragraph>As with the assertions on routines, if ever the invariant is not true when it should be, then a class invariant violation occurs.</paragraph>
		<paragraph>Remember in the example above, that the features 
			<code>
				<feature_name>hour</feature_name>
			</code>, 
			<code>
				<feature_name>minute</feature_name>
			</code>, and 
			<code>
				<feature_name>second</feature_name>
			</code> are queries, but they could be either attributes or functions.
		</paragraph>
		<heading>
			<size>2</size>The Contract for a Class
		</heading>
		<paragraph>Earlier we saw the contract for a routine. Now we can define the contract for a class as the aggregation of the contracts for all its exported features, plus its class invariant.</paragraph>
		<paragraph>In Design by Contract we design based on these contracts. They are the specifications for the modules in our system. We work in a reuse-oriented world. Whenever we produce a class, we produce it with a comprehensive contract which serves as its specification. We build each class with the thought that it may eventually become reusable. </paragraph>
		<paragraph>When we are in our reuse consumer role, using existing classes, we tend not to look at the implementations for the classes we use. Instead we look at their contract views. It is there that we find the obligations and benefits of using each class.  </paragraph>
		<heading>
			<size>2</size>Contracts and Debugging
		</heading>
		<paragraph>We saw earlier that having contracts in the code tends to expose bugs at an early stage of development. It is possible selectively to turn off and on the runtime checking of assertions by changing project settings. Checking assertions does involve processing. More about turn off assertion checking in a moment.</paragraph>
		<paragraph>Having contracts on a class gives another advantage when the contract gets broken. The contract tells us whose fault it is. Whenever there is a violation of a precondition, postcondition, or class invariant then the software is out of specification. This situation is called a defect, or bug.</paragraph>
		<paragraph>Whose fault is it? If a precondition was violated, then a client class attempted to call a routine in a supplier, but made the call in a state that did not satisfy the supplier's precondition. Therefore the bug is in the client.</paragraph>
		<paragraph>If a postcondition was violated, then a client made a call in a state that did satisfy the supplier's precondition, but the supplier was unable to complete the work as agreed. Therefore the fault lies with the supplier.</paragraph>
		<paragraph>If a class invariant was violated, then the instance has been placed in an invalid state during the execution of a routine, and left that way when the processing completed. This caused the invariant violation. As with the postcondition violation, because the problem occurred while executing routines in the supplier, preconditions must have been met. The supplier then is to blame.</paragraph>
		<paragraph>Based on this knowledge, we can say that it is most practical first to turn off runtime checking of postconditions and invariants as we gain confidence in a class. Meaning of course, that we feel confident that any calls that meet preconditions will be properly processed. Then our only worry is that some deranged client will, with total disregard for our carefully crafted preconditions, make calls to our routines from invalid states. So, maybe we will leave precondition checking turned on for a while.</paragraph>
		<heading>
			<size>2</size>Contracts and Inheritance
		</heading>
		<paragraph>In the section titled 
			<link>
				<url>../../eiffel_dotnet_language/20_language/30_inheritance.xml</url>
				<label>Inheritance</label>
			</link> you saw that it was possible through inheritance to produce a new class that has all the features of an existing one. This is a very powerful notion, and could be dangerous. What would keep descendants from redefining inherited features with semantics that were totally different from those intended by the producer of the original class? Nothing if it were not for the contract.
		</paragraph>
		<paragraph>Simply speaking assertions on a parent class, preconditions, postconditions, and class invariants, all are inherited by the class's proper descendants.</paragraph>
		<paragraph>For class invariants, if any new invariants are coded in an heir, they will be added to those inherited from the parent, using a non-strict version of logical "and" (We will define non-strict booleans in Writing Assertions below).</paragraph>
		<paragraph>That is simple enough. And the situation is also simple for effective routines inherited and left unchanged ... the contracts stand as written.</paragraph>
		<paragraph>From our example above you may have gotten the idea that contracts are really useful only for effective routines. Such is not the case. In fact, specifying a contract on a deferred routine is really a powerful notion. It says not only that effective descendants must provide an implementation for this routine, but also that there is a contract that must be satisfied. Effecting or redefining a routine in a descendant class will not make the contract go away. Here is an feature from the Base Library deferred class 
			<code>
				<class_name>ACTIVE</class_name>
			</code> which models data structures with a current item, and is an ancestor to many effective container type classes.
		</paragraph>
		<code_block>
<keyword>feature</keyword> <comment>-- Element change</comment>

	<feature_name>replace</feature_name> <symbol>(</symbol>v<symbol>:</symbol> <class_name>G</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Replace current item by `v'.</comment>
		<keyword>require</keyword>
			writable<symbol>:</symbol> <feature_name>writable</feature_name>
		<keyword>deferred</keyword>
		<keyword>ensure</keyword>
			item_replaced<symbol>:</symbol> <feature_name>item</feature_name> <symbol>=</symbol> v
		<keyword>end</keyword>
</code_block>
		<paragraph>Feature 
			<code>
				<feature_name>replace</feature_name>
			</code> carries the semantics necessary for replacing an item in an 
			<code>
				<class_name>ACTIVE</class_name>
			</code>. It does not, however provide an implementation. All implementers must produce versions of 
			<code>
				<feature_name>replace</feature_name>
			</code> that satisfy the contract specified here.
		</paragraph>
		<paragraph>It actually is possible to alter a feature assertion in an effected or redefined version(technically its a replacement of the original version):</paragraph>
		<list ordered="false">
			<item>The precondition can only become weaker than in the inherited contract.</item>
			<item>The postcondition can only become stronger than in the inherited contract.</item>
		</list>
		<paragraph>These rules are imposed as a consequence of the effect of effected or redefined routines on polymorphism and dynamic binding. But, you can understand them from an intuitive viewpoint, if you reconsider the business contract analogy. Suppose a contractor makes a deal with a client to do certain work (represented by the postcondition). Part of the deal might be that the client agrees to have a site ready by a certain date (represented by the precondition). The contractor represents the parent class in the analogy. Now suppose the contractor brings in a subcontractor (representing the heir class) to do a portion of the work. The subcontractor cannot force the client to change the date that the site is to be ready to an earlier date (no strengthing of the precondition). The deal with the client was made by the contractor and so no new or stronger requirements can be imposed by the subcontractor. Likewise the subcontractor must provide at least as much work as was bargained for by the contractor, but may promise to provide more if appropriate (strengthing of postcondition is allowed.)</paragraph>
		<paragraph>In Writing Assertions below you will see the syntax for weaking preconditions and strengthening postconditions.</paragraph>
		<heading>
			<size>2</size>Unfinished Business
		</heading>
		<paragraph>In the section 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features</url>
				<label>Adding Class Features</label>
			</link>, we promised to explain two issues during this discussion of Design by Contract.
		</paragraph>
		<heading>
			<size>3</size>Short Routines
		</heading>
		<paragraph>One of these is the tendency of mature Eiffel programmers to write routines that are quite short. It should be clear by now that we wish to build a contract on each routine. The contract describes the semantics of the routine in a declarative fashion. In other words, it tells what the routine does, without giving an indication of how it does it.</paragraph>
		<paragraph>Try to imagine giving a declarative description of a routine that was 50 lines long. Hardly possible. So decomposition of complex computations into chunks small enough to describe with assertions is what gets done.</paragraph>
		<heading>
			<size>3</size>Command/Query Separation
		</heading>
		<paragraph>In 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features</url>
				<label>Adding Class Features</label>
			</link>, we saw that we can categorize features as either queries or commands. A query will ask a question or make an observation about an instance. A command will tell the instance to take some action which may result in changing the instances internal state.
		</paragraph>
		<paragraph>We said that when program routines, that those routines should either be commands or queries but not both. Importantly, asking a question about an instance should not change the instance. Likewise, taking an action that changes the state of an instance should not return a result.</paragraph>
		<paragraph>Here's the rationale. In a routines postcondition we use boolean expressions to ensure that the routine has done its job properly. Likewise, class invariants, which define the valid state for instances, are written as boolean expressions. In both cases we may use the features of the class which are queries to ask about an instances current state. </paragraph>
		<paragraph>If a query that we use in an assertion were to change the state of the instance, then the result we received would be invalid as soon as we received it. </paragraph>
		<paragraph>Therein lies the primary reasoning behind command/query separation. You cannot reason about the integrity of an object if the act of asking a question changes the object.</paragraph>
		<heading>
			<size>2</size>Writing Assertions
		</heading>
		<paragraph>You have seen fairly typical assertions written in the examples above. Study the classes in the libraries to see some excellent working examples. There are a couple of things that need to be covered.</paragraph>
		<heading>
			<size>3</size>Non-Strict Booleans
		</heading>
		<paragraph>One is that, as you can probably imagine, it is not a good thing to cause an exception during the process of checking an assertion. One of the most common ways to cause such an exception is to apply a feature to a Void reference.</paragraph>
		<paragraph>The way to avoid this is to use the non-strict booleans "
			<code>
				<keyword>and then</keyword>
			</code>" and "
			<code>
				<keyword>or else</keyword>
			</code>". These forms of "
			<code>
				<keyword>and</keyword>
			</code>" and "
			<code>
				<keyword>or</keyword>
			</code>" do not force the checking of all conditions. As soon as a determination can be made, they stop checking. It is typical to see "
			<code>
				<keyword>and then</keyword>
			</code>" used to avoid applying a feature to a void reference in preconditons. Below is a creation procedure that uses a non-strict boolean in its precondition.
		</paragraph>
		<code_block>
	<feature_name>make</feature_name> <symbol>(</symbol>a_nm<symbol>:</symbol> <class_name>STRING</class_name>; a_offset<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Initalize with name `a_nm' and utcoffset `a_offset'</comment>
		<keyword>require</keyword>
			name_not_empty<symbol>:</symbol> a_nm <symbol>/<symbol>=</symbol></symbol> Void <keyword>and</keyword> <keyword>then</keyword> <keyword>not</keyword> a_nm.<feature_name>is_empty</feature_name>
			offset_valid<symbol>:</symbol> a_offset &gt;<symbol>=</symbol> -12 <keyword>and</keyword> a_offset &lt;<symbol>=</symbol> 12
		<keyword>do</keyword>
			<feature_name>name</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>clone </feature_name><symbol>(</symbol>a_nm<symbol>)</symbol>
			<feature_name>utcoffset</feature_name> <symbol>:</symbol><symbol>=</symbol> a_offset
		<keyword>ensure</keyword>
			name_initialized<symbol>:</symbol> <feature_name>name</feature_name>.<feature_name>is_equal</feature_name> <symbol>(</symbol>a_nm<symbol>)</symbol>
			utcoffset_initialized<symbol>:</symbol> <feature_name>utcoffset</feature_name> <symbol>=</symbol> a_offset
		<keyword>end</keyword>
</code_block>
		<heading>
			<size>3</size>Replacing Inherited Feature Assertions
		</heading>
		<paragraph>To replace a precondition on a feature you are effecting or redefining, you use the "
			<code>
				<keyword>require</keyword>
			</code> 
			<code>
				<keyword>else</keyword>
			</code>" keywords to introduce new conditions. These conditions will be logically "
			<code>
				<keyword>or</keyword>
			</code>-ed" with the original precondition to form an new one.
		</paragraph>
		<paragraph>Likewise use "<code><keyword>and</keyword>
			</code> 
			<code>
				<keyword>then</keyword>
			</code>" to add conditions to a postcondition. The added conditions will be "
			<code>
				<keyword>and</keyword>
			</code>-ed" to the original.
		</paragraph>
		<paragraph>Below is an example of weakening a precondition. The first feature shown is from class 
			<code>
				<class_name>DYNAMIC_CHAIN</class_name>
			</code> in the Base Library.
		</paragraph>
		<code_block>
	remove_left <keyword>is</keyword>
			<comment>-- Remove item to the left of cursor position.</comment>
			<comment>-- Do not move cursor.</comment>
		<keyword>require</keyword>
			<feature_name>left_exists</feature_name><symbol>:</symbol> index &gt; 1
		<keyword>deferred</keyword>
		<keyword>ensure</keyword>
			new_count<symbol>:</symbol> <feature_name>count</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>count</feature_name> - 1
			new_index<symbol>:</symbol> <feature_name>index</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>index</feature_name> - 1
		<keyword>end</keyword>
</code_block>
		<paragraph>The next feature is from 
			<code>
				<class_name>DYNAMIC_LIST</class_name>
			</code>, a proper descendant of 
			<code>
				<class_name>DYNAMIC_CHAIN</class_name>
			</code>. 
			<code>
				<class_name>DYNAMIC_LIST</class_name>
			</code> weakens the precondition it inherited from 
			<code>
				<class_name>DYNAMIC_CHAIN</class_name>
			</code>. Originally in 
			<code>
				<class_name>DYNAMIC_CHAIN</class_name>
			</code>, "
			<code>
				<feature_name>index</feature_name>
			</code> &gt; 1" was required for 
			<code>
				<feature_name>remove_left</feature_name>
			</code>. In 
			<code>
				<class_name>DYNAMIC_LIST</class_name>
			</code> either "
			<code>
				<feature_name>index</feature_name>
			</code> &gt; 1" or "
			<code>
				<keyword>not</keyword>
			</code> 
			<code>
				<feature_name>before</feature_name>
			</code>" (or both) will suffice.
		</paragraph>
		<code_block>
	<feature_name>remove_left</feature_name> <keyword>is</keyword>
			<comment>-- Remove item to the left of cursor position.</comment>
			<comment>-- Do not move cursor.</comment>
		<keyword>require</keyword> <keyword>else</keyword>
			not_before<symbol>:</symbol> <keyword>not</keyword> <feature_name>before</feature_name>
		<keyword>deferred</keyword>
		<keyword>end</keyword>
</code_block>
		<heading>
			<size>2</size>Not Writing Assertions
		</heading>
		<paragraph>Let's close this discussion of Design by Contract with one more interesting and point to make about assertions. The precondition and postcondition parts of a routine are optional, as you may remember from 
			<link>
				<url>../../eiffel_dotnet_language/20_language/20_adding_class_features</url>
				<label> Adding Class Features</label>
			</link>. Suppose you write a routine and do not code either precondition or postcondition. You might be tempted to think that you have simply written a routine that has no contract. But, that would not be the case.
		</paragraph>
		<paragraph>The contract exists, even though you do not code it explicitly. If it were written out, it would look as follows.</paragraph>
		<code_block>
	<feature_name>my_routine</feature_name> <keyword>is</keyword>
			<comment>-- My descriptive header comment</comment>
		<keyword>require</keyword>
			True
		<keyword>ensure</keyword>
			True
		<keyword>end</keyword>
</code_block>
		<paragraph>What does this mean? It means that you have selected the weakest possible precondition and postcondition for your routine. Of course, this may be perfectly valid under some circumstances.</paragraph>
		<paragraph>Just understand that if your routine could speak, it would be telling you, "I can always work successfully without any particular guarantees from you at all. On the other hand, I won't promise you any particular results when I get done."</paragraph>
	</paragraph></document>
