
EiffelWeasel Summary
====================


Usage:

   eweasel [-help] [-keep {all | passed | failed}] [-clean] [-filter FILTER] 
	[-define name value ...] 
	-init init_control_file -catalog test_catalog -output test_suite_dir

	Where filter may be one of the following:

		'test <test-name>'
		'kw <test-keyword>'

Initial test suite control file instructions:
	
	define <name> <value>
	define_directory <name> <path> <subdir1> <subdir2> ...
	define_file <name> <path> [<subdir1> <subdir2> ...] <filename>
	undefine <name>
	
	include <directory-name> <file-name>
	if <name> <controlled_instruction>

Test catalog instructions:

	if NAME <catalog-instruction>
	if not NAME <catalog-instruction>
	
	source_path <directory-name>
	test <test-name> <source-dir-last-comp> <ctrl-file> [<keyword> ...]
		
		Special keywords: manual skip

Test control file instructions:

	include <directory-name> <file-name>
	
	if <name> <controlled_instruction>
	if not <name> <controlled_instruction>
	
	test_name <name>
	test_description <description>
	system <system-name>
	ace <file-name>
	cpu_limit <limit>
	
	define <name> <value>
		
		Pre-defined substitution variables:
	
		$SOURCE		Test source directory
		$TEST		Test directory created when test is run
		$CLUSTER	Directory where class text files are copied
		$OUTPUT		Directory for Eiffel and C compile output
				and system execution output
		$EXEC_WORK	Directory with workbench executable
		$EXEC_FINAL	Directory with finalized executable
		
	undefine <name>
	define_directory <name> <path> <subdir1> <subdir2> ...
	define_file <name> <path> [<subdir1> <subdir2> ...] <filename>
	setenv <name> <value>
	
	copy_bin <source-file> <dest-directory> <dest-file>
	copy_file <absolute-path-source-file> <dest-directory> <dest-file>
	copy_raw <source-file> <dest-directory> <dest-file>
	copy_sub <source-file> <dest-directory> <dest-file>
	delete <dest-directory> <dest-file>
	
	compile_melted [<output-file-name>]
	compile_frozen [<output-file-name>]
	compile_final [<output-file-name>]
	compile_final_keep [<output-file-name>]
	
	cleanup_compile
	abort_compile
	exit_compile
	resume_compile
	
	compile_result <result>

	    <result> can be (use NONE for <class> if no specific class):

		syntax_error  { <class> <line-number> ";" ... }+
		validity_error { <class> <validity-code-list> ";" ...}+
		validity_warning { <class> <validity-code-list> ";" ...}+
		ok

	c_compile_work  [<output-file-name>]
	c_compile_final [<output-file-name>]
	c_compile_result <result>
	
	execute_work <input-file> <output-file> [<arg1> <arg2> ...]
	execute_final <input-file> <output-file> [<arg1> <arg2> ...]
	
		Use NONE for <input-file> if no input needed.

	execute_result <result>

	    <result> can be:

		ok
		failed
		failed_silently
		completed_but_failed

	append_output <output-file>
	compare <output-file> <correct-output-file>
	
	manual_check
	test_end
