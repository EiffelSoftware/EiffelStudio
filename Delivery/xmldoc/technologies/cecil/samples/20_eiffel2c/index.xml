<document title="CECIL - Eiffel to C" output="studio">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>array
		</heading>
		<paragraph>This example shows how to create a C array from an existing Eiffel array. </paragraph>
		<paragraph>After you have done the appropriate steps to compile the example, you will get a `cecil.exe' on windows, or `cecil' on Unix. </paragraph>
		<paragraph>Launch the program and you will be prompted for 10 integers that will be inserted in an Eiffel array, it will then initialize the C array and display it. </paragraph>
		<paragraph>A typical output will be:</paragraph>
		<code_block>$ ./cecilThis example create n array on the Eiffel side and print it on the C sideEnter 10 integers:12345678910Displaying from C@1 = 1@2 = 2@3 = 3@4 = 4@5 = 5@6 = 6@7 = 7@8 = 8@9 = 9@10 = 10</code_block>
		<heading>
			<size>2</size>object
		</heading>This example shows the Eiffel memory management and all issues when passing an Eiffel object reference to C. In the example, you can edit the file `root_class.e' to modify the example:
		<code_block>--give_to_c (o1)give_to_c_by_pointer ($o1) -- Choose the way you pass it</code_block>When you choose the firt possibility (commented by default), give_to_c will use the CECIL API eif_adopt to keep a reference on the Eiffel object. When you choose the second possibility, give_to_c_by_pointer will use the CECIL API eif_protect to keep a reference on the Eiffel object. Until forget_from_c is called from the C side, the object o1 will not be collected since we have protected it through the call to give_to_c or give_to_c_by_pointer. At the end after the object o1 is collected, we try to perform an operation on it which will fail with a call on void target exception. A typical output will be:
		<code_block>$ cecilCreating o1Object string is o1Give it to CLosing reference to initial o1 from EiffelCollecting...Display new o1:Object string is o2Display o1 given to C:Object string is o1Losing reference from CLosing reference from EiffelCollecting...An Eiffel object of type OBJECT is collectedOld o1 forgot from both C and Eiffel:Raise a Void exception..cecil: system execution failed.Following is the set of recorded exceptions:-------------------------------------------------------------------------------Class / Object Routine Nature of exception Effect-------------------------------------------------------------------------------ROOT_CLASS make @26 display:&lt;30068030&gt; Feature call on void target. Fail-------------------------------------------------------------------------------ROOT_CLASS make @26&lt;30068030&gt; Routine failure. Fail-------------------------------------------------------------------------------ROOT_CLASS root's creation&lt;30068030&gt; Routine failure. Exit-------------------------------------------------------------------------------An Eiffel object of type OBJECT is collected</code_block>
		<heading>
			<size>2</size>string
		</heading>This example shows how to create a C string from an existing Eiffel string. After you have done the appropriate steps to compile the example, you will get a `cecil.exe' on windows, or `cecil' on Unix. Launch the program and you will be prompted for a string from Eiffel and a C string will be created and display. A typical output will be:
		<code_block>$ cecilEnter a string to convert into a C string:Hello World!Here is the C string:Hello World!</code_block>
	</paragraph></document>