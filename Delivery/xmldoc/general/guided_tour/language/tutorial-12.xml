<document title="11 Agents">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>92</envision_pseudo_name>
				<envision_title>Agents</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Our last mechanism, agents, adds one final level of expressive power to the framework describe so far.  Agents apply object-oriented concepts to the modeling of operations.</paragraph>
		<heading>
			<size>2</size>
			<content>Objects for operations</content>
		</heading>
		<paragraph>Operations are not objects; in fact, object technology starts from the decision to separate these two aspects, and to choose object types, rather than the operations, as the basis for modular organization of a system, attaching each operation to the resulting modules -- the classes.  </paragraph>
		<paragraph>In a number of applications, however, we may need objects that 
			represent operations, so that we can include them in object structures that some other piece of the software will later traverse to uncover the operations and, usually, execute them.  Such "operation wrapper" objects, called agents, are useful in a number of application areas such as:
		<line_break/>
		<list ordered="false">
			<item> GUI (Graphical User Interface) programming, where we may associate an agent with a certain event of the interface, such as a mouse click at a certain place on the screen, to prescribe that if the event occurs -- a user clicks there -- it must cause execution of the agent's associated operation.  </item>
			<item> Iteration on data structures, where we may define a general-purpose routine that can apply an arbitrary operation to all the elements of a structure such as a list; to specify a particular operation to iterate, we will pass to the iteration mechanism an agent representing that operation.  </item>
			<item> Numerical computation, where we may define a routine that computes the integral of any applicable function on any applicable interval; to represent that function and pass its representation to the integration routine, we will use an agent.  </item>
		</list>
		</paragraph>
		<paragraph>Operations in Eiffel are expressed as routines, and indeed every agent will have an associated routine.  Remember, however, that the fundamental distinction between objects and operations remains: an agent is an object, and it is not a routine; it represents a routine.  As further evidence that this is a proper data abstraction, note that the procedure 
			<code>
				<feature_name>call</feature_name>
			</code>, available on all agents to call the associated routine, is only one of the features of agents.  Other features may denote properties such as the class to which the routine belongs, its precondition and postcondition, the result of the last call for a function, the number of arguments.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Building an agent</content>
		</heading>
		<paragraph>In the simplest form, also one of the most common, you obtain an agent just by writing</paragraph>
<code_block>
<keyword>agent</keyword> <feature_name>r</feature_name>
</code_block>
		<paragraph>where 
			<code>
				<feature_name>r</feature_name>
			</code> is the name of a routine of the enclosing class.  This is an expression, which you may assign to a writable entity, or pass as argument to a routine.  Here for example is how you will specify event handling in the style of the EiffelVision 2 GUI library:
		</paragraph>
<code_block>
<feature_name>your_icon</feature_name>.<feature_name>click_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>your_routine</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>This adds to the end of 
			<code>
				<feature_name>my_icon</feature_name>.<feature_name>click_actions</feature_name>
			</code> -- the list of agents associated with the "click" event for 
			<code>
				<feature_name>my_icon</feature_name>
			</code>, denoting an icon in the application's user interface -- an agent representing 
			<code>
				<feature_name>your_routine</feature_name>
			</code>.  Then when a user clicks on the associated icon at execution, the EiffelVision 2 mechanisms will call the procedure 
			<code>
				<feature_name>call</feature_name>
			</code> on every agent of the list, which for this agent will execute 
			<code>
				<feature_name>your_routine</feature_name>
			</code>.  This is a simple way to associate elements of your application, more precisely its "business model" (the processing that you have defined, directly connected to the application's business domain), with elements of its GUI.
		</paragraph>
		<paragraph>Similarly although in a completely different area, you may request the integration of a function 
			<code>
				<feature_name>your_function</feature_name>
			</code> over the interval 
			<code>
				<number>0..1</number>
			</code> through a call such as
		</paragraph>
<code_block>
<feature_name>your_integrator</feature_name>.<feature_name>integral</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>your_function</feature_name>, <number>0</number>, <number>1</number><symbol>)</symbol>
</code_block>
		<paragraph>In the third example area cited above, you may call an iterator of EiffelBase through</paragraph>
<code_block>
<feature_name>your_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>your_proc</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>with 
			<code>
				<feature_name>your_list</feature_name>
			</code> of a type such as 
			<code>
				<class_name>LIST</class_name> <symbol>[</symbol><class_name>YOUR_TYPE</class_name><symbol>]</symbol>
			</code>. This will apply 
			<code>
				<feature_name>your_proc</feature_name>
			</code> to every element of the list in turn.
		</paragraph>
		<paragraph>The agent mechanism is type-checked like the rest of Eiffel; so the last example is valid if and only if 
			<code>
				<feature_name>your_proc</feature_name>
			</code> is a procedure with one argument of type 
			<code>
				<class_name>YOUR_TYPE</class_name>
			</code>.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Operations on agents</content>
		</heading>
		<paragraph>An agent 
			<code>
				<keyword>agent</keyword>
			</code>
			<code>
				<feature_name>r</feature_name>
			</code> built from a procedure 
			<code>
				<feature_name>r</feature_name>
			</code> is of type 
			<code>
				<class_name>PROCEDURE</class_name> <symbol>[</symbol><class_name>T</class_name>, <class_name>ARGS</class_name><symbol>]</symbol>
			</code> where 
			<code>
				<class_name>T</class_name>
			</code> represents the class to which 
			<code>
				<feature_name>r</feature_name>
			</code> belongs and 
			<code>
				<class_name>ARGS</class_name>
			</code> the type of its arguments. If 
			<code>
				<feature_name>r</feature_name>
			</code> is a function of result type 
			<code>
				<class_name>RES</class_name>
			</code>, the type is 
			<code>
				<class_name>FUNCTION</class_name> <symbol>[</symbol><class_name>T</class_name>, <class_name>ARGS</class_name>, <class_name>RES</class_name><symbol>]</symbol>
			</code>.  Classes 
			<code>
				<class_name>PROCEDURE</class_name>
			</code> and 
			<code>
				<class_name>FUNCTION</class_name>
			</code> are from the Kernel Library of EiffelBase, both inheriting from 
			<code>
				<class_name>ROUTINE</class_name> <symbol>[</symbol><class_name>T</class_name>, <class_name>ARGS</class_name><symbol>]</symbol>
			</code>.
		</paragraph>
		<paragraph>Among the features of 
			<code>
				<class_name>ROUTINE</class_name>
			</code> and its descendants the most important are 
			<code>
				<feature_name>call</feature_name>
			</code>, already noted, which calls the associated routine, and 
			<code>
				<feature_name>item</feature_name>
			</code>, appearing only in 
			<code>
				<class_name>FUNCTION</class_name>
			</code> and yielding the result of the associated function, which it obtains by calling 
			<code>
				<feature_name>call</feature_name>
			</code>.
		</paragraph>
		<paragraph>As an example of using these mechanisms, here is how the function 
			<code>
				<feature_name>integral</feature_name>
			</code> could look like in our 
			<code>
				<class_name>INTEGRATOR</class_name>
			</code> example class. The details of the integration algorithm (straight forward, and making no claims to numerical sophistication) do not matter, but you see, in the highlighted line, the place were we evaluate the mathematical function associated with 
			<code>
				<local_variable>f</local_variable>
			</code>, by calling 
			<code>
				<feature_name>item</feature_name>
			</code> on 
			<code>
				<local_variable>f</local_variable>
			</code>:
		</paragraph>
		<code_block>
<feature_name>integral</feature_name> <symbol>(</symbol><local_variable>f</local_variable><symbol>:</symbol> <class_name>FUNCTION</class_name> <symbol>[</symbol><class_name>ANY</class_name>, <class_name>TUPLE</class_name> <symbol>[</symbol><class_name>REAL</class_name><symbol>]</symbol>, <class_name>REAL</class_name><symbol>]</symbol>; <local_variable>low</local_variable>, <local_variable>high</local_variable><symbol>:</symbol> <class_name>REAL</class_name><symbol>)</symbol><symbol>:</symbol> <class_name>REAL</class_name> <keyword>is</keyword>
		<comment>-- Integral of `f' over the interval [`low', `high']</comment>
	<keyword>require</keyword>
		meaningful_interval<symbol>:</symbol> low &lt;<symbol>=</symbol> high
	<keyword>local</keyword>
		<local_variable>x</local_variable><symbol>:</symbol> <class_name>REAL</class_name>
	<keyword>do</keyword>
		<keyword>from</keyword>
			<local_variable>x</local_variable> <symbol>:=</symbol> <local_variable>low</local_variable>
		<keyword>invariant</keyword>
			<local_variable>x</local_variable> <symbol>&gt;=</symbol> <local_variable>low</local_variable>
			<local_variable>x</local_variable> <symbol>&lt;=</symbol> <local_variable>high</local_variable> <symbol>+</symbol> <feature_name>step</feature_name>
				<comment>-- Result approximates the integral over</comment>
				<comment>-- the interval [low, low.max (x - step)]</comment>
		<keyword>until</keyword> 
			<local_variable>x</local_variable> <symbol>&gt;</symbol> <local_variable>high</local_variable>
		<keyword>loop</keyword>
			<keyword>Result</keyword> <symbol>:</symbol><symbol>=</symbol> <keyword>Result</keyword> <symbol>+</symbol> <feature_name>step</feature_name> <symbol>*</symbol> <local_variable>f</local_variable>.<feature_name>item</feature_name> <symbol>([</symbol><local_variable>x</local_variable><symbol>])</symbol>
			<local_variable>x</local_variable> <symbol>:=</symbol> <local_variable>x</local_variable> <symbol>+</symbol> <feature_name>step</feature_name>
		<keyword>end</keyword>
	<keyword>end</keyword>
</code_block>
		<paragraph>Function 
			<code>
				<feature_name>integral</feature_name>
			</code> takes three arguments: the agent 
			<code>
				<local_variable>f</local_variable>
			</code> representing the function to be integrated, and the two interval bounds.  When we need to evaluate that function for the value 
			<code>
				<local_variable>x</local_variable>
			</code>, in the line
		</paragraph>
<code_block>
<keyword>Result</keyword> <symbol>:</symbol><symbol>=</symbol> <keyword>Result</keyword> <symbol>+</symbol> <feature_name>step</feature_name> <symbol>*</symbol> <local_variable>f</local_variable>.<feature_name>item</feature_name> <symbol>([</symbol><local_variable>x</local_variable><symbol>])</symbol>
</code_block>
		<paragraph>we don't directly pass 
			<code>
				<local_variable>x</local_variable>
			</code> to 
			<code>
				<feature_name>item</feature_name>
			</code>; instead, we pass a one-element tuple 
			<code>
				<symbol>[</symbol><local_variable>x</local_variable><symbol>]</symbol>
			</code>, using the syntax for manifest tuples introduced in 
			<link>
				<url>tutorial-11.xml</url><anchor_name>36752</anchor_name>
				<label>"Tuple types", page 90</label>
			</link>.  You will always use tuples for the argument to 
			<code>
				<feature_name>call</feature_name>
			</code> and 
			<code>
				<feature_name>item</feature_name>
			</code>, because these features must be applicable to 
			any routine, and so cannot rely on a fixed number of arguments.  Instead they take a single tuple intended to contain all the arguments.  This property is reflected in the type of the second actual generic parameter to 
			<code>
				<local_variable>f</local_variable>
			</code>, corresponding to 
			<code>
				<class_name>ARGS</class_name>
			</code> (the formal generic parameter of 
			<code>
				<class_name>FUNCTION</class_name>
			</code>): here it's 
			<code>
				<class_name>TUPLE</class_name> <symbol>[</symbol><class_name>REAL</class_name><symbol>]</symbol>
			</code> to require an argument such as 
			<code>
				<symbol>[</symbol>
				<local_variable>x</local_variable><symbol>]</symbol>
			</code>, where 
			<code>
				<local_variable>x</local_variable>
			</code> is of type 
			<code>
				<class_name>REAL</class_name>
			</code>.
		</paragraph>
		<paragraph>Similarly, consider the agent that the call seen above:</paragraph>
<code_block>
<feature_name>your_icon</feature_name>.<feature_name>click_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>your_routine</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>added to an EiffelVision list.  When the EiffelVision mechanism detects a mouse click event, it will apply to each element 
			<code>
				<feature_name>item</feature_name>
			</code> of the list of agents, 
			<code>
				<feature_name>your_icon</feature_name>.<feature_name>click_actions</feature_name>
			</code>, an instruction such as
		</paragraph>
<code_block>
<feature_name>item</feature_name>.<feature_name>call</feature_name> <symbol>(</symbol><symbol>[</symbol><local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>]</symbol><symbol>)</symbol>
</code_block>
		<paragraph>where 
			<code>
				<local_variable>x</local_variable>
			</code> and 
			<code>
				<local_variable>y</local_variable>
			</code> are the coordinates of the mouse clicking position.  If 
			<code>
				<feature_name>item</feature_name>
			</code> denotes the list element 
			<code>
				<keyword>agent</keyword>
			</code> your_routine, inserted by the above call to 
			<code>
				<feature_name>extend</feature_name>
			</code>, the effect will be the same as that of calling
		</paragraph>
		<code_block>
<feature_name>your_routine</feature_name> <symbol>(</symbol><local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>)</symbol>
</code_block>
		<paragraph>assuming that 
			<code>
				<feature_name>your_routine</feature_name>
			</code> indeed takes arguments of the appropriate type, here 
			<code>
				<class_name>INTEGER</class_name>
			</code> representing a coordinate in pixels. (Otherwise type checking would have rejected the call to 
			<code>
				<feature_name>extend</feature_name>
			</code>.)
		</paragraph>
		<heading>
			<size>2</size>
			<content>Open and closed arguments</content>
		</heading>
		<paragraph>In the examples so far, execution of the agent's associated routine, through 
			<code>
				<feature_name>item</feature_name>
			</code> or 
			<code>
				<feature_name>call</feature_name>
			</code>, passed exactly the arguments that a direct call to the routine would expect.  You can have more flexibility.  In particular, you may build an agent from a routine with more arguments than expected in the final call, and you may set the values of some arguments at the time you define the agent.
		</paragraph>
		<paragraph>Assume for example that a cartographical application lets a user record the location of a city by clicking on the corresponding position on the map.  The application may do this through a procedure</paragraph>
		<code_block>
<feature_name>record_city</feature_name> <symbol>(</symbol><local_variable>cn</local_variable><symbol>:</symbol> <class_name>STRING</class_name>; <local_variable>pop</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name>; <local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol>
	<comment>-- Record that the city of name is at coordinates</comment>
	<comment>-- x and y with population pop.</comment>
</code_block>
		<paragraph>Then you can associate it with the GUI through a call such as</paragraph>
<code_block>
<feature_name>map</feature_name>.<feature_name>click_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>record_city</feature_name> <symbol>(</symbol><local_variable>name</local_variable>, <local_variable>population</local_variable>, <symbol>?</symbol>, <symbol>?</symbol><symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>assuming that the information on the 
			<code>
				<local_variable>name</local_variable>
			</code> and the 
			<code>
				<local_variable>population</local_variable>
			</code> has already been determined.  What the agent denotes is the same as 
			<code>
				<keyword>agent</keyword>
			</code> 
			<code>
				<feature_name>your_routine</feature_name>
			</code> as given before, where 
			<code>
				<feature_name>your_routine</feature_name>
			</code> would be a fictitious two-argument routine obtained from 
			<code>
				<feature_name>record_city</feature_name>
			</code> -- a four-argument routine -- by setting the first two arguments once and for all to the values given, 
			<code>
				<local_variable>name</local_variable>
			</code> and 
			<code>
				<local_variable>population</local_variable>
			</code>.
		</paragraph>
		<paragraph>In the agent 
			<code>
				<keyword>agent</keyword> <feature_name>record_city</feature_name> <symbol>(</symbol><local_variable>name</local_variable>, <local_variable>population</local_variable>, <symbol>?</symbol>, <symbol>?</symbol><symbol>)</symbol>
			</code>, we say that these first two arguments, with their set values, are 
			<bold>closed</bold>; the last two are 
			<bold>open</bold>.  The question mark syntax introduced by this example may only appear in agent expressions; it denotes open arguments.  This means, by the way, that you may view the basic form used in the preceding examples, 
			<code>
				<keyword>agent</keyword> <feature_name>your_routine</feature_name>
			</code>, as an abbreviation -- assuming your_routine has two arguments -- for 
			<code>
				<keyword>agent</keyword> <feature_name>your_routine</feature_name> <symbol>(</symbol><keyword>?</keyword>, <keyword>?</keyword><symbol>)</symbol>
			</code>. It is indeed permitted, to define an agent with all arguments open, to omit the argument list altogether; no ambiguity may result.
		</paragraph>
		<paragraph>For type checking, 
			<code>
				<keyword>agent</keyword> <feature_name>record_city</feature_name> <symbol>(</symbol><local_variable>name</local_variable>, <local_variable>population</local_variable>, <symbol>?</symbol>, <symbol>?</symbol><symbol>)</symbol>
			</code> and 
			<code>
				<keyword>agent</keyword> ,<feature_name>your_routine</feature_name>
			</code> are acceptable in exactly the same situations, since both represent routines with two arguments.  The type of both is
		</paragraph>
<code_block>
<class_name>PROCEDURE</class_name> <symbol>[</symbol><class_name>ANY</class_name>, <class_name>TUPLE</class_name> <symbol>[</symbol><class_name>INTEGER</class_name>, <class_name>INTEGER</class_name><symbol>]</symbol><symbol>]</symbol>
</code_block>
		<paragraph>where the tuple type specifies the open operands.  </paragraph>
		<paragraph>A completely closed agent, such as 
			<code>
				<keyword>agent</keyword> <feature_name>your_routine</feature_name> <symbol>(</symbol><number>25</number>, <number>32</number><symbol>)</symbol>
			</code> or 
			<code>
				<keyword>agent</keyword> <feature_name>record_city</feature_name> <symbol>(</symbol><local_variable>name</local_variable>, <local_variable>population</local_variable>, <number>25</number>, <number>32</number><symbol>)</symbol>
			</code>, has the type 
			<code>
				<class_name>TUPLE</class_name>
			</code>, with no parameters; you will call it with 
			<code>
				<feature_name>call</feature_name> <symbol>([ ])</symbol>
			</code>, using an empty tuple as argument.
		</paragraph>
		<paragraph>The freedom to start from a routine with an arbitrary number of arguments, and choose which ones you want to close and which ones to leave open, provides a good part of the attraction of the agent mechanism.  It means in particular that in GUI applications you can limit to the strict minimum the "glue" code (sometimes called the 
			controller in the so-called MVC, Model-View Controller, scheme of GUI design) between the user interface and "business model" parts of a system.  A routine such as 
			<code>
				<feature_name>record_city</feature_name>
			</code> is a typical example of an element of the business model, uninfluenced -- as it should be -- by considerations of user interface design.  Yet by passing it in the form of an agent with partially open and partially closed arguments, you may be able to use it 
			directly in the GUI, as shown above, without any "controller" code.
		</paragraph>
		<paragraph>As another example of the mechanism's versatility, we saw above an integral function that could integrate a function of one variable over an interval, as in</paragraph>
<code_block>
<feature_name>your_integrator</feature_name>.<feature_name>integral</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>your_function</feature_name> <symbol>(</symbol><number>0</number>, <number>1</number><symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>Now assume that 
			<code>
				<feature_name>function3</feature_name>
			</code> takes three arguments.  To integrate 
			<code>
				<feature_name>function3</feature_name>
			</code> with two arguments fixed, you don't need a new 
			<code>
				<feature_name>integral</feature_name>
			</code> function; just use the same 
			<code>
				<feature_name>integral</feature_name>
			</code> as before, judiciously selecting what to close and what to leave open:
		</paragraph>
<code_block>
<feature_name>your_integrator</feature_name>.<feature_name>integral</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>function3</feature_name> <symbol>(</symbol><number>3.5</number>, ?, <number>6.0</number><symbol>)</symbol>, <number>0</number>, <number>1</number><symbol>)</symbol>
</code_block>
		<heading>
			<size>2</size>
			<content>Open targets</content>
		</heading>
		<paragraph>All the agent examples seen so far were based on routines of the enclosing class.  This is not required.  Feature calls, as you remember, were either unqualified, as in 
			<code>
				<feature_name>f</feature_name> <symbol>(</symbol><local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>)</symbol>
			</code>, or qualified, as in 
			<code>
				<local_variable>a</local_variable>.<feature_name>g</feature_name> <symbol>(</symbol><local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>)</symbol>
			</code>.  Agents, too, have a qualified variant as in
		</paragraph>
<code_block>
<keyword>agent</keyword> <local_variable>a</local_variable>.<feature_name>g</feature_name>
</code_block>
		<paragraph>which is closed on its target 
			<code>
				<local_variable>a</local_variable>
			</code> and open on the arguments.  Variants such as 
			<code>
				<keyword>agent</keyword> <local_variable>a</local_variable>.<feature_name>g</feature_name> <symbol>(</symbol><local_variable>x</local_variable>, <local_variable>y</local_variable><symbol>)</symbol>
			</code>, all closed, and 
			<code>
				<keyword>agent</keyword> <local_variable>a</local_variable>.<feature_name>g</feature_name> <symbol>(</symbol><local_variable>?</local_variable>, <local_variable>y</local_variable><symbol>)</symbol>
			</code>, open on one argument, are all valid.
		</paragraph>
		<paragraph>You may also want to make the target open.  The question mark syntax could not work here, since it wouldn't tell us the class to which feature 
			<code>
				<feature_name>g</feature_name>
			</code> belongs, known in the preceding examples from the type of 
			<code>
				<local_variable>a</local_variable>
			</code>. As in creation expressions, we must list the type explicitly; the convention is the same: write the types in braces, as in
		</paragraph>
<code_block>
<keyword>agent</keyword> <symbol>{</symbol><class_name>SOME_TYPE</class_name><symbol>}</symbol>.<feature_name>g</feature_name>
<keyword>agent</keyword> <symbol>{</symbol><class_name>SOME_TYPE</class_name><symbol>}</symbol>.<feature_name>g</feature_name> <symbol>(</symbol>?, ?<symbol>)</symbol>
<keyword>agent</keyword> <symbol>{</symbol><class_name>SOME_TYPE</class_name><symbol>}</symbol>.<feature_name>g</feature_name> <symbol>(</symbol>?, <local_variable>y</local_variable><symbol>)</symbol>
</code_block>
		<paragraph>The first two of these examples are open on the target and both operands; they mean the same.  The third is closed on one argument, open on the other and on the target.  </paragraph>
		<paragraph>These possibilities give even more flexibility to the mechanism because they mean that an operation that needs agents with certain arguments open doesn't care whether they come from an argument or an operand of the original routine.  This is particularly useful for iterators and means that if you have two lists</paragraph>
<code_block>
<feature_name>your_account_list</feature_name><symbol>:</symbol> <class_name>LIST</class_name> <symbol>[</symbol><class_name>ACCOUNT</class_name><symbol>]</symbol>
<feature_name>your_integer_list</feature_name><symbol>:</symbol> <class_name>LIST</class_name> <symbol>[</symbol><class_name>INTEGER</class_name><symbol>]</symbol>
</code_block>
		<paragraph>you may write both</paragraph>
<code_block>
<feature_name>your_account_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> deposit_one_grand<symbol>)</symbol>
<feature_name>your_integer_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> add_to_n<symbol>)</symbol>
</code_block>
		<paragraph>even though the two procedures used in the agents have quite different forms.  We are assuming here that the first one, in class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code>, is something like
		</paragraph>
<code_block>
<feature_name>deposit_one_grand</feature_name> <keyword>is</keyword>
		<comment>-- Add one thousand dollars to `balance' of account.</comment>
	<keyword>do</keyword> 
		<feature_name>balance</feature_name> <symbol>:=</symbol> <feature_name>balance</feature_name> <symbol>+</symbol> <number>1000</number>
	<keyword>end</keyword>
</code_block>
		<paragraph>so that it doesn't take an argument: it is normally called on its target, as in 
			<code>
				<feature_name>my_account</feature_name>.<feature_name>deposit_one_grand</feature_name>
			</code>. In contrast, the other routine has an argument:
		</paragraph>
<code_block>
<feature_name>add_to_n</feature_name> <symbol>(</symbol><local_variable>x</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
		<comment>-- Add `x' to the value of `total'.</comment> 
	<keyword>do</keyword>
		<feature_name>total</feature_name> <symbol>:=</symbol> <feature_name>total</feature_name> <symbol>+</symbol> <local_variable>x</local_variable>
	<keyword>end</keyword>
</code_block>
		<paragraph>where 
			<code>
				<feature_name>total</feature_name>
			</code> is an integer attribute of the enclosing class.  Without the versatility of playing with open and closed arguments for both the original arguments and target, you would have to write separate iteration mechanisms for these two cases.  Here you can use a single iteration routine of 
			<code>
				<class_name>LIST</class_name>
			</code> and similar classes of EiffelBase, 
			<code>
				<feature_name>do_all</feature_name>
			</code>, for both purposes:
		<line_break/>
		<list ordered="false">
			<item> Depositing money on every account in a list of accounts.</item>
			<item> Adding all the integers in a list of integers.</item>
		</list>
		</paragraph>
		<paragraph>Agents provide a welcome complement to the other mechanisms of Eiffel.  They do not conflict with them but, when appropriate -- as in the examples sketched in this section -- provide clear and expressive programming schemes, superior to the alternatives.</paragraph>
	</paragraph></document>
