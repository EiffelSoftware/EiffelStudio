indexing
	description: "COM code generator"
	date: "$Date$"
	revision: "$Revision$"

class
	WIZARD_CODE_GENERATOR

inherit
	WIZARD_MESSAGE_OUTPUT

feature -- Access

	currently_generated_class: STRING
			-- currently generated class

	currently_generated_c_code_c: STRING
			-- currently generated C code, source file

	currently_generated_c_code_h: STRING
			-- currently generated C code, header file


feature -- Eiffel code generation

	put_indexing_clause (a_descriptor: WIZARD_TYPE_DESCRIPTOR) is
			-- Generate indexing clause
		require 
			non_void_descriptor: a_descriptor /= Void
		do
			create currently_generated_class.make (0)
			currently_generated_class.append ("indexing%N%Tdescription: %"")
			if a_descriptor.description /= Void then
				currently_generated_class.append (a_descriptor.description)
			else
				currently_generated_class.append ("Class")
				currently_generated_class.append (a_descriptor.name)
			end
			currently_generated_class.append ("%"%N%T")
			currently_generated_class.append ("note: %"First version automatically generated by EiffelCOM wizard.%"%N%T")
			currently_generated_class.append ("date: %"%DDate: %D%"%N%T")
			currently_generated_class.append ("revision: %"%DRevision: %D%"%N%N")
		end

	put_class_clause (a_class_name: STRING) is
			-- Generate class clause
		require
			non_void_class_name: a_class_name /= Void 
			valid_class_name: not a_class_name.empty
		do
			currently_generated_class.append ("class%N%T")	 
			currently_generated_class.append (a_class_name)
			currently_generated_class.append ("%N%N")
		end

	put_deferred_class_clause (a_class_name: STRING) is
			-- Generate class clause
		require
			non_void_class_name: a_class_name /= Void and then not a_class_name.empty
		do
			currently_generated_class.append ("deferred class%N%T")	 
			currently_generated_class.append (a_class_name)
			currently_generated_class.append ("%N%N")
		end

	put_class_end (a_class_name: STRING) is
			-- Generate end of class text
		require
			non_void_class_name: a_class_name /= Void and then not a_class_name.empty
		do
			currently_generated_class.append ("end -- ")
			currently_generated_class.append (a_class_name)
			currently_generated_class.append ("%N")
		end


feature -- C code generation

	put_c_beginning_comments (c_file_name: STRING) is
			-- Generate header comments
		require
			valid_file_name: c_file_name /= Void and then not c_file_name.empty
		do
			create currently_generated_c_code_h.make (0)
			currently_generated_c_code_h.append ("//%N//%TFile:%N//%T%T")
			currently_generated_c_code_h.append (c_file_name)
			currently_generated_c_code_h.append ("%N//%N//%TGenerated by EiffelCOM wizard%N//%T")
			currently_generated_c_code_h.append ("Copyright (C) Interactive Software Engineering, 1999.%N//%N//%N")
		end

end -- class WIZARD_CODE_GENERATOR

--|----------------------------------------------------------------
--| EiffelCOM: library of reusable components for ISE Eiffel.
--| Copyright (C) 1988-1999 Interactive Software Engineering Inc.
--| All rights reserved. Duplication and distribution prohibited.
--| May be used only with ISE Eiffel, under terms of user license. 
--| Contact ISE for any other use.
--|
--| Interactive Software Engineering Inc.
--| ISE Building, 2nd floor
--| 270 Storke Road, Goleta, CA 93117 USA
--| Telephone 805-685-1006, Fax 805-685-6869
--| Electronic mail <info@eiffel.com>
--| Customer support http://support.eiffel.com
--| For latest info see award-winning pages: http://www.eiffel.com
--|----------------------------------------------------------------

