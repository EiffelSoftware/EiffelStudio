//
//    Eif_compiler.idl
//
//
//


import "oaidl.idl";

interface IEiffelProject;
interface IEiffelCompiler;
interface IEiffelCompilerEvents;
interface IEiffelSystemBrowser;
interface IEiffelClusterDescriptor;
interface IEiffelClassDescriptor;
interface IEiffelFeatureDescriptor;

[
  oleautomation,
  uuid (53E4FF57-2F3C-4ed2-8B08-89AF6E2C10BA),
  helpstring ("Eiffel Project.")
]
interface IEiffelProject: IUnknown
{
  [helpstring ("Retrieve project.")]
  HRESULT retrieve_project ([in] BSTR project_file_name);
  
  [helpstring ("Create new project.")]
  HRESULT create_project ([in] BSTR ace_file_name, [in] BSTR project_directory_path);
  
  [helpstring ("Is project valid?")]
  HRESULT valid_project ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Last error message.")]
  HRESULT last_error_message ([out, retval] BSTR * return_value);

  [helpstring ("Compiler.")]
  HRESULT compiler ([out, retval] IEiffelCompiler ** return_value);
  
  [helpstring ("Has system been compiled?")]
  HRESULT is_compiled ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("System Browser.")]
  HRESULT system_browser ([out, retval] IEiffelSystemBrowser ** return_value);
};

[
  oleautomation,
  uuid (590282FD-2BEE-44a1-91B3-61C926BAD512),
  helpstring ("Eiffel Compiler.")
]
interface IEiffelCompiler: IUnknown
{
  [helpstring ("Compile.")]
  HRESULT compile ();
  
  [helpstring ("Was last compilation successful?")]
  HRESULT is_successful ([out, retval] VARIANT_BOOL * return_value);
};

[
  oleautomation,
  uuid (B16070BD-DECE-4e7a-803C-F7A45924CB88),
  helpstring ("Eiffel Compiler Events.")
]
interface IEiffelCompilerEvents: IUnknown
{
  [helpstring ("Should compilation continue.")]
  HRESULT continue ([in, out] VARIANT_BOOL * a_boolean);
    
  [helpstring ("Output string.")]
  HRESULT output_string ([in] BSTR a_string);
};

[
  oleautomation,
  uuid (A4CAF314-6659-48d8-A68E-463492D79D8A),
  helpstring ("System Browser.")
]
interface IEiffelSystemBrowser: IUnknown
{ 
  [helpstring ("List of classes in system.")]
  HRESULT system_classes ([out, retval] SAFEARRAY (BSTR) * names);

  [helpstring ("Number of classes in system.")]
  HRESULT class_count ([out, retval] LONG * return_value);

  [helpstring ("List of system's clusters.")]
  HRESULT system_clusters ([out, retval] SAFEARRAY (BSTR) * names);
  
  [helpstring ("Number of top-level clusters in system.")]
  HRESULT cluster_count ([out, retval] LONG * return_value);

  [helpstring ("Cluster descriptor.")]
  HRESULT cluster_descriptor ([in] BSTR cluster_name, [out, retval] IEiffelClusterDescriptor ** return_value);

  [helpstring ("Class descriptor.")]
  HRESULT class_descriptor ([in] BSTR class_name, [out, retval] IEiffelClassDescriptor ** return_value);
  
  [helpstring ("Feature descriptor.")]
  HRESULT feature_descriptor ([in] BSTR class_name, [in] BSTR feature_name, [out, retval] IEiffelFeatureDescriptor ** return_value);
};


[
  oleautomation,
  uuid (81062B0E-B1D6-4c5d-8B8B-71464E86B869),
  helpstring ("Eiffel Cluster Descriptor.")
]
interface IEiffelClusterDescriptor: IUnknown
{
  [helpstring ("Cluster name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Cluster description.")]
  HRESULT description ([out, retval] BSTR * return_value);
  
  [helpstring ("List of classes in cluster.")]
  HRESULT classes ([out, retval] VARIANT * some_features);

  [helpstring ("Number of classes in cluster.")]
  HRESULT class_count ([out, retval] LONG * return_value);

  [helpstring ("List of subclusters in cluster.")]
  HRESULT clusters ([out, retval] VARIANT * some_features);

  [helpstring ("Number of subclusters in cluster.")]
  HRESULT cluster_count ([out, retval] LONG * return_value);

  [helpstring ("Full path to cluster.")]
  HRESULT cluster_path ([out, retval] BSTR * path);
};

[
  oleautomation,
  uuid (2138B7F7-250E-4156-A3F5-A4E9F4AF8C5D),
  helpstring ("Eiffel Class Descriptor.")
]
interface IEiffelClassDescriptor: IUnknown
{
  [helpstring ("Class name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Class description.")]
  HRESULT description ([out, retval] BSTR * return_value);
  
  [helpstring ("List of names of class features.")]
  HRESULT feature_names ([out, retval] SAFEARRAY (BSTR) * names);

  [helpstring ("List of class features.")]
  HRESULT features ([out, retval] VARIANT * some_features);

  [helpstring ("Number of class features.")]
  HRESULT feature_count ([out, retval] LONG * return_value);

  [helpstring ("List of class features including ancestor features.")]
  HRESULT flat_features ([out, retval] VARIANT * some_features);

  [helpstring ("Number of flat class features.")]
  HRESULT flat_feature_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of class clients.")]
  HRESULT clients ([out, retval] VARIANT * some_clients);

  [helpstring ("Number of class client.")]
  HRESULT client_count ([out, retval] LONG * return_value);

  [helpstring ("List of class suppliers.")]
  HRESULT suppliers ([out, retval] VARIANT * some_suppliers);

  [helpstring ("Number of class suppliers.")]
  HRESULT supplier_count ([out, retval] LONG * return_value);

  [helpstring ("List of direct ancestors of class.")]
  HRESULT ancestors ([out, retval] VARIANT * some_ancestors);

  [helpstring ("Number of direct ancestor.")]
  HRESULT ancestor_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of direct descendants of class.")]
  HRESULT descendants ([out, retval] VARIANT * some_descendants);

  [helpstring ("Number of direct descendants.")]
  HRESULT descendant_count ([out, retval] LONG * return_value);
  
  [helpstring ("Full path to file.")]
  HRESULT class_path ([out, retval] BSTR * path);
  
  [helpstring ("Is class deferred?")]
  HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is class external?")]
  HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is class generic?")]
  HRESULT is_generic ([out, retval] VARIANT_BOOL * return_value);
};

[
  oleautomation,
  uuid (2CB5C09A-2222-42f7-9371-398FB71EBB93),
  helpstring ("Eiffel Feature Descriptor.")
]
interface IEiffelFeatureDescriptor: IUnknown
{
  [helpstring ("Feature name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Name of class where feature is written in.")]
  HRESULT written_class ([out, retval] BSTR * return_value);
  
  [helpstring ("Name of class where feature was evaluated in.")]
  HRESULT evaluated_class ([out, retval] BSTR * return_value);

  [helpstring ("Feature description.")]
  HRESULT description ([out, retval] BSTR * return_value);

  [helpstring ("Feature location, full path to file and line number")]
  HRESULT feature_location (  [in, out] BSTR * file_path, 
                [in, out] LONG * line_number);
  
  [helpstring ("Feature signature.")]
  HRESULT signature ([out, retval] BSTR * return_value);
  
  [helpstring ("List of all feature callers, includding callers of ancestor and descendant versions.")]
  HRESULT all_callers ([out, retval] VARIANT * some_callers);

  [helpstring ("Number of all callers.")]
  HRESULT all_callers_count ([out, retval] LONG * return_value);

  [helpstring ("List of feature callers.")]
  HRESULT local_callers ([out, retval] VARIANT * some_callers);

  [helpstring ("Number of local callers.")]
  HRESULT local_callers_count ([out, retval] LONG * return_value);

  [helpstring ("List of feature callers, including callers of descendant versions.")]
  HRESULT descendant_callers ([out, retval] VARIANT * some_callers);

  [helpstring ("Number of descendant callers.")]
  HRESULT descendant_callers_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of implementers.")]
  HRESULT implementers ([out, retval] VARIANT * some_implementers);

  [helpstring ("Number of feature implementers.")]
  HRESULT implementer_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of ancestor versions.")]
  HRESULT ancestor_versions ([out, retval] VARIANT * some_implementers);

  [helpstring ("Number of ancestor versions.")]
  HRESULT ancestor_version_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of descendant versions.")]
  HRESULT descendant_versions ([out, retval] VARIANT * some_implementers);

  [helpstring ("Number of descendant versions.")]
  HRESULT descendant_version_count ([out, retval] LONG * return_value);
  
  [helpstring ("List of classes, to which feature is exported.")]
  HRESULT exported_to ([out, retval] SAFEARRAY (BSTR) * names);
  
  [helpstring ("Is once feature?")]
  HRESULT is_once ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is external feature?")]
  HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is deferred feature?")]
  HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is constant?")]
  HRESULT is_constant ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("is frozen feature?")]
  HRESULT is_frozen ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is infix?")]
  HRESULT is_infix ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is prefix?")]
  HRESULT is_prefix ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is attribute?")]
  HRESULT is_attribute ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is procedure?")]
  HRESULT is_procedure ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is function?")]
  HRESULT is_function ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is unique?")]
  HRESULT is_unique ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is obsolete feature?")]
  HRESULT is_obsolete ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Does feature have precondition?")]
  HRESULT has_precondition([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Does feature have postcondition?")]
  HRESULT has_postcondition([out, retval] VARIANT_BOOL * return_value);
};

[
  uuid (A81CA1A9-3EEF-4e47-BEAE-C16325EEFA3F)
]
library eiffel_compiler
{
  importlib ("stdole2.tlb");
  importlib ("stdole2.tlb");
  
  [
    uuid (28F511DB-0CCE-44c5-9DD5-E93066C0B00F)
  ]
  coclass CEiffelProject
  {
    [default] interface IEiffelProject;
  };

  [
    uuid (86D23C62-E03D-4a16-83F6-8F79D628110E),
    noncreatable 
  ]
  coclass CEiffelCompiler
  {
    [default] interface IEiffelCompiler;
    [default, source] interface IEiffelCompilerEvents;
  };

};