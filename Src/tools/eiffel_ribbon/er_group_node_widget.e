note
	description: "Objects that represent an EV_TITLED_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	generator: "EiffelBuild"
	date: "$Date$"
	revision: "$Revision$"

class
	ER_GROUP_NODE_WIDGET

inherit
	ER_GROUP_NODE_WIDGET_IMP


feature {NONE} -- Initialization

	user_initialization
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		local
			l_list_item: EV_LIST_ITEM
		do
			create l_list_item.make_with_text ("OneButton")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("TwoButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ThreeButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ThreeButtons-OneBigAndTwoSmall")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ThreeButtonsAndOneCheckBox")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("FourButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("FiveButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("FiveOrSixButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("SixButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("SixButtons-TwoColumns")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("SevenButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("EightButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("EightButtons-LastThreeSmall")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("NineButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("TenButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ElevenButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("OneFontControl")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("IntFontOnly")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("IntRichFont")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("IntFontWithColor")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("OneInRibbonGallery")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("BigButtonsAndSmallButtonsOrInputs")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("InRibbonGalleryAndBigButton")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("InRibbonGalleryAndButtons-GalleryScalesFirst")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("InRibbonGalleryAndThreeButtons")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ButtonGroupsAndInputs")
			size_combo_box.extend (l_list_item)
			create l_list_item.make_with_text ("ButtonGroups")
			size_combo_box.extend (l_list_item)
		end

	user_create_interface_objects
			-- <Precursor>
		do
				-- Initialize before calling Precursor all the attached attributes
				-- from the current class.

				-- Proceed with vision2 objects creation.
		end

feature -- Command

	set_tree_node_data (a_data: detachable ER_TREE_NODE_GROUP_DATA)
			-- Update GUI with tree node data
		do
			tree_node_data := a_data
			if attached a_data as l_data then
				if attached a_data.command_name as l_command_name then
					command_name.set_text (l_command_name)
				else
					command_name.remove_text
				end

				if attached a_data.label_title as l_label_title then
					label.set_text (l_label_title)
				else
					label.remove_text
				end

				if attached a_data.size_definition as l_size_definition then
					size_combo_box.set_text (l_size_definition)
				else
					size_combo_box.remove_text
				end

				if l_data.is_scale_large_checked then
					scale_large.enable_select
				else
					scale_large.disable_select
				end

				if l_data.is_scale_medium_checked then
					scale_medium.enable_select
				else
					scale_medium.disable_select
				end

				if l_data.is_scale_small_checked then
					scale_small.enable_select
				else
					scale_small.disable_select
				end

				if l_data.is_scale_popup_checked then
					scale_popup.enable_select
				else
					scale_popup.disable_select
				end

				if l_data.is_ideal_sizes_large_checked then
					ideal_sizes_large.enable_select
				end

				if l_data.is_ideal_sizes_medium_checked then
					ideal_sizes_medium.enable_select
				end

				if l_data.is_ideal_sizes_small_checked then
					ideal_sizes_small.enable_select
				end
			end
		end

feature {NONE} -- Implementation

	tree_node_data: detachable ER_TREE_NODE_GROUP_DATA
			-- Group tree node data

	on_command_name_text_change
			-- <Precursor>
		local
			l_checker: ER_IDENTIFIER_UNIQUENESS_CHECKER
		do
			create l_checker
			l_checker.on_identifier_name_change (command_name, tree_node_data)
		end

	on_label_text_changs
			-- Called by `change_actions' of `label'.
		do
			if attached tree_node_data as l_data then
				l_data.set_label_title (label.text)
			end
		end

	on_size_text_change
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_size_definition (size_combo_box.text)
			end
		end

	on_ideal_sizes_large_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_ideal_sizes_large_checked (ideal_sizes_large.is_selected)

				scale_large.disable_sensitive
				scale_medium.enable_sensitive
				scale_small.enable_sensitive
				scale_popup.enable_sensitive

				update_scale_data_with_gui
			end
		end

	on_ideal_sizes_medium_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_ideal_sizes_medium_checked (ideal_sizes_medium.is_selected)

				scale_large.disable_sensitive
				scale_medium.disable_sensitive
				scale_small.enable_sensitive
				scale_popup.enable_sensitive

				update_scale_data_with_gui
			end
		end

	on_ideal_sizes_small_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_ideal_sizes_small_checked (ideal_sizes_small.is_selected)

				scale_large.disable_sensitive
				scale_medium.disable_sensitive
				scale_small.disable_sensitive
				scale_popup.enable_sensitive

				update_scale_data_with_gui
			end
		end

	on_scale_large_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_scale_large_checked (scale_large.is_selected)
			end
		end

	on_scale_medium_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_scale_medium_checked (scale_medium.is_selected)
			end
		end

	on_scale_small_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_scale_small_checked (scale_small.is_selected)
			end
		end

	on_scale_popup_select
			-- <Precursor>
		do
			if attached tree_node_data as l_data then
				l_data.set_scale_popup_checked (scale_popup.is_selected)
			end
		end

	update_scale_data_with_gui
			-- Update group data with GUI widget statues
		do
			if attached tree_node_data as l_data then
				if scale_large.is_sensitive and scale_large.is_selected then
					l_data.set_scale_large_checked (True)
				else
					l_data.set_scale_large_checked (False)
				end
				if scale_medium.is_sensitive and scale_medium.is_selected then
					l_data.set_scale_medium_checked (True)
				else
					l_data.set_scale_medium_checked (False)
				end
				if scale_small.is_sensitive and scale_small.is_selected then
					l_data.set_scale_small_checked (True)
				else
					l_data.set_scale_small_checked (False)
				end
				if scale_popup.is_sensitive and scale_popup.is_selected then
					l_data.set_scale_popup_checked (True)
				else
					l_data.set_scale_popup_checked (False)
				end
			end
		end
note
	copyright: "Copyright (c) 1984-2011, Eiffel Software"
	license: "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"
end
