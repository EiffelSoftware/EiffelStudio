<document title="Once features in multithreaded mode" output="studio">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>
			<content>
				<link>
					<url>manipulating_once_features</url>
					<label>Manipulating Once features in multithreaded mode</label>
				</link>
			</content>
		</heading>
		<paragraph>Eiffel introduced the powerful mechanism of once routines. A once routine has a body that will be executed only once, at the first call. Subsequent calls will have no further effect and, in the case of a function, will return the same result as the first. This provides a simple way of sharing objects in an object-oriented context. </paragraph>
		<paragraph>For multithreaded applications, the appropriate semantics is that once routines must be called once per thread (rather than once per process). This is the semantics supported by EiffelThread. </paragraph>
		<paragraph>Then the once feature is not initialized once per process but once per thread. Your once feature will be called again in any new thread execution. </paragraph>
		<heading>
			<size>2</size>
			<content>
				<link>
					<url>once_per_process_thread</url>
					<label>Once per Process/Thread</label>
				</link>
			</content>
		</heading>
		<paragraph>Current once features in Eiffel are once per thread. This means that when a once feature is called in a thread, the Eiffel run-time will check whether it has been already computed in this thread. If not, the once feature will be initialized and computed. This seems to be a relevant way of managing once features in multithreaded mode: most of the time, a once called in a thread is not likely to share its result. </paragraph>
		<paragraph>However, in some case, we need to share once features. </paragraph>
		<paragraph>Moreover, an Eiffel programmer should be able to have an alternative between a once per thread or per process implementation. </paragraph>
		<heading>
			<size>2</size>
			<content>
				<link>
					<url>using_once_per_process_thread</url>
					<label>Using Once per process/thread features in EIFFEL</label>
				</link>
			</content>
		</heading>
		<paragraph>Here is what you will do to implement a once per process feature:</paragraph>
		<code_block>
class
		TEST_ONCE_PER_PROCESS

	feature

		object_per_thread: OBJECT is
				-- Once per thread.
			once
				create Result.make
			end

		object_per_process: OBJECT is
				-- New 'object' (once per process)
				-- that could be shared between threads
				-- without reinitializing it.
			indexing
				once_status: global
			once
				create Result.make
			end

	end -- class TEST_ONCE_PER_PROCESS
</code_block>
		<code_block>
	You can do the same with once procedures.
</code_block>
	</paragraph></document>