case $CONFIG in
'')
	if test ! -f config.sh; then
		ln ../config.sh . || \
		ln ../../config.sh . || \
		ln ../../../config.sh . || \
		(echo "Can't find config.sh."; exit 1)
	fi 2>/dev/null
	. config.sh
	;;
esac
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac
echo "Extracting src/run-time/size.h (with variable substitutions)"
$spitshell >size.h <<!GROK!THIS!
/*

  ####      #    ######  ######          #    #
 #          #        #   #               #    #
  ####      #       #    #####           ######
      #     #      #     #        ###    #    #
 #    #     #     #      #        ###    #    #
  ####      #    ######  ######   ###    #    #

	Size of basic types and access macros.
*/

#ifndef _size_h_
#define _size_h_

#include "config.h"

/* Basic sizes */
#define ALIGN	$alignbytes		/* Alignment restrictions */
#define DBLSIZ	$doublesize		/* Size of double */
#define FLTSIZ	$floatsize		/* Size of float */
#define REFSIZ	$ptrsize		/* Size of char * */
#define LNGSIZ	$longsize		/* Size of long */
#define CHRSIZ	$charsize		/* Size of char */
#define PTRSIZ	$ptrsize		/* Size of a function pointer: FIXME */
#define BYTSIZ	$bitpbyte		/* Size of a byte, in bits */
#define BITLONG (BYTSIZ * LNGSIZ) /* Number of bits in a long */
!GROK!THIS!

: In the following dollars and backticks do not need the extra backslash.
$spitshell >>size.h <<'!NO!SUBS!'

/* Macros used to compute padded size for fields in the object */
#define REMAINDER(x)		(((x) % ALIGN)?(ALIGN-((x)%ALIGN)):0)
#define PADD(x,y)			(REMAINDER(x)%(y))
#define CHROFF(x) \
	((x)*REFSIZ+PADD((x)*REFSIZ,CHRSIZ))
#define LNGOFF(x,y) \
	(CHROFF(x)+(y)*CHRSIZ+PADD(CHROFF(x)+(y)*CHRSIZ,LNGSIZ))
#define FLTOFF(x,y,z) \
	(LNGOFF(x,y)+(z)*LNGSIZ+PADD(LNGOFF(x,y)+(z)*LNGSIZ,FLTSIZ))
#define PTROFF(w,x,y,z) \
	(FLTOFF(w,x,y)+(z)*FLTSIZ+PADD(FLTOFF(w,x,y)+(z)*FLTSIZ,PTRSIZ))
#define DBLOFF(v,w,x,y,z) \
	(PTROFF(v,w,x,y)+(z)*PTRSIZ+PADD(PTROFF(v,w,x,y)+(z)*PTRSIZ,DBLSIZ))
#define OBJSIZ(u,v,w,x,y,z) \
	(DBLOFF(u,v,w,x,y)+(z)*DBLSIZ+REMAINDER(DBLOFF(u,v,w,x,y)+(z)*DBLSIZ))
#define BITOFF(n) (((BITACS(n)/ALIGN)+((BITACS(n)%ALIGN)?1:0))*ALIGN)

#define REFPAD(n) (((((n)*REFSIZ)/ALIGN)+((((n)*REFSIZ)%ALIGN)?1:0))*ALIGN)
#define CHRPAD(n) (((((n)*CHRSIZ)/ALIGN)+((((n)*CHRSIZ)%ALIGN)?1:0))*ALIGN)
#define LNGPAD(n) (((((n)*LNGSIZ)/ALIGN)+((((n)*LNGSIZ)%ALIGN)?1:0))*ALIGN)
#define FLTPAD(n) (((((n)*FLTSIZ)/ALIGN)+((((n)*FLTSIZ)%ALIGN)?1:0))*ALIGN)
#define DBLPAD(n) (((((n)*DBLSIZ)/ALIGN)+((((n)*DBLSIZ)%ALIGN)?1:0))*ALIGN)
#define PTRPAD(n) (((((n)*PTRSIZ)/ALIGN)+((((n)*PTRSIZ)%ALIGN)?1:0))*ALIGN)

/* Macros used to access fields in the object */
#define REFACS(n) ((n)*REFSIZ)
#define CHRACS(n) ((n)*CHRSIZ)
#define LNGACS(n) ((n)*LNGSIZ)
#define FLTACS(n) ((n)*FLTSIZ)
#define DBLACS(n) ((n)*DBLSIZ)
#define PTRACS(n) ((n)*PTRSIZ)
#define BITACS(n) (1+((n)/BITLONG)+(((n)%BITLONG)?1:0)*LNGSIZ)

#endif
!NO!SUBS!
chmod 755 size.h
$eunicefix size.h
