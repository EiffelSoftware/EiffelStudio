<?xml version="1.0" encoding="utf-8"?>
<document output="envision" title="EiffelEnvision for EiffelStudio Developers">
  <meta_data>
    <help>
      <toc>
        <envision_title>EiffelEnvision for EiffelStudio Developers</envision_title>
        <envision_pseudo_name>10</envision_pseudo_name>
      </toc>
      <xml>
        <xmlkeyword>
          <index>K</index>
          <term>EiffelEnvision for EiffelStudio Developers</term>
        </xmlkeyword>
        <xmlkeyword>
          <index>K</index>
          <term>EiffelEnvision, EiffelStudio developers</term>
        </xmlkeyword>
        <xmlkeyword>
          <index>K</index>
          <term>EiffelStudio, Migrating</term>
        </xmlkeyword>
      </xml>
    </help>
  </meta_data>
  <paragraph>
    <paragraph>
			EiffelEnvision attempts, at its best, to accommodate both existing EiffelStudio developers and EiffelEnvision developers at the same time. However, the two development environments are very disparate. Due to the integration into Visual Studio .NET, EiffelEnvision favors the Visual Studio .NET User Interface (UI) mechanisms ensuring 
			consistency for Visual Studio .NET developers. EiffelStudio users should not feel at a loss when migrating to EiffelEnvision. EiffelEnvision extends the Visual Studio .NET base UI to provide extensions that are EiffelStudio-like and facilitate EiffelStudio users with features they are accustomed to using. The information detailed here 
			is to start EiffelStudio users on the right track when getting started with EiffelEnvision. It is recommended that EiffelStudio users without prior knowledge of Visual Studio .NET review the <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vxconDevelopingApplicationsWithVisualStudio.htm</url><label>Developing with Visual Studio .NET</label></link> documentation before using EiffelEnvision.
		</paragraph>
    <note>
      <bold>Note</bold>: EiffelEnvision is a complete language <bold>plug-in</bold> for Visual Studio .NET and does not repeat any documentation located in the Microsoft Visual Studio .NET documentation. Links to the Visual Studio .NET documentation are provided, in abundance, throughout 
			the EiffelEnvision documentation. Any extensions to the Visual Studio .NET user interface or additional features not common to Visual Studio .NET are documented to the required degree for understanding.
		</note>
    <note>
      <bold>Note</bold>: This section of the documentation assumes knowledge of EiffelStudio and Eiffel for .NET.
		</note>
    <paragraph>
			The following sections outline the major features differences of EiffelEnvision and Visual Studio .NET compared with EiffelStudio.
		</paragraph>
    <anchor>user_interface</anchor>
    <heading>
      <size>2</size>
      <content>User Interface</content>
    </heading>
    <paragraph>
			There are many differences in the UI of EiffelEnvision and Visual Studio .NET, compared to EiffelStudio. 
			One of the biggest UI features missing is EiffelStudio's employment of a mechanism commonly referred to as <bold>Pick and Drop</bold>. Pick and Drop is specific to the EiffelVision 2 library, which EiffelStudio is built upon and Microsoft Visual Studio .NET is not. The efficiency of Pick and Drop can only be simulated by using a number of shortcut keys and/or mouse clicks for code navigation. 
			For instance, to jump to the definition of a feature in EiffelEnvision/Visual Studio .NET you can use the <link><url>../eiffel_editor/index.xml</url><label>Eiffel Editor</label></link> context menu and select <bold>Go To Definition</bold>, or press the <bold>F12</bold> shortcut key. The <link><url>../eiffel_editor/index.xml</url><label>Eiffel Editor</label></link> default color scheme for syntax highlighting is true to EiffelStudio's default color scheme. 
			This scheme may be changed, of course, using the Visual Studio .NET <link><url>ms-help//MS.VSCC.2003/dexplore/html/dxurffontscolorsenvironmentoptionsdialogbox.htm</url><label>Fonts and Colors Options</label></link>. As an indicator, every <link><url>../eiffel_editor/index.xml</url><label>Eiffel Editor</label></link> color is prefix <bold>Eiffel</bold>.
		</paragraph>
    <paragraph>
			When looking for the Cluster and Feature panes present in EiffelStudio, you need to look no further than EiffelEnvision's <link><url>../code_browsing/class_view/index.xml</url><label>Class View</label></link>. EiffelEnvision extends the Visual Studio .NET <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vxoriviewingclassestheirmembers.htm</url><label>Class View</label></link> to provide ancestor, decedent and caller information. For more information, see EiffelEnvision's documentation of the <link><url>../code_browsing/class_view/index.xml</url><label>Class View</label></link>.
		</paragraph>
    <paragraph>
			The <link><url>../code_browsing/object_browser/index.xml</url><label>Object Browser</label></link> in Visual Studio .NET is also used by EiffelEnvision to provide cluster, class and feature information. The <link><url>../code_browsing/object_browser/index.xml</url><label>Object Browser</label></link>, however, extends 
			the information provided in the <link><url>../code_browsing/class_view/index.xml</url><label>Class View</label></link> with assembly, type and method/function information for any reference's assemblies. This information is not presented in the view of the clusters, as it is in EiffelStudio. 
			The <link><url>../eiffelenvision_projects/structure/references/index.xml</url><label>References</label></link> section of the <link><url>../code_browsing/object_browser/index.xml</url><label>Object Browser</label></link> is used to display the <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vbcon/html/vbtskAddingRemovingReferences.htm</url><label>references added</label></link> to an EiffelEnvision project. The information provided shows both the .NET names and Eiffel equivalents accompanied by full documentation, when available, serving both Visual Studio .NET developers and EiffelStudio developers.
		</paragraph>
    <paragraph>
			Visual Studio .NET and EiffelEnvision do not provide equivalents to the <bold>Context Pane</bold> present in EiffelStudio. Some of the features present in the <bold>Class</bold> and <bold>Feature Tools</bold> are replicated, using the 
			<link><url>../code_browsing/object_browser/index.xml</url><label>Object Browser</label></link> and <link><url>../code_browsing/class_view/index.xml</url><label>Class View</label></link>. Currently, there is no <bold>Diagram Tool</bold>, <bold>Profiling</bold> or <bold>Metrics Tools</bold> in EiffelEnvision or Visual Studio .NET, 
			although many third-party profiling tools are available for free via download.
		</paragraph>
    <anchor>projects_and_configurations</anchor>
    <heading>
      <size>2</size>
      <content>Projects and Configurations</content>
    </heading>
    <paragraph>
			The Visual Studio .NET environment introduces a concept known as a <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vxconvisualstudiosolutionsprojects.htm</url><label>Solution</label></link>. With <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vxconvisualstudiosolutionsprojects.htm</url><label>Solution</label></link>s, EiffelEnvision permits editing of multiple projects in the same Visual Studio .NET session.
		</paragraph>
    <paragraph>
			EiffelEnvision also supports multiple <link><url>../eiffelenvision_projects/configuring/project_configuration/index.xml</url><label>configurations</label></link> for any given EiffelEnvision project. This means you can configure a single project to compile differently given a select <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vxconBuildConfigurations.htm</url><label>build configuration</label></link>. EiffelEnvision will store the project and all of its configurations in a single file so there is no need to create and maintain multiple projects for different configuration aspects.
		</paragraph>
    <anchor>precompiled_libraries</anchor>
    <heading>
      <size>2</size>
      <content>Precompiled Libraries</content>
    </heading>
    <paragraph>
			EiffelEnvision replies on the <link><url>../eiffelenvision_projects/configuring/adding_references/precompiled_libraries.xml</url><label>Precompiled Library</label></link> reuse mechanism much more than most EiffelStudio developers are accustomed to doing. At install time a number of <link><url>../eiffelenvision_projects/configuring/adding_references/precompiled_libraries.xml</url><label>Precompiled Libraries</label></link> 
			are created for use with EiffelEnvision. Their use within EiffelEnvision is to make compilation faster and deployment simpler. Using <link><url>../eiffelenvision_projects/configuring/adding_references/precompiled_libraries.xml</url><label>Precompiled Libraries</label></link> is entirely optional and will not affect EiffelEnvision in one way or 
			another if you decided not to use them. 
			
			<note><bold>Note</bold>: Precompiled libraries dramatically decrease initial compilation (Build) and recompilation (Rebuild) times.
			</note></paragraph>
    <anchor>compilation</anchor>
    <heading>
      <size>2</size>
      <content>Compilation</content>
    </heading>
    <paragraph>
			Compilation, referred to as <link><url>../compiling_projects/index.xml</url><label>Building</label></link> is much more feature saturated than in EiffelStudio. Base on a <link><url>../eiffelenvision_projects/configuring/project_configuration/index.xml</url><label>Project's Configuration</label></link>, a compilation can be tweaked to provide faster compilation, 
			the unmanaged part of the compilation may be suppressed, projects can be registered for <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vbcon/html/vbconCOMInteropInVisualBasicVisualC.htm</url><label>COM interop</label></link> and the compilation output will be placed in a much more convenient project <link><url>../eiffelenvision_projects/structure/known_folders.xml</url><label>bin</label></link> folder after a build has been completed.
		</paragraph>
    <anchor>debugging</anchor>
    <heading>
      <size>2</size>
      <content>Debugging</content>
    </heading>
    <paragraph>
			For EiffelStudio developers, the <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsdebug/html/_asug_How_Do_I_Topics3a_Debugging.htm</url><label>Visual Studio .NET debugger</label></link> may, at first, seem foreign as a concept. EiffelEnvision plugs into the Visual Studio .NET debugger to provide clear debugging information and a way to <link><url>../debugging/evaluating_expressions.xml</url><label>Evaluate Expressions</label></link>. A review of 
			the <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsdebug/html/_asug_How_Do_I_Topics3a_Debugging.htm</url><label>Visual Studio .NET debugger</label></link> and its UI is strongly recommended, as too is reviewing the <link><url>../debugging/index.xml</url><label>EiffelEnvision Debugger</label></link> extensions.
		</paragraph>
    <anchor>more_features</anchor>
    <heading>
      <size>2</size>
      <content>More...</content>
    </heading>
    <paragraph>
			EiffelEnvision provides many more facilities to EiffelStudio developers, such as integrated <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/vsintro7/html/vbconWhichTypeOfDeploymentProject.htm</url><label>Deployment Projects</label></link> and <link><url>ms-help//MS.VSCC.2003/MS.MSDNQTR.2003FEB.1033/sccvs70/html/veoriSourceCodeControlServices.htm</url><label>Source Code Control</label></link>.
		</paragraph>
    <anchor>see_also</anchor>
    <heading>
      <size>2</size>
      <content>Related Section</content>
    </heading>
    <seealso>
      <bold>See also</bold>:
			<line_break /><link><url>conversion_tool/index.xml</url><label>EiffelStudio to EiffelEnvision Project Conversion Tool</label></link><line_break /><link><url>../eiffelenvision_projects/structure/index.xml</url><label>EiffelEnvision Project Structure.</label></link></seealso>
  </paragraph>
</document>