<document title="Exploring an application dynamic state" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>To view the dynamic state of a debugged application, just stop it at the point where you want to see its context. The debugger tools will automatically be popped up then, yielding the call stack of the application, as well as the state of the objects located in the object tree, which include at least the object corresponding to the level of the call stack where the call stack cursor 
			<image>
				<url>/images/eiffelstudio/icons/16x16/callstack_active_arrow_icon.png</url>
			</image> is.
		</paragraph>
		<paragraph>To see at which point the features in the call stack have stopped, just click the feature on which you want this information in the call stack. Doing this will change the cursor position in the call stack and display the flat view of the feature in the context tool.</paragraph>
		<paragraph>To follow an object state between pauses of the application, pick and drop it into the object tree, which will make it stay in it.</paragraph>
		<paragraph>You can also query features dynamically by using the evaluation tool, which can be very useful to have glimpses of the C memory of the system, for instance.</paragraph>
		<seealso>
			<bold>See Also</bold>
			<line_break/> 
			<link>
				<url>20_interrupting_an_application.xml</url>
				<label>Pausing an application</label>
			</link>
			<line_break/> 
			<link>
				<url>/tools/eiffelstudio/reference/40_debugger/30_call_stack_tool/00_introduction.xml</url>
				<label>Call stack tool</label>
			</link>
			<line_break/> 
			<link>
				<url>/tools/eiffelstudio/reference/40_debugger/40_object_tool/00_introduction.xml</url>
				<label>Object tool</label>
			</link>
			<line_break/> 
			<link>
				<url>/tools/eiffelstudio/reference/40_debugger/50_expression_evaluation/00_introduction.xml</url>
				<label>Evaluation tool</label>
			</link>
		</seealso>
	</paragraph></document>
