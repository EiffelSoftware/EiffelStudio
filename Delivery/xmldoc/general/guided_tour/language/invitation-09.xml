<document title="8 Event-Driven Programming and Agents">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel, The Language\Tutorials\Invitation to Eiffel</envision_location>
				<envision_pseudo_name>80</envision_pseudo_name>
				<envision_title>Event-Driven Programming and Agents</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The division of roles in object technology is clear: of the two principal constituents of a system, 
			object types and 
			operations, the first dominates.  Classes, representing object types, determines the structure of the software; every routine, representing an operations, belongs to a class.
		</paragraph>
		<paragraph>In some circumstances it is useful to define an 
			object that denotes an 
			operation.  This is especially useful if you want to build an object structure that refers to operations, so that you can later traverse the structure and execute the operations encountered.  A typical application is 
			<bold>event-driven programming</bold> for Graphical User Interfaces (GUI), including Web programming.  In GUI programming you will want to record properties of the form
		</paragraph>
		<code_block>
<string>"When the user clicks this OK button, the system must update the file"</string>
</code_block>
		<paragraph>each involves a 
			<bold>control</bold> (here the OK button), an 
			<bold>event</bold> (mouse click) and an 
			<bold>operation</bold> (update the file).  This can be programmed by having an "event loop", triggered for each event, which performs massive decision-making (
			<code>
				<keyword>if </keyword>
			</code>
			<code>
				<comment>"The latest event was `left mouse click on button 23'" </comment>
			</code>
			<code>
				<keyword>then</keyword>
			</code>
			<code>
				<comment> "Appropriate instructions"</comment>
			</code>
			<code>
				<keyword> else if </keyword>
			</code>... and so on with many branches); but this leads to bulky software architectures where introducing any new control or event requires updating a central part of the code.  It's preferable to let any element of the system that encounters a new control-event-operation association
		</paragraph>
		<code_block>
[control, event, operation]
</code_block>
		<paragraph>store it as a triple of objects into an object structure, such as an array or a list.  Triples in that structure may come from different parts of the system; there is no central know-it-all structure.  The only central element is a simple mechanism which can explore the object structure to execute each 
			<code>
				<feature_name>operation</feature_name>
			</code> associated with a certain 
			<code>
				<feature_name>control</feature_name>
			</code> and a certain 
			<code>
				<feature_name>event</feature_name>
			</code>.  The mechanism is not just simple; it's also independent of your application, since it doesn't need to know about any particular control, event or operation (it will find them in the object structure).  So it can be programmed once and for all, as part of a library such as ISE's EiffelVision 2 for platform-independent graphics.
		</paragraph>
		<paragraph>To build an object structure, we need objects.  A 
			<code>
				<feature_name>control</feature_name>
			</code>, an 
			<code>
				<feature_name>event</feature_name>
			</code> are indeed objects.  But an 
			<code>
				<feature_name>operation</feature_name>
			</code> is not: it's program code -- a routine of a certain class.
		</paragraph>
		<paragraph>Agents address this issue.  An agent is an 
			object that represents a 
			routine, which can then be kept in an object structure.  The simplest form of agent is written 
			<code>
				<keyword>agent</keyword>
			</code>
			<code>
				<local_variable> r</local_variable>
			</code>, where 
			<code>
				<local_variable>r</local_variable>
			</code> is a routine.  This denotes an object.  If 
			<code>
				<feature_name>your_agent</feature_name>
			</code> is such an agent object, the call
		</paragraph>
		<code_block>
<feature_name>your_agent</feature_name>.<feature_name>call</feature_name> <symbol>(</symbol><symbol>[</symbol>a<symbol>,</symbol> b<symbol>]</symbol><symbol>)</symbol>
</code_block>
		<paragraph>where 
			<code>
				<local_variable>a</local_variable>
			</code> and 
			<code>
				<local_variable>b</local_variable>
			</code> are valid arguments for 
			<code>
				<local_variable>r</local_variable>
			</code>, will have the same effect as a direct call to 
			<code>
				<local_variable>r</local_variable>
			</code> with arguments 
			<code>
				<local_variable>a</local_variable>
			</code> and 
			<code>
				<local_variable>b</local_variable>
			</code>.  Of course, if you know that you want to call 
			<code>
				<local_variable>r</local_variable>
			</code> with those arguments, you don't need any agents; just use the direct call 
			<code>
				<local_variable>r</local_variable>
			</code>
			<code>
				<comment> (</comment>
			</code>
			<code>
				<string>a, b</string>
			</code>
			<code>
				<comment>)</comment>
			</code>.  The benefit of using an agent is that you can store it into an object structure to be called 
			<bold>later</bold>, for example when an event-driven mechanism finds the agent in the object structure, associated with a certain control and a certain event.  For this reason agents are also called 
			<bold>delayed calls</bold>.
		</paragraph>
		<info>The notation 
			<code>
				<comment>[</comment>
			</code>
			<code>
				<string>a,  b</string>
			</code>
			<code>
				<comment>]</comment>
			</code> denotes a sequence of elements, or 
			<bold>tuple</bold>.  The reason 
			<code>
				<feature_name>call</feature_name>
			</code> needs a tuple as argument, whereas the direct call 
			<code>
				<local_variable>r</local_variable>
			</code>
			<code>
				<comment> (</comment>
			</code>
			<code>
				<string>a, b</string>
			</code>
			<code>
				<comment>)</comment>
			</code> doesn't, is that 
			<code>
				<feature_name>call</feature_name>
			</code> is a general routine (from the EiffelBase class 
			<code>
				<class_name>ROUTINE</class_name>
			</code>, representing agents) applicable to any agent, whereas the direct call refers explicitly to 
			<code>
				<local_variable>r</local_variable>
			</code> and hencerequires arguments 
			<code>
				<local_variable>a</local_variable>
			</code> and 
			<code>
				<local_variable>b</local_variable>
			</code> of specific types.  The agent mechanism, however, is statically typed like the rest of the language; when you call 
			<code>
				<feature_name>call</feature_name>
			</code>, the type checking mechanism ensures that the tuple you pass as argument contains elements 
			<code>
				<local_variable>a</local_variable>
			</code> and 
			<code>
				<local_variable>b</local_variable>
			</code> of the appropriate types.
		</info>
		<paragraph>A typical use of agents with EiffelVision 2 is</paragraph>
		<code_block>
<feature_name>ok_button</feature_name>.<feature_name>select_actions</feature_name>.<feature_name>extend</feature_name> (<keyword>agent</keyword> <feature_name>your_routine</feature_name>)</code_block>
		<paragraph>which says: "add 
			<code>
				<feature_name>your_routine</feature_name>
			</code> to the list of operations to be performed whenever a 
			<code>
				<feature_name>select</feature_name>
			</code> event (left click) happens on 
			<code>
				<feature_name>ok_button</feature_name>
			</code>". 
			<code>
				<feature_name>ok_button</feature_name>
			</code>.
			<code>
				<feature_name>select_actions </feature_name>
			</code>is the list of agents associated with the button and the event; in list classes, procedure 
			<code>
				<feature_name>extend</feature_name>
			</code> adds an item at the end of a list.  Here, the object to be added is the agent.
		</paragraph>
		<paragraph>This enables the EiffelVision event-handling mechanism to find the appropriate agent when it processes an event, and call 
			<code>
				<feature_name>call</feature_name>
			</code> on that agent to trigger the appropriate routine.  EiffelVision doesn't know that it's 
			<code>
				<feature_name>your_routine</feature_name>
			</code>;  in fact, it doesn't know anything about your application.  It simply finds an agent in the list, and calls 
			<code>
				<feature_name>call</feature_name>
			</code> on it.  For your part, as the author of a graphical application, you don't need to know how EiffelVision handles events; you simply associate the desired agents with the desired controls and events, and let EiffelVision 2 do the rest.
		</paragraph>
		<paragraph>Agents extend to many areas beyond GUIs.  In 
			<bold>numerical computation</bold>, you may use an agent to pass to an "integrator" object a numerical function to be integrated over a certain interval.  In yet another area, you can use agents (as in the iteration library of EiffelBase) to program 
			<bold>iterators</bold> : mechanisms that repetitively apply an arbitrary operation -- represented by an agent -- to every element of a list, tree or other object structure.  More generally, agent embody properties of the associated routines, opening the way to mechanism for 
			<bold>reflection</bold>, also called "introspection": the ability, during software execution, to discover properties of the software itself.
		</paragraph>
	</paragraph></document>
