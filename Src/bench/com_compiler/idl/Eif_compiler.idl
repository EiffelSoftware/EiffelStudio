//
//    Eif_compiler.idl
//
//
//


import "oaidl.idl";

interface IEiffelProject;
interface IEiffelCompiler;
interface IEiffelCompilerEvents;
interface IEiffelSystemBrowser;
interface IEiffelClusterDescriptor;
interface IEiffelClassDescriptor;
interface IEiffelFeatureDescriptor;
interface IEiffelProjectProperties;
interface IEiffelClusterProperties;
interface IEnumClass;
interface IEnumCluster;
interface IEnumFeature;

typedef enum __EIF_COMPILATION_TYPES
{
    EIF_COMPT_is_application,
    EIF_COMPT_is_library,
    EIF_COMPT_is_precompilation
    
} EIF_COMPILATION_TYPES;

[
  oleautomation,
  uuid (53E4FF57-2F3C-4ed2-8B08-89AF6E2C10BA),
  helpstring ("Eiffel Project.")
]
interface IEiffelProject: IUnknown
{
  [helpstring ("Retrieve project.")]
  HRESULT retrieve_project ([in] BSTR a_project_file_name);
  
  [helpstring ("Create new project.")]
  HRESULT create_project ([in] BSTR an_ace_file_name, [in] BSTR project_directory_path);
  
  [helpstring ("Full path to .epr file.")]
  HRESULT project_file_name ([out, retval] BSTR * return_value);

  [helpstring ("Full path to Ace file.")]
  HRESULT ace_file_name ([out, retval] BSTR * return_value);

  [helpstring ("Project directory.")]
  HRESULT project_directory ([out, retval] BSTR * return_value);
  
  [helpstring ("Is project valid?")]
  HRESULT valid_project ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Last error message.")]
  HRESULT last_error_message ([out, retval] BSTR * return_value);

  [helpstring ("Compiler.")]
  HRESULT compiler ([out, retval] IEiffelCompiler ** return_value);
  
  [helpstring ("Has system been compiled?")]
  HRESULT is_compiled ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("System Browser.")]
  HRESULT system_browser ([out, retval] IEiffelSystemBrowser ** return_value);
  
  [helpstring ("Project Properties.")]
  HRESULT project_properties ([out, retval] IEiffelProjectProperties ** return_value);
  
};
//---------------------------------------------------------------------
[
  oleautomation,
  uuid (590282FD-2BEE-44a1-91B3-61C926BAD512),
  helpstring ("Eiffel Compiler.")
]
interface IEiffelCompiler: IUnknown
{
  [helpstring ("Compile.")]
  HRESULT compile ();
  
  [helpstring ("Was last compilation successful?")]
  HRESULT is_successful ([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
  oleautomation,
  uuid (B16070BD-DECE-4e7a-803C-F7A45924CB88),
  helpstring ("Eiffel Compiler Events.")
]
interface IEiffelCompilerEvents: IUnknown
{
  [helpstring ("Should compilation continue.")]
  HRESULT should_continue ([in, out] VARIANT_BOOL * a_boolean);
    
  [helpstring ("Output string.")]
  HRESULT output_string ([in] BSTR a_string);
  
  [helpstring ("Last error.")]
  HRESULT last_error ([in] BSTR error_message, [in] BSTR file_name, [in] ULONG line_number);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(F09831BB-B43F-42db-821F-D1B3821397F0),
    helpstring ("Eiffel Class Enumeration.")
]

interface IEnumClass : IUnknown
{
    HRESULT Next(
        [out] IEiffelClassDescriptor **rgelt,
        [out] ULONG *pceltFetched);

    HRESULT Skip(
        [in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone(
        [out] IEnumClass ** ppenum);
        
    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelClassDescriptor **rgelt); 
    
    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(7D904660-5A31-435a-B154-10CACDBD363C),
    helpstring ("Eiffel Cluster Enumeration.")
]

interface IEnumCluster : IUnknown
{
    HRESULT Next(
        [out] IEiffelClusterDescriptor **rgelt,
        [out] ULONG *pceltFetched);

    HRESULT Skip(
        [in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone(
        [out] IEnumCluster ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelClusterDescriptor **rgelt); 
    
    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
    oleautomation,
    uuid(30BF27F2-86DD-4589-AD8A-8E40FF3D4D07),
    helpstring ("Eiffel Feature Enumeration.")
]
interface IEnumFeature : IUnknown
{
    HRESULT Next(
        [out] IEiffelFeatureDescriptor **rgelt,
        [out] ULONG *pceltFetched);

    HRESULT Skip(
        [in] ULONG celt);

    HRESULT Reset();

    HRESULT Clone(
        [out] IEnumFeature ** ppenum);

    HRESULT ith_item ([in] ULONG an_index, [out] IEiffelFeatureDescriptor **rgelt); 
    
    HRESULT count ([out, retval] ULONG *return_value);
};
//---------------------------------------------------------------------

[
  oleautomation,
  uuid (A4CAF314-6659-48d8-A68E-463492D79D8A),
  helpstring ("System Browser.")
]
interface IEiffelSystemBrowser: IUnknown
{ 
  [helpstring ("List of classes in system.")]
  HRESULT system_classes ([out, retval] IEnumClass ** some_classes);

  [helpstring ("Number of classes in system.")]
  HRESULT class_count ([out, retval] ULONG * return_value);

  [helpstring ("List of system's clusters.")]
  HRESULT system_clusters ([out, retval] IEnumCluster ** some_clusters);
  
  [helpstring ("Number of top-level clusters in system.")]
  HRESULT cluster_count ([out, retval] ULONG * return_value);

  [helpstring ("Cluster descriptor.")]
  HRESULT cluster_descriptor ([in] BSTR cluster_name, [out, retval] IEiffelClusterDescriptor ** return_value);

  [helpstring ("Class descriptor.")]
  HRESULT class_descriptor ([in] BSTR class_name, [out, retval] IEiffelClassDescriptor ** return_value);
  
  [helpstring ("Feature descriptor.")]
  HRESULT feature_descriptor ([in] BSTR class_name, [in] BSTR feature_name, [out, retval] IEiffelFeatureDescriptor ** return_value);
};
//---------------------------------------------------------------------


[
  oleautomation,
  uuid (81062B0E-B1D6-4c5d-8B8B-71464E86B869),
  helpstring ("Eiffel Cluster Descriptor.")
]
interface IEiffelClusterDescriptor: IUnknown
{
  [helpstring ("Cluster name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Cluster description.")]
  HRESULT description ([out, retval] BSTR * return_value);
  
  [helpstring ("List of classes in cluster.")]
  HRESULT classes ([out, retval] IEnumClass ** some_classes);

  [helpstring ("Number of classes in cluster.")]
  HRESULT class_count ([out, retval] ULONG * return_value);

  [helpstring ("List of subclusters in cluster.")]
  HRESULT clusters ([out, retval] IEnumCluster ** some_clusters);

  [helpstring ("Number of subclusters in cluster.")]
  HRESULT cluster_count ([out, retval] ULONG * return_value);

  [helpstring ("Full path to cluster.")]
  HRESULT cluster_path ([out, retval] BSTR * path);
};
//---------------------------------------------------------------------

[
  oleautomation,
  uuid (2138B7F7-250E-4156-A3F5-A4E9F4AF8C5D),
  helpstring ("Eiffel Class Descriptor.")
]
interface IEiffelClassDescriptor: IUnknown
{
  [helpstring ("Class name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Class description.")]
  HRESULT description ([out, retval] BSTR * return_value);
  
  [helpstring ("Class external name.")]
  HRESULT external_name ([out, retval] BSTR * return_value);
  
  [helpstring ("List of names of class features.")]
  HRESULT feature_names ([out, retval] SAFEARRAY (BSTR) * names);

  [helpstring ("List of class features.")]
  HRESULT features ([out, retval] IEnumFeature ** some_features);

  [helpstring ("Number of class features.")]
  HRESULT feature_count ([out, retval] ULONG * return_value);

  [helpstring ("List of class features including ancestor features.")]
  HRESULT flat_features ([out, retval] IEnumFeature ** some_features);

  [helpstring ("Number of flat class features.")]
  HRESULT flat_feature_count ([out, retval] ULONG * return_value);
  
  [helpstring ("List of class clients.")]
  HRESULT clients ([out, retval] IEnumClass ** some_clients);

  [helpstring ("Number of class clients.")]
  HRESULT client_count ([out, retval] ULONG * return_value);

  [helpstring ("List of class suppliers.")]
  HRESULT suppliers ([out, retval] IEnumClass ** some_suppliers);

  [helpstring ("Number of class suppliers.")]
  HRESULT supplier_count ([out, retval] ULONG * return_value);

  [helpstring ("List of direct ancestors of class.")]
  HRESULT ancestors ([out, retval] IEnumClass ** some_ancestors);

  [helpstring ("Number of direct ancestors.")]
  HRESULT ancestor_count ([out, retval] ULONG * return_value);
  
  [helpstring ("List of direct descendants of class.")]
  HRESULT descendants ([out, retval] IEnumClass ** some_descendants);

  [helpstring ("Number of direct descendants.")]
  HRESULT descendant_count ([out, retval] ULONG * return_value);
  
  [helpstring ("Full path to file.")]
  HRESULT class_path ([out, retval] BSTR * path);
  
  [helpstring ("Is class deferred?")]
  HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is class external?")]
  HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is class generic?")]
  HRESULT is_generic ([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
  oleautomation,
  uuid (2CB5C09A-2222-42f7-9371-398FB71EBB93),
  helpstring ("Eiffel Feature Descriptor.")
]
interface IEiffelFeatureDescriptor: IUnknown
{
  [helpstring ("Feature name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [helpstring ("Feature external name.")]
  HRESULT external_name ([out, retval] BSTR * return_value);

  [helpstring ("Name of class where feature is written in.")]
  HRESULT written_class ([out, retval] BSTR * return_value);
  
  [helpstring ("Name of class where feature was evaluated in.")]
  HRESULT evaluated_class ([out, retval] BSTR * return_value);

  [helpstring ("Feature description.")]
  HRESULT description ([out, retval] BSTR * return_value);

  [helpstring ("Feature location, full path to file and line number")]
  HRESULT feature_location (  [in, out] BSTR * file_path, 
                [in, out] ULONG * line_number);
  
  [helpstring ("Feature signature.")]
  HRESULT signature ([out, retval] BSTR * return_value);
  
  [helpstring ("List of all feature callers, includding callers of ancestor and descendant versions.")]
  HRESULT all_callers ([out, retval] IEnumFeature ** some_callers);

  [helpstring ("Number of all callers.")]
  HRESULT all_callers_count ([out, retval] ULONG * return_value);

  [helpstring ("List of feature callers.")]
  HRESULT local_callers ([out, retval] IEnumFeature ** some_callers);

  [helpstring ("Number of local callers.")]
  HRESULT local_callers_count ([out, retval] ULONG * return_value);

  [helpstring ("List of feature callers, including callers of descendant versions.")]
  HRESULT descendant_callers ([out, retval] IEnumFeature ** some_callers);

  [helpstring ("Number of descendant callers.")]
  HRESULT descendant_callers_count ([out, retval] ULONG * return_value);
  
  [helpstring ("List of implementers.")]
  HRESULT implementers ([out, retval] IEnumFeature ** some_implementers);

  [helpstring ("Number of feature implementers.")]
  HRESULT implementer_count ([out, retval] ULONG * return_value);
  
  [helpstring ("List of ancestor versions.")]
  HRESULT ancestor_versions ([out, retval] IEnumFeature ** some_implementers);

  [helpstring ("Number of ancestor versions.")]
  HRESULT ancestor_version_count ([out, retval] ULONG * return_value);
  
  [helpstring ("List of descendant versions.")]
  HRESULT descendant_versions ([out, retval] IEnumFeature ** some_implementers);

  [helpstring ("Number of descendant versions.")]
  HRESULT descendant_version_count ([out, retval] ULONG * return_value);
  
  [helpstring ("Is feature exported to all classes?")]
  HRESULT exported_to_all ([out, retval] VARIANT_BOOL * names);
  
  [helpstring ("Is once feature?")]
  HRESULT is_once ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is external feature?")]
  HRESULT is_external ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is deferred feature?")]
  HRESULT is_deferred ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("Is constant?")]
  HRESULT is_constant ([out, retval] VARIANT_BOOL * return_value);
  
  [helpstring ("is frozen feature?")]
  HRESULT is_frozen ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is infix?")]
  HRESULT is_infix ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is prefix?")]
  HRESULT is_prefix ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is attribute?")]
  HRESULT is_attribute ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is procedure?")]
  HRESULT is_procedure ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is function?")]
  HRESULT is_function ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is unique?")]
  HRESULT is_unique ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Is obsolete feature?")]
  HRESULT is_obsolete ([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Does feature have precondition?")]
  HRESULT has_precondition([out, retval] VARIANT_BOOL * return_value);

  [helpstring ("Does feature have postcondition?")]
  HRESULT has_postcondition([out, retval] VARIANT_BOOL * return_value);
};
//---------------------------------------------------------------------

[
  dual, object,
  uuid (C212FAAB-FAA8-48b9-9D4E-2D0CA4EB3354),
  helpstring ("Eiffel Project Properties.")
]
interface IEiffelProjectProperties: IDispatch
{
  [helpstring ("Apply changes")]
  HRESULT Apply ();
  
  [id (DISPID_VALUE), propget, helpstring ("System name.")]
  HRESULT system_name ([out, retval] BSTR * return_value);

  [id (DISPID_VALUE), propput, helpstring ("System name.")]
  HRESULT system_name ([in] BSTR a_name);

  [id (103), propget, helpstring ("Root class name.")]
  HRESULT root_class_name ([out, retval] BSTR * return_value);

  [id (103), propput, helpstring ("Root class name.")]
  HRESULT root_class_name ([in] BSTR a_name);
  
  [id (104), propget, helpstring ("Creation routine name.")]
  HRESULT creation_routine ([out, retval] BSTR * return_value);
  
  [id (104), propput, helpstring ("Creation routine name.")]
  HRESULT creation_routine ([in] BSTR a_routine);
  
  [id (121), propget, helpstring ("Compilation type.")]
  HRESULT compilation_type ([out, retval] EIF_COMPILATION_TYPES * return_value);
  
  [id (121), propput, helpstring ("Compilation type.")]
  HRESULT compilation_type ([in] EIF_COMPILATION_TYPES new_value);  
  
  [id (122), propget, helpstring ("Is console application?")]
  HRESULT console_application ([out, retval] VARIANT_BOOL * return_value);
  
  [id (122), propput, helpstring ("Is console application?")]
  HRESULT console_application ([in] VARIANT_BOOL new_value);  
  
  [id (105), propget, helpstring ("Should preconditions be evaluated?")]
  HRESULT evaluate_require ([out, retval] VARIANT_BOOL * return_value);

  [id (105), propput, helpstring ("Should preconditions be evaluated?")]
  HRESULT evaluate_require ([in] VARIANT_BOOL new_value);
  
  [id (106), propget, helpstring ("Should postconditions be evaluated?")]
  HRESULT evaluate_ensure ([out, retval] VARIANT_BOOL * return_value);
    
  [id (106), propput, helpstring ("Should postconditions be evaluated?")]
  HRESULT evaluate_ensure ([in] VARIANT_BOOL new_value);
  
  [id (107), propget, helpstring ("Should check assertions be evaluated?")]
  HRESULT evaluate_check ([out, retval] VARIANT_BOOL * return_value);
  
  [id (107), propput, helpstring ("Should check assertions be evaluated?")]
  HRESULT evaluate_check ([in] VARIANT_BOOL new_value);
  
  [id (108), propget, helpstring ("Should loop assertions be evaluated?")]
  HRESULT evaluate_loop ([out, retval] VARIANT_BOOL * return_value);
  
  [id (108), propput, helpstring ("Should loop assertions be evaluated?")]
  HRESULT evaluate_loop ([in] VARIANT_BOOL new_value);
  
  [id (109), propget, helpstring ("Should class invariants be evaluated?")]
  HRESULT evaluate_invariant ([out, retval] VARIANT_BOOL *return_value);
  
  [id (109), propput, helpstring ("Should class invariants be evaluated?")]
  HRESULT evaluate_invariant ([in] VARIANT_BOOL new_value);
  
  [id (120), propget, helpstring ("Working directory.")]
  HRESULT working_directory ([out, retval] BSTR * return_value);
  
  [id (120), propput, helpstring ("Working directory.")]
  HRESULT working_directory ([in] BSTR new_directory); 
  
  [id (110), propget, helpstring ("Program arguments.")]
  HRESULT arguments ([out, retval] BSTR * return_value);
  
  [id (110), propput, helpstring ("Program arguments.")]
  HRESULT arguments ([in] BSTR new_arguments); 

  [id (111), propget, helpstring ("Generate debug info?")]
  HRESULT debug_info ([out, retval] VARIANT_BOOL * return_value);
  
  [id (111), propput, helpstring ("Generate debug info?")]
  HRESULT debug_info ([in] VARIANT_BOOL new_value);
  
  [id (112), propget, helpstring ("List of clusters in current project (list of IEiffelClusterProperties*).")]
  HRESULT clusters ([out, retval] VARIANT * return_value);

  [id (113), helpstring ("Add a cluster to the project.")]
  HRESULT add_cluster ([in] BSTR cluster_name, [in] BSTR parent_name, [in] BSTR cluster_path);
  
  [id (114), helpstring ("Remove a cluster from the project.")]
  HRESULT remove_cluster ([in] BSTR cluster_name);

  [id (115), helpstring ("Cluster properties.")]
  HRESULT cluster_properties ([in] BSTR cluster_name, [out, retval] IEiffelClusterProperties ** return_value);
  
  [id (116), propget, helpstring ("Imported assemblies.")]
  HRESULT assemblies ([out, retval] SAFEARRAY (BSTR) * return_value);
  
  [id (117), helpstring ("Add an assembly to the project.")]
  HRESULT add_assembly ([in] BSTR assembly_path);
  
  [id (118), helpstring ("Remove an assembly from the project.")]
  HRESULT remove_assembly ([in] BSTR assembly_path);  
};
//---------------------------------------------------------------------

[
  dual, object,
  uuid (5D0B0013-F831-4ff6-A443-7B30882A5EB8),
  helpstring ("Eiffel Cluster Properties (for Ace file).")
]
interface IEiffelClusterProperties: IDispatch
{
  [id (DISPID_VALUE), propget, helpstring ("Cluster name.")]
  HRESULT name ([out, retval] BSTR * return_value);

  [id (DISPID_VALUE), propput, helpstring ("Cluster name.")]
  HRESULT name ([in] BSTR a_name);

  [id (200), propget, helpstring ("Full path to cluster.")]
  HRESULT cluster_path ([out, retval] BSTR * path);

  [id (200), propput, helpstring ("Full path to cluster.")]
  HRESULT cluster_path ([in] BSTR path);
  
  [id (201), propget, helpstring ("Should this cluster classes take priority over other classes with same name.")]
  HRESULT override ([out, retval] VARIANT_BOOL * return_value);
  
  [id (201), propput, helpstring ("Should this cluster classes take priority over other classes with same name.")]
  HRESULT override ([in] VARIANT_BOOL a_bool);
  
  [id (202), propget, helpstring ("Should this cluster be treated as library?")]
  HRESULT is_library ([out, retval] VARIANT_BOOL * return_value);
  
  [id (202), propput, helpstring ("Should this cluster be treated as library?")]
  HRESULT is_library ([in] VARIANT_BOOL a_bool);
  
  [id (203), propget, helpstring ("Should all subclusters be included?")]
  HRESULT all ([out, retval] VARIANT_BOOL * return_value);
  
  [id (203), propput, helpstring ("Should all subclusters be included?")]
  HRESULT all ([in] VARIANT_BOOL return_value);
  
  [id (204), propget, helpstring ("Should use system default?")]
  HRESULT use_system_default ([out, retval] VARIANT_BOOL * return_value);

  [id (204), propput, helpstring ("Should use system default?")]
  HRESULT use_system_default ([in] VARIANT_BOOL new_value);  

  [id (205), propget, helpstring ("Should preconditions be evaluated by default?")]
  HRESULT evaluate_require_by_default ([out, retval] VARIANT_BOOL * return_value);

  [id (205), propput, helpstring ("Should preconditions be evaluated by default?")]
  HRESULT evaluate_require_by_default ([in] VARIANT_BOOL new_value);
  
  [id (206), propget, helpstring ("Should postconditions be evaluated by default?")]
  HRESULT evaluate_ensure_by_default ([out, retval] VARIANT_BOOL * return_value);
    
  [id (206), propput, helpstring ("Should postconditions be evaluated by default?")]
  HRESULT evaluate_ensure_by_default ([in] VARIANT_BOOL new_value);
  
  [id (207), propget, helpstring ("Should check assertions be evaluated by default?")]
  HRESULT evaluate_check_by_default ([out, retval] VARIANT_BOOL * return_value);
  
  [id (207), propput, helpstring ("Should check assertions be evaluated by default?")]
  HRESULT evaluate_check_by_default ([in] VARIANT_BOOL new_value);
  
  [id (208), propget, helpstring ("Should loop assertions be evaluated by default?")]
  HRESULT evaluate_loop_by_default ([out, retval] VARIANT_BOOL * return_value);
  
  [id (208), propput, helpstring ("Should loop assertions be evaluated by default?")]
  HRESULT evaluate_loop_by_default ([in] VARIANT_BOOL new_value);
  
  [id (209), propget, helpstring ("Should class invariants be evaluated by default?")]
  HRESULT evaluate_invariant_by_default ([out, retval] VARIANT_BOOL *return_value);
  
  [id (209), propput, helpstring ("Should class invariants be evaluated by default?")]
  HRESULT evaluate_invariant_by_default ([in] VARIANT_BOOL new_value);
  
  [helpstring ("List of excluded directories.")]
  HRESULT excluded ([out, retval] SAFEARRAY (BSTR) * return_value);
  
  [helpstring ("Add a directory to exclude.")]
  HRESULT add_exclude ([in] BSTR dir_name);
  
  [helpstring ("Remove a directory to exclude.")]
  HRESULT remove_exclude ([in] BSTR dir_name);  
};
//---------------------------------------------------------------------

[
  uuid (A81CA1A9-3EEF-4e47-BEAE-C16325EEFA3F)
]
library eiffel_compiler
{
  importlib ("stdole2.tlb");
  importlib ("stdole2.tlb");
  interface IEiffelProject;
  interface IEiffelCompiler;
  interface IEiffelCompilerEvents;
  interface IEiffelSystemBrowser;
  interface IEiffelClusterDescriptor;
  interface IEiffelClassDescriptor;
  interface IEiffelFeatureDescriptor;
  interface IEiffelProjectProperties;
  interface IEiffelClusterProperties;
  interface IEnumClass;
  interface IEnumCluster;
  interface IEnumFeature;
  
  [
    uuid (28F511DB-0CCE-44c5-9DD5-E93066C0B00F)
  ]
  coclass CEiffelProject
  {
    [default] interface IEiffelProject;
  };

  [
    uuid (86D23C62-E03D-4a16-83F6-8F79D628110E),
    noncreatable 
  ]
  coclass CEiffelCompiler
  {
    [default] interface IEiffelCompiler;
    [default, source] interface IEiffelCompilerEvents;
  };

};
