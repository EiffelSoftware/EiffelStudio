
# line 13 "parser.y"
#include "eiffel_c.h"
#include <stdio.h>

#define NORMAL_LEVEL	0
#define ASSERT_LEVEL	1
#define INVARIANT_LEVEL	2
#define SET_POS(x) yacc_position = x->start_position; yacc_line_number = x->line_number

#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef NULL
#define NULL 0
#endif

extern char token_str[];
int fclause_pos;	/* To memorize the beginning of a feature clause */
int fbody_pos;		/* To memorize the beginning of a feature body */
int nb_tilde;		/* To memorize the number of tilde in a routine creation */

#define CR_EMPTY	0
#define CR_ROUTINE	1
#define CR_CONSTANT	2


# line 42 "parser.y"
typedef union
#ifdef __cplusplus
	YYSTYPE
#endif
 {
	char *node;

	int32 value;

	struct location *loc;

	struct cr_struct {		/* Structure used for resolving conflicts on
							 * feature declaration body 
							 */
		char *cr_node;		/* either node ROUTINE_AS or CONSTANT_AS */
		int cr_type;		/* either CR_ROUTINE  or CR_CONSTANT */
	} cr_node;
} YYSTYPE;
# define TE_DOTDOT 257
# define TE_IMPLIES 258
# define TE_OR 259
# define TE_XOR 260
# define TE_AND 261
# define TE_NE 262
# define TE_EQ 263
# define TE_LT 264
# define TE_GT 265
# define TE_LE 266
# define TE_GE 267
# define TE_PLUS 268
# define TE_MINUS 269
# define TE_STAR 270
# define TE_SLASH 271
# define TE_MOD 272
# define TE_DIV 273
# define TE_POWER 274
# define TE_FREE 275
# define TE_NOT 276
# define TE_STRIP 277
# define TE_OLD 278
# define TE_DOT 279
# define TE_LPARAN 280
# define TE_ALIAS 281
# define TE_ALL 282
# define TE_INTEGER 283
# define TE_CHAR 284
# define TE_REAL 285
# define TE_STRING 286
# define TE_ID 287
# define TE_A_BIT 288
# define TE_BANG 289
# define TE_BIT 290
# define TE_SEMICOLON 291
# define TE_COLON 292
# define TE_COMMA 293
# define TE_CREATION 294
# define TE_LARRAY 295
# define TE_RARRAY 296
# define TE_RPARAN 297
# define TE_LCURLY 298
# define TE_RCURLY 299
# define TE_CURLYDOTDOT 300
# define TE_LSQURE 301
# define TE_RSQURE 302
# define TE_CONSTRAIN 303
# define TE_FALSE 304
# define TE_TRUE 305
# define TE_ACCEPT 306
# define TE_ADDRESS 307
# define TE_AS 308
# define TE_ASSIGN 309
# define TE_CHECK 310
# define TE_CLASS 311
# define TE_CURRENT 312
# define TE_DEBUG 313
# define TE_DEFERRED 314
# define TE_DO 315
# define TE_ELSE 316
# define TE_ELSEIF 317
# define TE_END 318
# define TE_ENSURE 319
# define TE_EXPANDED 320
# define TE_EXPORT 321
# define TE_EXTERNAL 322
# define TE_FEATURE 323
# define TE_FROM 324
# define TE_FROZEN 325
# define TE_IF 326
# define TE_INDEXING 327
# define TE_IN_END 328
# define TE_INFIX 329
# define TE_INHERIT 330
# define TE_INSPECT 331
# define TE_INVARIANT 332
# define TE_IS 333
# define TE_LIKE 334
# define TE_LOCAL 335
# define TE_LOOP 336
# define TE_OBSOLETE 337
# define TE_ONCE 338
# define TE_PRECURSOR 339
# define TE_PREFIX 340
# define TE_REDEFINE 341
# define TE_RENAME 342
# define TE_REQUIRE 343
# define TE_RESCUE 344
# define TE_RESULT 345
# define TE_RETRY 346
# define TE_SELECT 347
# define TE_SEPARATE 348
# define TE_THEN 349
# define TE_UNDEFINE 350
# define TE_UNIQUE 351
# define TE_UNTIL 352
# define TE_VARIANT 353
# define TE_WHEN 354
# define EIF_ERROR2 355
# define EIF_ERROR3 356
# define EIF_ERROR4 357
# define EIF_ERROR5 358
# define EIF_ERROR6 359
# define EIF_ERROR7 360

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

/*#include <values.h>*/

#ifdef __cplusplus

#ifndef yyerror
	void yyerror(const char *);
#endif

#ifndef yylex
#ifdef __EXTERN_C__
	extern "C" { int yylex(void); }
#else
	int yylex(void);
#endif
#endif
	int yyparse(void);

#endif
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
YYSTYPE yylval;
YYSTYPE yyval;
typedef int yytabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int yy_yys[YYMAXDEPTH], *yys = yy_yys;
YYSTYPE yy_yyv[YYMAXDEPTH], *yyv = yy_yyv;
#else	/* user does initial allocation */
int *yys;
YYSTYPE *yyv;
#endif
static int yymaxdepth = YYMAXDEPTH;
# define YYERRCODE 256

# line 1490 "parser.y"

char deferred;					/* Boolean mark for deferred class */
char expanded;					/* Boolean mark for expanded class */
char separate;					/* Boolean mark for separate class */
char is_frozen;					/* Boolean mark for frozen feature names */

int id_level;					/* Boolean for controlling the semantic
								 * action of rule `A_feature' .
								 */
int inherit_context;			/* Flag for context sensitivity of token
								 * TE_END.
								 */
char generic_name[IDLENGTH];	/* Formal generic parameter name */
int yywrap(void)
{
	return 1;
}
yytabelem yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 3,
	311, 7,
	314, 7,
	320, 7,
	348, 7,
	-2, 5,
-1, 10,
	311, 6,
	314, 6,
	320, 6,
	348, 6,
	-2, 13,
-1, 52,
	294, 274,
	-2, 273,
-1, 53,
	287, 66,
	-2, 42,
-1, 58,
	323, 26,
	-2, 25,
-1, 69,
	287, 33,
	329, 33,
	340, 33,
	-2, 278,
-1, 83,
	287, 34,
	329, 34,
	340, 34,
	-2, 281,
-1, 87,
	321, 76,
	341, 76,
	347, 76,
	350, 76,
	-2, 71,
-1, 104,
	287, 78,
	329, 78,
	340, 78,
	-2, 77,
-1, 110,
	314, 167,
	315, 167,
	318, 167,
	322, 167,
	335, 167,
	338, 167,
	344, 167,
	352, 167,
	353, 167,
	-2, 419,
-1, 123,
	298, 84,
	-2, 42,
-1, 134,
	314, 168,
	315, 168,
	318, 168,
	322, 168,
	335, 168,
	338, 168,
	344, 168,
	352, 168,
	353, 168,
	-2, 419,
-1, 145,
	318, 96,
	341, 96,
	347, 96,
	-2, 97,
-1, 204,
	318, 32,
	323, 32,
	332, 32,
	-2, 44,
-1, 208,
	318, 100,
	347, 100,
	-2, 101,
-1, 267,
	318, 104,
	-2, 105,
-1, 372,
	287, 287,
	-2, 293,
-1, 402,
	283, 407,
	285, 407,
	-2, 23,
-1, 440,
	287, 113,
	-2, 138,
-1, 449,
	316, 140,
	317, 140,
	318, 140,
	319, 140,
	332, 140,
	344, 140,
	352, 140,
	353, 140,
	354, 140,
	-2, 144,
-1, 459,
	313, 256,
	324, 243,
	326, 204,
	331, 221,
	-2, 314,
-1, 495,
	316, 139,
	317, 139,
	318, 139,
	319, 139,
	332, 139,
	344, 139,
	352, 139,
	353, 139,
	354, 139,
	-2, 143,
-1, 556,
	317, 209,
	-2, 208,
	};
# define YYNPROD 420
# define YYLAST 1103
yytabelem yyact[]={

   176,   447,   560,   539,   583,   179,   453,   352,   193,   243,
   449,   194,   192,   498,   109,    28,   188,   186,    13,   187,
    13,   191,   158,    27,   340,   135,   404,    24,    48,   323,
   183,   541,   371,   182,   565,    25,    37,   178,    20,   126,
    35,   130,   577,   145,   586,   446,   334,   267,    31,   261,
    27,    30,   444,    14,    24,    26,    20,   115,     5,   130,
   416,    39,    40,    14,     6,   309,   308,    35,    39,    40,
   240,   128,   102,    19,   499,    31,   208,    34,    30,    37,
    54,    36,    26,    49,    34,   131,    37,    14,    36,   128,
   307,    23,     7,   419,   390,    20,   104,    32,    33,   129,
   349,   402,    43,   131,    32,    33,    39,    40,   507,    38,
   121,   501,   426,   427,   552,    77,    53,   129,    72,     3,
   429,   501,    34,   506,    37,    14,    36,   325,    72,   508,
    49,   123,    80,    93,   435,   611,   428,   118,   137,   597,
   157,   159,    32,    33,   407,   165,   156,   361,   119,   139,
   141,   570,    38,   206,    20,   553,    61,   535,   455,    38,
   162,   326,   493,   161,   127,   237,   164,    94,   584,    14,
   581,   475,   165,   558,    86,   421,   476,   509,    14,   362,
   494,   253,    15,   510,   214,   344,   154,   155,   101,   241,
   152,    75,   215,    63,   492,   105,   118,    38,   318,   151,
    89,   317,    62,   160,   399,   317,   256,   119,   505,    89,
   127,   504,   363,    42,   143,   503,   528,   318,   502,    20,
   142,   198,   377,   351,   350,   348,   147,   485,   491,    99,
   261,   555,   241,   388,   359,   554,   533,   387,   358,   259,
    84,   263,   262,   237,   410,   237,   237,   237,   237,   237,
   258,   395,   365,   299,   342,    91,    69,   260,    45,   127,
    44,   573,   310,   310,   310,   310,   219,   366,   137,   257,
   355,   343,   213,   422,   113,   394,    18,   460,   239,   237,
   237,   237,   237,   237,   237,   237,   237,   239,   237,    45,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   513,   241,   320,   321,    14,    20,   237,    39,    40,    57,
   241,   454,   341,   596,   271,    34,   316,    46,    14,   319,
   127,   277,   238,    34,   452,    46,    14,    47,    39,    40,
   273,   239,   237,   237,   524,   241,   237,   382,   242,   244,
   245,   246,   247,   248,   311,   312,   313,    14,   310,   337,
   315,   302,   353,   576,   241,   310,   338,   252,   255,   378,
   254,   345,   253,   379,   226,   197,   575,   574,   237,   163,
    79,   338,    82,   329,   237,   303,   386,   149,    22,   251,
    71,   346,   132,   250,   211,   383,   237,   278,   279,   280,
   281,   282,   283,   284,   285,   287,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   384,   304,    27,   333,
   300,   368,   369,    11,   389,   212,   249,   305,   305,   375,
   376,   398,   341,    51,    16,    35,   490,   347,    98,   364,
    67,   409,   260,    31,   403,   431,    30,   414,   406,   450,
    26,   222,   223,   224,   225,   226,   197,   441,    68,    96,
   391,    85,   127,   331,    59,   332,   456,   440,   462,   461,
   457,   400,   433,   544,   534,    56,   532,   335,   482,   484,
   111,   483,   481,   463,   459,   495,   479,   480,   153,   478,
   127,   477,   489,   392,   269,    83,   500,   229,   228,   230,
   227,   236,   235,   234,   232,   233,   231,   220,   221,   222,
   223,   224,   225,   226,   197,    95,   514,   607,   542,   522,
   367,   488,   237,   112,   373,   497,    81,   237,   237,   237,
   237,   237,   237,   500,   531,   525,   335,   527,   385,    73,
   601,   572,   218,   127,   543,   536,   442,   559,   500,   515,
   547,   545,   537,   328,   549,   546,   550,   548,   530,   330,
   114,    88,   512,   487,   598,   373,   562,   127,   571,   608,
   563,   582,   567,   569,   556,   538,   561,   566,   486,   107,
    64,    55,   108,   585,    50,   578,   587,   125,   605,   562,
   237,   590,   594,   563,   589,   591,   593,   599,   106,   561,
   588,   275,   592,   134,   202,   270,   237,   133,   110,   458,
   604,   237,   357,   606,   237,   173,   172,   445,   432,   609,
   610,   420,   197,   174,   177,   175,   203,   171,   448,   430,
   180,    34,   181,    37,    14,    36,   201,   306,   437,   436,
   439,   200,   184,   216,   217,   199,   413,   339,   185,   417,
   412,    32,    33,   396,   336,   327,   268,   209,   274,   189,
   220,   221,   222,   223,   224,   225,   226,   197,   210,   146,
   511,   148,   124,    70,    60,   324,   354,   265,   120,   516,
   517,   518,   519,   520,   521,   150,   198,   100,   204,   202,
   136,    97,   190,    66,    21,    17,    10,     8,   205,     9,
   173,   172,     4,   401,   405,   322,    38,   197,   174,   177,
   175,   203,   171,   117,   116,   180,    34,   181,    37,    14,
    36,   201,   140,   138,   557,    76,   200,   184,   166,   169,
   199,   473,   466,   185,   411,    65,    32,    33,   168,   167,
   370,   314,   579,   196,   189,   170,   195,   496,   288,   465,
    58,   468,   467,   443,   595,   474,   523,   472,   564,   551,
   471,   600,   470,   540,   580,   568,   469,   202,    90,    74,
    41,   198,    87,   603,   150,   276,    92,   190,   173,   172,
   434,   464,   415,   418,   424,   197,   174,   177,   175,   203,
   171,    38,   451,   180,    34,   181,    37,    14,    36,   201,
   438,   425,   423,   408,   200,   184,   202,   393,   199,   381,
   266,   185,   207,   144,    32,    33,   272,   173,   172,   122,
   103,    52,   189,   380,   197,   174,   177,   175,   203,   171,
   264,    78,   180,    34,   181,    37,    14,    36,   201,    29,
    12,     2,     1,   200,   184,   202,     0,   199,     0,   198,
   185,     0,     0,    32,    33,   190,   173,   172,     0,   286,
     0,   189,     0,   197,   174,   177,   175,   372,   171,    38,
     0,   180,    34,   181,    37,    14,    36,   201,     0,     0,
     0,     0,   200,   184,     0,   356,   374,     0,   198,   185,
     0,     0,    32,    33,   190,     0,     0,   360,     0,     0,
   189,     0,     0,     0,     0,     0,     0,     0,    38,   229,
   228,   230,   227,   236,   235,   234,   232,   233,   231,   220,
   221,   222,   223,   224,   225,   226,   197,   198,     0,     0,
     0,     0,     0,   190,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    38,   229,   228,
   230,   227,   236,   235,   234,   232,   233,   231,   220,   221,
   222,   223,   224,   225,   226,   197,   229,   228,   230,   227,
   236,   235,   234,   232,   233,   231,   220,   221,   222,   223,
   224,   225,   226,   197,   230,   227,   236,   235,   234,   232,
   233,   231,   220,   221,   222,   223,   224,   225,   226,   197,
   529,     0,     0,     0,     0,   526,   229,   228,   230,   227,
   236,   235,   234,   232,   233,   231,   220,   221,   222,   223,
   224,   225,   226,   197,     0,     0,   602,   229,   228,   230,
   227,   236,   235,   234,   232,   233,   231,   220,   221,   222,
   223,   224,   225,   226,   197,   397,   229,   228,   230,   227,
   236,   235,   234,   232,   233,   231,   220,   221,   222,   223,
   224,   225,   226,   197,     0,     0,   301,   228,   230,   227,
   236,   235,   234,   232,   233,   231,   220,   221,   222,   223,
   224,   225,   226,   197,   227,   236,   235,   234,   232,   233,
   231,   220,   221,   222,   223,   224,   225,   226,   197,   236,
   235,   234,   232,   233,   231,   220,   221,   222,   223,   224,
   225,   226,   197 };
yytabelem yypact[]={

  -208,-10000000,  -256,-10000000,-10000000,-10000000,-10000000,-10000000,    17,  -129,
    17,-10000000,-10000000,   -16,-10000000,    18,-10000000,  -200,-10000000,   -88,
-10000000,   -33,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,    42,-10000000,-10000000,-10000000,-10000000,
-10000000,  -254,-10000000,-10000000,  -162,-10000000,-10000000,-10000000,  -214,  -250,
    22,-10000000,-10000000,    -2,-10000000,  -100,-10000000,-10000000,-10000000,   -38,
    18,-10000000,-10000000,    22,  -112,  -217,  -191,   -38,-10000000,   -58,
    18,    -2,   -92,-10000000,   -39,    18,  -151,-10000000,  -191,-10000000,
-10000000,-10000000,-10000000,-10000000,   -70,    -2,-10000000,  -246,-10000000,  -107,
-10000000,-10000000,-10000000,   -92,-10000000,-10000000,-10000000,   -58,  -192,-10000000,
    17,-10000000,-10000000,  -190,-10000000,-10000000,  -231,  -192,-10000000,-10000000,
-10000000,-10000000,-10000000,   -25,-10000000,-10000000,-10000000,-10000000,  -250,  -250,
   -79,-10000000,  -307,    -2,  -192,  -103,-10000000,   -92,    18,    18,
    60,  -109,  -155,-10000000,-10000000,   539,-10000000,  -192,-10000000,-10000000,
-10000000,-10000000,-10000000,    17,  -265,-10000000,   -58,-10000000,   -21,-10000000,
  -124,-10000000,  -231,-10000000,   -92,   -92,-10000000,-10000000,    34,-10000000,
-10000000,-10000000,   539,    -2,   778,    30,-10000000,-10000000,-10000000,-10000000,
-10000000,   539,   539,   539,   539,   539,   539,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,    78,
    83,    81,-10000000,    79,-10000000,-10000000,    17,-10000000,   -48,  -249,
   -56,  -231,-10000000,-10000000,-10000000,-10000000,-10000000,  -300,-10000000,  -192,
   -58,    -2,    48,  -192,  -192,-10000000,-10000000,-10000000,    -2,-10000000,
   539,   539,   539,   539,   539,   539,   539,   500,   422,   539,
   539,   539,   539,   539,   539,   539,   539,   539,   539,-10000000,
-10000000,   -44,   759,    74,-10000000,-10000000,-10000000,-10000000,-10000000,    71,
   539,   539,    17,    17,    17,    17,    70,-10000000,    18,   -99,
  -101,    18,  -231,    14,-10000000,  -198,  -157,-10000000,  -192,   -25,
    -2,-10000000,-10000000,-10000000,  -192,-10000000,-10000000,-10000000,   171,   171,
    90,    90,    90,    90,    90,   827,   539,   714,   539,   798,
   813,   382,   382,   382,   382,   382,   382,-10000000,   778,-10000000,
   337,    92,    17,   -42,   -22,   778,  -117,-10000000,-10000000,    82,
    55,-10000000,-10000000,-10000000,-10000000,-10000000,   -74,-10000000,  -239,   -75,
   -76,    73,   -23,-10000000,  -192,-10000000,-10000000,  -192,   -25,-10000000,
   -25,   827,   714,   -59,-10000000,   778,  -133,-10000000,    17,   -45,
   -26,-10000000,-10000000,   539,-10000000,    17,-10000000,   578,    55,    55,
   -77,    73,-10000000,    17,    57,  -198,-10000000,   -25,-10000000,   337,
-10000000,   539,-10000000,-10000000,-10000000,-10000000,    17,   778,-10000000,-10000000,
   -60,-10000000,-10000000,   778,  -249,-10000000,-10000000,  -245,-10000000,    55,
    -2,   -17,   -46,-10000000,-10000000,   738,-10000000,-10000000,   578,   -95,
    55,-10000000,-10000000,  -232,  -231,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,  -207,-10000000,   -53,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,    17,  -283,   -26,  -242,  -141,   -19,  -202,-10000000,
-10000000,-10000000,  -231,  -185,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,    -2,  -292,  -304,-10000000,-10000000,    43,    25,
-10000000,-10000000,-10000000,  -160,-10000000,-10000000,-10000000,-10000000,-10000000,   -14,
-10000000,-10000000,    25,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -118,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,  -231,  -224,    81,-10000000,-10000000,
-10000000,-10000000,    79,-10000000,   -91,   -98,  -203,  -223,  -195,  -136,
  -127,-10000000,    78,   539,   -68,   -14,    11,-10000000,    73,  -231,
-10000000,-10000000,   539,   539,   539,   539,   539,   539,-10000000,    54,
-10000000,   698,   -82,  -234,-10000000,   -83,   778,   778,   778,   778,
   641,   778,-10000000,-10000000,   -61,  -161,    77,    73,  -234,-10000000,
  -323,-10000000,-10000000,-10000000,    25,-10000000,-10000000,    73,-10000000,-10000000,
  -323,-10000000,  -218,  -163,   -62,-10000000,-10000000,-10000000,  -143,-10000000,
    39,  -319,-10000000,-10000000,-10000000,    25,-10000000,  -167,-10000000,   -32,
-10000000,   110,   109,    96,  -310,   539,-10000000,-10000000,  -146,  -149,
-10000000,-10000000,  -305,    39,    60,    31,    39,   539,    21,   778,
  -179,-10000000,  -149,-10000000,   539,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,   680,   539,-10000000,-10000000,-10000000,
   229,-10000000,-10000000,   778,-10000000,-10000000,-10000000,-10000000,-10000000,  -183,
-10000000,-10000000 };
yytabelem yypgo[]={

     0,   832,   831,   830,   413,     9,   378,    35,    37,     5,
    15,   829,    33,     6,    30,    28,   370,   821,   372,   820,
   813,   811,   380,   810,   809,   384,   806,   803,   802,   800,
   799,   797,   793,   792,   791,   790,   782,   774,   773,   772,
   771,   770,   369,    39,   766,   478,   762,   760,   465,   759,
   758,   756,   755,     4,   754,   753,   752,   750,   749,   748,
   747,   746,   745,   743,   742,   741,   740,   448,   739,   737,
    13,     7,   736,   735,   733,   731,   730,    32,   166,    46,
   729,   728,     2,   725,   377,   724,   722,   721,    14,    21,
    19,    17,    16,   719,    90,    70,   718,   415,    66,    65,
   715,     0,    12,   714,    11,     8,    25,    22,    57,   550,
   713,   712,   704,   703,    29,   695,   694,   693,   692,   689,
   687,   686,   685,   684,   102,   683,   681,   680,   678,   677,
   668,   667,   666,   665,   664,   663,   662,   661,   659,   658,
   648,   274,   647,   646,   645,   643,    26,   640,    24,   639,
   637,   636,   630,   629,     1,   628,   619,   618,    10,   611,
   608,   607,   599,   598,   597,   593,   588,   577,   574,   571,
   570,   569,   568,   565,   564,   563,   561,   559,   558,   554,
   553,   548,     3,   547,   546,   537,   531,   530,   511,   509,
   508,   507,   505,   482,   466,   464,   463,   456,   454,   430,
   428,   427,   426,   416,   410,   409,   407,   375,   383,   379 };
yytabelem yyr1[]={

     0,   119,     1,   108,     2,   120,     2,     2,   121,   121,
   122,     4,     3,     3,   123,   123,   123,     6,     6,   118,
   118,   118,   118,    15,    15,    83,   125,    83,    17,    17,
   126,   127,    16,    18,    18,    97,   129,    97,   130,   130,
   128,   128,   124,   124,   131,   132,    19,   115,   115,   114,
   133,   133,   109,   109,   109,   112,   113,   110,   111,    20,
   117,   117,   116,   116,   116,    21,   134,    21,    21,   135,
   135,    22,    22,    22,    46,    46,    23,    23,   136,    23,
   137,   137,    84,    24,   138,    24,    24,   139,   139,    25,
    26,   140,    26,   141,   141,    27,    27,   142,    27,    28,
    28,   143,    28,    29,    29,   144,    29,    30,    30,   145,
    30,   146,   146,   147,   149,    85,   148,   148,   150,   150,
    31,    31,   151,    32,    33,    33,    33,    34,   152,    35,
    36,    36,   153,    37,   155,    37,    38,   156,    38,   154,
   154,   158,   158,   157,   157,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    39,   159,    39,   160,    39,
    41,   161,    41,   162,    41,   163,    88,   164,   164,   165,
   165,    42,    42,    42,    43,    43,    43,    43,    43,    43,
    43,    43,    43,    43,    44,    44,    45,   166,    45,   167,
   167,    47,   168,    47,   169,   169,   169,   170,    48,    49,
    49,    50,   171,    50,   172,   173,   174,    51,    52,   175,
    52,   176,   176,   177,    53,   103,   178,   103,    54,   179,
    54,   180,   181,   183,    56,   182,   182,   184,   186,   187,
    55,   185,   185,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,   188,   189,   190,   191,    57,    58,    58,
   100,   192,   100,    59,    59,    59,   193,   194,    60,    61,
    61,   195,    61,   196,   196,    62,    63,   197,    63,    64,
    64,    65,    65,    66,   198,    66,   199,   199,    67,   200,
    67,    67,    73,    74,    74,    74,    74,    74,    75,   201,
    75,    76,    76,    77,    77,    77,    68,    68,    68,    72,
    72,    69,    69,    70,    70,    71,    71,    86,    86,    86,
    86,    86,    86,    86,   202,    87,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,   203,    78,    79,
    79,    79,    79,    79,   101,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    91,    90,    92,   102,   104,
   105,   105,   105,   105,    94,    94,    98,    98,    89,    99,
    95,    95,   204,    95,   205,   205,   206,   206,   207,   207,
     5,     7,     7,     7,     7,     7,     7,    96,    96,    96,
    96,    96,    96,     8,     8,     9,    10,   107,   107,   107,
    11,    12,    14,    14,    13,   208,    80,   209,    81,   106 };
yytabelem yyr2[]={

     0,     1,    25,     3,     1,     1,     7,     3,     3,     5,
     1,     9,     5,     1,     3,     7,     2,     3,     3,     1,
     3,     3,     3,     1,     5,     1,     1,     5,     3,     5,
     1,     1,    11,     1,     3,     5,     1,     9,     3,     7,
     0,     5,     0,     2,     1,     1,    11,     3,     7,     5,
     1,     3,     3,     3,     3,     5,     5,     3,     3,     7,
     1,     5,     3,     3,     3,     1,     1,     7,     5,     5,
     7,     5,     7,    17,     1,     3,     1,     3,     1,     7,
     3,     7,     7,     1,     1,     7,     5,     5,     7,     5,
     3,     1,     5,     3,     7,     1,     3,     1,     7,     1,
     3,     1,     7,     1,     3,     1,     7,     1,     5,     1,
     9,     0,     5,     1,     1,    13,     3,     7,     0,     2,
     1,     5,     1,    17,     3,     3,     3,     7,     1,     5,
     1,     5,     1,     7,     1,     7,     1,     1,     7,     9,
     2,     4,     0,     9,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     1,     7,     1,     9,
     1,     1,     7,     1,     9,     1,     5,     0,     2,     7,
     9,     3,     7,     5,     3,     5,     5,     7,     5,     7,
     5,     5,     5,     5,     3,     5,     5,     1,     9,     3,
     7,     1,     1,     9,     0,     3,     7,     1,     9,     1,
     5,     1,     1,     9,     1,     1,     1,    21,     1,     1,
     5,     3,     5,     1,    11,     1,     1,     7,     1,     1,
     7,     1,     1,     1,    17,     0,     5,     1,     1,     1,
    15,     3,     7,     3,     3,     3,     7,     7,     7,     7,
     7,     7,     7,     1,     1,     1,     1,    27,     1,     5,
     1,     1,     7,     1,     9,     5,     1,     1,    13,     1,
     5,     1,     9,     3,     7,     3,     1,     1,     7,     7,
     7,     7,     7,     1,     1,     5,     3,     5,     3,     1,
     9,     5,     7,     5,     9,     7,     3,     3,     1,     1,
     9,     3,     7,     3,     3,     7,    11,     7,    13,    11,
     9,     1,     3,     3,     3,     1,     7,     3,     3,     3,
     3,     3,     3,     3,     1,     9,     3,     3,     3,     3,
     3,     7,     7,     7,     7,     7,     7,     7,     7,     7,
     9,     7,     9,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     5,     5,     5,     5,     5,     1,    11,     3,
     5,     9,     5,     5,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     7,     7,     7,    11,     7,
     5,    11,    15,    11,     3,     3,     7,     7,     5,     5,
     1,     5,     1,     9,     3,     7,     3,     7,     0,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     1,     3,     3,
     5,     3,     3,     3,     3,     1,     9,     1,     9,     1 };
yytabelem yychk[]={

-10000000,    -1,    -2,   327,  -118,   314,   320,   348,  -120,  -119,
  -121,    -4,    -3,    -5,   287,   311,    -4,  -122,   292,  -108,
   287,  -123,    -6,   291,    -5,    -7,    -8,    -9,   -10,   -11,
   -12,   -14,   304,   305,   284,  -107,   288,   286,   359,   268,
   269,   -47,   301,  -124,   293,   291,   283,   285,   -15,   337,
  -168,    -6,   -21,   330,   -14,  -169,   -48,   287,   -66,  -198,
  -134,  -124,   302,   293,  -170,   -83,  -125,  -199,   -67,   294,
  -135,   -22,  -108,   -48,   -49,   303,  -100,   332,   -17,   -16,
   323,   -67,   -18,   -97,   298,   -22,  -124,   -46,   -45,   301,
   -50,   294,   -44,  -108,   318,  -192,   -16,  -126,  -200,   299,
  -129,  -124,   318,   -23,   342,   302,  -166,  -171,   -45,   -88,
  -163,   -18,   -97,  -141,  -109,  -108,  -112,  -113,   329,   340,
  -130,    -5,   -24,   321,  -136,  -167,   -43,  -108,   320,   348,
   290,   334,  -141,  -164,  -165,  -106,  -127,   293,  -110,   -14,
  -111,   -14,   299,   293,   -27,   350,  -138,  -124,  -137,   -84,
  -109,   302,   293,   -45,  -108,  -108,   -10,    -5,  -107,    -5,
   312,   318,  -106,   -42,   -78,    -5,   -96,   -80,   -81,   -93,
   -73,   280,   269,   268,   276,   278,  -101,   277,    -8,    -9,
   283,   285,   -12,   -14,   295,   301,   -91,   -90,   -92,   312,
   345,   -89,  -102,  -105,  -104,   -72,   -74,   275,   339,   298,
   294,   289,   257,   279,  -128,  -109,    -5,   -28,   341,  -142,
  -139,   -25,   -97,   293,   308,   -43,   -45,   -45,   -42,  -124,
   268,   269,   270,   271,   272,   273,   274,   261,   259,   258,
   260,   267,   265,   266,   264,   263,   262,  -101,   292,   257,
   -95,   280,   -78,    -5,   -78,   -78,   -78,   -78,   -78,  -203,
  -208,  -209,   279,   279,   279,   279,    -5,   -95,   298,   -43,
  -108,   298,   298,   -43,   -19,  -131,   -29,   347,  -143,  -141,
   -25,  -124,   -26,   282,  -140,   -84,  -109,  -124,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   349,   -78,   316,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   297,
  -204,   297,   280,  -207,  -206,   -78,  -207,   -94,   -98,   -99,
    -5,   -94,   -94,   -94,   -75,   280,  -108,   300,   299,  -108,
   -43,   289,  -115,  -114,  -133,   325,   318,  -144,  -141,  -124,
  -141,   -78,   -78,  -205,   -79,   -78,   307,   257,   279,  -150,
  -148,    -5,   296,   293,   302,   279,   -95,  -201,   299,   339,
   299,   299,   -71,   279,  -132,   293,  -109,  -141,   297,   293,
  -109,   280,   312,   345,   -94,   297,   293,   -78,   -99,   -98,
   -76,   -77,   279,   -78,   298,   -95,   -95,   299,   -71,    -5,
   -20,   -30,   280,  -114,   -79,   -78,    -5,   297,   293,   -43,
   339,   -95,  -124,   -31,   292,   297,  -145,   297,   -77,   299,
   -95,  -117,   333,   -43,  -146,  -116,    -7,   351,   -32,   -15,
   297,   -85,  -147,  -151,  -148,   -39,   343,  -149,   -38,   335,
  -159,   316,   292,   -33,   -37,   -34,   314,   315,   338,   322,
  -156,   -88,  -160,   -43,   -41,   319,  -153,  -155,   -35,  -152,
  -146,   -88,  -124,   -63,   344,  -161,   349,  -154,  -157,  -158,
  -154,   -36,   281,   -13,   286,   318,  -197,   -88,  -162,  -106,
   291,   -13,  -154,   -88,   -40,   -68,   -86,   -64,   -65,   -51,
   -56,   -57,   -60,   -87,   -62,   289,   294,   -89,   -90,   -92,
   -91,  -102,  -105,  -104,    -5,   345,  -172,  -180,  -188,  -193,
  -202,   346,   312,   280,   298,  -158,   -69,   -43,   -70,   298,
    -5,   345,   309,   306,   309,   306,   326,   331,   324,   313,
   310,   -78,  -108,   289,   -71,   -43,   -78,   -78,   -78,   -78,
   -78,   -78,  -189,   -61,   280,   -88,   297,   -70,   299,   349,
  -181,  -154,  -194,   297,  -195,   318,   -71,   -70,  -173,  -182,
   -55,   354,  -190,  -154,  -196,   -13,   -71,  -154,  -183,  -182,
  -184,   -58,   332,   318,   297,   293,  -174,  -103,   316,  -185,
   -82,   -10,    -9,    -5,   -59,   353,   -88,   -13,   -52,  -175,
   318,  -178,  -186,   293,   257,   257,   257,   352,    -5,   -78,
   -54,   316,  -176,   -53,   317,  -154,   349,   -82,   -10,    -5,
    -9,    -5,   -10,    -5,    -9,   -78,   292,   318,  -179,   -53,
   -78,  -187,   336,   -78,  -154,   349,  -154,  -191,  -177,  -154,
  -154,   318 };
yytabelem yydef[]={

     4,    -2,    19,    -2,     1,    20,    21,    22,    13,     0,
    -2,     8,    10,     0,   390,     0,     9,   407,    12,   191,
     3,    42,    14,    16,    17,    18,   391,   392,   393,   394,
   395,   396,   403,   404,   405,     0,   411,   412,   413,   408,
   409,    23,   192,    11,   407,    43,   406,   410,    65,     0,
   194,    15,    -2,    -2,    24,     0,   195,   197,    -2,     0,
     0,    68,   193,     0,   199,   250,     0,   275,   276,    -2,
    67,    42,    74,   196,   201,     0,     0,   251,    27,    28,
    30,   277,   279,    -2,    36,    42,    69,    -2,    75,   187,
   198,   202,   200,   184,     2,   165,    29,    33,     0,    35,
     0,    70,    72,    83,    -2,   186,     0,     0,   185,   252,
    -2,    31,    34,   280,    93,    52,    53,    54,     0,     0,
     0,    38,    95,    -2,     0,     0,   189,   174,     0,     0,
   407,     0,     0,   166,    -2,     0,    40,     0,    55,    57,
    56,    58,    37,     0,    99,    -2,     0,    86,    79,    80,
     0,   188,     0,   175,   176,   178,   180,   181,     0,   182,
   183,   203,     0,    42,   171,   380,   316,   317,   318,   319,
   320,     0,     0,     0,     0,     0,     0,   347,   397,   398,
   399,   400,   401,   402,   415,   417,   355,   356,   357,   358,
   359,   360,   361,   362,   363,   364,     0,   354,   380,     0,
     0,     0,   286,   287,    -2,    94,    39,   103,    -2,     0,
    85,    42,    91,     0,     0,   190,   177,   179,    42,   169,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   173,   283,
   378,   382,     0,   380,   342,   343,   344,   345,   346,     0,
   388,   388,     0,     0,     0,     0,   288,   370,     0,     0,
   174,     0,     0,     0,    41,    50,     0,    -2,     0,    98,
    42,    87,    89,    90,     0,    81,    82,   170,   322,   323,
   324,   325,   326,   327,   328,   329,     0,   331,     0,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   172,   381,
     0,   321,   118,     0,   389,   386,     0,   365,   374,   375,
   380,   366,   367,   369,   282,   289,     0,   285,     0,     0,
     0,   305,    45,    47,     0,    51,    73,     0,   102,    88,
    92,   330,   332,     0,   384,   349,     0,   284,     0,     0,
   119,   116,   416,     0,   418,     0,   379,     0,   380,   380,
     0,   305,   300,     0,   107,    50,    49,   106,   383,     0,
   350,     0,   352,   353,   368,   348,     0,   387,   376,   377,
     0,   291,    -2,   294,     0,   373,   371,     0,   299,   380,
    42,   120,   109,    48,   385,     0,   117,   290,     0,     0,
   380,   306,    46,    60,     0,   108,   111,   351,   292,   295,
   372,    59,    -2,   121,   113,    61,    62,    63,    64,   122,
   110,   112,     0,   155,   114,   136,   156,     0,     0,   137,
   165,   158,     0,   160,   124,   125,   126,   132,   134,   128,
   111,   157,   165,    42,   266,   161,   142,   142,   130,     0,
    -2,   159,   115,     0,   267,   165,   163,   133,   419,    -2,
   135,   127,     0,   129,   414,   123,   142,   162,   165,    -2,
   141,   131,   268,   164,   142,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   301,     0,   307,   308,   309,
   310,   311,   312,   313,   380,     0,     0,     0,     0,     0,
     0,   265,     0,     0,     0,    -2,     0,   302,   305,     0,
   303,   304,     0,     0,     0,     0,     0,     0,   244,   259,
   165,     0,     0,     0,   297,     0,   269,   271,   270,   272,
     0,   222,   142,   257,   261,     0,     0,   305,     0,   205,
   225,   245,   142,   260,     0,   315,   296,   305,   142,   223,
   225,   227,   248,     0,     0,   263,   298,   206,   215,   226,
   407,   253,   165,   258,   262,     0,    -2,     0,   216,   228,
   231,   233,   234,   235,     0,     0,   249,   264,   218,     0,
   224,   142,     0,   407,   407,     0,   407,     0,   380,   255,
     0,   219,   210,   211,     0,   217,   229,   232,   236,   237,
   240,   242,   238,   239,   241,     0,     0,   207,   142,   212,
     0,   142,   246,   254,   220,   213,   230,   142,   142,     0,
   214,   247 };
typedef struct
#ifdef __cplusplus
	yytoktype
#endif
{ char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"TE_DOTDOT",	257,
	"TE_IMPLIES",	258,
	"TE_OR",	259,
	"TE_XOR",	260,
	"TE_AND",	261,
	"TE_NE",	262,
	"TE_EQ",	263,
	"TE_LT",	264,
	"TE_GT",	265,
	"TE_LE",	266,
	"TE_GE",	267,
	"TE_PLUS",	268,
	"TE_MINUS",	269,
	"TE_STAR",	270,
	"TE_SLASH",	271,
	"TE_MOD",	272,
	"TE_DIV",	273,
	"TE_POWER",	274,
	"TE_FREE",	275,
	"TE_NOT",	276,
	"TE_STRIP",	277,
	"TE_OLD",	278,
	"TE_DOT",	279,
	"TE_LPARAN",	280,
	"TE_ALIAS",	281,
	"TE_ALL",	282,
	"TE_INTEGER",	283,
	"TE_CHAR",	284,
	"TE_REAL",	285,
	"TE_STRING",	286,
	"TE_ID",	287,
	"TE_A_BIT",	288,
	"TE_BANG",	289,
	"TE_BIT",	290,
	"TE_SEMICOLON",	291,
	"TE_COLON",	292,
	"TE_COMMA",	293,
	"TE_CREATION",	294,
	"TE_LARRAY",	295,
	"TE_RARRAY",	296,
	"TE_RPARAN",	297,
	"TE_LCURLY",	298,
	"TE_RCURLY",	299,
	"TE_CURLYDOTDOT",	300,
	"TE_LSQURE",	301,
	"TE_RSQURE",	302,
	"TE_CONSTRAIN",	303,
	"TE_FALSE",	304,
	"TE_TRUE",	305,
	"TE_ACCEPT",	306,
	"TE_ADDRESS",	307,
	"TE_AS",	308,
	"TE_ASSIGN",	309,
	"TE_CHECK",	310,
	"TE_CLASS",	311,
	"TE_CURRENT",	312,
	"TE_DEBUG",	313,
	"TE_DEFERRED",	314,
	"TE_DO",	315,
	"TE_ELSE",	316,
	"TE_ELSEIF",	317,
	"TE_END",	318,
	"TE_ENSURE",	319,
	"TE_EXPANDED",	320,
	"TE_EXPORT",	321,
	"TE_EXTERNAL",	322,
	"TE_FEATURE",	323,
	"TE_FROM",	324,
	"TE_FROZEN",	325,
	"TE_IF",	326,
	"TE_INDEXING",	327,
	"TE_IN_END",	328,
	"TE_INFIX",	329,
	"TE_INHERIT",	330,
	"TE_INSPECT",	331,
	"TE_INVARIANT",	332,
	"TE_IS",	333,
	"TE_LIKE",	334,
	"TE_LOCAL",	335,
	"TE_LOOP",	336,
	"TE_OBSOLETE",	337,
	"TE_ONCE",	338,
	"TE_PRECURSOR",	339,
	"TE_PREFIX",	340,
	"TE_REDEFINE",	341,
	"TE_RENAME",	342,
	"TE_REQUIRE",	343,
	"TE_RESCUE",	344,
	"TE_RESULT",	345,
	"TE_RETRY",	346,
	"TE_SELECT",	347,
	"TE_SEPARATE",	348,
	"TE_THEN",	349,
	"TE_UNDEFINE",	350,
	"TE_UNIQUE",	351,
	"TE_UNTIL",	352,
	"TE_VARIANT",	353,
	"TE_WHEN",	354,
	"EIF_ERROR2",	355,
	"EIF_ERROR3",	356,
	"EIF_ERROR4",	357,
	"EIF_ERROR5",	358,
	"EIF_ERROR6",	359,
	"EIF_ERROR7",	360,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"Class_declaration : Indexing Header_mark",
	"Class_declaration : Indexing Header_mark TE_CLASS Pushing_id Formal_generics Obsolete Inheritance Creators Features Class_invariant TE_END",
	"Pushing_id : TE_ID",
	"Indexing : /* empty */",
	"Indexing : TE_INDEXING",
	"Indexing : TE_INDEXING Index_list",
	"Indexing : TE_INDEXING",
	"Index_list : Index_clause",
	"Index_list : Index_list Index_clause",
	"Index_clause : Index",
	"Index_clause : Index Index_terms ASemi",
	"Index : Identifier TE_COLON",
	"Index : /* empty */",
	"Index_terms : Index_value",
	"Index_terms : Index_terms TE_COMMA Index_value",
	"Index_terms : TE_SEMICOLON",
	"Index_value : Identifier",
	"Index_value : Manifest_constant",
	"Header_mark : /* empty */",
	"Header_mark : TE_DEFERRED",
	"Header_mark : TE_EXPANDED",
	"Header_mark : TE_SEPARATE",
	"Obsolete : /* empty */",
	"Obsolete : TE_OBSOLETE Manifest_string",
	"Features : /* empty */",
	"Features : /* empty */",
	"Features : Feature_clause_list",
	"Feature_clause_list : Feature_clause",
	"Feature_clause_list : Feature_clause_list Feature_clause",
	"Feature_clause : TE_FEATURE",
	"Feature_clause : TE_FEATURE Clients",
	"Feature_clause : TE_FEATURE Clients Feature_declaration_list",
	"Clients : /* empty */",
	"Clients : Client_list",
	"Client_list : TE_LCURLY TE_RCURLY",
	"Client_list : TE_LCURLY",
	"Client_list : TE_LCURLY Class_list TE_RCURLY",
	"Class_list : Identifier",
	"Class_list : Class_list TE_COMMA Identifier",
	"Feature_declaration_list : /* empty */",
	"Feature_declaration_list : Feature_declaration_list Feature_declaration",
	"ASemi : /* empty */",
	"ASemi : TE_SEMICOLON",
	"Feature_declaration : /* empty */",
	"Feature_declaration : New_feature_list",
	"Feature_declaration : New_feature_list Declaration_body ASemi",
	"New_feature_list : New_feature",
	"New_feature_list : New_feature_list TE_COMMA New_feature",
	"New_feature : Feature_name_mark Feature_name",
	"Feature_name_mark : /* empty */",
	"Feature_name_mark : TE_FROZEN",
	"Feature_name : Pushing_id",
	"Feature_name : Infix",
	"Feature_name : Prefix",
	"Infix : TE_INFIX Infix_operator",
	"Prefix : TE_PREFIX Prefix_operator",
	"Infix_operator : Manifest_string",
	"Prefix_operator : Manifest_string",
	"Declaration_body : Formal_arguments Type_mark Constant_or_routine",
	"Constant_or_routine : /* empty */",
	"Constant_or_routine : TE_IS Feature_value",
	"Feature_value : Manifest_constant",
	"Feature_value : TE_UNIQUE",
	"Feature_value : Routine",
	"Inheritance : /* empty */",
	"Inheritance : TE_INHERIT",
	"Inheritance : TE_INHERIT Parent_list",
	"Inheritance : TE_INHERIT ASemi",
	"Parent_list : Parent ASemi",
	"Parent_list : Parent_list Parent ASemi",
	"Parent : Pushing_id Actual_generics",
	"Parent : Pushing_id Actual_generics TE_END",
	"Parent : Pushing_id Actual_generics Rename New_exports Undefine Redefine Select TE_END",
	"Actual_generics : /* empty */",
	"Actual_generics : Existing_generics",
	"Rename : /* empty */",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME",
	"Rename : TE_RENAME Rename_list",
	"Rename_list : Rename_pair",
	"Rename_list : Rename_list TE_COMMA Rename_pair",
	"Rename_pair : Feature_name TE_AS Feature_name",
	"New_exports : /* empty */",
	"New_exports : TE_EXPORT",
	"New_exports : TE_EXPORT New_export_list",
	"New_exports : TE_EXPORT ASemi",
	"New_export_list : New_export_item ASemi",
	"New_export_list : New_export_list New_export_item ASemi",
	"New_export_item : Client_list Feature_set",
	"Feature_set : TE_ALL",
	"Feature_set : /* empty */",
	"Feature_set : Feature_list",
	"Feature_list : Feature_name",
	"Feature_list : Feature_list TE_COMMA Feature_name",
	"Undefine : /* empty */",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE",
	"Undefine : TE_UNDEFINE Feature_list",
	"Redefine : /* empty */",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE",
	"Redefine : TE_REDEFINE Feature_list",
	"Select : /* empty */",
	"Select : TE_SELECT",
	"Select : TE_SELECT",
	"Select : TE_SELECT Feature_list",
	"Formal_arguments : /* empty */",
	"Formal_arguments : TE_LPARAN TE_RPARAN",
	"Formal_arguments : TE_LPARAN",
	"Formal_arguments : TE_LPARAN Entity_declaration_list TE_RPARAN",
	"Entity_declaration_list : /* empty */",
	"Entity_declaration_list : Entity_declaration_list Entity_declaration_group",
	"Entity_declaration_group : /* empty */",
	"Entity_declaration_group : Identifier_list",
	"Entity_declaration_group : Identifier_list TE_COLON Type ASemi",
	"Identifier_list : Identifier",
	"Identifier_list : Identifier_list TE_COMMA Identifier",
	"Strip_identifier_list : /* empty */",
	"Strip_identifier_list : Identifier_list",
	"Type_mark : /* empty */",
	"Type_mark : TE_COLON Type",
	"Routine : Obsolete",
	"Routine : Obsolete Precondition Local_declarations Routine_body Postcondition Rescue TE_END",
	"Routine_body : Internal",
	"Routine_body : External",
	"Routine_body : TE_DEFERRED",
	"External : TE_EXTERNAL External_language External_name",
	"External_language : /* empty */",
	"External_language : Non_empty_string",
	"External_name : /* empty */",
	"External_name : TE_ALIAS Non_empty_string",
	"Internal : TE_DO",
	"Internal : TE_DO Compound",
	"Internal : TE_ONCE",
	"Internal : TE_ONCE Compound",
	"Local_declarations : /* empty */",
	"Local_declarations : TE_LOCAL",
	"Local_declarations : TE_LOCAL Entity_declaration_list",
	"Compound : Instruction_list Set_position Instruction Opt_Semi",
	"Compound : Opt_Semi",
	"Opt_Semi : Opt_Semi TE_SEMICOLON",
	"Opt_Semi : /* empty */",
	"Instruction_list : Instruction_list Set_position Instruction Opt_Semi",
	"Instruction_list : Opt_Semi",
	"Instruction : Creation",
	"Instruction : Call",
	"Instruction : Assignment",
	"Instruction : Reverse_assignment",
	"Instruction : Conditional",
	"Instruction : Multi_branch",
	"Instruction : Loop",
	"Instruction : Debug",
	"Instruction : Check",
	"Instruction : Retry",
	"Precondition : /* empty */",
	"Precondition : TE_REQUIRE",
	"Precondition : TE_REQUIRE Assertion",
	"Precondition : TE_REQUIRE TE_ELSE",
	"Precondition : TE_REQUIRE TE_ELSE Assertion",
	"Postcondition : /* empty */",
	"Postcondition : TE_ENSURE",
	"Postcondition : TE_ENSURE Assertion",
	"Postcondition : TE_ENSURE TE_THEN",
	"Postcondition : TE_ENSURE TE_THEN Assertion",
	"Assertion : /* empty */",
	"Assertion : Assertion_list",
	"Assertion_list : /* empty */",
	"Assertion_list : Assertion_list_non_empty",
	"Assertion_list_non_empty : Set_position Assertion_clause ASemi",
	"Assertion_list_non_empty : Assertion_list_non_empty Set_position Assertion_clause ASemi",
	"Assertion_clause : Expression",
	"Assertion_clause : Identifier TE_COLON Expression",
	"Assertion_clause : Identifier TE_COLON",
	"Type : Pushing_id",
	"Type : Pushing_id Existing_generics",
	"Type : TE_EXPANDED Pushing_id",
	"Type : TE_EXPANDED Pushing_id Existing_generics",
	"Type : TE_SEPARATE Pushing_id",
	"Type : TE_SEPARATE Pushing_id Existing_generics",
	"Type : TE_BIT Integer_constant",
	"Type : TE_BIT Identifier",
	"Type : TE_LIKE Identifier",
	"Type : TE_LIKE TE_CURRENT",
	"Class_type : Pushing_id",
	"Class_type : Pushing_id Existing_generics",
	"Existing_generics : TE_LSQURE TE_RSQURE",
	"Existing_generics : TE_LSQURE",
	"Existing_generics : TE_LSQURE Type_list TE_RSQURE",
	"Type_list : Type",
	"Type_list : Type_list TE_COMMA Type",
	"Formal_generics : /* empty */",
	"Formal_generics : TE_LSQURE",
	"Formal_generics : TE_LSQURE Formal_generic_list TE_RSQURE",
	"Formal_generic_list : /* empty */",
	"Formal_generic_list : Formal_generic",
	"Formal_generic_list : Formal_generic_list TE_COMMA Formal_generic",
	"Formal_generic : TE_ID",
	"Formal_generic : TE_ID Constraint Creation_constraint",
	"Constraint : /* empty */",
	"Constraint : TE_CONSTRAIN Class_type",
	"Creation_constraint : /* empty */",
	"Creation_constraint : TE_CREATION",
	"Creation_constraint : TE_CREATION Feature_list TE_END",
	"Conditional : /* empty */",
	"Conditional : TE_IF Expression TE_THEN",
	"Conditional : TE_IF Expression TE_THEN Compound",
	"Conditional : TE_IF Expression TE_THEN Compound Elsif Else_part TE_END",
	"Elsif : /* empty */",
	"Elsif : /* empty */",
	"Elsif : Elsif_list",
	"Elsif_list : Elsif_part",
	"Elsif_list : Elsif_list Elsif_part",
	"Elsif_part : TE_ELSEIF Expression TE_THEN",
	"Elsif_part : TE_ELSEIF Expression TE_THEN Compound",
	"Inspect_default : /* empty */",
	"Inspect_default : TE_ELSE",
	"Inspect_default : TE_ELSE Compound",
	"Else_part : /* empty */",
	"Else_part : TE_ELSE",
	"Else_part : TE_ELSE Compound",
	"Multi_branch : /* empty */",
	"Multi_branch : TE_INSPECT Expression",
	"Multi_branch : TE_INSPECT Expression When_part_list",
	"Multi_branch : TE_INSPECT Expression When_part_list Inspect_default TE_END",
	"When_part_list : /* empty */",
	"When_part_list : When_part When_part_list",
	"When_part : TE_WHEN",
	"When_part : TE_WHEN Choices",
	"When_part : TE_WHEN Choices TE_THEN",
	"When_part : TE_WHEN Choices TE_THEN Compound",
	"Choices : Choice",
	"Choices : Choices TE_COMMA Choice",
	"Choice : Integer_constant",
	"Choice : Character_constant",
	"Choice : Identifier",
	"Choice : Integer_constant TE_DOTDOT Integer_constant",
	"Choice : Integer_constant TE_DOTDOT Identifier",
	"Choice : Identifier TE_DOTDOT Integer_constant",
	"Choice : Identifier TE_DOTDOT Identifier",
	"Choice : Character_constant TE_DOTDOT Character_constant",
	"Choice : Identifier TE_DOTDOT Character_constant",
	"Choice : Character_constant TE_DOTDOT Identifier",
	"Loop : /* empty */",
	"Loop : TE_FROM",
	"Loop : TE_FROM Compound",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP",
	"Loop : TE_FROM Compound Invariant Variant TE_UNTIL Expression TE_LOOP Compound TE_END",
	"Invariant : /* empty */",
	"Invariant : TE_INVARIANT Assertion",
	"Class_invariant : /* empty */",
	"Class_invariant : TE_INVARIANT",
	"Class_invariant : TE_INVARIANT Assertion",
	"Variant : /* empty */",
	"Variant : TE_VARIANT Identifier TE_COLON Expression",
	"Variant : TE_VARIANT Expression",
	"Debug : /* empty */",
	"Debug : TE_DEBUG Debug_keys",
	"Debug : TE_DEBUG Debug_keys Compound TE_END",
	"Debug_keys : /* empty */",
	"Debug_keys : TE_LPARAN TE_RPARAN",
	"Debug_keys : TE_LPARAN",
	"Debug_keys : TE_LPARAN Debug_key_list TE_RPARAN",
	"Debug_key_list : Non_empty_string",
	"Debug_key_list : Debug_key_list TE_COMMA Non_empty_string",
	"Retry : TE_RETRY",
	"Rescue : /* empty */",
	"Rescue : TE_RESCUE",
	"Rescue : TE_RESCUE Compound",
	"Assignment : Identifier TE_ASSIGN Expression",
	"Assignment : TE_RESULT TE_ASSIGN Expression",
	"Reverse_assignment : Identifier TE_ACCEPT Expression",
	"Reverse_assignment : TE_RESULT TE_ACCEPT Expression",
	"Creators : /* empty */",
	"Creators : /* empty */",
	"Creators : Creation_clause_list",
	"Creation_clause_list : Creation_clause",
	"Creation_clause_list : Creation_clause_list Creation_clause",
	"Creation_clause : TE_CREATION",
	"Creation_clause : TE_CREATION Clients",
	"Creation_clause : TE_CREATION Clients Feature_list",
	"Creation_clause : TE_CREATION Client_list",
	"Delayed_call : Delayed_qualifier Identifier Delayed_actuals",
	"Delayed_qualifier : Identifier TE_DOTDOT",
	"Delayed_qualifier : TE_LPARAN Expression TE_RPARAN TE_DOTDOT",
	"Delayed_qualifier : TE_LCURLY Type TE_CURLYDOTDOT",
	"Delayed_qualifier : TE_DOTDOT",
	"Delayed_qualifier : TE_DOT",
	"Delayed_actuals : /* empty */",
	"Delayed_actuals : TE_LPARAN",
	"Delayed_actuals : TE_LPARAN Delayed_actual_list TE_RPARAN",
	"Delayed_actual_list : Delayed_actual",
	"Delayed_actual_list : Delayed_actual_list TE_COMMA Delayed_actual",
	"Delayed_actual : TE_DOT",
	"Delayed_actual : Expression",
	"Delayed_actual : TE_LCURLY Type TE_RCURLY",
	"Creation : TE_BANG Creation_type TE_BANG Creation_target Creation_call",
	"Creation : TE_CREATION Creation_target Creation_call",
	"Creation : TE_CREATION TE_LCURLY Type TE_RCURLY Creation_target Creation_call",
	"Creation_expression : TE_CREATION TE_LCURLY Type TE_RCURLY Creation_call",
	"Creation_expression : TE_BANG Type TE_BANG Creation_call",
	"Creation_type : /* empty */",
	"Creation_type : Type",
	"Creation_target : Identifier",
	"Creation_target : TE_RESULT",
	"Creation_call : /* empty */",
	"Creation_call : TE_DOT Identifier Parameters",
	"Call : A_feature",
	"Call : Call_on_result",
	"Call : Call_on_feature",
	"Call : Call_on_current",
	"Call : Call_on_expression",
	"Call : A_precursor",
	"Call : Call_on_precursor",
	"Check : /* empty */",
	"Check : TE_CHECK Assertion TE_END",
	"Expression : Expression_constant",
	"Expression : Manifest_array",
	"Expression : Manifest_tuple",
	"Expression : Feature_call",
	"Expression : Delayed_call",
	"Expression : TE_LPARAN Expression TE_RPARAN",
	"Expression : Expression TE_PLUS Expression",
	"Expression : Expression TE_MINUS Expression",
	"Expression : Expression TE_STAR Expression",
	"Expression : Expression TE_SLASH Expression",
	"Expression : Expression TE_MOD Expression",
	"Expression : Expression TE_DIV Expression",
	"Expression : Expression TE_POWER Expression",
	"Expression : Expression TE_AND Expression",
	"Expression : Expression TE_AND TE_THEN Expression",
	"Expression : Expression TE_OR Expression",
	"Expression : Expression TE_OR TE_ELSE Expression",
	"Expression : Expression TE_IMPLIES Expression",
	"Expression : Expression TE_XOR Expression",
	"Expression : Expression TE_GE Expression",
	"Expression : Expression TE_GT Expression",
	"Expression : Expression TE_LE Expression",
	"Expression : Expression TE_LT Expression",
	"Expression : Expression TE_EQ Expression",
	"Expression : Expression TE_NE Expression",
	"Expression : Expression Free_operator Expression",
	"Expression : TE_MINUS Expression",
	"Expression : TE_PLUS Expression",
	"Expression : TE_NOT Expression",
	"Expression : TE_OLD Expression",
	"Expression : Free_operator Expression",
	"Expression : TE_STRIP",
	"Expression : TE_STRIP TE_LPARAN Strip_identifier_list TE_RPARAN",
	"Actual_parameter : Expression",
	"Actual_parameter : TE_ADDRESS Feature_name",
	"Actual_parameter : TE_ADDRESS TE_LPARAN Expression TE_RPARAN",
	"Actual_parameter : TE_ADDRESS TE_CURRENT",
	"Actual_parameter : TE_ADDRESS TE_RESULT",
	"Free_operator : TE_FREE",
	"Feature_call : Call_on_current",
	"Feature_call : Call_on_result",
	"Feature_call : Call_on_feature",
	"Feature_call : TE_CURRENT",
	"Feature_call : TE_RESULT",
	"Feature_call : A_feature",
	"Feature_call : Call_on_expression",
	"Feature_call : A_precursor",
	"Feature_call : Call_on_precursor",
	"Feature_call : Creation_expression",
	"Call_on_current : TE_CURRENT TE_DOT Remote_call",
	"Call_on_result : TE_RESULT TE_DOT Remote_call",
	"Call_on_feature : A_feature TE_DOT Remote_call",
	"Call_on_expression : TE_LPARAN Expression TE_RPARAN TE_DOT Remote_call",
	"Call_on_precursor : A_precursor TE_DOT Remote_call",
	"A_precursor : TE_PRECURSOR Parameters",
	"A_precursor : TE_LCURLY Pushing_id TE_RCURLY TE_PRECURSOR Parameters",
	"A_precursor : TE_LCURLY TE_LCURLY Pushing_id TE_RCURLY TE_RCURLY TE_PRECURSOR Parameters",
	"A_precursor : TE_PRECURSOR TE_LCURLY Pushing_id TE_RCURLY Parameters",
	"Remote_call : Call_on_feature_access",
	"Remote_call : Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Feature_access",
	"Call_on_feature_access : Feature_access TE_DOT Call_on_feature_access",
	"A_feature : Identifier Parameters",
	"Feature_access : Identifier Parameters",
	"Parameters : /* empty */",
	"Parameters : TE_LPARAN TE_RPARAN",
	"Parameters : TE_LPARAN",
	"Parameters : TE_LPARAN Parameter_list TE_RPARAN",
	"Parameter_list : Actual_parameter",
	"Parameter_list : Parameter_list TE_COMMA Actual_parameter",
	"Expression_list : Expression",
	"Expression_list : Expression_list TE_COMMA Expression",
	"Manifest_expression_list : /* empty */",
	"Manifest_expression_list : Expression_list",
	"Identifier : TE_ID",
	"Manifest_constant : Boolean_constant",
	"Manifest_constant : Character_constant",
	"Manifest_constant : Integer_constant",
	"Manifest_constant : Real_constant",
	"Manifest_constant : Bit_constant",
	"Manifest_constant : Manifest_string",
	"Expression_constant : Boolean_constant",
	"Expression_constant : Character_constant",
	"Expression_constant : TE_INTEGER",
	"Expression_constant : TE_REAL",
	"Expression_constant : Bit_constant",
	"Expression_constant : Manifest_string",
	"Boolean_constant : TE_FALSE",
	"Boolean_constant : TE_TRUE",
	"Character_constant : TE_CHAR",
	"Integer_constant : Sign TE_INTEGER",
	"Sign : /* empty */",
	"Sign : TE_PLUS",
	"Sign : TE_MINUS",
	"Real_constant : Sign TE_REAL",
	"Bit_constant : TE_A_BIT",
	"Manifest_string : TE_STRING",
	"Manifest_string : EIF_ERROR6",
	"Non_empty_string : TE_STRING",
	"Manifest_array : TE_LARRAY",
	"Manifest_array : TE_LARRAY Manifest_expression_list TE_RARRAY",
	"Manifest_tuple : TE_LSQURE",
	"Manifest_tuple : TE_LSQURE Manifest_expression_list TE_RSQURE",
	"Set_position : /* empty */",
};
#endif /* YYDEBUG */
/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident	"@(#)yaccpar	6.12	93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	return(0)
#define YYABORT		return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#define YYNEW(type)	malloc(sizeof(type) * yynewmax)
#define YYCOPY(to, from, type) \
	(type *) memcpy(to, (char *) from, yynewmax * sizeof(type))
#define YYENLARGE( from, type) \
	(type *) realloc((char *) from, yynewmax * sizeof(type))
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-10000000)

/*
** global variables used by the parser
*/
YYSTYPE *yypv;			/* top of value stack */
int *yyps;			/* top of state stack */

int yystate;			/* current state */
int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */
int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()		yycvtok(yylex())
/*
** yycvtok - return a token if i is a wchar_t value that exceeds 255.
**	If i<255, i itself is the token.  If i>255 but the neither 
**	of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int yycvtok(int i)
#else
int yycvtok(i) int i;
#endif
{
	int first = 0;
	int last = YYNMBCHARS - 1;
	int mid;
	wchar_t j;

	if(i&0x60000000){/*Must convert to a token. */
		if( yymbchars[last].character < i ){
			return i;/*Giving up*/
		}
		while ((last>=first)&&(first>=0)) {/*Binary search loop*/
			mid = (first+last)/2;
			j = yymbchars[mid].character;
			if( j==i ){/*Found*/ 
				return yymbchars[mid].tvalue;
			}else if( j<i ){
				first = mid + 1;
			}else{
				last = mid -1;
			}
		}
		/*No entry in the table.*/
		return i;/* Giving up.*/
	}else{/* i is already a token. */
		return i;
	}
}
#else/*!YYNMBCHARS*/
#define YYLEX()		yylex()
#endif/*!YYNMBCHARS*/

/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void)
#else
int yyparse()
#endif
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
	hacks to please C++ and lint - goto's inside switch should never be
	executed; yypvt is set to 0 to avoid "used before set" warning.
*/
	static int __yaccpar_lint_hack__ = 0;
	switch (__yaccpar_lint_hack__)
	{
		case 1: goto yyerrlab;
		case 2: goto yynewstate;
	}
	yypvt = 0;
#endif

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

#if YYMAXDEPTH <= 0
	if (yymaxdepth <= 0)
	{
		if ((yymaxdepth = YYEXPAND(0)) <= 0)
		{
			yyerror("yacc initialization error");
			YYABORT;
		}
	}
#endif

	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */
	goto yystack;	/* moved from 6 lines above to here to please C++ */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ yymaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int yyps_index = (yy_ps - yys);
			int yypv_index = (yy_pv - yyv);
			int yypvt_index = (yypvt - yyv);
			int yynewmax;
#ifdef YYEXPAND
			yynewmax = YYEXPAND(yymaxdepth);
#else
			yynewmax = 2 * yymaxdepth;	/* double table size */
			if (yymaxdepth == YYMAXDEPTH)	/* first time growth */
			{
				char *newyys = (char *)YYNEW(int);
				char *newyyv = (char *)YYNEW(YYSTYPE);
				if (newyys != 0 && newyyv != 0)
				{
					yys = YYCOPY(newyys, yys, int);
					yyv = YYCOPY(newyyv, yyv, YYSTYPE);
				}
				else
					yynewmax = 0;	/* failed */
			}
			else				/* not first time */
			{
				yys = YYENLARGE(yys, int);
				yyv = YYENLARGE(yyv, YYSTYPE);
				if (yys == 0 || yyv == 0)
					yynewmax = 0;	/* failed */
			}
#endif
			if (yynewmax <= yymaxdepth)	/* tables not expanded */
			{
				yyerror( "yacc stack overflow" );
				YYABORT;
			}
			yymaxdepth = yynewmax;

			yy_ps = yys + yyps_index;
			yy_pv = yyv + yypv_index;
			yypvt = yyv + yypvt_index;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			printf( "Received token " );
			if ( yychar == 0 )
				printf( "end-of-file\n" );
			else if ( yychar < 0 )
				printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				printf( "Received token " );
				if ( yychar == 0 )
					printf( "end-of-file\n" );
				else if ( yychar < 0 )
					printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
			skip_init:
				yynerrs++;
				/* FALLTHRU */
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					printf( "Error recovery discards " );
					if ( yychar == 0 )
						printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 202 "parser.y"
{click_list_init();yacc_error_code=1; } break;
case 2:
# line 204 "parser.y"
{
			/* node is set at the Eiffel level for root class */
			rn_ast = create_class(click_list_elem (yypvt[-7].value),deferred,expanded,separate,yypvt[-11].node,yypvt[-6].node,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node,click_list_new(), current_location->start_position);
			yacc_error_code=2; 
		} break;
case 3:
# line 213 "parser.y"
{
		yacc_error_code=4; 
		yyval.value = click_list_push ();
		click_list_set (create_id (token_str), yyval.value);
		} break;
case 4:
# line 225 "parser.y"
{yyval.node = NULL; yacc_error_code=5; } break;
case 5:
# line 226 "parser.y"
{list_init();yacc_error_code=6; } break;
case 6:
# line 227 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=7; } break;
case 7:
# line 229 "parser.y"
{yyval.node = NULL;yacc_error_code=8; } break;
case 8:
# line 233 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=9; } break;
case 9:
# line 235 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=10; } break;
case 10:
# line 238 "parser.y"
{list_init();yacc_error_code=11; } break;
case 11:
# line 239 "parser.y"
{yyval.node = create_node2(INDEX_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=12; } break;
case 12:
# line 243 "parser.y"
{yyval.node = yypvt[-1].node;yacc_error_code=13;} break;
case 13:
# line 245 "parser.y"
{yyval.node = NULL;yacc_error_code=14;} break;
case 14:
# line 249 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=15;} break;
case 15:
# line 251 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=16;} break;
case 17:
# line 256 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=17;} break;
case 18:
# line 258 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=18;} break;
case 19:
# line 266 "parser.y"
{deferred = FALSE; expanded = FALSE; separate = FALSE;yacc_error_code=19;} break;
case 20:
# line 268 "parser.y"
{deferred = TRUE; expanded = FALSE; separate = FALSE;yacc_error_code=20;} break;
case 21:
# line 270 "parser.y"
{expanded = TRUE; deferred = FALSE; separate = FALSE;yacc_error_code=21;} break;
case 22:
# line 272 "parser.y"
{expanded = FALSE; deferred = FALSE; separate = TRUE;yacc_error_code=22;} break;
case 23:
# line 281 "parser.y"
{yyval.node = NULL;yacc_error_code=23;} break;
case 24:
# line 283 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=24;} break;
case 25:
# line 292 "parser.y"
{yyval.node = NULL;yacc_error_code=25;} break;
case 26:
# line 293 "parser.y"
{list_init();yacc_error_code=26;} break;
case 27:
# line 294 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=27;} break;
case 28:
# line 299 "parser.y"
{list_push(yypvt[-0].node); yacc_error_code=28;} break;
case 29:
# line 301 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=29;} break;
case 30:
# line 305 "parser.y"
{fclause_pos = current_location->end_position;yacc_error_code=30;} break;
case 31:
# line 305 "parser.y"
{list_init();yacc_error_code=31;} break;
case 32:
# line 306 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yyval.node = (yyval.node == NULL)?NULL:create_fclause_as(yypvt[-2].node,yyval.node,fclause_pos);
		yacc_error_code=32;} break;
case 33:
# line 314 "parser.y"
{yyval.node = NULL;yacc_error_code=33;} break;
case 34:
# line 316 "parser.y"
{
			yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);
			yacc_error_code=34;} break;
case 35:
# line 322 "parser.y"
{	list_init();
								list_push(create_id("none"));
								yyval.node = list_new(CONSTRUCT_LIST_AS);
							yacc_error_code=35;} break;
case 36:
# line 326 "parser.y"
{list_init();yacc_error_code=36;} break;
case 37:
# line 327 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=37;} break;
case 38:
# line 331 "parser.y"
{
							list_push(yypvt[-0].node);
							yacc_error_code=38;} break;
case 39:
# line 335 "parser.y"
{
							list_push(yypvt[-0].node);
							yacc_error_code=39;} break;
case 41:
# line 342 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=40;} break;
case 44:
# line 350 "parser.y"
{list_init();yacc_error_code=41;} break;
case 45:
# line 350 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=42;} break;
case 46:
# line 351 "parser.y"
{
		yyval.node = create_feature_as(yypvt[-2].node,yypvt[-1].node,click_list_start(yypvt[-3].value),current_location->start_position);
		click_list_set (yyval.node, yypvt[-3].value);
		yacc_error_code=43;} break;
case 47:
# line 359 "parser.y"
{
		yyval.value = yypvt[-0].value;
		list_push(click_list_elem(yyval.value));
		yacc_error_code=44;} break;
case 48:
# line 364 "parser.y"
{
		yyval.value = yypvt[-2].value;
		list_push(click_list_elem(yypvt[-0].value));
		yacc_error_code=45;} break;
case 49:
# line 372 "parser.y"
{
		yyval.value = yypvt[-0].value;
		yacc_error_code=46;} break;
case 50:
# line 378 "parser.y"
{
		is_frozen = FALSE;
		yacc_error_code=47;
		} break;
case 51:
# line 383 "parser.y"
{
		is_frozen = TRUE;
		yacc_error_code=48;
		} break;
case 52:
# line 391 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(FEAT_NAME_ID_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		yacc_error_code=49;} break;
case 53:
# line 396 "parser.y"
{
		yyval.value = yypvt[-0].value;
		yacc_error_code=50;} break;
case 54:
# line 400 "parser.y"
{
		yyval.value = yypvt[-0].value;
		yacc_error_code=51;} break;
case 55:
# line 407 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(INFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		yacc_error_code=52;} break;
case 56:
# line 416 "parser.y"
{
		yyval.value = yypvt[-0].value;
		click_list_set (create_feature_name(PREFIX_AS,click_list_elem(yyval.value),is_frozen), yyval.value);
		yacc_error_code=53;} break;
case 57:
# line 424 "parser.y"
{
		extern int is_infix(char *s);

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_infix(token_str))	/* Check infixed declaration */
			yyerror((char *) 0);
		yacc_error_code=54;} break;
case 58:
# line 437 "parser.y"
{
		extern int is_prefix(char *s);

		yyval.value = click_list_push ();
		click_list_set (yypvt[-0].node, yyval.value);

		if (0 == is_prefix(token_str))	/* Check prefixed declaration */
			yyerror((char *) 0);
		yacc_error_code=55;} break;
case 59:
# line 449 "parser.y"
{yyval.node = create_node3(BODY_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].cr_node.cr_node);
	/* Validity test for feature declaration */
		if 	(
			/* either arguments or type or body */
			((yypvt[-2].node == NULL) && (yypvt[-1].node == NULL) && (yypvt[-0].cr_node.cr_node == NULL))
			||
			/* constant implies no argument but type */
			((yypvt[-0].cr_node.cr_type == CR_CONSTANT) && ((yypvt[-2].node != NULL) || (yypvt[-1].node == NULL)))
			||
			/* arguments implies non-void routine */
			((yypvt[-2].node != NULL) && ((yypvt[-0].cr_node.cr_type != CR_ROUTINE) || (yypvt[-0].cr_node.cr_node == NULL)))
			)
		{
			yyerror((char *) 0);
		}
	yacc_error_code=56;} break;
case 60:
# line 469 "parser.y"
{yyval.cr_node.cr_node = NULL; yyval.cr_node.cr_type = CR_EMPTY;yacc_error_code=57;} break;
case 61:
# line 471 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].cr_node.cr_node;yyval.cr_node.cr_type = yypvt[-0].cr_node.cr_type;yacc_error_code=58;} break;
case 62:
# line 475 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,yypvt[-0].node));yyval.cr_node.cr_type = CR_CONSTANT;yacc_error_code=59;} break;
case 63:
# line 477 "parser.y"
{yyval.cr_node.cr_node = create_node1(CONSTANT_AS,create_node1(VALUE_AS,create_node(UNIQUE_AS)));yyval.cr_node.cr_type = CR_CONSTANT;yacc_error_code=60;} break;
case 64:
# line 479 "parser.y"
{yyval.cr_node.cr_node = yypvt[-0].node;yyval.cr_node.cr_type = CR_ROUTINE;yacc_error_code=61;} break;
case 65:
# line 489 "parser.y"
{yyval.node = NULL;yacc_error_code=62;} break;
case 66:
# line 490 "parser.y"
{list_init();yacc_error_code=63;} break;
case 67:
# line 491 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yacc_error_code=64;} break;
case 68:
# line 495 "parser.y"
{ yyval.node = NULL;yacc_error_code=65;} break;
case 69:
# line 500 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=66;} break;
case 70:
# line 502 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=67;} break;
case 71:
# line 507 "parser.y"
{
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-1].value),yypvt[-0].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-1].value);
		yacc_error_code=68;} break;
case 72:
# line 513 "parser.y"
{
		inherit_context = 1;
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-2].value),yypvt[-1].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,NULL,NULL,NULL,NULL,NULL);
		click_list_set (rn_ast, yypvt[-2].value);
		yacc_error_code=69;} break;
case 73:
# line 520 "parser.y"
{
		inherit_context = (yypvt[-5].node==NULL)&&(yypvt[-4].node==NULL)&&(yypvt[-3].node==NULL)&&(yypvt[-2].node==NULL)&&(yypvt[-1].node==NULL);
		rn_ast = create_node2(CLASS_TYPE_AS,click_list_elem(yypvt[-7].value),yypvt[-6].node);
		yyval.node = create_node6(PARENT_AS,rn_ast,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);
		click_list_set (rn_ast, yypvt[-7].value);
		yacc_error_code=70;} break;
case 74:
# line 529 "parser.y"
{yyval.node = NULL;yacc_error_code=71;} break;
case 75:
# line 531 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=72;} break;
case 76:
# line 535 "parser.y"
{yyval.node = NULL;yacc_error_code=73;} break;
case 77:
# line 537 "parser.y"
{yyval.node = NULL;yacc_error_code=74;} break;
case 78:
# line 538 "parser.y"
{list_init();yacc_error_code=75;} break;
case 79:
# line 539 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=76;} break;
case 80:
# line 544 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=77;} break;
case 81:
# line 546 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=78;} break;
case 82:
# line 551 "parser.y"
{
		yyval.node = create_node2(RENAME_AS,click_list_elem(yypvt[-2].value),click_list_elem(yypvt[-0].value));
		click_list_set (click_list_elem(yypvt[-0].value), yypvt[-2].value);
		yacc_error_code=79;} break;
case 83:
# line 558 "parser.y"
{yyval.node = NULL;yacc_error_code=80;} break;
case 84:
# line 559 "parser.y"
{list_init();yacc_error_code=81;} break;
case 85:
# line 560 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=82;} break;
case 86:
# line 562 "parser.y"
{yyval.node = NULL;yacc_error_code=83;} break;
case 87:
# line 567 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=84;} break;
case 88:
# line 569 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=85;} break;
case 89:
# line 573 "parser.y"
{	yyval.node = create_node1(CLIENT_AS,yypvt[-1].node);
			yyval.node = create_node2(EXPORT_ITEM_AS,yyval.node,yypvt[-0].node);
		yacc_error_code=86;} break;
case 90:
# line 580 "parser.y"
{yyval.node = create_node(ALL_AS);yacc_error_code=87;} break;
case 91:
# line 581 "parser.y"
{list_init();yacc_error_code=88;} break;
case 92:
# line 582 "parser.y"
{yyval.node = create_node1 (FEATURE_LIST_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=89;} break;
case 93:
# line 587 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));yacc_error_code=90;} break;
case 94:
# line 589 "parser.y"
{list_push(click_list_elem(yypvt[-0].value));yacc_error_code=91;} break;
case 95:
# line 593 "parser.y"
{yyval.node = NULL;yacc_error_code=92;} break;
case 96:
# line 595 "parser.y"
{yyval.node = NULL;yacc_error_code=93;} break;
case 97:
# line 596 "parser.y"
{list_init();yacc_error_code=94;} break;
case 98:
# line 597 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=95;} break;
case 99:
# line 601 "parser.y"
{yyval.node = NULL;yacc_error_code=96;} break;
case 100:
# line 603 "parser.y"
{yyval.node = NULL;yacc_error_code=97;} break;
case 101:
# line 604 "parser.y"
{list_init();yacc_error_code=98;} break;
case 102:
# line 605 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=99;} break;
case 103:
# line 609 "parser.y"
{yyval.node = NULL;yacc_error_code=100;} break;
case 104:
# line 611 "parser.y"
{yyval.node = NULL;yacc_error_code=101;} break;
case 105:
# line 612 "parser.y"
{list_init();yacc_error_code=102;} break;
case 106:
# line 613 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=103;} break;
case 107:
# line 621 "parser.y"
{yyval.node = NULL;yacc_error_code=104;} break;
case 108:
# line 623 "parser.y"
{yyerror((char *)0);yacc_error_code=105;} break;
case 109:
# line 624 "parser.y"
{list_init();yacc_error_code=106;} break;
case 110:
# line 625 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=107;} break;
case 112:
# line 630 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=108;} break;
case 113:
# line 633 "parser.y"
{list_init();yacc_error_code=109;} break;
case 114:
# line 633 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=110;} break;
case 115:
# line 634 "parser.y"
{yyval.node = create_node2(TYPE_DEC_AS,yypvt[-3].node,yypvt[-1].node);yacc_error_code=111;} break;
case 116:
# line 638 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=112;} break;
case 117:
# line 640 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=113;} break;
case 120:
# line 648 "parser.y"
{yyval.node = NULL;yacc_error_code=114;} break;
case 121:
# line 650 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=115;} break;
case 122:
# line 654 "parser.y"
{fbody_pos = current_location->start_position;yacc_error_code=116;} break;
case 123:
# line 657 "parser.y"
{yyval.node = create_routine_as(yypvt[-7].node,fbody_pos,yypvt[-5].node,yypvt[-4].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);yacc_error_code=117;} break;
case 124:
# line 661 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=118;} break;
case 125:
# line 663 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=119;} break;
case 126:
# line 665 "parser.y"
{yyval.node = create_node(DEFERRED_AS);yacc_error_code=120;} break;
case 127:
# line 669 "parser.y"
{yyval.node = create_node2(EXTERNAL_AS,yypvt[-1].node,yypvt[-0].node);yacc_error_code=121;} break;
case 128:
# line 672 "parser.y"
{SET_POS(current_location);yacc_error_code=122;} break;
case 129:
# line 673 "parser.y"
{yyval.node = create_node1(EXTERNAL_LANG_AS, yypvt[-0].node);yacc_error_code=123;} break;
case 130:
# line 677 "parser.y"
{yyval.node = NULL;yacc_error_code=124;} break;
case 131:
# line 679 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=125;} break;
case 132:
# line 682 "parser.y"
{list_init();yacc_error_code=126;} break;
case 133:
# line 683 "parser.y"
{yyval.node = create_node1(DO_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=127;} break;
case 134:
# line 684 "parser.y"
{list_init();yacc_error_code=128;} break;
case 135:
# line 685 "parser.y"
{yyval.node =
create_node1(ONCE_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=129;} break;
case 136:
# line 691 "parser.y"
{yyval.node = NULL;yacc_error_code=130;} break;
case 137:
# line 692 "parser.y"
{list_init();yacc_error_code=131;} break;
case 138:
# line 693 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=132;} break;
case 139:
# line 697 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=133;} break;
case 143:
# line 704 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=134;} break;
case 145:
# line 709 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=135;} break;
case 146:
# line 711 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=136;} break;
case 147:
# line 713 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=137;} break;
case 148:
# line 715 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=138;} break;
case 149:
# line 717 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=139;} break;
case 150:
# line 719 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=140;} break;
case 151:
# line 721 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=141;} break;
case 152:
# line 723 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=142;} break;
case 153:
# line 725 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=143;} break;
case 154:
# line 727 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=144;} break;
case 155:
# line 731 "parser.y"
{yyval.node = NULL;yacc_error_code=145;} break;
case 156:
# line 732 "parser.y"
{id_level = ASSERT_LEVEL;yacc_error_code=146;} break;
case 157:
# line 733 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_AS,yypvt[-0].node);
								yacc_error_code=147;} break;
case 158:
# line 736 "parser.y"
{id_level = ASSERT_LEVEL;yacc_error_code=148;} break;
case 159:
# line 737 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(REQUIRE_ELSE_AS,yypvt[-0].node);
								yacc_error_code=149;} break;
case 160:
# line 743 "parser.y"
{yyval.node = NULL;yacc_error_code=150;} break;
case 161:
# line 744 "parser.y"
{id_level = ASSERT_LEVEL;yacc_error_code=151;} break;
case 162:
# line 745 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_AS,yypvt[-0].node);
								yacc_error_code=152;} break;
case 163:
# line 748 "parser.y"
{id_level = ASSERT_LEVEL;yacc_error_code=153;} break;
case 164:
# line 749 "parser.y"
{	id_level = NORMAL_LEVEL;
									yyval.node = create_node1(ENSURE_THEN_AS,yypvt[-0].node);
								yacc_error_code=154;} break;
case 165:
# line 755 "parser.y"
{list_init();yacc_error_code=155;} break;
case 166:
# line 756 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=156;} break;
case 169:
# line 763 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=157;} break;
case 170:
# line 765 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=158;} break;
case 171:
# line 769 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,NULL,yypvt[-0].node);
								yacc_error_code=159;} break;
case 172:
# line 773 "parser.y"
{
									yyval.node = create_node2(TAGGED_AS,yypvt[-2].node,yypvt[-0].node);
								yacc_error_code=160;} break;
case 173:
# line 777 "parser.y"
{ yyval.node = NULL;yacc_error_code=161;} break;
case 174:
# line 787 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		yacc_error_code=162;} break;
case 175:
# line 792 "parser.y"
{
		yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		yacc_error_code=163;} break;
case 176:
# line 797 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		yacc_error_code=164;} break;
case 177:
# line 802 "parser.y"
{
		yyval.node = create_exp_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		yacc_error_code=165;} break;
case 178:
# line 807 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yypvt[-0].value),NULL);
		click_list_set (yyval.node, yypvt[-0].value);
		yacc_error_code=166;} break;
case 179:
# line 812 "parser.y"
{
		yyval.node = create_separate_class_type(click_list_elem(yypvt[-1].value),yypvt[-0].node);
		click_list_set (yyval.node, yypvt[-1].value);
		yacc_error_code=167;} break;
case 180:
# line 817 "parser.y"
{
		yyval.node = create_node1(BITS_AS,yypvt[-0].node);
		yacc_error_code=168;} break;
case 181:
# line 821 "parser.y"
{
		yyval.node = create_node1(BITS_SYMBOL_AS,yypvt[-0].node);
		yacc_error_code=169;} break;
case 182:
# line 825 "parser.y"
{
		yyval.node = create_node1(LIKE_ID_AS, yypvt[-0].node);
		yacc_error_code=170;} break;
case 183:
# line 829 "parser.y"
{
		yyval.node = create_node(LIKE_CUR_AS);
		yacc_error_code=171;} break;
case 184:
# line 836 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-0].value),NULL);
        click_list_set (yyval.node, yypvt[-0].value);
        yacc_error_code=172;} break;
case 185:
# line 841 "parser.y"
{
        yyval.node = create_type_class(click_list_elem(yypvt[-1].value),yypvt[-0].node);
        click_list_set (yyval.node, yypvt[-1].value);
        yacc_error_code=173;} break;
case 186:
# line 849 "parser.y"
{yyval.node = NULL;yacc_error_code=174;} break;
case 187:
# line 850 "parser.y"
{list_init();yacc_error_code=175;} break;
case 188:
# line 851 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yacc_error_code=176;} break;
case 189:
# line 858 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=177;} break;
case 190:
# line 860 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=178;} break;
case 191:
# line 868 "parser.y"
{
		yyval.node = NULL;
		yacc_error_code=179;} break;
case 192:
# line 871 "parser.y"
{list_init();yacc_error_code=180;} break;
case 193:
# line 872 "parser.y"
{
		yyval.node = list_new(CONSTRUCT_LIST_AS);
		yacc_error_code=181;} break;
case 195:
# line 880 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=182;} break;
case 196:
# line 882 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=183;} break;
case 197:
# line 886 "parser.y"
{strcpy(generic_name, token_str);yacc_error_code=184;} break;
case 198:
# line 887 "parser.y"
{generic_inc(); yyval.node = create_generic(generic_name, yypvt[-1].node, yypvt[-0].node);yacc_error_code=185;} break;
case 199:
# line 892 "parser.y"
{yyval.node = NULL;yacc_error_code=186;} break;
case 200:
# line 894 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=187;} break;
case 201:
# line 899 "parser.y"
{ yyval.node = NULL;yacc_error_code=188;} break;
case 202:
# line 900 "parser.y"
{list_init ();yacc_error_code=189;} break;
case 203:
# line 901 "parser.y"
{yyval.node = list_new (CONSTRUCT_LIST_AS); yacc_error_code=190;} break;
case 204:
# line 908 "parser.y"
{yyval.loc = current_location;yacc_error_code=191;} break;
case 205:
# line 908 "parser.y"
{list_init();yacc_error_code=192;} break;
case 206:
# line 908 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=193;} break;
case 207:
# line 909 "parser.y"
{SET_POS(yypvt[-9].loc); yyval.node = create_node4(IF_AS,yypvt[-7].node,yypvt[-3].node,yypvt[-2].node,yypvt[-1].node);yacc_error_code=194;} break;
case 208:
# line 913 "parser.y"
{yyval.node = NULL;yacc_error_code=195;} break;
case 209:
# line 914 "parser.y"
{list_init();yacc_error_code=196;} break;
case 210:
# line 915 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=197;} break;
case 211:
# line 919 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=198;} break;
case 212:
# line 921 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=199;} break;
case 213:
# line 924 "parser.y"
{list_init();yacc_error_code=200;} break;
case 214:
# line 925 "parser.y"
{yyval.node = create_node2(ELSIF_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=201;} break;
case 215:
# line 929 "parser.y"
{yyval.node = NULL;yacc_error_code=202;} break;
case 216:
# line 930 "parser.y"
{list_init();yacc_error_code=203;} break;
case 217:
# line 931 "parser.y"
{yyval.node = inspect_else();yacc_error_code=204;} break;
case 218:
# line 935 "parser.y"
{yyval.node = NULL;yacc_error_code=205;} break;
case 219:
# line 936 "parser.y"
{list_init();yacc_error_code=206;} break;
case 220:
# line 937 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=207;} break;
case 221:
# line 940 "parser.y"
{yyval.loc = current_location;yacc_error_code=208;} break;
case 222:
# line 941 "parser.y"
{list_init();yacc_error_code=209;} break;
case 223:
# line 941 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=210;} break;
case 224:
# line 943 "parser.y"
{SET_POS(yypvt[-7].loc); yyval.node = create_node3(INSPECT_AS,yypvt[-5].node,yypvt[-2].node,yypvt[-1].node);yacc_error_code=211;} break;
case 226:
# line 956 "parser.y"
{list_push(yypvt[-1].node);yacc_error_code=214;} break;
case 227:
# line 959 "parser.y"
{list_init();yacc_error_code=215;} break;
case 228:
# line 959 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=216;} break;
case 229:
# line 959 "parser.y"
{list_init();yacc_error_code=217;} break;
case 230:
# line 960 "parser.y"
{yyval.node = create_node2(CASE_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=218;} break;
case 231:
# line 964 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=219;} break;
case 232:
# line 966 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=220;} break;
case 233:
# line 970 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);yacc_error_code=221;} break;
case 234:
# line 972 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);yacc_error_code=222;} break;
case 235:
# line 974 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-0].node,NULL);yacc_error_code=223;} break;
case 236:
# line 976 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=224;} break;
case 237:
# line 978 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=225;} break;
case 238:
# line 980 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=226;} break;
case 239:
# line 982 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=227;} break;
case 240:
# line 984 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=228;} break;
case 241:
# line 986 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=229;} break;
case 242:
# line 988 "parser.y"
{yyval.node = create_node2(INTERVAL_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=230;} break;
case 243:
# line 991 "parser.y"
{yyval.loc = current_location;yacc_error_code=231;} break;
case 244:
# line 991 "parser.y"
{list_init();yacc_error_code=232;} break;
case 245:
# line 991 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=233;} break;
case 246:
# line 991 "parser.y"
{list_init();yacc_error_code=234;} break;
case 247:
# line 992 "parser.y"
{SET_POS(yypvt[-12].loc); yyval.node = create_node5(LOOP_AS,yypvt[-8].node,yypvt[-7].node,yypvt[-6].node,yypvt[-4].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=235;} break;
case 248:
# line 996 "parser.y"
{yyval.node = NULL;yacc_error_code=236;} break;
case 249:
# line 998 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=237;} break;
case 250:
# line 1002 "parser.y"
{yyval.node = NULL;yacc_error_code=238;} break;
case 251:
# line 1003 "parser.y"
{id_level = INVARIANT_LEVEL;yacc_error_code=239;} break;
case 252:
# line 1004 "parser.y"
{
		id_level = NORMAL_LEVEL;
		yyval.node = create_node1(INVARIANT_AS,yypvt[-0].node);
		yacc_error_code=240;} break;
case 253:
# line 1012 "parser.y"
{yyval.node = NULL;yacc_error_code=241;} break;
case 254:
# line 1014 "parser.y"
{yyval.node = create_node2(VARIANT_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=242;} break;
case 255:
# line 1016 "parser.y"
{yyval.node = create_node2(VARIANT_AS,NULL,yypvt[-0].node);yacc_error_code=243;} break;
case 256:
# line 1019 "parser.y"
{yyval.loc = current_location; yacc_error_code=244;} break;
case 257:
# line 1019 "parser.y"
{list_init();yacc_error_code=245;} break;
case 258:
# line 1020 "parser.y"
{SET_POS(yypvt[-5].loc); yyval.node = create_node2(DEBUG_AS,yypvt[-3].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=246;} break;
case 259:
# line 1024 "parser.y"
{yyval.node = NULL;yacc_error_code=247;} break;
case 260:
# line 1026 "parser.y"
{yyval.node = NULL;yacc_error_code=248;} break;
case 261:
# line 1027 "parser.y"
{list_init();yacc_error_code=249;} break;
case 262:
# line 1028 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=250;} break;
case 263:
# line 1032 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=251;} break;
case 264:
# line 1034 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=252;} break;
case 265:
# line 1038 "parser.y"
{yyval.node = create_node(RETRY_AS);yacc_error_code=253;} break;
case 266:
# line 1042 "parser.y"
{yyval.node = NULL;yacc_error_code=254;} break;
case 267:
# line 1043 "parser.y"
{list_init();yacc_error_code=255;} break;
case 268:
# line 1044 "parser.y"
{yyval.node = rescue_instr();yacc_error_code=256;} break;
case 269:
# line 1061 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);yacc_error_code=261;} break;
case 270:
# line 1063 "parser.y"
{yyval.node = create_node2(ASSIGN_AS,create_node(RESULT_AS),yypvt[-0].node);yacc_error_code=262;} break;
case 271:
# line 1067 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node2(ACCESS_ID_AS,yypvt[-2].node,NULL),yypvt[-0].node);yacc_error_code=263;} break;
case 272:
# line 1069 "parser.y"
{yyval.node = create_node2(REVERSE_AS,create_node(RESULT_AS),yypvt[-0].node);yacc_error_code=264;} break;
case 273:
# line 1074 "parser.y"
{yyval.node = NULL;yacc_error_code=265;} break;
case 274:
# line 1075 "parser.y"
{list_init();yacc_error_code=266;} break;
case 275:
# line 1076 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=267;} break;
case 276:
# line 1080 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=268;} break;
case 277:
# line 1082 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=269;} break;
case 278:
# line 1086 "parser.y"
{yyval.node = create_node2(CREATE_AS,NULL,NULL);yacc_error_code=270;} break;
case 279:
# line 1087 "parser.y"
{list_init();yacc_error_code=271;} break;
case 280:
# line 1088 "parser.y"
{yyval.node = create_node2(CREATE_AS,yypvt[-2].node,list_new(CONSTRUCT_LIST_AS));yacc_error_code=272;} break;
case 281:
# line 1090 "parser.y"
{
									yyval.node = create_node1(CLIENT_AS,yypvt[-0].node);
									yyval.node = create_node2(CREATE_AS,yyval.node,NULL);
								yacc_error_code=273;} break;
case 282:
# line 1097 "parser.y"
{yyval.node = create_routine_object(yypvt[-2].node,yypvt[-1].node,yypvt[-0].node);} break;
case 283:
# line 1101 "parser.y"
{yyval.node = create_node1(OPERAND_AS,yypvt[-1].node);} break;
case 284:
# line 1103 "parser.y"
{yyval.node = create_node1(OPERAND_AS,yypvt[-2].node);} break;
case 285:
# line 1105 "parser.y"
{yyval.node = create_node1(OPERAND_AS,yypvt[-1].node);} break;
case 286:
# line 1107 "parser.y"
{yyval.node = NULL;} break;
case 287:
# line 1109 "parser.y"
{yyval.node = create_node1(OPERAND_AS,NULL);} break;
case 288:
# line 1113 "parser.y"
{yyval.node = NULL;} break;
case 289:
# line 1114 "parser.y"
{list_init();} break;
case 290:
# line 1115 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);} break;
case 291:
# line 1119 "parser.y"
{list_push(yypvt[-0].node);} break;
case 292:
# line 1121 "parser.y"
{list_push(yypvt[-0].node);} break;
case 293:
# line 1125 "parser.y"
{yyval.node = create_node1 (OPERAND_AS,NULL);} break;
case 294:
# line 1127 "parser.y"
{yyval.node = create_node1 (OPERAND_AS,yypvt[-0].node);} break;
case 295:
# line 1129 "parser.y"
{yyval.node = create_node1 (OPERAND_AS,yypvt[-1].node);} break;
case 296:
# line 1133 "parser.y"
{yyval.node = create_node3(CREATION_AS,yypvt[-3].node,yypvt[-1].node,yypvt[-0].node);yacc_error_code=274;} break;
case 297:
# line 1135 "parser.y"
{yyval.node = create_node3(CREATION_AS,NULL,yypvt[-1].node,yypvt[-0].node);yacc_error_code=274;} break;
case 298:
# line 1137 "parser.y"
{yyval.node = create_node3(CREATION_AS,yypvt[-3].node,yypvt[-1].node,yypvt[-0].node);yacc_error_code=274;} break;
case 299:
# line 1141 "parser.y"
{yyval.node=create_node2 (CREATION_EXPR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 300:
# line 1143 "parser.y"
{yyval.node=create_node2 (CREATION_EXPR_AS,yypvt[-2].node,yypvt[-0].node);} break;
case 301:
# line 1147 "parser.y"
{yyval.node = NULL;yacc_error_code=275;} break;
case 302:
# line 1149 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=276;} break;
case 303:
# line 1153 "parser.y"
{yyval.node = create_node2(ACCESS_ID_AS,yypvt[-0].node,NULL);yacc_error_code=277;} break;
case 304:
# line 1155 "parser.y"
{yyval.node = create_node(RESULT_AS);yacc_error_code=278;} break;
case 305:
# line 1159 "parser.y"
{yyval.node = NULL;yacc_error_code=279;} break;
case 306:
# line 1161 "parser.y"
{yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);yacc_error_code=280;} break;
case 307:
# line 1169 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=281;} break;
case 308:
# line 1171 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=282;} break;
case 309:
# line 1173 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=283;} break;
case 310:
# line 1175 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=284;} break;
case 311:
# line 1177 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=285;} break;
case 312:
# line 1179 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=286;} break;
case 313:
# line 1181 "parser.y"
{yyval.node = create_node1(INSTR_CALL_AS,yypvt[-0].node);yacc_error_code=287;} break;
case 314:
# line 1184 "parser.y"
{yyval.loc = current_location; yacc_error_code=288;} break;
case 315:
# line 1185 "parser.y"
{SET_POS(yypvt[-3].loc); yyval.node = create_node1(CHECK_AS,yypvt[-1].node);yacc_error_code=289;} break;
case 316:
# line 1193 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);yacc_error_code=290;} break;
case 317:
# line 1195 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);yacc_error_code=291;} break;
case 318:
# line 1197 "parser.y"
{yyerrok;yyval.node = create_node1(VALUE_AS,yypvt[-0].node);yacc_error_code=291;} break;
case 319:
# line 1199 "parser.y"
{yyval.node = create_node1(EXPR_CALL_AS, yypvt[-0].node);yacc_error_code=292;} break;
case 320:
# line 1201 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 321:
# line 1203 "parser.y"
{yyval.node = create_node1(PARAN_AS, yypvt[-1].node);yacc_error_code=293;} break;
case 322:
# line 1205 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_PLUS_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=294;} break;
case 323:
# line 1207 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MINUS_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=295;} break;
case 324:
# line 1209 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_STAR_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=296;} break;
case 325:
# line 1211 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_SLASH_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=297;} break;
case 326:
# line 1213 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_MOD_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=298;} break;
case 327:
# line 1215 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_DIV_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=299;} break;
case 328:
# line 1217 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_POWER_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=300;} break;
case 329:
# line 1219 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=301;} break;
case 330:
# line 1221 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_AND_THEN_AS,yypvt[-3].node,yypvt[-0].node);yacc_error_code=302;} break;
case 331:
# line 1223 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=303;} break;
case 332:
# line 1225 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_OR_ELSE_AS,yypvt[-3].node,yypvt[-0].node);yacc_error_code=304;} break;
case 333:
# line 1227 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_IMPLIES_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=304;} break;
case 334:
# line 1229 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_XOR_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=305;} break;
case 335:
# line 1231 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GE_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=306;} break;
case 336:
# line 1233 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_GT_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=307;} break;
case 337:
# line 1235 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LE_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=308;} break;
case 338:
# line 1237 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_LT_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=309;} break;
case 339:
# line 1239 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_EQ_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=310;} break;
case 340:
# line 1241 "parser.y"
{yyerrok;yyval.node = create_node2(BIN_NE_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=311;} break;
case 341:
# line 1243 "parser.y"
{	yyerrok;
									yyval.node = create_node3(BIN_FREE_AS,yypvt[-2].node,yypvt[-1].node,yypvt[-0].node);yacc_error_code=312;} break;
case 342:
# line 1246 "parser.y"
{yyerrok;yyval.node = create_node1(UN_MINUS_AS,yypvt[-0].node);yacc_error_code=313;} break;
case 343:
# line 1248 "parser.y"
{yyerrok;yyval.node = create_node1(UN_PLUS_AS,yypvt[-0].node);yacc_error_code=314;} break;
case 344:
# line 1250 "parser.y"
{yyerrok;yyval.node = create_node1(UN_NOT_AS, yypvt[-0].node);yacc_error_code=315;} break;
case 345:
# line 1252 "parser.y"
{yyerrok;yyval.node = create_node1(UN_OLD_AS,yypvt[-0].node);yacc_error_code=316;} break;
case 346:
# line 1254 "parser.y"
{yyerrok;yyval.node = create_node2(UN_FREE_AS,yypvt[-1].node,yypvt[-0].node);yacc_error_code=317;} break;
case 347:
# line 1255 "parser.y"
{yyerrok;list_init();yacc_error_code=318;} break;
case 348:
# line 1256 "parser.y"
{yyerrok;yyval.node = create_node1(UN_STRIP_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=319;} break;
case 349:
# line 1260 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=320;} break;
case 350:
# line 1262 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(ADDRESS_AS,click_list_elem(yypvt[-0].value));
								yacc_error_code=321;} break;
case 351:
# line 1267 "parser.y"
{
								yyerrok;
								yyval.node = create_node1(EXPR_ADDRESS_AS,yypvt[-1].node);
								yacc_error_code=322;} break;
case 352:
# line 1272 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_CURRENT_AS);yacc_error_code=323;} break;
case 353:
# line 1274 "parser.y"
{yyerrok;yyval.node = create_node(ADDRESS_RESULT_AS);yacc_error_code=324;} break;
case 354:
# line 1278 "parser.y"
{yyval.node = create_id(token_str);yacc_error_code=325;} break;
case 355:
# line 1286 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=326;} break;
case 356:
# line 1288 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=327;} break;
case 357:
# line 1290 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=328;} break;
case 358:
# line 1292 "parser.y"
{yyval.node = create_node(CURRENT_AS);yacc_error_code=329;} break;
case 359:
# line 1294 "parser.y"
{yyval.node = create_node(RESULT_AS);yacc_error_code=330;} break;
case 360:
# line 1296 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=331;} break;
case 361:
# line 1298 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=332;} break;
case 362:
# line 1300 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=333;} break;
case 363:
# line 1302 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=334;} break;
case 364:
# line 1304 "parser.y"
{yyval.node = yypvt[-0].node;} break;
case 365:
# line 1308 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(CURRENT_AS),yypvt[-0].node);yacc_error_code=335;} break;
case 366:
# line 1312 "parser.y"
{yyval.node = create_node2(NESTED_AS,create_node(RESULT_AS),yypvt[-0].node);yacc_error_code=336;} break;
case 367:
# line 1316 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=337;} break;
case 368:
# line 1320 "parser.y"
{yyval.node = create_node2(NESTED_EXPR_AS,yypvt[-3].node,yypvt[-0].node);yacc_error_code=338;} break;
case 369:
# line 1324 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=339;} break;
case 370:
# line 1328 "parser.y"
{yyval.node = create_node2(PRECURSOR_AS,NULL,yypvt[-0].node);yacc_error_code=340;} break;
case 371:
# line 1330 "parser.y"
{
								yyval.node = create_node2(PRECURSOR_AS,click_list_elem (yypvt[-3].value),yypvt[-0].node);
								click_list_set (yyval.node, yypvt[-3].value);
								yacc_error_code=341;} break;
case 372:
# line 1335 "parser.y"
{
								yyval.node = create_node2(PRECURSOR_AS,click_list_elem (yypvt[-4].value),yypvt[-0].node);
								click_list_set (yyval.node, yypvt[-4].value);
								yacc_error_code=342;} break;
case 373:
# line 1340 "parser.y"
{
								yyval.node = create_node2(PRECURSOR_AS,click_list_elem (yypvt[-2].value),yypvt[-0].node);
								click_list_set (yyval.node, yypvt[-2].value);
								yacc_error_code=341;} break;
case 374:
# line 1347 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=343;} break;
case 375:
# line 1349 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=344;} break;
case 376:
# line 1353 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=345;} break;
case 377:
# line 1355 "parser.y"
{yyval.node = create_node2(NESTED_AS,yypvt[-2].node,yypvt[-0].node);yacc_error_code=346;} break;
case 378:
# line 1359 "parser.y"
{	switch(id_level) {
							case NORMAL_LEVEL:
								yyval.node = create_node2(ACCESS_ID_AS, yypvt[-1].node,yypvt[-0].node);
								break;
							case ASSERT_LEVEL:
								yyval.node = create_node2(ACCESS_ASSERT_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							case INVARIANT_LEVEL:
								yyval.node = create_node2(ACCESS_INV_AS,yypvt[-1].node,yypvt[-0].node);
								break;
							}
						yacc_error_code=347;
						} break;
case 379:
# line 1374 "parser.y"
{yyval.node = create_node2(ACCESS_FEAT_AS,yypvt[-1].node,yypvt[-0].node);yacc_error_code=348;} break;
case 380:
# line 1378 "parser.y"
{yyval.node = NULL;yacc_error_code=349;} break;
case 381:
# line 1380 "parser.y"
{yyval.node = NULL;yacc_error_code=350;} break;
case 382:
# line 1381 "parser.y"
{list_init();yacc_error_code=351;} break;
case 383:
# line 1382 "parser.y"
{yyval.node = list_new(CONSTRUCT_LIST_AS);yacc_error_code=352;} break;
case 384:
# line 1386 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=353;} break;
case 385:
# line 1388 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=354;} break;
case 386:
# line 1392 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=355;} break;
case 387:
# line 1394 "parser.y"
{list_push(yypvt[-0].node);yacc_error_code=356;} break;
case 390:
# line 1406 "parser.y"
{
				yyval.node = create_id(token_str);
				yacc_error_code=357;} break;
case 391:
# line 1412 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=358;} break;
case 392:
# line 1414 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=359;} break;
case 393:
# line 1416 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=360;} break;
case 394:
# line 1418 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=361;} break;
case 395:
# line 1420 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=362;} break;
case 396:
# line 1422 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=363;} break;
case 397:
# line 1426 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=364;} break;
case 398:
# line 1428 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=365;} break;
case 399:
# line 1430 "parser.y"
{yyval.node = create_int(token_str,0);yacc_error_code=366;} break;
case 400:
# line 1432 "parser.y"
{yyval.node = create_real(token_str,0);yacc_error_code=367;} break;
case 401:
# line 1434 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=368;} break;
case 402:
# line 1436 "parser.y"
{yyval.node = yypvt[-0].node;yacc_error_code=369;} break;
case 403:
# line 1440 "parser.y"
{yyval.node = create_bool(0);yacc_error_code=370;} break;
case 404:
# line 1442 "parser.y"
{yyval.node = create_bool(1);yacc_error_code=371;} break;
case 405:
# line 1446 "parser.y"
{yyval.node = create_char(token_str);yacc_error_code=372;} break;
case 406:
# line 1450 "parser.y"
{yyval.node = create_int(token_str,yypvt[-1].value);yacc_error_code=373;} break;
case 407:
# line 1454 "parser.y"
{yyval.value = 0;yacc_error_code=374;} break;
case 408:
# line 1456 "parser.y"
{yyval.value = 0;yacc_error_code=375;} break;
case 409:
# line 1458 "parser.y"
{yyval.value = 1;yacc_error_code=376;} break;
case 410:
# line 1462 "parser.y"
{yyval.node = create_real(token_str,yypvt[-1].value);yacc_error_code=377;} break;
case 411:
# line 1466 "parser.y"
{yyval.node = create_node1(BIT_CONST_AS,create_id(token_str));yacc_error_code=378;} break;
case 412:
# line 1470 "parser.y"
{yyval.node = create_string(token_str);yacc_error_code=379;} break;
case 413:
# line 1472 "parser.y"
{yyval.node = create_string(token_str);yacc_error_code=380;} break;
case 414:
# line 1476 "parser.y"
{yyval.node = create_string(token_str);yacc_error_code=381;} break;
case 415:
# line 1479 "parser.y"
{list_init();yacc_error_code=382;} break;
case 416:
# line 1480 "parser.y"
{yyval.node = create_node1(ARRAY_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=383;} break;
case 417:
# line 1483 "parser.y"
{list_init();yacc_error_code=382;} break;
case 418:
# line 1484 "parser.y"
{yyval.node = create_node1(TUPLE_AS,list_new(CONSTRUCT_LIST_AS));yacc_error_code=383;} break;
case 419:
# line 1487 "parser.y"
{SET_POS (current_location) ; yyval.loc = current_location;} break;
	}
	goto yystack;		/* reset registers in driver code */
}

