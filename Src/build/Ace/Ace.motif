
system ebuild

root

	ebuild (root_cluster): "make"
default
--	precompiled ("$EIFFEL4/precomp/spec/$PLATFORM/vision");
--		rename
--			HASH_TABLE as NEW_HASH_TABLE
--		end;

	assertion (all);
cluster

	root_cluster: 	"../Main";

-- Base:
	base:             "$EIFFEL4/library/base";
	access (base):      "$/structures/access";
	cursors (base):            "$/structures/cursors";
	cursor_tree (base):        "$/structures/cursor_tree";
	dispenser (base):          "$/structures/dispenser";
	iteration (base):          "$/structures/iteration";
	kernel (base):             "$/kernel";
	list (base):               "$/structures/list";
	set (base):                "$/structures/set";
	sort (base):               "$/structures/sort";
	storage (base):            "$/structures/storage";
	support (base):            "$/support";
	table (base):              "$/structures/table";
	traversing (base):         "$/structures/traversing";
	tree (base):               "$/structures/tree";

-- Net
        net:                            "$EIFFEL4/library/net";
        abstract_socket (net):          "$/abstract/socket";
        net_socket (net):               "$/network/socket";
        local_socket (net):             "$/local/socket";

        polling_abstract (net):         "$/polling/abstract";
        polling_implementation (net):   "$/polling/implementation";

        abstract_client_server (net):   "$/abstract/client_server";
        net_client_server (net):        "$/network/client_server";
        local_client_server (net):      "$/local/client_server";

-- Mel:
	mel: 			"$EIFFEL4/library/mel";
	mel_callback_structs (mel):   "$/callback_structs";
	mel_constants (mel):          "$/constants";
	mel_events (mel):             "$/events";
	mel_extra (mel):              "$/extra";
	mel_gadgets (mel):            "$/gadgets";
	mel_implementation (mel):     "$/implementation";
	mel_kernel (mel):             "$/kernel";
	mel_resources (mel):          "$/resources";
	mel_widgets (mel):            "$/widgets"
         	default
			assertion(no);
		end ;  

-- Vision
	vision:			 "$EIFFEL4/library/vision/";
	vision_figures (vision):             "$/figures";
	vision_imp_motif (vision):           "$/implement/motif"
         	default
			assertion(no);
		end ;  
    	vision_imp_toolkit (vision):         "$/implement/toolkit";
    	vision_context_data (vision):        "$/oui/context_data";
    	vision_kernel (vision):              "$/oui/kernel";
    	vision_widgets (vision):             "$/oui/widgets"
         	default
			assertion(no);
		end ;  

    	vision_tools (vision):               "$/tools";
    	vision_obsolete_motif (vision):      "$/obsolete/motif";
    	vision_obsolete_oui (vision):        "$/obsolete/oui";
    	vision_obsolete_toolkit (vision):    "$/obsolete/toolkit";

	build:				"..";
    
	build_merger (build):		"$/merger";
	build_shared (build):		"$/Shared";
	build_catalog (build):		"$/Catalog";
	build_catalog_commands (build):	"$/Catalog/Commands";
	build_utility (build):		"$/Utility";
	build_constants (build):	"$/Constants";
	build_icon (build):		"$/Icon";

	build_structures (build):	"$/Structures";
	build_windows (build):		"$/Windows";
	build_window_mgr (build):	"$/WindowMgr";

	build_liman (build):		"$/liman/build";
--	build_liman_common (build):	"$/liman/common";
--	build_liman_graphical (build):	"$/liman/common/graphical";


	build_storage_command (build):	"$/Storage/Command";
	build_storage_context (build):	"$/Storage/Context";
	build_storage_control (build):	"$/Storage/Control";
	build_storage_function (build):	"$/Storage/Function";
	build_storage_application (build):	"$/Storage/Application";


	build_generation (build):	"$/Generation";

	build_transport (build):	"$/Transport";

	build_context_commands (build):	"$/Context/Commands";
	build_context_editor (build):	"$/Context/Editor";
	build_context_catalog (build):	"$/Context/Catalog";
	build_context_widgets (build):	"$/Context/Widgets";
	build_context_new_widgets (build):	"$/Context/NewWidgets"
		default
			assertion (no)
		end;

	build_context_tree (build):	"$/Context/Tree";


	build_application_control (build):	"$/Application/Control";
	build_application_commands (build):	"$/Application/Commands";


	build_event (build):			"$/Event";


	build_function_commands (build):	"$/Function/Commands";
	build_function_editor (build):		"$/Function/Editor";
	build_function_functions (build):	"$/Function/Functions";
	build_function_holes (build):		"$/Function/Holes";
	build_function_stones (build):		"$/Function/Stones";
	build_function_icon_box (build):	"$/Function/IconBox";


	build_command_catalog (build):		"$/Command/Catalog";
	build_command_commands (build):		"$/Command/Commands";
	build_command_editor (build):		"$/Command/Editor";
	build_command_predef (build):		"$/Command/Predef";
	build_command_stones (build):		"$/Command/Stones";
	build_command_instance (build):		"$/Command/Instance";

	eiffel_special_ast (build):	"$/eiffel/AST/special_ast";

	-- Common

	common (build):			"$/common";

        -- API cluster
        api (common):                            "$/eiffel/API";

        api_constants(api):     "$/constants"; 
	      -- Error processing
        api_error_common(api):      "$/error/common"
                exclude
                        "syntax_error.e" 
	        end;

	api_structured_text (common):"$/eiffel/API/structured_text"; -- Eiffel/API/structured_text/


        api_shared(api):        "$/shared";
        --api_ids(api):           "$/ids";
       -- api_queries(api):       "$/queries";
        --api_interface(api):     "$/interface";
      --  api_common(api):        "$/common";
    --    communication(api):     "$/no_communication";
  	  output(api):            "$/output";  -- OUTPUT_WINDOW
--        evaluated_type(api):    "$/evaluated_type";



--	eiffel_expressions (build):	"$/eiffel/AST/expressions";
--	eiffel_instructions (build):	"$/eiffel/AST/instructions";
--	eiffel_stonables (build):	"$/eiffel/AST/stonables";
--	eiffel_skeleton (build):	"$/eiffel/AST/skeleton";
--	eiffel_error (build):		"$/eiffel/error";; -- ~/sr	from bench: Eiffel/API/error/common
--	eiffel_flatshort (common):	"$/eiffel/flat_short"; -- Part of this is in flat_short


	eiffel_const (common):		"$/eiffel/const" -- from bench: Eiffel/const/
default
    assertion(no);
end;

    eiffel_lace_env (common): 	"$/eiffel/lace/env"
default
    assertion(no);
end;
	eiffel_yacc (common):		"$/eiffel/yacc" -- Eiffel/yacc
default
	assertion(no);
end;

	--These seem to be build specific
--	eiffel_rescue (build):		"$/eiffel/rescue"; -- these classes are in patches
--	eiffel_shared (build):		"$/eiffel/shared"; -- these classes are in patches
	eiffel_clicking (build):	"$/eiffel/shared/clicking";


-- Patches from case: syntax_error, compiler_exporter
	case_patches:	"../../case/eiffel/patches";

-- Patches from build: build_error_displayer
	patches (build):	"$/patches";


	
        common_resources (common):            "$/resources";
        common_skeleton (common):            "$/parser/AST/skeleton";
        common_expressions (common):         "$/parser/AST/expressions";
        common_instructions (common):        "$/parser/AST/instructions";
        common_clickable (common):           "$/parser/AST/clickable";

        common_parser (common):              "$/parser";

        common_flat_short (common_parser):   "$/flat_short"
		default
			assertion (no)
		end;

	switch(build):			"$/common/eiffel/switch";
	license_switch(switch): 		"$/license/license";  	--unix

	liman (build):				"$/limand";

--	liman_bench(liman):		"$/bench";
	liman_abstract(liman):		"$/abstract";
--                exclude
 --                       "shared_license.e" 
--	        end;

	--win time_lock(liman):        	"$/time_lock";--win
	liman_graphical(liman):         "$/graphical";
	liman_shared(liman):		"$/shared";--unix
	liman_client(liman):		"$/client";--unix

external
	include_path: 	"\$(BENCH)/C/parsing/shared",
			"\$(EIFFEL4)/library/mel/Clib";


        object:
		"$(EIFFEL4)/library/mel/spec/$(PLATFORM)/lib/libMel.a", 
	    	"$(EIFFEL4)/library/net/spec/$(PLATFORM)/lib/libnet.a",
		"$(BENCH)/C/parsing/eiffel/libweiffel.a",
	    	"$(BENCH)/C/parsing/shared/libparsing.a",
	    	"$(BENCH)/C/parsing/lace/liblace.a",
	    	"$(BENCH)/C/platform/libplatform.a",
	        "$(BENCH)/C/ipc/ewb/libewb.a",	
        	"$(BENCH)/C/ipc/shared/libipc.a",
                "$(BENCH)/C/liman/lm/liblm.a",
	        "$(BENCH)/C/liman/shared/libshared.a",
        	"$(BENCH)/C/idrs/libidr.a",
		"-lXm -lXt -lX11 -lXpm -lXext -lXp";

end


