?RCS: $Id: d_strctcpy.U 78389 2004-11-30 00:17:17Z manus $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log$
?RCS: Revision 1.1  2004/11/30 00:17:18  manus
?RCS: Initial revision
?RCS:
?RCS: Revision 3.0  1993/08/18  12:07:34  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_strctcpy: cat rm cc Setvar
?MAKE:	-pick add $@ %<
?S:d_strctcpy:
?S:	This variable conditionally defines the USE_STRUCT_COPY symbol, which
?S:	indicates to the C program that this C compiler knows how to copy
?S:	structures.
?S:.
?C:USE_STRUCT_COPY (STRUCTCOPY):
?C:	This symbol, if defined, indicates that this C compiler knows how
?C:	to copy structures.  If undefined, you'll need to use a block copy
?C:	routine of some sort instead.
?C:.
?H:#$d_strctcpy	USE_STRUCT_COPY	/**/
?H:.
?LINT:set d_strctcpy
: check for structure copying
echo " "
echo "Checking to see if your C compiler can copy structs..." >&4
$cat >try.c <<'EOCP'
main()
{
	struct blurfl {
		int dyick;
	} foo, bar;

	foo = bar;
}
EOCP
if $cc -c try.c >/dev/null 2>&1 ; then
	val="$define"
	echo "Yup, it can."
else
	val="$undef"
	echo "Nope, it can't."
fi
set d_strctcpy
eval $setvar
$rm -f try.*

