-- This file has been generated by EWG. Do not edit. Changes will be lost!

class MENU_ITEM_DATA_REC_STRUCT

inherit

	EWG_STRUCT

	MENU_ITEM_DATA_REC_STRUCT_EXTERNAL
		export
			{NONE} all
		end

create

	make_new_unshared,
	make_new_shared,
	make_unshared,
	make_shared

feature {ANY} -- Access

	sizeof: INTEGER is
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	whichdata: INTEGER is
			-- Access member `whichData'
		require
			exists: exists
		do
			Result := get_whichdata_external (item)
		ensure
			result_correct: Result = get_whichdata_external (item)
		end

	set_whichdata (a_value: INTEGER) is
			-- Set member `whichData'
		require
			exists: exists
		do
			set_whichdata_external (item, a_value)
		ensure
			a_value_set: a_value = whichdata
		end

	text: POINTER is
			-- Access member `text'
		require
			exists: exists
		do
			Result := get_text_external (item)
		ensure
			result_correct: Result = get_text_external (item)
		end

	set_text (a_value: POINTER) is
			-- Set member `text'
		require
			exists: exists
		do
			set_text_external (item, a_value)
		ensure
			a_value_set: a_value = text
		end

	mark: INTEGER is
			-- Access member `mark'
		require
			exists: exists
		do
			Result := get_mark_external (item)
		ensure
			result_correct: Result = get_mark_external (item)
		end

	set_mark (a_value: INTEGER) is
			-- Set member `mark'
		require
			exists: exists
		do
			set_mark_external (item, a_value)
		ensure
			a_value_set: a_value = mark
		end

	cmdkey: INTEGER is
			-- Access member `cmdKey'
		require
			exists: exists
		do
			Result := get_cmdkey_external (item)
		ensure
			result_correct: Result = get_cmdkey_external (item)
		end

	set_cmdkey (a_value: INTEGER) is
			-- Set member `cmdKey'
		require
			exists: exists
		do
			set_cmdkey_external (item, a_value)
		ensure
			a_value_set: a_value = cmdkey
		end

	cmdkeyglyph: INTEGER is
			-- Access member `cmdKeyGlyph'
		require
			exists: exists
		do
			Result := get_cmdkeyglyph_external (item)
		ensure
			result_correct: Result = get_cmdkeyglyph_external (item)
		end

	set_cmdkeyglyph (a_value: INTEGER) is
			-- Set member `cmdKeyGlyph'
		require
			exists: exists
		do
			set_cmdkeyglyph_external (item, a_value)
		ensure
			a_value_set: a_value = cmdkeyglyph
		end

	cmdkeymodifiers: INTEGER is
			-- Access member `cmdKeyModifiers'
		require
			exists: exists
		do
			Result := get_cmdkeymodifiers_external (item)
		ensure
			result_correct: Result = get_cmdkeymodifiers_external (item)
		end

	set_cmdkeymodifiers (a_value: INTEGER) is
			-- Set member `cmdKeyModifiers'
		require
			exists: exists
		do
			set_cmdkeymodifiers_external (item, a_value)
		ensure
			a_value_set: a_value = cmdkeymodifiers
		end

	style: INTEGER is
			-- Access member `style'
		require
			exists: exists
		do
			Result := get_style_external (item)
		ensure
			result_correct: Result = get_style_external (item)
		end

	set_style (a_value: INTEGER) is
			-- Set member `style'
		require
			exists: exists
		do
			set_style_external (item, a_value)
		ensure
			a_value_set: a_value = style
		end

	enabled: INTEGER is
			-- Access member `enabled'
		require
			exists: exists
		do
			Result := get_enabled_external (item)
		ensure
			result_correct: Result = get_enabled_external (item)
		end

	set_enabled (a_value: INTEGER) is
			-- Set member `enabled'
		require
			exists: exists
		do
			set_enabled_external (item, a_value)
		ensure
			a_value_set: a_value = enabled
		end

	iconenabled: INTEGER is
			-- Access member `iconEnabled'
		require
			exists: exists
		do
			Result := get_iconenabled_external (item)
		ensure
			result_correct: Result = get_iconenabled_external (item)
		end

	set_iconenabled (a_value: INTEGER) is
			-- Set member `iconEnabled'
		require
			exists: exists
		do
			set_iconenabled_external (item, a_value)
		ensure
			a_value_set: a_value = iconenabled
		end

	filler1: INTEGER is
			-- Access member `filler1'
		require
			exists: exists
		do
			Result := get_filler1_external (item)
		ensure
			result_correct: Result = get_filler1_external (item)
		end

	set_filler1 (a_value: INTEGER) is
			-- Set member `filler1'
		require
			exists: exists
		do
			set_filler1_external (item, a_value)
		ensure
			a_value_set: a_value = filler1
		end

	iconid: INTEGER is
			-- Access member `iconID'
		require
			exists: exists
		do
			Result := get_iconid_external (item)
		ensure
			result_correct: Result = get_iconid_external (item)
		end

	set_iconid (a_value: INTEGER) is
			-- Set member `iconID'
		require
			exists: exists
		do
			set_iconid_external (item, a_value)
		ensure
			a_value_set: a_value = iconid
		end

	icontype: INTEGER is
			-- Access member `iconType'
		require
			exists: exists
		do
			Result := get_icontype_external (item)
		ensure
			result_correct: Result = get_icontype_external (item)
		end

	set_icontype (a_value: INTEGER) is
			-- Set member `iconType'
		require
			exists: exists
		do
			set_icontype_external (item, a_value)
		ensure
			a_value_set: a_value = icontype
		end

	iconhandle: POINTER is
			-- Access member `iconHandle'
		require
			exists: exists
		do
			Result := get_iconhandle_external (item)
		ensure
			result_correct: Result = get_iconhandle_external (item)
		end

	set_iconhandle (a_value: POINTER) is
			-- Set member `iconHandle'
		require
			exists: exists
		do
			set_iconhandle_external (item, a_value)
		ensure
			a_value_set: a_value = iconhandle
		end

	cmdid: INTEGER is
			-- Access member `cmdID'
		require
			exists: exists
		do
			Result := get_cmdid_external (item)
		ensure
			result_correct: Result = get_cmdid_external (item)
		end

	set_cmdid (a_value: INTEGER) is
			-- Set member `cmdID'
		require
			exists: exists
		do
			set_cmdid_external (item, a_value)
		ensure
			a_value_set: a_value = cmdid
		end

	encoding: INTEGER is
			-- Access member `encoding'
		require
			exists: exists
		do
			Result := get_encoding_external (item)
		ensure
			result_correct: Result = get_encoding_external (item)
		end

	set_encoding (a_value: INTEGER) is
			-- Set member `encoding'
		require
			exists: exists
		do
			set_encoding_external (item, a_value)
		ensure
			a_value_set: a_value = encoding
		end

	submenuid: INTEGER is
			-- Access member `submenuID'
		require
			exists: exists
		do
			Result := get_submenuid_external (item)
		ensure
			result_correct: Result = get_submenuid_external (item)
		end

	set_submenuid (a_value: INTEGER) is
			-- Set member `submenuID'
		require
			exists: exists
		do
			set_submenuid_external (item, a_value)
		ensure
			a_value_set: a_value = submenuid
		end

	submenuhandle_struct: OPAQUE_MENU_REF_STRUCT is
			-- Access member `submenuHandle'
		require
			exists: exists
		do
			create Result.make_shared (get_submenuhandle_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = submenuhandle
		end

	set_submenuhandle_struct (a_value: OPAQUE_MENU_REF_STRUCT) is
			-- Set member `submenuHandle'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_submenuhandle_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = submenuhandle
		end

	submenuhandle: POINTER is
			-- Access member `submenuHandle'
		require
			exists: exists
		do
			Result := get_submenuhandle_external (item)
		ensure
			result_correct: Result = get_submenuhandle_external (item)
		end

	set_submenuhandle (a_value: POINTER) is
			-- Set member `submenuHandle'
		require
			exists: exists
		do
			set_submenuhandle_external (item, a_value)
		ensure
			a_value_set: a_value = submenuhandle
		end

	fontid: INTEGER is
			-- Access member `fontID'
		require
			exists: exists
		do
			Result := get_fontid_external (item)
		ensure
			result_correct: Result = get_fontid_external (item)
		end

	set_fontid (a_value: INTEGER) is
			-- Set member `fontID'
		require
			exists: exists
		do
			set_fontid_external (item, a_value)
		ensure
			a_value_set: a_value = fontid
		end

	refcon: INTEGER is
			-- Access member `refcon'
		require
			exists: exists
		do
			Result := get_refcon_external (item)
		ensure
			result_correct: Result = get_refcon_external (item)
		end

	set_refcon (a_value: INTEGER) is
			-- Set member `refcon'
		require
			exists: exists
		do
			set_refcon_external (item, a_value)
		ensure
			a_value_set: a_value = refcon
		end

	attr: INTEGER is
			-- Access member `attr'
		require
			exists: exists
		do
			Result := get_attr_external (item)
		ensure
			result_correct: Result = get_attr_external (item)
		end

	set_attr (a_value: INTEGER) is
			-- Set member `attr'
		require
			exists: exists
		do
			set_attr_external (item, a_value)
		ensure
			a_value_set: a_value = attr
		end

	cftext_struct: CFSTRING_STRUCT is
			-- Access member `cfText'
		require
			exists: exists
		do
			create Result.make_shared (get_cftext_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = cftext
		end

	set_cftext_struct (a_value: CFSTRING_STRUCT) is
			-- Set member `cfText'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_cftext_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = cftext
		end

	cftext: POINTER is
			-- Access member `cfText'
		require
			exists: exists
		do
			Result := get_cftext_external (item)
		ensure
			result_correct: Result = get_cftext_external (item)
		end

	set_cftext (a_value: POINTER) is
			-- Set member `cfText'
		require
			exists: exists
		do
			set_cftext_external (item, a_value)
		ensure
			a_value_set: a_value = cftext
		end

	properties_struct: OPAQUE_COLLECTION_STRUCT is
			-- Access member `properties'
		require
			exists: exists
		do
			create Result.make_shared (get_properties_external (item))
		ensure
			result_not_void: Result /= Void
			result_has_correct_item: Result.item = properties
		end

	set_properties_struct (a_value: OPAQUE_COLLECTION_STRUCT) is
			-- Set member `properties'
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_properties_external (item, a_value.item)
		ensure
			a_value_set: a_value.item = properties
		end

	properties: POINTER is
			-- Access member `properties'
		require
			exists: exists
		do
			Result := get_properties_external (item)
		ensure
			result_correct: Result = get_properties_external (item)
		end

	set_properties (a_value: POINTER) is
			-- Set member `properties'
		require
			exists: exists
		do
			set_properties_external (item, a_value)
		ensure
			a_value_set: a_value = properties
		end

	indent: INTEGER is
			-- Access member `indent'
		require
			exists: exists
		do
			Result := get_indent_external (item)
		ensure
			result_correct: Result = get_indent_external (item)
		end

	set_indent (a_value: INTEGER) is
			-- Set member `indent'
		require
			exists: exists
		do
			set_indent_external (item, a_value)
		ensure
			a_value_set: a_value = indent
		end

	cmdvirtualkey: INTEGER is
			-- Access member `cmdVirtualKey'
		require
			exists: exists
		do
			Result := get_cmdvirtualkey_external (item)
		ensure
			result_correct: Result = get_cmdvirtualkey_external (item)
		end

	set_cmdvirtualkey (a_value: INTEGER) is
			-- Set member `cmdVirtualKey'
		require
			exists: exists
		do
			set_cmdvirtualkey_external (item, a_value)
		ensure
			a_value_set: a_value = cmdvirtualkey
		end

end
