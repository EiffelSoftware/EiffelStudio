<document title="Calculator">
	<meta_data>
		<help>
			<toc>
				<envision_location>Samples\Eiffel Class Libraries Samples</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>1</size>The Calculator Sample
		</heading>
		<paragraph>This sample consists of a command line reverse Polish notation (RPN) calculator.
			<paragraph>
				<note>
					<bold>Note:</bold> A RPN calculator works slightly differently from standard calculators. It consists of a stack of numbers. Operations are applied to the two numbers on top of the stack. The result is then put on top of the stack so that it can be used in the next operation. This sample refers to the top of the stack as 
					<italic>Accumulator</italic>.
				</note>
				<heading>
					<size>2</size>Compiling
				</heading>
				<paragraph>To compile the example:
			<list ordered="false">
				<item>Launch EiffelStudio.</item>
				<item>Select 
					<bold>Use existing Ace (control file)</bold> and click 
					<bold>OK</bold>
				</item>
				<item>Browse to 
					<output output="envision">ENViSioN! root directory</output>
					<output output="studio">$ISE_EIFFEL</output>\examples\dotnet\calculator\.
					<italic/>
				</item>
				<item>Choose
					<italic/>.ace
				</item>
				<item>Choose the directory where the project will be compiled, by default the same directory containing the Ace file.</item>
				<item>Click 
					<bold>OK</bold>.
				</item>
			</list>
		</paragraph>
				<paragraph>
					<heading>
						<size>2</size>Running
					</heading>
					<paragraph>After you launch the sample, the following text appears in a console:</paragraph>
					<code_block>
*********************************
Calculator in reverse Polish form
*********************************
Allowable operations are:
		'/': Divide top two numbers on the stack.
		'0': Empty the stack.
		'a': Enter operand onto stack.
		'?': Help.
		'*': Multiply top two numbers on the stack.
		'+': Add top two numbers on the stack
		'q': Quit.
		'-': Subtract top two numbers on the stack.
Enter a number, followed by :
</code_block>
					<paragraph>Enter the first number to be put onto the stack, for example 
						<code>
							<symbol>3</symbol>
						</code>.
					</paragraph>
					<paragraph>
						<bold>Note:</bold> Failing to enter a number at this stage will cause the sample to stop. This sample was designed to showcase the use of EiffelBase data structures and is not protected against unexpected entries.
					</paragraph>
					<paragraph>You may then add another number on the stack by entering the character 
						<code>
							<symbol>a</symbol>
						</code>:
					</paragraph>
					<code_block>
*********************************
Calculator in reverse Polish form
*********************************
Allowable operations are:
        '/': Divide top two numbers on the stack.
        '0': Empty the stack.
        'a': Enter operand onto stack.
        '?': Help.
        '*': Multiply top two numbers on the stack.
        '+': Add top two numbers on the stack
        'q': Quit.
        '-': Subtract top two numbers on the stack.
Enter a number, followed by : 3

Accumulator = 3

Next operation? a
Enter a number, followed by :
</code_block>
					<paragraph>Enter a second number, for example 
						<code>
							<symbol>2</symbol>
						</code>. You can then apply any operation to the two operands such as minus:
					</paragraph>
					<code_block>
...
Next operation? a
Enter a number, followed by : 2

Accumulator = 2

Next operation? -

Accumulator = 1

Next operation?
</code_block>
					<paragraph>You may use the operation 
						<code>
							<symbol>0</symbol>
						</code> to clear the stack at any time. You may use 
						<code>
							<symbol>q</symbol>
						</code> to quit the program.
					</paragraph>
					<tip>
						<bold>Tip:</bold> You can use the command 
						<code>
							<symbol>?</symbol>
						</code> to display the list of available operations.
					</tip>
					<heading>
						<size>2</size>Under the Hood
					</heading>
					<paragraph>This sample shows how to leverage EiffelBase data structures in a simple Eiffel system. The root class <class_name>CALCULATOR</class_name> first instantiates all 
						<italic>state</italic> objects, each corresponding to one possible operation. The state classes all inherit from <class_name>STATE</class_name>. They are:
					</paragraph>
					<list ordered="false">
						<item><class_name>PLUS</class_name>: Add stack's two top numbers.</item>
						<item><class_name>MINUS</class_name>: Substract stack's two top numbers.</item>
						<item><class_name>MULTIPLY</class_name>: Multiply stack's two top numbers.</item>
						<item><class_name>DIVIDE</class_name>: Divide stack's two top numbers.</item>
						<item><class_name>EMPTY</class_name>: Empty stack.</item>
						<item><class_name>HELP</class_name>: Prints available commands.</item>
						<item><class_name>QUESTION</class_name>: Get number from user.</item>
						<item><class_name>QUIT</class_name>: Close application.</item>
					</list>Each of these classes implement the feature 
					<feature_name>do_one_state</feature_name> from 
					<class_name>STATE</class_name> which performs the operation associated with the state.The initial state is 
					<class_name>QUESTION</class_name> which asks for the initial number to put in the 
					<italic>accumulator</italic>. Following states depend on the user input.Every descendant of 
					<class_name>STATE</class_name> implement the feature 
					<feature_name>operation</feature_name> which performs the corresponding stack transformation.
				</paragraph>
			</paragraph>
		</paragraph>
	</paragraph></document>
