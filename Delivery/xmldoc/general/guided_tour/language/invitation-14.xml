<document title="13 Deferred Classes and Seamless Development">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel, The Language\Tutorials\Invitation to Eiffel</envision_location>
				<envision_pseudo_name>94</envision_pseudo_name>
				<envision_title>Deferred Classes and Seamless Development</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>The inheritance mechanism includes one more major notion: deferred features and classes.</paragraph>
		<paragraph>Declaring a feature 
			<code>
				<feature_name>f</feature_name>
			</code> as deferred in a class 
			<code>
				<class_name>C</class_name>
			</code> expresses that there is no default implementation of 
			<code>
				<feature_name>f</feature_name>
			</code> in 
			<code>
				<class_name>C</class_name>
			</code>; such implementations will appear in eventual descendants of 
			<code>
				<class_name>C</class_name>
			</code>. A class that has one or more deferred routines is itself said to be deferred. A non-deferred routine or class -- like all those seen until now -- is said to be 
			<bold>effective</bold>.
		</paragraph>
		<paragraph>For example, a system used by a Department of Motor Vehicles to register vehicles might include a class of the form</paragraph>
		<code_block>
<keyword>deferred</keyword> <keyword>class</keyword>
	<class_name>VEHICLE</class_name>

<keyword>feature</keyword>

	<feature_name>dues_paid</feature_name> <symbol>(</symbol>year<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol><symbol>:</symbol> <class_name>BOOLEAN</class_name> <keyword>is</keyword>
		<keyword>do</keyword> ... <keyword>end</keyword>

	<feature_name>valid_plate</feature_name> <symbol>(</symbol>year<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol><symbol>:</symbol> <class_name>BOOLEAN</class_name> <keyword>is</keyword>
		<keyword>do</keyword> ... <keyword>end</keyword>

	<feature_name>register</feature_name> <symbol>(</symbol>year<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Register vehicle for year.</comment>
		<keyword>require</keyword>
			<feature_name>dues_paid</feature_name> <symbol>(</symbol>year<symbol>)</symbol>
		<keyword>deferred</keyword>
		<keyword>ensure</keyword>
			<feature_name>valid_plate</feature_name> <symbol>(</symbol>year<symbol>)</symbol>
		<keyword>end</keyword>

	... Other features, deferred or effective ...

<keyword>end</keyword> <comment>-- VEHICLE</comment>
</code_block>
		<paragraph><code>This example assumes that no single registration algorithm applies to all kinds of vehicle; passenger cars, motorcycles, trucks etc. are all registered differently. But the same precondition and postcondition apply in all cases. The solution is to treat register as a deferred routine, making <class_name>VEHICLE</class_name> a deferred class. Descendants of class <class_name>VEHICLE</class_name>, such as <class_name>CAR</class_name> or <class_name>TRUCK</class_name>, effect this routine, that is to say, give effective versions. An effecting is similar to a redefinition; only here there is no effective definition in the original class, just a specification in the form of a deferred routine. The term 
			<bold>redeclaration</bold> covers both redefinition and effecting.</code>
		</paragraph>
		<image>
			<url>invitation-5.png</url>
		</image>
		<paragraph>
		<code>
		Whereas an effective class described an implementation of an abstract data types, a deferred class describes a set of possible implementations. You may not instantiate a <keyword>deferred class</keyword>: <keyword>create</keyword> <local_variable>v</local_variable> is invalid if <local_variable>v</local_variable> is declared of type <class_name>VEHICLE</class_name>. But you may assign to <local_variable>v</local_variable> a reference to an instance of an effective descendant of <class_name>VEHICLE</class_name>. For example, assuming <class_name>CAR </class_name>and <class_name>TRUCK</class_name> provide effective definitions for all deferred routines of <class_name>VEHICLE</class_name>, the following will be valid:
		</code>
		</paragraph>
		<code_block>
v<symbol>:</symbol> <class_name>VEHICLE</class_name>; c<symbol>:</symbol> <class_name>CAR</class_name>; t<symbol>:</symbol> <class_name>TRUCK</class_name>
... <keyword>create</keyword> c; <keyword>create</keyword> t ...
<keyword>if</keyword> <string>"Some test"</string> <keyword>then</keyword>
	v := c
<keyword>else</keyword>
	v := t
<keyword>end</keyword>
v.<feature_name>register</feature_name> (2003)</code_block>
		<paragraph>This example fully exploits polymorphism: depending on the outcome of "Some test", <code><local_variable>v</local_variable></code> will be treated as a car or a truck, and the appropriate registration algorithm will be applied. Also, "Some test" may depend on some event whose outcome is impossible to predict until run-time, for example the user clicking with the mouse to select one among several vehicle icons displayed on the screen.</paragraph>
		<paragraph>Deferred classes are particularly useful at the design stage. The first version of a module may be a deferred class, which will later be refined into one or more effective classes. Eiffel's Design by Contract&amp;#153; mechanisms are essential here: you may a precondition and a postcondition with a routine even though it is a deferred routine (as with register above), and an invariant with a class even though it is a deferred class. This enables you, as a designer, to attach precise semantics to a module at the design stage long before you will make any implementation choices.</paragraph>
		<paragraph>Beyond design and implementation, these techniques extend to the earliest stage of development, analysis. Deferred classes written at that stage describe not software objects, but objects from the external world being modeled -- documents, airplanes, investments. Here again the presence of contracts to express constraints, and the language's other structuring facilities, provide an attractive combination.</paragraph>
		<paragraph>Eiffel appears here in its full role of a lifecycle approach, covering areas traditionally considered separate: program implementation, the traditional province of development environments; system modeling and architecture, the traditional province of CASE tools based on UML or similar notations disconnected from the rest of the lifecycle. Eiffel instead emphasizes the fundamental unity of the software process and the usefulness of a single set of notations, concepts and tools applicable throughout. Such a seamless approach is indispensable to support the inevitable reversals that occur during the process of building software, such as detecting at implementation time a problem that leads to a change in the system's functionality, set at analysis time. The use of separate tools and notations, such as UML on one side and a programming language on the other, makes such round-trips difficult at best and often leads to monolithic, hard-to-change software. Eiffel lets you focus on the issues, without interposing artificial barriers between different software development activities. You'll use the fundamental problem-solving techniques -- data abstraction through classes, precise specification through contracts, modularity through information hiding, rational organization through inheritance, decentralized architecture through dynamic binding, parameterization of the solution through genericity, reusability through all these techniques -- all along; only the level of abstraction changes.</paragraph>
	</paragraph></document>
