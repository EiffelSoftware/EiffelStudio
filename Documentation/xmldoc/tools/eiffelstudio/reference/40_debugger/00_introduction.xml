<document title="Introduction" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>debugger</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>application, debug</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>A debugger is a tool that allows you to 
			<link>
				<url>10_execution/00_introduction.xml</url>
				<label>run</label>
			</link> an application and view its state at any moment. This includes having information concerning the current 
			<link>
				<url>30_call_stack_tool/00_introduction.xml</url>
				<label>call stack</label>
			</link> and the 
			<link>
				<url>40_object_tool/00_introduction.xml</url>
				<label>state of objects</label>
			</link> of the system, i.e. the values of their attributes. This kind of information can be used to spot objects that have invalid states, to see the consequences of the execution of a feature over an object state, and so on.
		</paragraph>
		<paragraph>The features of the EiffelStudio debugger include:</paragraph>
		<list ordered="false">
			<item>Stopping the application in frozen features as well as in melted features</item>
			<item>
				<link>
					<url>10_execution/40_step_into_a_feature.xml</url>
					<label>Stepping into</label>
				</link> features, 
				<link>
					<url>10_execution/50_step_by_step.xml</url>
					<label>executing them one line at a time</label>
				</link>, or 
				<link>
					<url>10_execution/60_step_out.xml</url>
					<label>stepping out</label>
				</link> of them
			</item>
			<item>Setting 
				<link>
					<url>20_breakpoints/00_introduction.xml</url>
					<label>breakpoints</label>
				</link> on-the-fly, while the execution is running
			</item>
			<item>
				<link>
					<url>50_expression_evaluation/index.xml</url>
					<label>Dynamic evaluation of expressions</label>
				</link>
			</item>
			<item>
				<link>
					<url>20_breakpoints/index.xml</url>
					<label>Conditional breakpoints</label>
				</link>
			</item>
			<item>
				<link>
					<url>60_stack_overflow_prevention.xml</url>
					<label>Stack overflow prevention</label>
				</link>
			</item>
			<item>Classes can implement the 
				<link>
					<url>40_object_tool/17_debug_output.xml</url>
					<label>debug_output interface</label>
				</link> and have their objects display a string in the debugger
			</item>
			<item>Execution can be recorded to be replayed when execution is paused, use the 
				<link>
					<url>35_execution_record_and_replay/index.xml</url>
					<label>execution replay mechanism</label>
				</link> from the call stack tool interface, and have the debugging tools updated.
			</item>			
			<item>Debuggee objects can be stored/retrieved from the debugger, check the 
				<link>
					<url>52_debuggee_object_storage.xml</url>
					<label>debuggee object storage mechanism</label>
				</link> available from the objects tool, and watch tools' toolbar.
			</item>			
			
		</list>
	</paragraph></document>
