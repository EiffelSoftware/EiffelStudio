<document title="Interval">
	<meta_data>
		<help>
			<toc>				
				<envision_pseudo_name>30</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Class <class_name>INTERVAL</class_name> deals with intervals between two instances of the same class which conform to<class_name> ABSOLUTE</class_name> (
			<class_name>DATE</class_name>, 
			<class_name>TIME</class_name>, 
			<class_name>DATE_TIME</class_name>). The notions of interval is directly linked with the notion of order.
		</paragraph>
		<paragraph>The <feature_name>start_bound</feature_name> must be before the <feature_name>end_bound</feature_name>.</paragraph>
		<heading>
			<size>4</size>Creation
		</heading>
		<paragraph>The features <feature_name>make</feature_name>, <feature_name>set_start_bound</feature_name> and <feature_name>set_end_bound</feature_name> take clones of their arguments, so that if these arguments are changed, the interval previously created is not.</paragraph>
		<paragraph>It would have been possible to create intervals with references to date or time, but a modification of the dates would have been effective in the interval so that only the invariant would have been able to check if the <feature_name>start_bound</feature_name> is still before the <feature_name>end_bound</feature_name>.</paragraph>
		<heading>
			<size>4</size>Interval measurement
		</heading>
		<paragraph>The measure of intervals is made by duration: the result is an instance of the class 
			<class_name>DURATION</class_name>. However, as 
			<class_name>DURATION</class_name> is the common parent of 
			<class_name>TIME_DURATION</class_name>, 
			<class_name>DATE_DURATION</class_name> and 
			<class_name>DATE_TIME_DURATION</class_name>, it does not have many features available. Some features in class 
			<class_name>TIME</class_name>, 
			<class_name>DATE</class_name>, 
			<class_name>DATE_TIME</class_name> return the same result and are more efficient to use. 
			<class_name>DURATION</class_name> has to be use as the last solution.
		</paragraph>
		<heading>
			<size>4</size>Comparison
		</heading>
		<paragraph>It includes intersection, inclusion and a special comparison.</paragraph>
		<list ordered="false">
			<item><feature_name>is_equal</feature_name> is present and compare values, not references.</item>
			<item>Feature <feature_name>intersects</feature_name> returns the mathematical result of the intersection of two intervals.</item>
			<item><feature_name>is_strict_included_by</feature_name>, <feature_name>strict_includes</feature_name>, <feature_name>is_included_by</feature_name> and <feature_name>includes</feature_name> are connected to the same notion of inclusion.</item>
			<item>&lt;, + &gt; and &gt;= use a special rule to compare intervals. int1 &lt; int2 is true if int1 starts and ends strictly before int2. The other features use the <feature_name>same rule</feature_name> and<feature_name> is_equal</feature_name> if needed.</item>
			<item><feature_name>overlaps</feature_name> looks like <feature_name>intersects</feature_name> but the argument has to be after the current interval. <feature_name>is_overlapped</feature_name> is the opposite.</item>
			<item><feature_name>meets</feature_name> and <feature_name>is_met</feature_name> are used to test if two intervals have a common bound.</item>
		</list>
		<heading>
			<size>4</size>Status Report
		</heading>
		<paragraph>The main part of the functions need an argument from the same generic type and return a <class_name>BOOLEAN</class_name> value.</paragraph>
		<list ordered="false">
			<item><feature_name>empty</feature_name> tests if the bounds are equal.</item>
			<item><feature_name>has</feature_name>,<feature_name> strict_before</feature_name>, <feature_name>strict_after</feature_name>,<feature_name> before</feature_name> and <feature_name>after</feature_name> test the position of an element relatively to the current interval.</item>
		</list>
		<heading>
			<size>4</size>Element change
		</heading>
		<paragraph><feature_name>set_start_bound</feature_name> and <feature_name>set_end_bound</feature_name> are available to change the bounds.</paragraph>
		<heading>
			<size>4</size>Operations
		</heading>
		<paragraph><feature_name>Union</feature_name> and <feature_name>intersection</feature_name> are the mathematical functions. <feature_name>gather</feature_name> requires that two intervals meet each other and then yields the union.</paragraph>
	</paragraph></document>
