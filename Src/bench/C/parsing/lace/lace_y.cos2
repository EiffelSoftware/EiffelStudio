#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define yyparse xxparse
#define yylex xxlex
#define yyerror xxerror
#define yychar xxchar
#define yyval xxval
#define yylval xxlval
#define yydebug xxdebug
#define yynerrs xxnerrs
#define yyerrflag xxerrflag
#define yyss xxss
#define yyssp xxssp
#define yyvs xxvs
#define yyvsp xxvsp
#define yylhs xxlhs
#define yylen xxlen
#define yydefred xxdefred
#define yydgoto xxdgoto
#define yysindex xxsindex
#define yyrindex xxrindex
#define yygindex xxgindex
#define yytable xxtable
#define yycheck xxcheck
#define yyname xxname
#define yyrule xxrule
#define YYPREFIX "xx"
#line 6 "lace_y.y"
#include "lace_c.h"
#undef NULL
#define NULL (char *) 0
#line 11 "lace_y.y"
typedef union {
	char *node;
	int  value;
} YYSTYPE;
#line 45 "y_tab.c"
#define LAC_ADAPT 257
#define LAC_ALL 258
#define LAC_AS 259
#define LAC_ASSERTION 260
#define LAC_C 261
#define LAC_CHECK 262
#define LAC_CLUSTER 263
#define LAC_COLUMN 264
#define LAC_COMMA 265
#define LAC_COMMENT 266
#define LAC_CREATION 267
#define LAC_DEBUG 268
#define LAC_DEFAULT 269
#define LAC_END 270
#define LAC_ENSURE 271
#define LAC_EXCLUDE 272
#define LAC_EXECUTABLE 273
#define LAC_EXPORT 274
#define LAC_EXTERNAL 275
#define LAC_GENERATE 276
#define LAC_IDENTIFIER 277
#define LAC_IGNORE 278
#define LAC_INCLUDE 279
#define LAC_INCLUDE_PATH 280
#define LAC_INVARIANT 281
#define LAC_LEFT_PARAM 282
#define LAC_LOOP 283
#define LAC_MAKE 284
#define LAC_NO 285
#define LAC_OBJECT 286
#define LAC_OPTIMIZE 287
#define LAC_OPTION 288
#define LAC_RENAME 289
#define LAC_REQUIRE 290
#define LAC_RIGHT_PARAM 291
#define LAC_ROOT 292
#define LAC_SEMICOLON 293
#define LAC_STRING 294
#define LAC_SYSTEM 295
#define LAC_TRACE 296
#define LAC_USE 297
#define LAC_VISIBLE 298
#define LAC_YES 299
#define LAC_WHITE 300
#define LAC_ERROR2 301
#define LAC_ERROR3 302
#define LAC_ERROR4 303
#define LAC_ERROR6 304
#define LAC_ERROR7 305
#define YYERRCODE 256
short xxlhs[] = {                                        -1,
    0,    0,    1,   46,    2,   47,    3,    4,    4,    5,
    5,    6,   49,    6,   48,   48,    7,    7,    7,    7,
    8,   43,    9,    9,   10,   10,   51,   10,   11,   11,
   53,   11,   50,   50,   52,   52,   54,   54,   12,   13,
   56,   13,   55,   55,   14,   14,   14,   15,   58,   16,
   57,   57,   17,   18,   60,   18,   19,   62,   19,   59,
   59,   20,   20,   44,   44,   44,   44,   44,   61,   61,
   21,   21,   22,   64,   22,   63,   63,   23,   23,   24,
   24,   25,   25,   25,   26,   26,   26,   27,   27,   27,
   27,   27,   28,   66,   28,   65,   65,   29,   67,   29,
   30,   30,   30,   30,   30,   30,   31,   69,   31,   68,
   68,   32,   32,   33,   33,   34,   34,   35,   70,   35,
   36,   36,   37,   37,   37,   37,   45,   45,   38,   72,
   38,   39,   73,   39,   71,   71,   40,   75,   40,   74,
   74,   41,   41,   42,   42,
};
short xxlen[] = {                                         2,
    1,    2,    7,    0,    3,    0,    5,    0,    3,    0,
    2,    0,    0,    3,    1,    3,    0,    2,    3,    4,
    2,    7,    0,    2,    0,    1,    0,    3,    0,    1,
    0,    3,    1,    3,    1,    3,    1,    3,    1,    0,
    0,    3,    1,    3,    0,    1,    1,    3,    0,    5,
    1,    3,    3,    0,    0,    3,    0,    0,    3,    1,
    3,    0,    2,    1,    1,    1,    1,    1,    1,    3,
    0,    3,    0,    0,    4,    1,    3,    0,    1,    0,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    0,    3,    1,    3,    0,    0,    4,
    1,    1,    1,    1,    1,    1,    0,    0,    3,    1,
    3,    0,    4,    0,    3,    1,    1,    0,    0,    3,
    1,    3,    0,    1,    2,    6,    0,    2,    0,    0,
    3,    0,    0,    3,    1,    3,    0,    0,    3,    1,
    3,    0,    3,    1,    1,
};
short xxdefred[] = {                                      0,
    4,    0,    0,    1,    0,    0,    0,    0,  144,  145,
   24,    0,    0,    0,    0,    2,    5,    6,   55,    0,
    0,    0,    0,    0,    0,   13,    0,   33,    0,    0,
   41,    0,    0,    0,   64,   65,   66,   67,   60,   68,
    0,    0,    0,   94,    0,    0,   35,    0,    0,    0,
    0,    0,    7,    0,   63,    0,   15,    0,    0,    0,
    0,  108,    0,   34,    0,   43,   46,   47,    0,    0,
   58,    0,    9,   11,   87,   92,   89,   90,   91,   86,
   88,   85,    0,   82,   83,   84,   61,    0,   21,    0,
  101,  105,  102,  103,  104,   96,    0,  106,    0,    0,
    3,   36,    0,    0,    0,  119,   22,   81,   19,    0,
   16,   99,    0,    0,  110,    0,   48,   49,   44,   69,
    0,    0,    0,   20,    0,   97,    0,    0,    0,    0,
    0,    0,    0,  121,    0,   37,   39,    0,  117,  116,
    0,    0,  111,   51,    0,    0,    0,   72,   70,    0,
    0,  125,    0,    0,  115,  113,    0,    0,   74,  122,
  128,  130,    0,   38,   53,   52,    0,    0,  133,    0,
   76,   79,    0,  135,    0,    0,  138,    0,    0,    0,
    0,    0,  126,   77,  136,  140,    0,    0,    0,    0,
  143,  141,
};
short xxdgoto[] = {                                       3,
    4,    5,   13,   34,   53,   27,   57,   58,    6,   15,
   23,  136,   32,   66,   67,   68,  144,   20,   72,   39,
  120,  148,  174,   55,   83,   84,   85,   45,   96,   97,
   63,  115,  128,  141,  107,  133,  134,  163,  170,  178,
  186,  172,    7,   41,  153,    8,   24,   60,   43,   29,
   21,   48,   30,  138,   70,   49,  146,  130,   42,   25,
  122,  105,  173,  167,   99,   61,  125,  116,  100,  123,
  175,  168,  176,  188,  182,
};
short xxsindex[] = {                                    -22,
    0, -256,    0,    0, -222, -254, -199, -256,    0,    0,
    0, -256, -195,    0, -176,    0,    0,    0,    0, -159,
 -256,    0, -135, -150, -161,    0, -136,    0, -168, -256,
    0, -195, -256, -117,    0,    0,    0,    0,    0,    0,
 -105, -115, -256,    0,  -90, -256,    0,  -83, -256,  -98,
  -57, -256,    0, -251,    0, -161,    0, -256,  -21,  -49,
  -69,    0,  -23,    0, -256,    0,    0,    0,  -12,  -39,
    0,  -30,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -15,    0,    0,    0,    0, -230,    0, -256,
    0,    0,    0,    0,    0,    0,   13,    0,  -11,  -69,
    0,    0, -194, -256, -161,    0,    0,    0,    0,    8,
    0,    0,  -69,   -1,    0,  -10,    0,    0,    0,    0,
 -105,   -9, -256,    0, -256,    0, -125,   21,  -69, -256,
   22, -161,   -5,    0,  -46,    0,    0,   24,    0,    0,
    1, -256,    0,    0,   28,   25, -256,    0,    0, -256,
 -256,    0,   26, -256,    0,    0, -256, -256,    0,    0,
    0,    0,   17,    0,    0,    0, -256, -256,    0,    5,
    0,    0,   30,    0,   31, -256,    0,   27, -256, -256,
   31, -256,    0,    0,    0,    0,   39,   34, -256, -256,
    0,    0,
};
short xxrindex[] = {                                   -164,
    0,    0,    0,    0,    0, -119,    0,    0,    0,    0,
    0,    0,    4, -197, -253,    0,    0,    0,    0,  -35,
    0, -157, -152,   -4,  -79,    0, -258,    0,  -99,    0,
    0, -219,    0,   -6,    0,    0,    0,    0,    0,    0,
  -70, -261,  -38,    0,   32,    0,    0, -103,  -67, -265,
    0,    0,    0,    0,    0,  -79,    0,    0,    0,  -25,
  -95,    0,    0,    0,    0,    0,    0,    0,    0, -126,
    0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -211,    0,  -38,
    0,    0,    0,    0,    0,    0,    0,    0,  -34, -184,
    0,    0,    0,  -67, -269,    0,    0,    0,    0,    0,
    0,    0,  -95,   36,    0,   35,    0,    0,    0,    0,
 -215, -262, -128,    0,    0,    0,    0,    0, -184,    0,
 -217, -269,   37,    0,  -73,    0,    0,  -37,    0,    0,
    0,    0,    0,    0,    0,  -40,    0,    0,    0, -128,
    0,    0, -160,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -267,    0,    0,    0, -208, -106,    0,   38,
    0,    0, -204,    0, -113,  -43,    0,    0, -208, -106,
 -107,  -58,    0,    0,    0,    0,    0,   40,    0,  -58,
    0,    0,
};
short xxgindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,  211,    0,    0,    0,
    0,  150,    0,  202,    0,    0,  151,  279,    0,  256,
  181,    0,   82,  193,    0,    0,    0,    0,  203,  -87,
    0,  186,    0,    0,    0,    0,  167,    0,    0,    0,
  128,   -2,  231,  -13,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  144,    0,    0,    0,    0,
};
#define YYTABLESIZE 320
short xxtable[] = {                                      11,
   71,   56,  132,   29,   57,   17,   75,   59,   56,   18,
   76,   93,  114,   56,   56,   29,   29,   93,   28,   77,
    9,  132,   40,   71,   14,    9,   56,   47,   71,   78,
   51,   79,   57,   80,   29,   59,   56,   10,   81,  109,
   59,  114,   10,   64,   29,   23,   69,   82,   80,   74,
   54,   86,   73,   40,   80,   88,   78,   23,   98,   26,
   23,   78,  102,   18,   18,   75,    2,   23,   54,   12,
   16,   26,   26,   19,   26,   73,   23,   80,   54,   27,
   73,   18,   80,  117,   78,  112,   23,   59,   75,   78,
   26,  121,   23,   75,  118,   22,   27,   98,   35,   30,
   26,   69,   40,   26,   23,   23,   36,   23,  112,  129,
   98,   30,   30,  129,   23,    9,   40,   40,  121,   31,
  135,   31,  137,   23,   46,   37,   98,  145,  129,   40,
   30,   33,   10,   23,   38,   40,   31,   25,   44,  156,
   30,  123,   42,   42,  159,   40,   52,  135,  161,   25,
   25,  137,   25,   32,  165,  145,  131,   28,   78,  139,
  131,   42,  134,   78,  123,   32,   32,   78,   25,   28,
   28,   42,   28,  140,   98,  131,   54,   56,   25,  187,
   98,  134,   78,   62,   32,   62,  191,  187,   28,   71,
   62,   91,   80,  127,   32,   62,   62,   98,   28,   80,
  127,   45,   45,   92,   80,   80,  142,    9,   62,   65,
   93,  142,  151,   62,   94,  127,   95,   80,   62,  124,
   45,   78,   80,  152,   10,   45,   78,   80,   50,   50,
   45,   17,  100,   73,   12,   95,   17,   17,  100,   12,
   12,   95,   89,   90,   14,   78,  101,   50,  171,   14,
   14,  103,   50,  104,   17,  100,   10,   50,    8,    8,
  184,  185,   10,   10,    8,    8,   54,  106,   10,   10,
    8,    8,    1,   54,    2,  108,  112,  124,   54,   54,
  127,  113,  129,  132,  142,  147,  157,  150,  154,  158,
  169,  155,  162,  177,  179,  180,  183,  189,  190,  114,
  111,  107,  118,  164,  109,  119,  120,  137,  166,  139,
   50,   87,  149,  131,  143,  126,  160,  192,  110,  181,
};
short xxcheck[] = {                                       2,
  270,  263,  270,  257,  270,    8,  258,  270,  270,   12,
  262,  270,  100,  275,  276,  269,  270,  276,   21,  271,
  277,  289,   25,  293,  279,  277,  288,   30,  298,  281,
   33,  283,  298,  285,  288,  298,  298,  294,  290,  270,
   43,  129,  294,   46,  298,  257,   49,  299,  264,   52,
  270,   54,  270,   56,  270,   58,  265,  269,   61,  257,
  272,  270,   65,  275,  276,  270,  297,  279,  288,  292,
  270,  269,  270,  269,  272,  293,  288,  293,  298,  277,
  298,  293,  298,  278,  293,  270,  298,   90,  293,  298,
  288,  105,  257,  298,  289,  272,  294,  100,  260,  257,
  298,  104,  105,  263,  269,  270,  268,  272,  293,  270,
  113,  269,  270,  274,  279,  277,  269,  270,  132,  277,
  123,  257,  125,  288,  293,  287,  129,  130,  289,  132,
  288,  282,  294,  298,  296,  288,  294,  257,  275,  142,
  298,  270,  269,  270,  147,  298,  264,  150,  151,  269,
  270,  154,  272,  257,  157,  158,  270,  257,  265,  285,
  274,  288,  270,  270,  293,  269,  270,  274,  288,  269,
  270,  298,  272,  299,  270,  289,  282,  293,  298,  182,
  276,  289,  289,  263,  288,  276,  189,  190,  288,  288,
  270,  261,  263,  267,  298,  275,  276,  293,  298,  270,
  274,  269,  270,  273,  275,  276,  265,  277,  288,  293,
  280,  270,  259,  293,  284,  289,  286,  288,  298,  293,
  288,  265,  293,  270,  294,  293,  270,  298,  269,  270,
  298,  270,  270,  291,  270,  270,  275,  276,  276,  275,
  276,  276,  264,  293,  270,  289,  270,  288,  167,  275,
  276,  264,  293,  293,  293,  293,  263,  298,  263,  264,
  179,  180,  269,  270,  269,  270,  263,  298,  275,  276,
  275,  276,  295,  270,  297,  291,  264,  270,  275,  276,
  282,  293,  293,  293,  264,  264,  259,  293,  265,  265,
  274,  291,  267,  289,  265,  265,  270,  259,  265,  264,
   90,  270,  270,  154,  270,  104,  270,  270,  158,  270,
   32,   56,  132,  121,  129,  113,  150,  190,   88,  176,
};
#define YYFINAL 3
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 305
#if YYDEBUG
char *xxname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"LAC_ADAPT","LAC_ALL","LAC_AS",
"LAC_ASSERTION","LAC_C","LAC_CHECK","LAC_CLUSTER","LAC_COLUMN","LAC_COMMA",
"LAC_COMMENT","LAC_CREATION","LAC_DEBUG","LAC_DEFAULT","LAC_END","LAC_ENSURE",
"LAC_EXCLUDE","LAC_EXECUTABLE","LAC_EXPORT","LAC_EXTERNAL","LAC_GENERATE",
"LAC_IDENTIFIER","LAC_IGNORE","LAC_INCLUDE","LAC_INCLUDE_PATH","LAC_INVARIANT",
"LAC_LEFT_PARAM","LAC_LOOP","LAC_MAKE","LAC_NO","LAC_OBJECT","LAC_OPTIMIZE",
"LAC_OPTION","LAC_RENAME","LAC_REQUIRE","LAC_RIGHT_PARAM","LAC_ROOT",
"LAC_SEMICOLON","LAC_STRING","LAC_SYSTEM","LAC_TRACE","LAC_USE","LAC_VISIBLE",
"LAC_YES","LAC_WHITE","LAC_ERROR2","LAC_ERROR3","LAC_ERROR4","LAC_ERROR6",
"LAC_ERROR7",
};
char *xxrule[] = {
"$accept : Ace_or_Properties",
"Ace_or_Properties : Ace",
"Ace_or_Properties : Cluster_properties LAC_END",
"Ace : System Root Defaults Clusters Externals Generation LAC_END",
"$$1 :",
"System : LAC_SYSTEM $$1 Name",
"$$2 :",
"Root : LAC_ROOT Name $$2 Cluster_mark Creation_procedure",
"Cluster_mark :",
"Cluster_mark : LAC_LEFT_PARAM Name LAC_RIGHT_PARAM",
"Creation_procedure :",
"Creation_procedure : LAC_COLUMN Name",
"Clusters :",
"$$3 :",
"Clusters : LAC_CLUSTER $$3 Cluster_clause_list",
"Cluster_clause_list : Cluster_clause",
"Cluster_clause_list : Cluster_clause_list LAC_SEMICOLON Cluster_clause",
"Cluster_clause :",
"Cluster_clause : Cluster_tag Name",
"Cluster_clause : Cluster_tag Name LAC_END",
"Cluster_clause : Cluster_tag Name Cluster_properties LAC_END",
"Cluster_tag : Name LAC_COLUMN",
"Cluster_properties : Use Include Exclude Name_adapt Defaults Options Visible",
"Use :",
"Use : LAC_USE Name",
"Include :",
"Include : LAC_INCLUDE",
"$$4 :",
"Include : LAC_INCLUDE $$4 Include_file_list",
"Exclude :",
"Exclude : LAC_EXCLUDE",
"$$5 :",
"Exclude : LAC_EXCLUDE $$5 Exclude_file_list",
"Include_file_list : Name",
"Include_file_list : Include_file_list LAC_SEMICOLON Name",
"Exclude_file_list : Name",
"Exclude_file_list : Exclude_file_list LAC_SEMICOLON Name",
"File_list : File_clause",
"File_list : File_list LAC_COMMA File_clause",
"File_clause : Name",
"Name_adapt :",
"$$6 :",
"Name_adapt : LAC_ADAPT $$6 Cluster_adapt_list",
"Cluster_adapt_list : Cluster_adapt_clause",
"Cluster_adapt_list : Cluster_adapt_list LAC_SEMICOLON Cluster_adapt_clause",
"Cluster_adapt_clause :",
"Cluster_adapt_clause : Cluster_ignore",
"Cluster_adapt_clause : Cluster_rename_clause",
"Cluster_ignore : Name LAC_COLUMN LAC_IGNORE",
"$$7 :",
"Cluster_rename_clause : Name LAC_COLUMN LAC_RENAME $$7 Class_rename_list",
"Class_rename_list : Class_rename_pair",
"Class_rename_list : Class_rename_list LAC_COMMA Class_rename_pair",
"Class_rename_pair : Name LAC_AS Name",
"Defaults :",
"$$8 :",
"Defaults : LAC_DEFAULT $$8 D_option_clause_list",
"Options :",
"$$9 :",
"Options : LAC_OPTION $$9 O_option_clause_list",
"D_option_clause_list : D_option_clause",
"D_option_clause_list : D_option_clause_list LAC_SEMICOLON D_option_clause",
"D_option_clause :",
"D_option_clause : Option_name Option_mark",
"Option_name : LAC_ASSERTION",
"Option_name : LAC_DEBUG",
"Option_name : LAC_OPTIMIZE",
"Option_name : LAC_TRACE",
"Option_name : Name",
"O_option_clause_list : O_option_clause",
"O_option_clause_list : O_option_clause_list LAC_SEMICOLON O_option_clause",
"O_option_clause :",
"O_option_clause : Option_name Option_mark Target_list",
"Target_list :",
"$$10 :",
"Target_list : LAC_COLUMN Name $$10 Class_name_list",
"Class_name_list : Name_star",
"Class_name_list : Class_name_list LAC_COMMA Name_star",
"Name_star :",
"Name_star : Name",
"Option_mark :",
"Option_mark : LAC_LEFT_PARAM Option_value LAC_RIGHT_PARAM",
"Option_value : Standard_value",
"Option_value : Class_value",
"Option_value : Name",
"Standard_value : LAC_YES",
"Standard_value : LAC_NO",
"Standard_value : LAC_ALL",
"Class_value : LAC_REQUIRE",
"Class_value : LAC_ENSURE",
"Class_value : LAC_INVARIANT",
"Class_value : LAC_LOOP",
"Class_value : LAC_CHECK",
"Externals :",
"$$11 :",
"Externals : LAC_EXTERNAL $$11 Language_contrib_list",
"Language_contrib_list : Language_contrib",
"Language_contrib_list : Language_contrib_list LAC_SEMICOLON Language_contrib",
"Language_contrib :",
"$$12 :",
"Language_contrib : Language_name LAC_COLUMN $$12 File_list",
"Language_name : LAC_C",
"Language_name : LAC_INCLUDE_PATH",
"Language_name : LAC_MAKE",
"Language_name : LAC_OBJECT",
"Language_name : LAC_EXECUTABLE",
"Language_name : Name",
"Generation :",
"$$13 :",
"Generation : LAC_GENERATE $$13 Language_gen_list",
"Language_gen_list : Language_generation",
"Language_gen_list : Language_gen_list LAC_SEMICOLON Language_generation",
"Language_generation :",
"Language_generation : Language_name Generate_option LAC_COLUMN Name",
"Generate_option :",
"Generate_option : LAC_LEFT_PARAM Generate_option_value LAC_RIGHT_PARAM",
"Generate_option_value : LAC_YES",
"Generate_option_value : LAC_NO",
"Visible :",
"$$14 :",
"Visible : LAC_VISIBLE $$14 Class_visi_list",
"Class_visi_list : Class_visibility",
"Class_visi_list : Class_visi_list LAC_SEMICOLON Class_visibility",
"Class_visibility :",
"Class_visibility : Name",
"Class_visibility : Name LAC_END",
"Class_visibility : Name External_name Creation_restriction Export_restriction External_rename LAC_END",
"External_name :",
"External_name : LAC_AS Name",
"Creation_restriction :",
"$$15 :",
"Creation_restriction : LAC_CREATION $$15 Feature_name_list",
"Export_restriction :",
"$$16 :",
"Export_restriction : LAC_EXPORT $$16 Feature_name_list",
"Feature_name_list : Name_star",
"Feature_name_list : Feature_name_list LAC_COMMA Name_star",
"External_rename :",
"$$17 :",
"External_rename : LAC_RENAME $$17 External_rename_list",
"External_rename_list : ExternaL_rename_pair",
"External_rename_list : External_rename_list LAC_COMMA ExternaL_rename_pair",
"ExternaL_rename_pair :",
"ExternaL_rename_pair : Name LAC_AS Name",
"Name : LAC_IDENTIFIER",
"Name : LAC_STRING",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 472 "lace_y.y"

xxwrap()
{
    return 1;
}
#line 486 "y_tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 86 "lace_y.y"
{rn_ast = yyvsp[0].node;}
break;
case 2:
#line 88 "lace_y.y"
{rn_ast = yyvsp[-1].node;}
break;
case 3:
#line 92 "lace_y.y"
{
							yyval.node = create_node7 (ACE_SD,yyvsp[-6].node,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,click_list_new());
							}
break;
case 4:
#line 97 "lace_y.y"
{click_list_init();}
break;
case 5:
#line 98 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 6:
#line 101 "lace_y.y"
{yyval.value = click_list_push ();}
break;
case 7:
#line 103 "lace_y.y"
{
							yyval.node = create_node3 (ROOT_SD,yyvsp[-3].node,yyvsp[-1].node,yyvsp[0].node);
							click_list_set (yyval.node, yyvsp[-2].value);
							}
break;
case 8:
#line 110 "lace_y.y"
{yyval.node = NULL;}
break;
case 9:
#line 112 "lace_y.y"
{yyval.node = yyvsp[-1].node;}
break;
case 10:
#line 116 "lace_y.y"
{yyval.node = NULL;}
break;
case 11:
#line 118 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 12:
#line 122 "lace_y.y"
{yyval.node = NULL;}
break;
case 13:
#line 123 "lace_y.y"
{list_init();}
break;
case 14:
#line 124 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 15:
#line 128 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 16:
#line 130 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 17:
#line 134 "lace_y.y"
{yyval.node = NULL;}
break;
case 18:
#line 137 "lace_y.y"
{yyval.node = create_node3 (CLUSTER_SD,yyvsp[-1].node,yyvsp[0].node,NULL);}
break;
case 19:
#line 139 "lace_y.y"
{yyval.node = create_node3 (CLUSTER_SD,yyvsp[-2].node,yyvsp[-1].node,NULL);}
break;
case 20:
#line 141 "lace_y.y"
{yyval.node = create_node3 (CLUSTER_SD,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 21:
#line 145 "lace_y.y"
{yyval.node = yyvsp[-1].node;}
break;
case 22:
#line 149 "lace_y.y"
{yyval.node = create_node7 (CLUST_PROP_SD,yyvsp[-6].node,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 23:
#line 153 "lace_y.y"
{yyval.node = NULL;}
break;
case 24:
#line 155 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 25:
#line 159 "lace_y.y"
{yyval.node = NULL;}
break;
case 26:
#line 160 "lace_y.y"
{yyval.node = NULL;}
break;
case 27:
#line 161 "lace_y.y"
{list_init();}
break;
case 28:
#line 162 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 29:
#line 166 "lace_y.y"
{yyval.node = NULL;}
break;
case 30:
#line 167 "lace_y.y"
{yyval.node = NULL;}
break;
case 31:
#line 168 "lace_y.y"
{list_init();}
break;
case 32:
#line 169 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 33:
#line 173 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,yyvsp[0].node));}
break;
case 34:
#line 175 "lace_y.y"
{list_push(create_node1(INCLUDE_SD,yyvsp[0].node));}
break;
case 35:
#line 179 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,yyvsp[0].node));}
break;
case 36:
#line 181 "lace_y.y"
{list_push(create_node1(EXCLUDE_SD,yyvsp[0].node));}
break;
case 37:
#line 185 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 38:
#line 187 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 39:
#line 191 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 40:
#line 195 "lace_y.y"
{yyval.node = NULL;}
break;
case 41:
#line 196 "lace_y.y"
{list_init();}
break;
case 42:
#line 197 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 43:
#line 201 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 44:
#line 203 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 45:
#line 207 "lace_y.y"
{yyval.node = NULL;}
break;
case 46:
#line 209 "lace_y.y"
{yyval.node = create_node1 (CLUST_IGN_SD,yyvsp[0].node);}
break;
case 47:
#line 211 "lace_y.y"
{yyval.node = create_node2 (CLUST_REN_SD,yyvsp[0].node,list_new(CONSTRUCT_LIST_SD));}
break;
case 48:
#line 215 "lace_y.y"
{yyval.node = yyvsp[-2].node;}
break;
case 49:
#line 218 "lace_y.y"
{list_init();}
break;
case 50:
#line 219 "lace_y.y"
{yyval.node = yyvsp[-4].node;}
break;
case 51:
#line 223 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 52:
#line 225 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 53:
#line 229 "lace_y.y"
{yyval.node = create_node2 (TWO_NAME_SD,yyvsp[-2].node,yyvsp[0].node);}
break;
case 54:
#line 233 "lace_y.y"
{yyval.node = NULL;}
break;
case 55:
#line 234 "lace_y.y"
{list_init();}
break;
case 56:
#line 235 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 57:
#line 239 "lace_y.y"
{yyval.node = NULL;}
break;
case 58:
#line 240 "lace_y.y"
{list_init();}
break;
case 59:
#line 241 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 60:
#line 245 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 61:
#line 247 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 62:
#line 251 "lace_y.y"
{yyval.node = NULL;}
break;
case 63:
#line 253 "lace_y.y"
{yyval.node = create_node2 (D_OPTION_SD,yyvsp[-1].node,yyvsp[0].node);}
break;
case 64:
#line 257 "lace_y.y"
{yyval.node = create_node(ASSERTION_SD);}
break;
case 65:
#line 259 "lace_y.y"
{yyval.node = create_node(DEBUG_SD);}
break;
case 66:
#line 261 "lace_y.y"
{yyval.node = create_node(OPTIMIZE_SD);}
break;
case 67:
#line 263 "lace_y.y"
{yyval.node = create_node(TRACE_SD);}
break;
case 68:
#line 265 "lace_y.y"
{yyval.node = create_node1(FREE_OPTION_SD,yyvsp[0].node);}
break;
case 69:
#line 269 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 70:
#line 271 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 71:
#line 275 "lace_y.y"
{yyval.node = NULL;}
break;
case 72:
#line 277 "lace_y.y"
{yyval.node = create_node3 (O_OPTION_SD,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);}
break;
case 73:
#line 281 "lace_y.y"
{yyval.node = NULL;}
break;
case 74:
#line 283 "lace_y.y"
{list_init(); list_push (yyvsp[0].node);}
break;
case 75:
#line 285 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 76:
#line 289 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 77:
#line 291 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 78:
#line 295 "lace_y.y"
{yyval.node = NULL;}
break;
case 79:
#line 297 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 80:
#line 301 "lace_y.y"
{yyval.node = NULL;}
break;
case 81:
#line 303 "lace_y.y"
{yyval.node = yyvsp[-1].node;}
break;
case 82:
#line 307 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 83:
#line 309 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 84:
#line 311 "lace_y.y"
{yyval.node = create_node1 (NAME_SD,yyvsp[0].node);}
break;
case 85:
#line 315 "lace_y.y"
{yyval.node = create_node1(YES_SD,lace_id("yes"));}
break;
case 86:
#line 317 "lace_y.y"
{yyval.node = create_node1(NO_SD,lace_id("no"));}
break;
case 87:
#line 319 "lace_y.y"
{yyval.node = create_node1(ALL_SD,lace_id("all"));}
break;
case 88:
#line 323 "lace_y.y"
{yyval.node = create_node1(REQUIRE_SD,lace_id("require"));}
break;
case 89:
#line 325 "lace_y.y"
{yyval.node = create_node1(ENSURE_SD,lace_id("ensure"));}
break;
case 90:
#line 327 "lace_y.y"
{yyval.node = create_node1(INVARIANT_SD,lace_id("invariant"));}
break;
case 91:
#line 329 "lace_y.y"
{yyval.node = create_node1(LOOP_SD,lace_id("loop"));}
break;
case 92:
#line 331 "lace_y.y"
{yyval.node = create_node1(CHECK_SD,lace_id("check"));}
break;
case 93:
#line 335 "lace_y.y"
{yyval.node = NULL;}
break;
case 94:
#line 336 "lace_y.y"
{list_init();}
break;
case 95:
#line 337 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 96:
#line 341 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 97:
#line 343 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 98:
#line 347 "lace_y.y"
{yyval.node = NULL;}
break;
case 99:
#line 348 "lace_y.y"
{list_init();}
break;
case 100:
#line 349 "lace_y.y"
{yyval.node = create_node2 (LANG_TRIB_SD,yyvsp[-3].node,list_new(CONSTRUCT_LIST_SD));}
break;
case 101:
#line 353 "lace_y.y"
{yyval.node =
		create_node1(C_NAME_SD,lace_id("c"));}
break;
case 102:
#line 356 "lace_y.y"
{yyval.node =
		create_node1(INCLUDE_PATH_NAME_SD,lace_id("include_path"));}
break;
case 103:
#line 359 "lace_y.y"
{yyval.node =
		create_node1(MAKE_NAME_SD,lace_id("make"));}
break;
case 104:
#line 362 "lace_y.y"
{yyval.node =
		create_node1(OBJECT_NAME_SD,lace_id("object"));}
break;
case 105:
#line 365 "lace_y.y"
{yyval.node =
		create_node1(EXECUTABLE_NAME_SD,lace_id("executable"));}
break;
case 106:
#line 368 "lace_y.y"
{yyval.node = create_node1(LANGUAGE_NAME_SD,yyvsp[0].node);}
break;
case 107:
#line 372 "lace_y.y"
{yyval.node = NULL;}
break;
case 108:
#line 373 "lace_y.y"
{list_init();}
break;
case 109:
#line 374 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 110:
#line 378 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 111:
#line 380 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 112:
#line 384 "lace_y.y"
{yyval.node = NULL;}
break;
case 113:
#line 386 "lace_y.y"
{yyval.node = create_node3 (LANG_GEN_SD,yyvsp[-3].node,yyvsp[-2].node,yyvsp[0].node);}
break;
case 114:
#line 390 "lace_y.y"
{yyval.node = NULL;}
break;
case 115:
#line 392 "lace_y.y"
{yyval.node = yyvsp[-1].node;}
break;
case 116:
#line 396 "lace_y.y"
{yyval.node = create_node (YES_SD);}
break;
case 117:
#line 398 "lace_y.y"
{yyval.node = create_node (NO_SD);}
break;
case 118:
#line 402 "lace_y.y"
{yyval.node = NULL;}
break;
case 119:
#line 403 "lace_y.y"
{list_init();}
break;
case 120:
#line 404 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 121:
#line 408 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 122:
#line 410 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 123:
#line 414 "lace_y.y"
{yyval.node = NULL;}
break;
case 124:
#line 416 "lace_y.y"
{yyval.node = create_node5 (CLAS_VISI_SD,yyvsp[0].node,NULL,NULL,NULL,NULL);}
break;
case 125:
#line 418 "lace_y.y"
{yyval.node = create_node5 (CLAS_VISI_SD,yyvsp[-1].node,NULL,NULL,NULL,NULL);}
break;
case 126:
#line 420 "lace_y.y"
{yyval.node = create_node5 (CLAS_VISI_SD,yyvsp[-5].node,yyvsp[-4].node,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node);}
break;
case 127:
#line 424 "lace_y.y"
{yyval.node = NULL;}
break;
case 128:
#line 426 "lace_y.y"
{yyval.node = yyvsp[0].node;}
break;
case 129:
#line 430 "lace_y.y"
{yyval.node = NULL;}
break;
case 130:
#line 431 "lace_y.y"
{list_init();}
break;
case 131:
#line 432 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 132:
#line 436 "lace_y.y"
{yyval.node = NULL;}
break;
case 133:
#line 437 "lace_y.y"
{list_init();}
break;
case 134:
#line 438 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 135:
#line 442 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 136:
#line 444 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 137:
#line 448 "lace_y.y"
{yyval.node = NULL;}
break;
case 138:
#line 449 "lace_y.y"
{list_init();}
break;
case 139:
#line 450 "lace_y.y"
{yyval.node = list_new(CONSTRUCT_LIST_SD);}
break;
case 140:
#line 454 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 141:
#line 456 "lace_y.y"
{list_push(yyvsp[0].node);}
break;
case 142:
#line 460 "lace_y.y"
{yyval.node = NULL;}
break;
case 143:
#line 462 "lace_y.y"
{yyval.node = create_node2 (TWO_NAME_SD,yyvsp[-2].node,yyvsp[0].node);}
break;
case 144:
#line 466 "lace_y.y"
{yyval.node = lace_id (token_str);}
break;
case 145:
#line 468 "lace_y.y"
{yyval.node = lace_id (token_str);}
break;
#line 1217 "y_tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
