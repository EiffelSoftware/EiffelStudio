#!/bin/sh
set -e

if [ ! "$ISE_EIFFEL" ]; then
        echo '$ISE_EIFFEL not defined. Cannot continue'
        exit 1
fi

if [ ! "$ISE_PLATFORM" ]; then
	echo '$ISE_PLATFORM not defined. Cannot continue'
        exit 1
fi
echo "Using EiffelStudio delivery in $ISE_EIFFEL"


# Exctract EiffelStudio version
export VERSION=`$ISE_EIFFEL/studio/spec/$ISE_PLATFORM/bin/ec -version | sed "s/^[A-Za-z ]*\([0-9\.]\+\).*/\1/"`
MAJOR_NUMBER=`echo $VERSION | sed "s/^\([0-9]\).*/\1/"`
MINOR_NUMBER=`echo $VERSION | sed "s/^[0-9].\([0-9]\).*/\1/"`
echo "EiffelStudio version $VERSION will be used for debian package"


# Define packaging directories
export PRODUCT=eiffelstudio-$MAJOR_NUMBER.$MINOR_NUMBER
export PACKAGING_DIR=`pwd`/packaging
export DEBIAN_DIR=$PACKAGING_DIR/debian
DOCS_DIR=/usr/share/doc/$PRODUCT/docs


# Create unix layout in debian directoy
./make_unix_layout $DEBIAN_DIR/$PRODUCT


# Prepare debian packaging files
sh $DEBIAN_DIR/control.sh
sh $DEBIAN_DIR/changelog.sh
cp $PACKAGING_DIR/license $DEBIAN_DIR/copyright
echo '#!/bin/sh' > $DEBIAN_DIR/$PRODUCT.postinst > $DEBIAN_DIR/$PRODUCT.prerm
sh $PACKAGING_DIR/postinstall.sh >> $DEBIAN_DIR/$PRODUCT.postinst
sh $PACKAGING_DIR/preremove.sh >> $DEBIAN_DIR/$PRODUCT.prerm

cd $DEBIAN_DIR


# First we check if there are any docs (architecture independent)
if test -d "$PRODUCT$DOCS_DIR"; then
	mkdir -p $PRODUCT-doc$DOCS_DIR
	mv $PRODUCT$DOCS_DIR/* $PRODUCT-doc$DOCS_DIR/
	rm -rf $PRODUCT$DOCS_DIR

	debuild --check-dirname-level 0 binary-indep
	echo Finished building package $PRODUCT-doc

	# Clean up doc related build files
	rm -rf $DEBIAN_DIR/$PRODUCT-doc
else
	echo "$0: No $DOCS_DIR present, $PRODUCT-doc package will not be created"
fi


# Then we build the main package (architecture dependent)
debuild --check-dirname-level 0 binary-arch
echo Finished building package $PRODUCT


# Clean up all build files
cd ../
dh_clean
rm -rf $DEBIAN_DIR/$PRODUCT
rm -f $DEBIAN_DIR/$PRODUCT.postinst
rm -f $DEBIAN_DIR/$PRODUCT.prerm
rm -f $DEBIAN_DIR/control
rm -f $DEBIAN_DIR/changelog

