<document title="Configuration">
	<meta_data/>
	<paragraph>
		The Eiffel Codedom Provider uses XML configuration files that define additional settings that are specific to Eiffel. 
		Such settings include whether to fail on error, what events to log, where to log them etc... Each application can 
		define its own configuration to be used when it loads the Eiffel CodeDom Provider. If an application is not associated 
		with a configuration file then a default configuration is used.
		
		<paragraph>
			The association between applications and configurations as well as the actual settings the configuration
			 defines can be set in the <bold>Eiffel CodeDom Provider Manager</bold>. Run <italic>ecdpman.exe</italic>
			 to start the manager.
		</paragraph>

		<note>
			<bold>Note:</bold> The ASP.NET Enabler installation program will add a shortcut in the start menu to the
			 Eiffel CodeDom Provider Manager.
		</note>

		The main dialog of the Eiffel CodeDom Provider Manager is divided into two vertical panes. The left pane contains a 
		list of available configurations while the right pane contains the settings corresponding to the currently selected 
		configuration. Initially the only available configuration is the <bold>default</bold> configuration which applies to all 
		applications. The configurable settings are listed below.
		
		<heading>
			<size>2</size>
			<content>General Settings</content>
		</heading>

		<list ordered="false">
			<item>
				<bold>Fail on error</bold>: Checking this box will force the Eiffel Codedom Provider to fail when 
				an error occurs. By default the provider rescues the failure and logs an error but it might be easier 
				for debugging to have the Eiffel CodeDom Provider stop and raise an exception.
			</item>
			<item>
				<bold>Log server</bold>: Server where logs should be recorded. By default logs are recorded on 
				the machine running the CodeDom Provider, the corresponding value is a dot ("."). Consult the 
				<link><url>logging.xml</url><label>Logging</label></link> section for additional information on logging.
	
				<note>
					<bold>Note:</bold> Logging on a different machine than the machine running the Eiffel CodeDom Provider 
					might require granting special access rights to the corresponding process (see the 
					<link><url>security.xml</url><label>Security</label></link> section below).
				</note>
			</item>
			<item>
				<bold>Log level</bold>: By default only errors are written to the log. It might be useful for debugging 
				puroposes to log additional information such as warnings and traces. This setting also allows to disable 
				logging in case it is not required. Consult the 
				<link><url>logging.xml</url><label>Logging</label></link> section for additional information on logging.
			</item>
		</list>

		<heading>
			<size>2</size>
			<content>Compiler Settings</content>
		</heading>

		<list ordered="false">
			<item>
				<bold>Default root class</bold>: In the event where the CodeDom tree does not define an entry point, 
				there still needs to be a root class for the Eiffel system to compile properly. If there is an entry point 
				defined in the Codedom tree then this setting is ignored.
			</item>
			<item>
				<bold>Precompile ace file</bold>: This setting, if set, gives the path to the ACE file of the precompile 
				that the CodeDom compiler should use when compiling systems with this configuration. The CodeDom 
				compiler will first check whether the precompile for that ACE file already exists in the precompile cache 
				(See <link><label>Precompile cache</label><target>#precompile_cache</target></link> below). If it 
				finds one then it will check whether the ACE file was modified since the precompile was created. If 
				there isn't a corresponding precompile or is the ACE file was modified then the CodeDom compiler will 
				create a new precompile in the precompile cache.
			</item>
			<item>
				<bold>Metadata cache path</bold>: Both the Eiffel CodeDom Provider and the Eiffel compiler require 
				reading and writing from and to the Eiffel Metadata Cache. This cache contains XML files mapping the 
				.NET types and members names to valid Eiffel identifiers. Because read and write access are required, the 
				application that uses the CodeDom Provider must have write access rights to the Eiffel Metadata Cache folder.

				<note>
					<bold>Note:</bold> The ASP.NET Enabler installation program will grant write access rights to the
					 Eiffel Metadata Cache folder to the ASPNET and IIS_WPG users if they exist. ASPNET is the 
					default user account used by the ASP.NET process (aspnet_wp.exe) under Windows XP while 
					IIS_WPG is the default user account used by the ASP.NET process (w3wp.exe) under Windows 
					2003 Server.
				</note>
				
				<warning>
					<bold>Warning:</bold> Changing the Eiffel Metadata Cache folder path will force the Eiffel 
					CodeDom Provider to regenerate the cache content during the next code generation or compilation. 
					This process can take some time and in particular can take more time than the default timeout for an 
					ASP.NET page. If the Eiffel CodeDom Provider is used together with ASP.NET and if the Eiffel 
					Metadata Cache path has been modified, it is recommended to change the default timeout for the first 
					ASP.NET page containing Eiffel code to be loaded (this can be done by setting the 
					<italic>HttpServerUtility.ScriptTimeout</italic> property).
				</warning>
			</item>
		</list>
		
		<heading>
			<size>2</size>
			<content>Assembly Prefixes</content>
		</heading>

		This list associates .NET assemblies with the prefix that will be used for Eiffel class names corresponding to .NET 
		types belonging to the assembly. For example the prefix for the assembly <italic>System.Xml.dll</italic> is <italic>XML_</italic>, this means 
		that the Eiffel class names of all the types in the assembly will all begin with <italic>XML_</italic>. This is necessary because 
		Eiffel doesn't have a notion of namespace. The default assembly prefixes cannot be modified but new assembly/prefix 
		pairs can be added if necessary.

		<heading>
			<size>2</size>
			<content>Applications</content>
		</heading>

		This last setting will only appear for configurations other than the default configuration. It lists the applications that will 
		use the configuration when they load the Eiffel CodeDom Provider assembly. If an application is not listed in any 
		configuration then it will use the default configuration.
		
		<note>
			<bold>Note:</bold> For a change in an existing configuration to take effect, the process that uses the modified 
			configuration must be restarted.
		</note>
		
		<heading>
			<size>2</size>
			<content>New Configuration</content>
		</heading>

		New configurations may be created by clicking the <italic>New</italic> button or the <italic>New</italic> entry in the
		 <italic>File</italic> menu. The New Configuration dialog box asks for the name and the path of the configuration. It 
		will create a file with the extension <bold>.ecd</bold> (<bold>E</bold>iffel <bold>C</bold>ode<bold>D</bold>om) 
		with the specified name in the directory located at the specified path. Whenever one of the applications listed at the 
		bottom of the New Configuration dialog loads the Eiffel CodeDom Provider, it will use this new configuration.
		
		<seealso>
			<bold>See also:</bold> <link><url>logging.xml</url><label>Logging</label></link>,
			 <link><url>security.xml</url><label>Security</label></link>
		</seealso>
	</paragraph>
</document>
