<document title="Creating a new COM component" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>EiffelCOM</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour, Creating a new COM component</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>The first tutorial describes creating a COM component from a COM definition file that is either an IDL file or a Type Library. The tutorial focuses on creating an in-process (DLL) component, called 
		<italic>StringManipulator</italic>. The component exposes one interface 
		<italic>IString</italic> that includes the functions 
		<italic>ReplaceSubstring</italic>and 
		<italic>PruneAll</italic> corresponding respectively to the features 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_replace_substring</anchor_name>
				<label>replace_substring</label>
			</link>
		</code> and 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_prune_all</anchor_name>
				<label>prune_all</label>
			</link>
		</code> of the EiffelBase 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url>
				<label>
					<class_name>STRING</class_name>
				</label>
			</link>
		</code> and the property 
		<italic>String</italic> that represents the manipulated string. The property can be set or read. Other languages will be able to access these features.
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>
				<link/> Launch the EiffelCOM Wizard (from the Start menu, open Programs then EiffelXX and click EiffelCOM Wizard)
			</item>
			<item>
				<link/>Choose 
				<italic>Create anew project from a COM definition</italic>.
			</item>
			<item>
				<link/>Click 
				<italic>Next</italic>
			</item>
			<item>
				<link/>Choose 
				<italic>Server code for a new component</italic>
			</item>
			<item>
				<link/>Click 
				<italic>Next</italic>
			</item>
			<item>
				<link/>Click the top 
				<italic>Browse</italic> button and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\string_manipulator.idl</italic>where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL installation directory.
			</item>
			<item>
				<link/>Click the bottom 
				<italic>Browse</italic> button and select the directory where you want to create the project (later referenced as destination folder). Choose 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated</italic> where 
				<italic>$ISE_EIFFEL</italic> represents the path to your EIFFEL50 directory. If you work on a Windows9x machine, please choose a directory with a shorter path, for example c:\string_manipulator because Windows9x are unable to handle long path names.
			</item>
			<item>
				<link/>Click 
				<italic>Next</italic>
			</item>
			<item>
				<link/>Choose 
				<italic>Automation</italic>
			</item>
			<item>
				<link/>Click 
				<italic>Next</italic>
			</item>
			<item>
				<link/>Click 
				<italic>Finish</italic>
			</item>
			<item>
				<link/>Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>
		<paragraph>
			<link/>At the end of the processing the wizard automatically launches EiffelStudio with the generated project to help you navigate created Eiffel classes. You might want to look at the file 
			<italic>generated.txt</italic> in the destination folder, which contains a list of files generated by the wizard. The file 
			<italic>string_manipulator.log</italic> holds summary of the processing and error and warning messages.
		</paragraph>
		<paragraph>The deferred class 
			<class_name>STRING_MANIPULATOR_COCLASS</class_name> represents component functionality. It inherits from 
			<class_name>ISTRING_INTERFACE</class_name> that corresponds to the 
			<italic>IString</italic> interface. It has one descendant 
			<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> that implements the deferred features. The default implementation is empty.
		</paragraph>
		<heading>
			<size>2</size> Implementing the component
		</heading>
		<link/> To do something more interesting than merely return an error to a client edit the implementation of the 
		<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> class. The wizard would not overwrite this class in future executions. There is an implementation of the class in 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\server</italic>\.  Copy this file over to 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\generated\server\component</italic> and freeze the project. Voila!, you have your first EiffelCOM component up and running.
		<paragraph> </paragraph>
		<tip>
			<bold>Tips</bold>
			<line_break/> To develop an EiffelCOM component you need to set the registry entry MELT_PATH because the system is not launched from the directory containing the byte code (by default EIFGEN\W_code). The EiffelCOM component client launches the server from its current location and causes the server to crash if the MELT_PATH key does not setup properly. To put this value in your registry, create a key under HKEY_CURRENT_USER\SOFTWARE\ISE\Eiffel51 with the same name as the name of your project (e.g. 
			<italic>string_manipulator</italic>) and add the string value named MELT_PATH containing the path to the byte code (.melted file). You will find an example of such entry in the file 
			<italic>melted_path.reg</italic> in $ISE_EIFFEL\wizard\config. Edit this file as needed (replace 
			<italic>string_manipulator</italic> with the name of your system and change the path to point on the correct location using `\\' as directory separator) and then double click on it to enter the information into the registry.
			<line_break/>
			<line_break/>
			<link/>To test the component, you need to register it first. Register an in-process component via the 
			<italic>regsvr32</italic> utility using the following syntax: 
			<italic>regsvr32 system_name.dll</italic> where 
			<italic>system_name</italic> is the name of the dll (e.g. string_manipulator). Register an out-of-process component using the following syntax: 
			<italic>system_name.exe -Regserver</italic> where 
			<italic>system_name</italic> is thename of the component executable file.
			<line_break/>
			<line_break/>
			<link/>To complete this tutorial you need to register the component with the following command (run from a dos console): 
			<italic>regsvr32string_manipulator.dll</italic> and to enter the information in 
			<italic>$ISE_EIFFEL\wizard\config\melted_path.reg</italic>. You have to change the content of this file if you have not installed Eiffel under C:\ and/or have used a different destination directory.
		</tip>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>02_new_from_eiffel.xml</url>
				<label>Creating a new component from an Eiffel Project</label>
			</link>
			<line_break/>
			<link>
				<url>03_accessing.xml</url>
				<label>Accessing a COM component.</label>
			</link>
		</seealso>
	</paragraph></document>
