WIDGET     : Arrow button
DESCRIPTION: Button drawn on screen with an arrow.

CLIENT INTERFACE:
-----------------

class interface
	ARROW_B

creation 
	make,
	make_unmanaged

feature

	is_valid (other: COMPOSITE): BOOLEAN
			-- Is other a valid parent?
		
	set_font_name (a_font_name: STRING)
			-- Set font label to a_font_name.
			-- (from FONTABLE)
		require -- from FONTABLE
			exists: not destroyed;
			a_font_name_exists: not (a_font_name = void)
		
feature  --  Arrow direction

	down: BOOLEAN
			-- Is the arrow direction down ?
		require
			exists: not destroyed
		
	left: BOOLEAN
			-- Is the arrow direction left ?
		require
			exists: not destroyed
		
	right: BOOLEAN
			-- Is the arrow direction right ?
		require
			exists: not destroyed
		
	set_down
			-- Set the arrow direction to down.
		require
			exists: not destroyed
		
	set_left
			-- Set the arrow direction to left.
		require
			exists: not destroyed
		
	set_right
			-- Set the arrow direction to right.
		require
			exists: not destroyed
		
	set_up
			-- Set the arrow direction to up.
		require
			exists: not destroyed
		
	up: BOOLEAN
			-- Is the arrow direction up ?
		require
			exists: not destroyed
		
feature  -- Callback (adding)

	add_activate_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when current
			-- arrow button is activated.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
	add_arm_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when current
			-- arrow button is armed.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
	add_release_action (a_command: COMMAND; argument: ANY)
			-- Add a_command to the list of action to be executed when current
			-- arrow button is released.
			-- argument will be passed to a_command whenever it is
			-- invoked as a callback.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_activate_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command with argument from the list of action
			-- to be executed when current arrow button is activated.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_arm_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command with argument from the list of action
			-- to be executed when current arrow button is armed.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
	remove_release_action (a_command: COMMAND; argument: ANY)
			-- Remove a_command with argument from the list of action
			-- to be executed when current arrow button is released.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed;
			valid_command: a_command /= void
		
feature  -- Color

	foreground_color: COLOR
			-- Foreground color of Current widget
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed
		ensure -- from PRIMITIVE
			valid_result: Result /= void
		
	set_foreground_color (new_color: COLOR)
			-- Set foreground color to new_color.
			-- (from PRIMITIVE)
		require -- from PRIMITIVE
			exists: not destroyed;
			valid_color: new_color /= void
		ensure -- from PRIMITIVE
			foreground_set: foreground_color = new_color
		
feature  -- Resizing policies

	allow_recompute_size
			-- Allow current button to recompute its size according to
			-- changes on its text.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed
		
	forbid_recompute_size
			-- Forbid current button to recompute its size according to
			-- changes on its text.
			-- (from BUTTON)
		require -- from BUTTON
			exists: not destroyed
		
feature  -- Widget hierarchy

	parent: COMPOSITE
			-- Parent of Current widget
			-- (from PRIMITIVE)
		require -- from STACKABLE
			exists: not destroyed
		
invariant
	-- from PRIMITIVE
	has_parent: not destroyed implies parent /= void;
	
end -- class ARROW_B
