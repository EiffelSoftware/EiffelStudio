note
	description: "Style to generate name of query language item"
	legal: "See notice at end of class."
	status: "See notice at end of class."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	EB_SIMPLE_QL_NAME_STYLE

inherit
	EB_EDITOR_TOKEN_STYLE

feature -- Access

	item: QL_ITEM
			-- Query language item whose path is to be displayed

feature -- Status report

	is_text_ready: BOOLEAN
			-- Is `text' ready to be returned?
		do
			Result := item /= Void
		end

feature -- Text

	text: LIST [EDITOR_TOKEN]
			-- Editor token text generated by `Current' style
		local
			l_writer: like token_writer
		do
			l_writer := token_writer
			l_writer.new_line
			add_editor_token_representation (item, l_writer)
			Result := l_writer.last_line.content
		end

feature -- Settng

	set_item (a_item: like item)
			-- Set `item' with `a_item'.
		do
			item := a_item
		ensure
			item_set: item = a_item
		end

feature{NONE} -- Implementation

	add_editor_token_representation (a_item: QL_ITEM; a_writer: like token_writer)
			-- Add editor token representation of `a_item' into `a_writer'.
		require
			a_item_attached: a_item /= Void
			a_writer_attached: a_writer /= Void
		local
			l_cursors: like cursors_for_item
			l_class_c: detachable CLASS_C
			l_ql_code_item: QL_CODE_STRUCTURE_ITEM
		do
			if a_item.is_class and then attached {QL_CLASS} a_item as l_class then
				a_writer.add_class (l_class.class_i)
			elseif a_item.is_feature and then attached {QL_FEATURE} a_item as l_feature then
				if a_item.is_real_feature and then attached {QL_REAL_FEATURE} a_item as l_real_feature then
					a_writer.add_sectioned_feature_name (l_real_feature.e_feature)
				else
					a_writer.add_string (l_feature.name)
				end
			elseif a_item.is_group and then attached {QL_GROUP} a_item as l_group then
				a_writer.add_group (l_group.group, l_group.name)
			elseif a_item.is_target and then attached {QL_TARGET} a_item as l_target then
				a_writer.process_target_name_text (l_target.name, l_target.target)
			elseif a_item.is_line and then attached {QL_LINE} a_item as l_line then
				l_ql_code_item := l_line.code_structure
				if l_ql_code_item.is_compiled then
					l_class_c := l_ql_code_item.class_c
				end
				if l_class_c /= Void then
					a_writer.process_compiled_line (l_line.name, l_line.line_in_file, l_class_c, False)
				else
					a_writer.process_uncompiled_line (l_line.name, l_line.line_in_file, l_ql_code_item.class_i, False)
				end
			elseif a_item.is_code_structure and then attached {QL_CODE_STRUCTURE_ITEM} a_item as l_ql_code_structure_item then
				l_cursors := cursors_for_item (a_item)
				a_writer.process_ast (l_ql_code_structure_item.name, l_ql_code_structure_item.ast, l_ql_code_structure_item.written_class, appearance_for_item (a_item), False, l_cursors.cursor, l_cursors.x_cursor)
			else
				a_writer.add_string (a_item.name)
			end
		end

	appearance_for_item (a_item: QL_ITEM): TUPLE [a_font_id: INTEGER; a_text_color_id: INTEGER; a_background_color_id: INTEGER]
			-- Appearance for `a_item'
			-- Void if no appearance available.
		require
			a_item_attached: a_item /= Void
		do
			if a_item.is_argument then
				Result := [editor_font_id, argument_text_color_id, argument_background_color_id]
			elseif a_item.is_local then
				Result := [editor_font_id, local_text_color_id, local_background_color_id]
			elseif a_item.is_generic then
				Result := [editor_font_id, generic_text_color_id, generic_background_color_id]
			elseif a_item.is_assertion then
				Result := [editor_font_id, assertion_tag_text_color_id, assertion_tag_background_color_id]
			end
		end

	cursors_for_item (a_item: QL_ITEM): TUPLE [cursor: EV_POINTER_STYLE; x_cursor: EV_POINTER_STYLE]
			-- Cursor and X cursor for `a_item'
		require
			a_item_attached: a_item /= Void
		local
			l_cursors: like cursors
		do
			l_cursors := cursors
			if a_item.is_argument or else a_item.is_local then
				Result := [l_cursors.cur_metric_local, l_cursors.cur_x_metric_local]
			elseif a_item.is_assertion then
				Result := [l_cursors.cur_metric_assertion, l_cursors.cur_x_metric_assertion]
			elseif a_item.is_generic then
				Result := [l_cursors.cur_metric_generic, l_cursors.cur_x_metric_generic]
			end
		end

note
	copyright:	"Copyright (c) 1984-2018, Eiffel Software"
	license:	"GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options:	"http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"

end
