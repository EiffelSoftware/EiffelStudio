<document title="Calculator">
	<meta_data>
		<help>
			<toc>
				<envision_pseudo_name>80</envision_pseudo_name>
				<envision_location>Samples\.NET Framework Samples\Windows Forms</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<div>
			<paragraph>
				<image>
					<height>257</height>
					<width>258</width>
					<url>/images/dotnet_samples/calculator.png</url>
					<alt_text>Calculator</alt_text>
				</image>
			</paragraph>
		</div>
		<paragraph>
			<line_break/>
			<line_break/>
		</paragraph>
		<heading>
			<size>2</size>Compiling
		</heading>
		<paragraph>To compile the example:
			<output output="envision">
				<list ordered="true">
					<item>Start Visual Studio .NET</item>
					<item>Choose Open Project from the File menu.</item>
					<item>Navigate to <italic>&lt;Eiffel_ENViSioN!_installation_path&gt;\compiler\examples\(.net version)\winforms\world_calc</italic> and select <italic>world_calc.eifp</italic></item>
					<item>Clicking open loads the selected project</item>
				</list>
			</output>
			<output output="studio">
				<list ordered="true">
					<item>Launch EiffelStudio.</item>
					<item>Select <bold>Use existing Ace (control file)</bold> and click <bold>OK</bold></item>
					<item>Browse to <italic>$ISE_EIFFEL\examples\dotnet\calculator\</italic></item>
					<item>Choose the Ace file for the version of the .net framework you are running</item>
					<item>Choose the directory where the project will be compiled, by default the same directory containing the Ace file.</item>
					<item>Click <bold>OK</bold>.</item>
				</list>
			</output>
		</paragraph>
		<heading>
			<size>2</size>Running
		</heading>
		<paragraph>After launching the application, you will see a window displayed with a similar appearance to the one above. This is a really simple calculator that can take only two operands. So you should enter the first operand, then enter an operator, then the second operand. Click the "Calculate" button to generate the result. </paragraph>
		<paragraph/>
		<heading>
			<size>2</size>Under the Hood
		</heading>
		<paragraph>The application uses two local external assemblies, math.dll and parserutils.dll. </paragraph>
		<paragraph>parserutils parses the command line entered, and checks if it is of the form operand1 operator operand2. math.dll calculates the actual result of the command line. </paragraph>
		<paragraph>For the parserutils.dll, we have been obliged to introduce the prefix "parser_" to avoid conflicts between name classes. </paragraph>
		<paragraph>
			<image>
				<url>/images/dotnet_samples/calculator_local_assemblies.png</url>
				<alt_text>Local assemblies</alt_text>
			</image>
		</paragraph>
		<paragraph>This sample contains the following class:</paragraph>
		<list ordered="false">
			<item>
				<span><code><class_name>FORM</class_name></code></span>
			</item>
			<item>
				<span><code><class_name>BUTTON</class_name></code></span>
			</item>
			<item>
				<span><code><class_name>TEXT_FIELD</class_name></code></span>
			</item>
			<item>
				<span><code><class_name>LABEL</class_name></code></span>
			</item>
		</list>
		<heading>
			<size>2</size>Notes
		</heading>
		<paragraph>This sample is translated from the example located in the Tutorials\resources and localization\worldcalc subdirectory of the.NET Framework SDK samples directory of Microsoft Visual Studio.NET. </paragraph>
		<paragraph/>
		<paragraph/>
	</paragraph></document>
