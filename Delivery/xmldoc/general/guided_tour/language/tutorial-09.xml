<document title="8 Design by Contract (tm), Assertions and Exceptions">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Getting Started</envision_location>
				<envision_pseudo_name>80</envision_pseudo_name>
				<envision_title>Design by Contract&amp;#153;, Assertions, Exceptions</envision_title>
				<studio_location/>
				<studio_title/>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Eiffel directly implements the ideas of Design by Contract&amp;#153; , which enhance software reliability and provide a sound basis for software specification, documentation and testing, as well as exception handling and the proper use of inheritance.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Design by Contract&amp;#153; basics</content>
		</heading>
		<paragraph>A system -- a software system in particular, but the ideas are more general -- is made of a number of cooperating components. Design by Contract&amp;#153; states that their cooperation should be based on precise specifications -- 
			contracts -- describing each party's expectations and guarantees.
		</paragraph>
		<paragraph>An Eiffel contract is similar to a real-life contract between two people or two companies, which it is convenient to express in the form of tables listing the expectations and guarantees. Here for example is how we could sketch the contract between a homeowner and the telephone company:</paragraph>
		<table>
			<padding>6</padding>
			<row>
				<cell><width>10%</width><code><feature_name>provide_service</feature_name></code></cell>
				<cell><width>35%</width><bold>OBLIGATIONS</bold></cell>
				<cell><width>35%</width><bold>BENEFITS</bold></cell>
			</row>
			<row>	
				<cell>
					<alignment>right</alignment>
					<bold>Client</bold>
				</cell>
				<cell>
					(Satisfy precondition:)
					<line_break/>
					Pay bill.
				</cell>
				<cell>
					(From postcondition:)
					<line_break/>
					Get telephone service Supplier. 
				</cell>
			</row>
			<row>
				<cell>
					<alignment>right</alignment>
					<bold>Supplier</bold>
				</cell>
				<cell>
					(Satisfy precondition:)
					<line_break/>
					Provide telephone service.
					
				</cell>
				<cell>
					(From postcondition:)
					<line_break/>
					No need to provide anything if bill not paid.
				</cell>
			</row>
			<!--<legend>
				<paragraph><code><feature_name>provide_service</feature_name></code></paragraph>
			</legend>-->
		</table>
		<paragraph>Note how the obligation for each of the parties maps onto a benefit for the other. This will be a general pattern. </paragraph>
		<paragraph>The client's obligation, which protects the supplier, is called a 
			<bold>precondition</bold>. It states what the client must satisfy before requesting a certain service. The client's benefit, which describes what the supplier must do (assuming the precondition was satisfied), is called a 
			<bold>postcondition</bold>.
		</paragraph>
		<paragraph>In addition to preconditions and postconditions, contract clauses include 
			<bold>class invariants</bold>, which apply to a class as a whole. More precisely a class invariant must be ensured by every creation procedure (or by the default initialization if there is no creation procedure), and maintained by every exported routine of the class.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Expressing assertions</content>
		</heading>
		<paragraph>Eiffel provides syntax for expressing preconditions (
			<code>
				<keyword>require</keyword>
			</code>), postconditions (
			<code>
				<keyword>ensure</keyword>
			</code>) and class invariants (
			<code>
				<keyword>invariant</keyword>
			</code>), as well as other assertion constructs studied later (see 
			<link>
				<url>tutorial-11.xml</url><anchor_name>38021</anchor_name>
				<label>"Instructions", page 84</label>
			</link>): loop invariants and variants, check instructions.
		</paragraph>
		<paragraph>Here is a partial update of class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> with more assertions:
		</paragraph>
		<code_block>
<keyword>indexing</keyword>
	description<symbol>:</symbol> <string>"Simple bank accounts"</string>

<keyword>class</keyword>
	<class_name>ACCOUNT</class_name>

<keyword>feature</keyword> <comment>-- Access</comment>

	<feature_name>balance</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
		<comment>-- Current balance</comment>

	<feature_name>deposit_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name> <keyword>is</keyword>
			<comment>-- Number of deposits made since opening</comment>
		<keyword>do</keyword>
			... As before ...
		<keyword>end</keyword>

<keyword>feature</keyword> <comment>-- Element change</comment>

	<feature_name>deposit</feature_name> <symbol>(</symbol><local_variable>sum</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Add `sum' to account.</comment>
		<keyword>require</keyword>
			non_negative<symbol>:</symbol> <local_variable>sum</local_variable> <symbol>&gt;=</symbol> 0
		<keyword>do</keyword>
			... As before ...
		<keyword>ensure</keyword>
			one_more_deposit<symbol>:</symbol> <feature_name>deposit_count</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>deposit_count</feature_name> <symbol>+</symbol> 1
			updated<symbol>:</symbol> <feature_name>balance</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>balance</feature_name> <symbol>+</symbol> <local_variable>sum</local_variable>
		<keyword>end</keyword>

<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol><comment> -- Implementation</comment>

	<feature_name>all_deposits</feature_name><symbol>:</symbol> <class_name>DEPOSIT_LIST</class_name>
			<comment>-- List of deposits since account's opening.</comment>

<keyword>invariant</keyword>
	consistent_balance<symbol>:</symbol> <symbol>(</symbol><feature_name>all_deposits</feature_name> <symbol>/=</symbol> Void<symbol>)</symbol> <keyword>implies</keyword>
			<symbol>(</symbol><feature_name>balance</feature_name> <symbol>=</symbol> <feature_name>all_deposits</feature_name> <feature_name/>.<feature_name/> total<symbol>)</symbol>
	zero_if_no_deposits<symbol>:</symbol> <symbol>(</symbol><feature_name>all_deposits</feature_name> <symbol>=</symbol> Void<symbol>)</symbol> <keyword>implies</keyword>
			<symbol>(</symbol>balance <symbol>=</symbol> 0<symbol>)</symbol>

<keyword>end</keyword> <comment>-- class ACCOUNT</comment>
</code_block>
		<paragraph>Each assertion is made of one or more subclauses, each of them a boolean expression (with the additional possibility of the 
			<code>
				<keyword>old</keyword>
			</code> construct). The effect of including more than one sub clause, as in the postcondition of 
			<code>
				<feature_name>deposit</feature_name>
			</code> and in the invariant, is the same as connecting them through an 
			<code>
				<keyword>and</keyword>
			</code>. Each clause may be preceded by a label, such as 
			<code>
				<feature_name>consistent_balance</feature_name>
			</code> in the invariant, and a colon; the label is optional and does not affect the assertion's semantics, except for error reporting as explained in the next section, but including it systematically is part of the recommended style. The value of the boolean expression 
			<code>
				<local_variable>a</local_variable> <keyword>implies</keyword> <local_variable>b</local_variable>
			</code> is true except if 
			<code>
				<local_variable>a</local_variable>
			</code> is true and 
			<code>
				<local_variable>b</local_variable>
			</code> false.
		</paragraph>
		<paragraph>Because assertions benefit from the full power of boolean expressions, they may include function calls. This makes it possible to express sophisticated consistency conditions, such as " the graph contains no cycle", which would not be otherwise expressible through simple expressions, or even through first-order predicate calculus, but which are easy to implement as Eiffel functions returning boolean results.
		</paragraph>
		<paragraph>The precondition of a routine expresses conditions that the routine is imposing on its clients. Here a call to 
			<code>
				<feature_name>deposit</feature_name>
			</code> is correct if and only if the value of the argument is non-negative. The routine does not guarantee anything for a call that does not satisfy the precondition. It is in fact part of the Eiffel method that a routine body should 
			<bold>never</bold> test for the precondition, since it is the client's responsibility to ensure it. (An apparent paradox of Design by Contract&amp;#153;, which is reflected in the bottom-right entries of the preceding and following contract tables, and should not be a paradox any more at the end of this discussion, is that one can get 
			more reliable software by having 
			fewer explicit checks in the software text.)
		</paragraph>
		<paragraph>The postcondition of a routine expresses what the routine guaranteed to its clients for calls satisfying the precondition. The notation 
			<code>
				<keyword>old</keyword> <feature_name>expression</feature_name>
			</code>, valid in postconditions (
			<code>
				<keyword>ensure</keyword>
			</code> clauses) only, denotes the value that 
			<code>
				<feature_name>expression</feature_name>
			</code> had on entry to the routine.
		</paragraph>
		<paragraph>The precondition and postcondition state the terms of the contract between the routine and its clients, similar to the earlier example of a human contract:</paragraph>
		<table>
			<padding>6</padding>
			<row>
				<cell><width>10%</width><code><feature_name>deposit</feature_name></code></cell>
				<cell><width>35%</width><bold>OBLIGATIONS</bold></cell>
				<cell><width>35%</width><bold>BENEFITS</bold></cell>
			</row>
			<row>	
				<cell>
					<alignment>right</alignment>
					<bold>Client</bold>
				</cell>
				<cell>
					(Satisfy precondition:)
					<line_break/>
					Use a non-negative argument.
				</cell>
				<cell>
					(From postcondition:)
					<line_break/>
					Get deposits list and balance updated. 
				</cell>
			</row>
			<row>
				<cell>
					<alignment>right</alignment>
					<bold>Supplier</bold>
				</cell>
				<cell>
					(Satisfy precondition:)
					<line_break/>
					Update deposits list and balance.
				</cell>
				<cell>
					(From postcondition:)
					<line_break/>
					No need to handle negative arguments.
				</cell>
			</row>
			<!--<legend>
				<paragraph><code><feature_name>deposit</feature_name></code></paragraph>
			</legend>-->
		</table>
		<paragraph>The class invariant, as noted, applies to all features. It must be satisfied on exit by any creation procedure, and is implicitly added to both the precondition and postcondition of every exported routine. In this respect it is both good news and bad news for the routine implementer: good news because it guarantees that the object will initially be in a stable state, averting the need in the example to check that the total of 
			<code>
				<feature_name>all_deposits</feature_name>
			</code> is compatible with the 
			<code>
				<feature_name>balance</feature_name>
			</code>; bad news because, in addition to its official contract as expressed by its specific postcondition, every routine must take care of restoring the invariant on exit.
		</paragraph>
		<paragraph>A requirement on meaningful contracts is that they should be in good faith: satisfiable by an honest partner. This implies a consistency rule: if a routine is exported to a client (either generally or selectively), any feature appearing in its precondition must also be available to that client. Otherwise -- for example if the precondition included 
			<code>
				<keyword>require</keyword> 
				<local_variable>n</local_variable> <symbol>&gt;</symbol> <number>0</number>
			</code>, where 
			<code>
				<local_variable>n</local_variable>
			</code> is a secret attribute -- the supplier would be making demands that a good-faith client cannot possibly check for.
		</paragraph>
		<paragraph>Note in this respect that guaranteeing a precondition does not necessarily mean, for the client,  testing for it. Assuming 
			<code>
				<local_variable>n</local_variable>
			</code> is exported, a call may test for the precondition
		</paragraph>
<code_block>
<keyword>if</keyword> <local_variable>x</local_variable>.<feature_name>n</feature_name> <symbol>&gt;</symbol> <number>0</number> <keyword>then</keyword> <local_variable>x</local_variable>.<feature_name>r</feature_name> <keyword>end</keyword>
</code_block>
		<paragraph>possibly with an 
			<code>
				<keyword>else</keyword>
			</code> part. But if the context of the call, in the client's code, implies that 
			<code>
				<local_variable>n</local_variable>
			</code> is positive -- perhaps because some preceding call set it to the sum of two squares -- then there is no need for an 
			<code>
				<keyword>if</keyword>
			</code> or similar construct.
		</paragraph>
		<note>In such a case, a 
			<code>
				<keyword>check</keyword>
			</code> instruction as introduced later (
			<link>
				<url>tutorial-11.xml</url><anchor_name>38021</anchor_name>
				<label>"Instructions", page 84</label>
			</link>) is recommended if the reason for omitting the test is non-trivial.
		</note>
		<heading>
			<size>2</size>
			<content>Using contracts for built-in reliability</content>
		</heading>
		<paragraph>What are contracts good for? Their first use is purely methodological. By applying a discipline of expressing, as precisely as possible, the logical assumptions behind software elements, you can write software whose reliability is built-in: software that is developed hand-in-hand with the rationale for its correctness. </paragraph>
		<paragraph>This simple observation -- usually not clear to people until they have practiced Design by Contract&amp;#153; thoroughly on a large-scale project -- brings as much change to software practices and quality as the rest of object technology. </paragraph>
		<heading>
			<size>2</size>
			<content>Run-time assertion monitoring</content>
		</heading>
		<paragraph>Contracts in Eiffel are not just wishful thinking. They can be monitored at run time under the control of compilation options. </paragraph>
		<paragraph>It should be clear from the preceding discussion that contracts are not a mechanism to test for special conditions, for example erroneous user input. For that purpose, the usual control structures (
			<code>
				<keyword>if</keyword> <feature_name>deposit_sum</feature_name> <symbol>&gt;</symbol> <number>0</number> <keyword>then</keyword>
			</code> ...) are available, complemented in applicable cases by the exception handling mechanism reviewed next. An assertion is instead a 
			<bold>correctness condition</bold> governing the relationship between two software modules (not a software module and a human, or a software module and an external device). If 
			<code>
				<string>sum</string>
			</code> is negative on entry to 
			<code>
				<feature_name>deposit</feature_name>
			</code>, violating the precondition, the culprit is some other software element, whose author was not careful enough to observe the terms of the deal. Bluntly:
		</paragraph>
		<note>
			<bold>Assertion Violation rule </bold>A run-time assertion violation is the manifestation of a bug.
		</note>
		<paragraph>To be more precise:
		<line_break/>
		<list ordered="false">
			<item> A precondition violation signals a bug in the client, which did not observe its part of the deal. </item>
			<item> A postcondition (or invariant) violation signals a bug in the supplier -- the routine -- which did not do its job. </item>
		</list>
		</paragraph>
		<paragraph>That violations indicate bugs explains why it is legitimate to enable or disable assertion monitoring through mere compilation options: for a correct system -- one without bugs -- assertions will always hold, so the compilation option makes no difference to the semantics of the system. </paragraph>
		<paragraph>But of course for an incorrect system the best way to find out where the bug is -- or just that there is a bug -- is often to monitor the assertions during development and testing. Hence the presence of the compilation options, which Eiffel Software's EiffelStudio lets you set separately for each class, with defaults at the system and cluster levels:
		<line_break/>
		<list ordered="false">
			<item>
				<code>
					<keyword>no</keyword>
				</code> : assertions have no run-time effect.
			</item>
			<item>
				<code>
					<keyword>require</keyword>
				</code> : monitor preconditions only, on routine entry.
			</item>
			<item>
				<code>
					<keyword>ensure</keyword>
				</code> : preconditions on entry, postconditions on exit.
			</item>
			<item>
				<code>
					<keyword>invariant</keyword>
				</code> : like 
				<code>
					<keyword>ensure</keyword>
				</code>, plus class invariant on both entry and exit for qualified calls.
			</item>
			<item>
				<code>
					<keyword>all</keyword>
				</code> : like 
				<code>
					<keyword>invariant</keyword>
				</code>, plus 
				<code>
					<keyword>check</keyword>
				</code> instructions, loop invariants and loop variants (
				<link>
					<url>tutorial-11.xml</url><anchor_name>38021</anchor_name>
					<label>"Exception handling", page 46</label>
				</link>).
			</item>
		</list>
		</paragraph>
		<paragraph>An assertion violation, if detected at run time under one of these options other than the first, will cause an exception (
			<link>
				<url>tutorial-09.xml</url><anchor_name>10722</anchor_name>
				<label>"Instructions", page 84</label>
			</link>). Unless the software has an explicit "retry" plan as explained in the discussion of exceptions, the violation will cause produce an exception trace and cause termination (or, in EiffelStudio, a return to the environment's browsing and debugging facilities at the point of failure). If present, the label of the violated sub clause will be displayed, to help identify the problem.
		</paragraph>
		<paragraph>The default is 
			<code>
				<keyword>require</keyword>
			</code>. This is particularly interesting in connection with the Eiffel method's insistence on reuse: with libraries such as EiffelBase, richly equipped with preconditions expressing terms of use, an error in the <bold>client software</bold> will often lead, for example through an incorrect argument, to violating one of these preconditions. A somewhat paradoxical consequence is that even an application developer who does not apply the method too well (out of carelessness, haste, indifference or ignorance) will still benefit from the presence of contracts in someone else's library code.
		</paragraph>
		<paragraph>During development and testing, assertion monitoring should be turned on at the highest possible level. Combined with static typing and the immediate feedback of compilation techniques such as the Melting Ice Technology, this permits the development process mentioned in the section 
			<link>
				<url>tutorial-04.xml</url><anchor_name>94733</anchor_name>
				<label>"Quality and functionality", page 10</label>
			</link>, where errors are exterminated at birth. No one who has not practiced the method in a real project can imagine how many mistakes are found in this way; surprisingly often, a violation will turn out to affect an assertion that was just included for goodness' sake, the developer being convinced that it could never "possibly" fail to be satisfied.
		</paragraph>
		<paragraph>By providing a precise reference (the description of what the software is supposed to do) against which to assess the reality (what the software actually does), Design by Contract&amp;#153; profoundly transforms the activities of debugging, testing and quality assurance. </paragraph>
		<paragraph>When releasing the final version of a system, it is usually appropriate to turn off assertion monitoring, or bring it down to the 
			<code>
				<keyword>require</keyword>
			</code> level. The exact policy depends on the circumstances; it is a trade off between efficiency considerations, the potential cost of mistakes, and how much the developers and quality assurance team trust the product. When developing the software, however, you should always assume -- to avoid loosening your guard -- that in the end monitoring will be turned off.
		</paragraph>
		<heading>
			<size>2</size>
			<content>The contract form of a class</content>
		</heading>
		<paragraph>Another application of assertions governs documentation. Environment mechanisms, such as clicking the 
			<code>
				<keyword>Form Contract</keyword>
			</code> icon in Eiffelstudio, will produce, from a class text, an abstracted version which only includes the information relevant for client authors. Here is the contract form of class 
			<code>
				<class_name>ACCOUNT</class_name>
			</code> in the latest version given:
		</paragraph>
<code_block>
<keyword>indexing</keyword>
	description<symbol>:</symbol> <string>"Simple bank accounts"</string>

<keyword>class</keyword> <keyword>interface</keyword>
	<class_name>ACCOUNT</class_name>

<keyword>feature</keyword> <comment>-- Access</comment>

	<feature_name>balance</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
 		<comment>-- Current balance</comment>
	
	<feature_name>deposit_count</feature_name><symbol>:</symbol> <class_name>INTEGER</class_name>
		<comment>-- Number of deposits made since opening</comment>

<keyword>feature</keyword> <comment>-- Element change</comment>

	deposit <symbol>(</symbol>sum<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol>
			<comment>-- Add `sum' to account.</comment>
		<keyword>require</keyword>
			non_negative<symbol>:</symbol> <local_variable>sum</local_variable> <symbol>&gt;=</symbol> <number>0</number>
		<keyword>ensure</keyword>
			one_more_deposit<symbol>:</symbol> <feature_name>deposit_count</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>deposit_count</feature_name> <symbol>+</symbol> 1
			updated<symbol>:</symbol> <feature_name>balance</feature_name> <symbol>=</symbol> <keyword>old</keyword> <feature_name>balance</feature_name> <symbol>+</symbol> sum

<keyword>invariant</keyword>
	consistent_balance<symbol>:</symbol> <feature_name>balance</feature_name> <symbol>=</symbol> <feature_name>all_deposits</feature_name>.<feature_name>total</feature_name>

<keyword>end</keyword> <comment>-- class interface ACCOUNT</comment>
</code_block>
		<paragraph>The words 
			<code>
				<keyword>interface class</keyword>
			</code> are used instead of just 
			<code>
				<keyword>class</keyword>
			</code> to avoid any confusion with actual Eiffel text, since this is documentation, not executable software. (It is in fact possible to generate a compilable variant of the Contract Form in the form of a deferred class, a notion defined later.)
		</paragraph>
		<paragraph>Compared to the full text, the Contract Form of a class (also called its "short form") retains all its interface properties, relevant to client authors:
		<line_break/>
		<list ordered="false">
			<item> Names and signatures (argument and result type information) for exported features. </item>
			<item> Header comments of these features, which carry informal descriptions of their purpose. (Hence the importance, mentioned in section 
				<link>
					<url>tutorial-05.xml</url><anchor_name>35212</anchor_name>
					<label>4</label>
				</link>, of always including such comments and writing them carefully.)
			</item>
			<item> Preconditions and postconditions of these features (at least the subclauses involving only exported features). </item>
			<item> Class invariant (same observation). </item>
		</list>
		</paragraph>
		<paragraph>The following elements, however, are not in the Contract Form: any information about non-exported features; all the routine bodies (
			<code>
				<keyword>do</keyword>
			</code> clauses, or the 
			<code>
				<keyword>external</keyword>
			</code> and 
			<code>
				<keyword>once</keyword>
			</code> variants seen in 
			<link>
				<url>tutorial-06.xml</url><anchor_name>91180</anchor_name>
				<label>"External software", page 16</label>
			</link> above and 
			<link>
				<url>tutorial-11.xml</url><anchor_name>71816</anchor_name>
				<label>"Once routines and shared objects", page 82</label>
			</link> below); assertion subclauses involving non-exported features; and some keywords not useful in the documentation, such as 
			<code>
				<keyword>is</keyword>
			</code> for a routine.
		</paragraph>
		<paragraph>In accordance with the Uniform Access principle (page 
			<link>
				<url>tutorial-07.xml</url><anchor_name>UNIFORM ACCESS</anchor_name>
				<label>19</label>
			</link>), the Contract Form does not distinguish between attributes and argument-less queries. In the above example, 
			<code>
				<feature_name>balance</feature_name>
			</code> could be one or the other, as it makes no difference to clients, except possibly for performance.
		</paragraph>
		<paragraph>The Contract Form is the fundamental tool for using supplier classes in the Eiffel method. It enables client authors to reuse software elements without having to read their source code. This is a crucial requirement in large-scale industrial developments. </paragraph>
		<paragraph>The Contract Form satisfies two key requirements of good software documentation:
		<line_break/>
		<list ordered="false">
			<item> It is truly abstract, free from the implementation details of what it describes and concentrating instead on its functionality. </item>
			<item> Rather than being developed separately -- an unrealistic requirement, hard to impose on developers initially and becoming impossible in practice if we expect the documentation to remain up to date as the software evolves -- the documentation is extracted from the software itself. It is not a separate product but a different view of the same product. This prolongs the 
				<bold>Single Product</bold> principle that lies at the basis of Eiffel's seamless development model (section 
				<link>
					<url>tutorial-04.xml</url><anchor_name>41726</anchor_name>
					<label>3</label>
				</link>).
			</item>
		</list>
		</paragraph>
		<paragraph>The Contract Form is only one of the relevant views. EiffelStudio, for example, generates graphical representations of system structures, to show classes and their relations -- client, inheritance -- according to the conventions of BON (the Business Object Notation). In accordance with the principles of seamlessness and reversibility, EiffelStudio lets you both work on the text, producing the graphics on the fly, or work on the graphics, updating the text on the fly; you can alternate as you wish between these two modes. The resulting process is quite different from more traditional approaches based on separate tools: an analysis and CASE workbench, often based on UML, to deal with an initial "bubble-and-arrow" description; and a separate programming environment, to deal with implementation aspects only. In Eiffel the environment provides consistent, seamless support from beginning to end. </paragraph>
		<paragraph>The Contract Form -- or its variant the Flat-Contract Form, which takes account of inheritance (
			<link>
				<url>tutorial-10.xml</url><anchor_name>11134</anchor_name>
				<label>"Flat and Flat-Contract Forms", page 72</label>
			</link>) are the standard form of library documentation, used extensively, for example, in the book 
			<span>
				<link>
					<url>http://www.eiffel.com/doc/page.xml</url><anchor_name>rs</anchor_name>
					<label>Reusable Software</label>
				</link>
			</span> (see bibliography). Assertions play a central role in such documentation by expressing the terms of the contract. As demonstrated 
			a contrario by the widely publicized $500-million crash of the Ariane-5 rocket launcher in June of 1996, due to the incorrect reuse of a software module from the Ariane-4 project, 
			<bold>reuse without a contract documentation</bold> is the path to disaster. Non-reuse would, in fact, be preferable.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Exception handling</content>
		</heading>
		<paragraph>Another application of Design by Contract&amp;#153; governs the handling of unexpected cases. The vagueness of many discussions of this topic follows from the lack of a precise definition of terms such as "exception". With Design by Contract&amp;#153; we are in a position to be specific:
		<line_break/>
		<list ordered="false">
			<item> Any routine has a contract to achieve. </item>
			<item> Its body defines a strategy to achieve it -- a sequence of operations, or some other control structure involving operations. Some of these operations are calls to routines, with their own contracts; but even an atomic operation, such as the computation of an arithmetic operation, has an implicit contract, stating that the result will be representable. </item>
			<item> Any one of these operations may 
				<code>
					<keyword>fail</keyword>
				</code>, that is to say be unable to meet its contract; for example an arithmetic operation may produce an overflow (a on-representable result).
			</item>
			<item> The failure of an operation is an 
				<bold>exception</bold> for the routine that needed the operation.
			</item>
			<item> As a result the routine may fail too -- causing an exception in its own caller. </item>
		</list>
		</paragraph>
		<paragraph>Note the precise definitions of the two key concepts, failure and exception. Although failure is the more basic one -- since it is defined for atomic, non-routine operations -- the definitions are mutually recursive, since an exception may cause a failure of the recipient routine, and a routine's failure causes an exception in its own caller. </paragraph>
		<paragraph>Why state that an exception "may" cause a failure? It is indeed possible to "rescue" a routine from failure in the case of an exception, by equipping it with a clause labeled 
			<code>
				<keyword>rescue</keyword>
			</code>, as in:
		</paragraph>
<code_block>
<feature_name>read_next_character</feature_name> <symbol>(</symbol><local_variable>f</local_variable><symbol>:</symbol> <class_name>FILE</class_name><symbol>)</symbol> <keyword>is</keyword>
		<comment>-- Make next character available in last_character.</comment>
		<comment>-- If impossible, set failed to True.</comment>
	<keyword>require</keyword>
		readable<symbol>:</symbol> <local_variable>file</local_variable>.<feature_name>readable</feature_name>
	<keyword>local</keyword>
		<local_variable>impossible</local_variable><symbol>:</symbol> <class_name>BOOLEAN</class_name>
	<keyword>do</keyword>
		<keyword>if</keyword> <local_variable>impossible</local_variable> <keyword>then</keyword>
			<feature_name>failed</feature_name> <symbol>:</symbol><symbol>=</symbol> True
		<keyword>else</keyword>
			<feature_name>last_character</feature_name> <symbol>:=</symbol> <feature_name>low_level_read_function</feature_name> <symbol>(</symbol><local_variable>f</local_variable><symbol>)</symbol>
		<keyword>end</keyword>
	<keyword>rescue</keyword>
		<local_variable>impossible</local_variable> <symbol>:=</symbol> <keyword>True</keyword>
		<keyword>retry</keyword>
	<keyword>end</keyword>
</code_block>
		<paragraph>This example includes the only two constructs needed for exception handling: 
			<code>
				<keyword>rescue</keyword>
			</code> and 
			<code>
				<keyword>retry</keyword>
			</code>. A 
			<code>
				<keyword>retry</keyword>
			</code> instruction is only permitted in a rescue clause; its effect is to start again the execution of the routine, without repeating the initialization of local entities (such as 
			<code>
				<local_variable>impossible</local_variable>
			</code> in the example, which was initialized to 
			<code>
				<keyword>False</keyword>
			</code> on first entry). Features 
			<code>
				<feature_name>failed</feature_name>
			</code> and 
			<code>
				<feature_name>last_character</feature_name>
			</code> are assumed to be attributes of the enclosing class.
		</paragraph>
		<paragraph>This example is typical of the use of exceptions: as a last resort, for situations that should not occur. The routine has a precondition, 
			<code>
				<feature_name>file</feature_name>.<feature_name>readable</feature_name>
			</code>, which ascertains that the file exists and is accessible for reading characters. So clients should check that everything is fine before calling the routine. Although this check is almost always a guarantee of success, a rare combination of circumstances could cause a change of file status (because a user or some other system is manipulating the file) between the check for 
			<code>
				<feature_name>readable</feature_name>
			</code> and the call to 
			<code>
				<feature_name>low_level_read_function</feature_name>
			</code>. If we assume this latter function will fail if the file is not readable, we must catch the exception.
		</paragraph>
		<paragraph>A variant would be</paragraph>
<code_block>
<keyword>local</keyword>
	<local_variable>attempts</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name>
<keyword>do</keyword>
	<keyword>if</keyword> <local_variable>attempts</local_variable> <symbol>&lt;</symbol> <feature_name>Max_attempts</feature_name> <keyword>then</keyword>
		<feature_name>last_character</feature_name> <symbol>:=</symbol> <feature_name>low_level_read_function</feature_name> <symbol>(</symbol><local_variable>f</local_variable><symbol>)</symbol>
	<keyword>else</keyword>
		<feature_name>failed</feature_name> <symbol>:=</symbol> <keyword>True</keyword>
	<keyword>end</keyword>
<keyword>rescue</keyword>
	<local_variable>attempts</local_variable> <symbol>:=</symbol> <local_variable>attempts</local_variable> <symbol>+</symbol> <number>1</number>
	<keyword>retry</keyword>
<keyword>end</keyword>
</code_block>
		<paragraph>which would try again up to 
			<code>
				<feature_name>Max_attempts</feature_name>
			</code> times before giving up.
		</paragraph>
		<paragraph>The above routine, in either variant, never fails: it always fulfills its contract, which states that it should either read a character or set 
			<code>
				<feature_name>failed</feature_name>
			</code> to record its inability to do so. In contrast, consider the new variant
		</paragraph>
<code_block>
<keyword>local</keyword>
	<local_variable>attempts</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name>
<keyword>do</keyword>
	<feature_name>last_character</feature_name> <symbol>:=</symbol> <feature_name>low_level_read_function</feature_name> <symbol>(</symbol><local_variable>f</local_variable><symbol>)</symbol>
<keyword>rescue</keyword>
	<local_variable>attempts</local_variable> <symbol>:=</symbol> <local_variable>attempts</local_variable> <symbol>+</symbol> 1
	<keyword>if</keyword> <local_variable>attempts</local_variable> <symbol>&lt;</symbol> <feature_name>Max_attempts</feature_name> <keyword>then</keyword>
		<keyword>retry</keyword>
	<keyword>end</keyword>
<keyword>end</keyword>
</code_block>
		<paragraph>with no more role for 
			<code>
				<feature_name>failed</feature_name>
			</code>. In this case, after 
			<code>
				<feature_name>Max_attempts</feature_name>
			</code> unsuccessful attempts, the routine will execute its 
			<code>
				<keyword>rescue</keyword>
			</code> clause to the end, with no 
			<code>
				<keyword>retry</keyword>
			</code> (the 
			<code>
				<keyword>if</keyword>
			</code> having no 
			<code>
				<keyword>else</keyword>
			</code> clause). This is how a routine 
			<bold>fails</bold>. It will, as noted, pass on the exception to its caller.
		</paragraph>
		<paragraph>Such a rescue clause should, before terminating, restore the invariant of the class so that the caller and possible subsequent 
			<code>
				<keyword>retry</keyword>
			</code>attempts from higher up find the objects in a consistent state. As a result, the rule for an absent 
			<code>
				<keyword>rescue</keyword>
			</code> clause -- the case for the vast majority of routines in most systems -- is that it is equivalent to
		</paragraph>
<code_block>
<keyword>rescue</keyword>
	<feature_name>default_rescue</feature_name>
</code_block>
		<paragraph>where procedure 
			<code>
				<feature_name>default_rescue</feature_name>
			</code> comes from 
			<code>
				<class_name>ANY</class_name>
			</code>, where it is defined to do nothing; in a system built for robustness, classes subject to non-explicitly-rescued exceptions should redefine 
			<code>
				<feature_name>default_rescue</feature_name>
			</code> (perhaps using a creation procedure, which is bound by the same formal requirement) so that it will always restore the invariant.
		</paragraph>
		<paragraph>Behind Eiffel's exception handling scheme lies the principle -- at first an apparent platitude, but violated by many existing mechanisms -- that a routine should 
			<bold>either succeed or fail</bold>. This is in turn a consequence of Design by Contract&amp;#153; principles: succeeding means being able to fulfill the contract, possibly after one or more 
			<code>
				<keyword>retry</keyword>
			</code>; failure is the other case, which must always trigger an exception in the caller. Otherwise it would be possible for a routine to miss its contract and yet return to its caller in a seemingly normal state. That is the worst possible way to handle an exception.
		</paragraph>
		<paragraph>Concretely, exceptions may result from the following events:
		<line_break/>
		<list ordered="false">
			<item> A routine failure (
				<code>
					<keyword>rescue</keyword>
				</code> clause executed to the end with no 
				<code>
					<keyword>retry</keyword>
				</code>), as just seen.
			</item>
			<item> Assertion violation, if for a system that runs with assertion monitoring on. </item>
			<item> Attempt to call a feature on a void reference: 
				<code>
					<local_variable>x</local_variable>.<feature_name>f</feature_name> <symbol>(</symbol>...<symbol>)</symbol>
				</code>, the fundamental computational mechanism, can only work if 
				<code>
					<local_variable>x</local_variable>
				</code> is attached to an object, and will cause an exception otherwise.
			</item>
			<item> Developer exception, as seen next. </item>
			<item> Operating system signal:arithmetic overfolow; no memory available for a requested creation or clone -- even after garbage collection has rummaged everything to find some space. (But no C/C++-like "wrong pointer address", which cannot occur thanks to the statically typed nature of Eiffel.)</item>
		</list>
		</paragraph>
		<paragraph>
		It is sometimes useful, when handling exceptions in 
		<code>
			<keyword>rescue</keyword>
		</code> clauses, to ascertain the exact nature of the exception that got the execution there. For this it is suffices to inherit from the Kernel Library class 
		<code>
			<class_name>EXCEPTIONS</class_name>
		</code>, which provides queries such as 
		<code>
			<feature_name>exception</feature_name>
		</code>, giving the code for the last exception, and symbolic names (
		<link>
			<url>tutorial-11.xml</url><anchor_name>94304</anchor_name>
			<label>"Constant and unique attributes", page 83</label>
		</link>) for all such codes, such as 
		<code>
			<feature_name>No_more_memory</feature_name>
		</code>. You can then process different exceptions differently by testing 
		<code>
			<feature_name>exception</feature_name>
		</code> against various possibilities. The method strongly suggests, however, that exception handling code should remain simple; a complicated algorithm in a 
		<code>
			<keyword>rescue</keyword>
		</code> clause is usually a sign that the mechanism is being misused. Class 
		<code>
			<class_name>EXCEPTIONS</class_name>
		</code> also provides various facilities for fine-tuning the exception facilities, such as a procedure 
		<code>
			<feature_name>raise</feature_name>
		</code> that will explicitly trigger a "developer exception" with a code than can then be detected and processed. Exception handling helps produce Eiffel software that is not just correct but robust, by planning for cases that should 
		not normally arise, but might out of Murphy's law, and ensuring they do not affect the software's basic safety and simplicity.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Other applications of Design by Contract&amp;#153;</content>
		</heading>
		<paragraph>The Design by Contract&amp;#153; ideas pervade the Eiffel method. In addition to the applications just mentioned, they have two particularly important consequences:
		<line_break/>
		<list ordered="false">
			<item> They make it possible to use Eiffel for analysis and design. At a high level of abstraction, it is necessary to be precise too. With the exception of BON, object-oriented analysis and design methods tend to favor abstraction over precision. Thanks to assertions, it is possible to express precise properties of a system ("At what speed should the alarm start sounding?") without making any commitment to implementation. The discussion of deferred classes (
				<link>
					<url>tutorial-10.xml</url><anchor_name>48949</anchor_name>
					<label>"Applications of deferred classes", page 60</label>
				</link>) will show how to write a purely descriptive, non-software model in Eiffel, using contracts to describe the essential properties of a system without any computer or software aspect.
			</item>
			<item> Assertions also serve to control the power of inheritance-related mechanisms -- redeclaration, polymorphism, dynamic binding -- and channel them to correct uses by assigning the proper semantic limits. See 
				<link>
					<url>tutorial-10.xml</url><anchor_name>83610</anchor_name>
					<label>"Inheritance and contracts", page 66</label>
				</link>.
			</item>
		</list>
		</paragraph>
	</paragraph></document>
