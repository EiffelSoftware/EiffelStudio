<document title="Event Programming with Agents">
	<meta_data>
		<help>
			<toc>
				<envision_location>Eiffel\Eiffel for .NET</envision_location>
				<envision_pseudo_name>70</envision_pseudo_name>
				<envision_title>Event Programming With Agents</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>In Eiffel there is a facility referred to as agents.</paragraph>
		<paragraph>The implementation of agents is an advanced topic, but you do not have to understand the details of the implementation of agents to put agents to work for you. That is what you will learn in this section.</paragraph>
		<heading>
			<size>2</size>Objects that Represent Operations
		</heading>
		<paragraph>Object technology is based on the idea that when we model real world objects, we model them based on the things that they have and what they can do ... their properties and their operations. The operations in Eiffel are the 
			<link>
				<url/>
				<label>routines</label>
			</link>, i.e., the 
			<link>
				<url/>
				<label>functions</label>
			</link> and 
			<link>
				<url/>
				<label>procedures</label>
			</link>, of classes. Operations are not objects.
		</paragraph>
		<paragraph>Having said that, it is sometimes desirable for us to model operations. We do this in the same fashion that we model other concepts: statically as classes, and as objects at runtime.</paragraph>
		<paragraph>An object that represents an operation is called an agent.</paragraph>
		<paragraph>If we can have a runtime object that represents an operation, then we can place the object in the structure of another object, where at some later time, a client can cause the associated operation to execute.</paragraph>
		<paragraph>This is a very desirable model for event driven processing, like graphical user interfaces. The operations that are executed when a user take some action like clicking on a button, could be represented by agents. When the user interface element is initialized, agents that represent the action routines are stored within the interface element. Then at the time that an event, say a button click, occurs, the agents for that event are retrieved and their associated operations are executed.</paragraph>
		<paragraph>Another area in which agents are commonly used is in traversing data structures. Many of the data structure classes in the Base Library include routines which take agents as there arguments. For example, the feature 
			<feature_name>do_all</feature_name> takes an agent which represents some procedure and will apply the procedure to every item in the structure.
		</paragraph>
		<heading>
			<size>2</size>Classes to Model Operations
		</heading>
		<paragraph>We know that there are two types of routines in Eiffel, functions and procedures.</paragraph>
		<paragraph>Not surprisingly, the implementation of agents relies on three classes in the Base Library. Class 
			<class_name>ROUTINE</class_name>, and its heirs 
			<class_name>FUNCTION</class_name> and 
			<class_name>PROCEDURE</class_name>.
		</paragraph>
		<paragraph>When you use an agent from a client routine, you will be building an instance of either 
			<class_name>FUNCTION</class_name> or 
			<class_name>ROUTINE</class_name>. This happens implicitly as you will see.
		</paragraph>
		<heading>
			<size>2</size>Using Agents
		</heading>
		<paragraph>Below is an instruction which passes an agent as an argument to a procedure. </paragraph>
		<code_block>
	<feature_name>button</feature_name>.<feature_name>select_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>gauge</feature_name>.<feature_name>step_forward</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>In this example, the producer wants to add the action of stepping the gauge forward in the event that a button is clicked. The keyword "
			<code>
				<keyword>agent</keyword>
			</code>" is used to indicate that at runtime an object of type 
			<class_name>PROCEDURE</class_name> should be created which represents applying the feature 
			<feature_name>step_forward</feature_name> to the object attached to 
			<code>
				<indexing_tag>gauge</indexing_tag>
			</code>. It is the object of type 
			<class_name>PROCEDURE</class_name> that is passed as the argument.
		</paragraph>
		<paragraph>It is important to understand that 
			<feature_name>step_forward</feature_name> does not get applied at the point that the instruction above is executed. Rather the procedure object that represents 
			<feature_name>step_forward</feature_name> is given to the button to hold in reserve. Then at the point that the button click event takes place, the button will go through its list of 
			<feature_name>select_actions</feature_name> executing their associated routines. Only then does 
			<feature_name>step_forward</feature_name>get applied to 
			<code>
				<indexing_tag>gauge</indexing_tag>
			</code>.
		</paragraph>
		<heading>
			<size>3</size>Agents with Arguments
		</heading>
		<paragraph>In this example, the routine "
			<feature_name>step_forward</feature_name>" on which the agent is based takes no arguments. If you drilled down into the workings of this example you would find that class that implements the feature 
			<feature_name>extend</feature_name> is class 
			<class_name>EV_NOTIFY_ACTION_SEQUENCE</class_name>. You would also see that the signature for the feature 
			<feature_name>extend</feature_name> is as essentially as follows.
		</paragraph>
		<code_block>
	<feature_name>extend</feature_name> <symbol>(</symbol>v<symbol>:</symbol> <class_name>PROCEDURE</class_name> <symbol>[</symbol><class_name>ANY</class_name>, <class_name>TUPLE</class_name><symbol>])</symbol>
</code_block>
		<paragraph>We don't have to know too much about the workings of agents to see that "
			<feature_name>extend</feature_name>" takes an argument 
			<code>
				<indexing_tag>v</indexing_tag>
			</code> which is of type 
			<class_name>PROCEDURE</class_name>. It turns out that the actual generic parameter 
			<class_name>TUPLE</class_name> represents the set of "open" arguments. In this case, extend is expecting an agent which has no open arguments.
		</paragraph>
		<heading>
			<size>3</size>Open and Closed Arguments
		</heading>
		<paragraph>It is this business of open and closed arguments which really makes agents remarkable. To get a feel for it, let's simplify the example some. Instead of considering an agent passed as an argument let's look at it as a simple assignment within a class.</paragraph>
		<paragraph>Suppose a class has a feature declared as shown below.</paragraph>
		<code_block>
	<feature_name>my_procedure</feature_name><symbol>:</symbol> <class_name>PROCEDURE</class_name> <symbol>[</symbol><class_name>ANY</class_name>, <class_name>TUPLE</class_name><symbol>]</symbol>
</code_block>
		<paragraph>Then what can be assigned to 
			<feature_name>my_procedure</feature_name>?. An agent, of course. Say the class has procedures as follows.
		</paragraph>
		<code_block>
	<feature_name>no_argument_procedure</feature_name> <keyword>is</keyword>
			<comment>-- A procedure with no arguments</comment>
		<keyword>do</keyword>
			<feature_name>print</feature_name> <symbol>(</symbol>"<string>No argument here!%N</string>"<symbol>)</symbol>
		<keyword>end</keyword>

	<feature_name>two_argument_procedure</feature_name> <symbol>(</symbol>an_int<symbol>:</symbol> <class_name>INTEGER</class_name>; another_int<symbol>:</symbol> <class_name>INTEGER</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- A procedure with two arguments</comment>
		<keyword>do</keyword>
			<feature_name>print</feature_name> <symbol>(</symbol>"<string>My arguments are</string><symbol>:</symbol> " <symbol>+</symbol> an_int.<feature_name>out</feature_name> <symbol>+</symbol> "<string> and</string> " <symbol>+</symbol> another_int.<feature_name>out</feature_name> <symbol>+</symbol> "<string>%N</string>"<symbol>)</symbol>
		<keyword>end</keyword>
</code_block>
		<paragraph>Then the following assignment is valid.</paragraph>
		<code_block>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>no_argument_procedure</feature_name>
</code_block>
		<paragraph>What this means is that the agent created and associated with the procedure 
			<feature_name>no_argument_procedure</feature_name> must conform to the type 
			<class_name>PROCEDURE</class_name> [ 
			<class_name>ANY</class_name>, 
			<class_name>TUPLE</class_name>]. The feature 
			<feature_name>my_procedure</feature_name> (which is of type 
			<class_name>PROCEDURE</class_name>) can be attached at runtime to an agent representing a procedure with no open arguments, which indeed is what 
			<feature_name>no_argument_procedure</feature_name> is.
		</paragraph>
		<paragraph>Now let's turn our attention to the other procedure 
			<feature_name>two_argument_procedure</feature_name>. You might think that because it takes two arguments, that you would not be able to build an agent from it which could be assigned to the attribute 
			<feature_name>my_procedure</feature_name>. But you can do it by closing the two arguments at the time that the agent is created, as in the following.
		</paragraph>
		<code_block>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>two_argument_procedure</feature_name> <symbol>(</symbol>1, 2<symbol>)</symbol>	<comment>-- Is Valid</comment>
</code_block>
		<paragraph>What happens here is that  values are fixed for those arguments at the time that the agent, an object of type 
			<class_name>PROCEDURE</class_name> [ 
			<class_name>ANY</class_name>, 
			<class_name>TUPLE</class_name>] is created.
		</paragraph>
		<paragraph>So this is the wonderful thing about agents. A routine which will be represented as an agent does not have to be an exact fit for the expected signature. By closing some arguments at agent creation, you have effectively produced a new and conforming routine.</paragraph>
		<paragraph>The advantange of this is that you can sometimes avoid building specialized routines for the sole purpose of having a routine which conforms to the agent signature.</paragraph>
		<paragraph>To leave an argument open, you hold its place with a question mark. If you intend for all arguments to be open, then you may make them all question marks, or leave off the arguments entirely.</paragraph>
		<code_block>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>two_argument_procedure</feature_name> <symbol>(</symbol>?, 2<symbol>)</symbol>	<comment>-- Argument 1 left open</comment>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>two_argument_procedure</feature_name> <symbol>(</symbol>?, ?<symbol>)</symbol>	<comment>-- Both arguments left open</comment>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>two_argument_procedure</feature_name>		<comment>-- Both arguments left open</comment>
</code_block>
		<paragraph>If an argument is open, then it means that a value is not provided for that argument at the time that the agent is created. The implication is that the value must be provided at some time prior to the time that the agent's associated routine gets executed. A precondition to executing a routine associated with an agent is that the agent has a valid set of arguments (called operands within the 
			<class_name>ROUTINE</class_name> classes) for the call. If you were to leave one or both of the arguments to 
			<feature_name>two_argument_procedure</feature_name> open as in the examples above, the assignment would still work due to the rules governing 
			<code>
				<keyword>TUPLE</keyword>
			</code> conformance. But, at runtime unless the other arguments had been provided, the " 
			<code>
				<indexing_tag>valid operands</indexing_tag>
			</code>" precondition would be violated.
		</paragraph>
		<paragraph>Let's see an example in which we leave a target open. Suppose we have a class that has a feature coded as below</paragraph>
		<code_block>
	<feature_name>my_strings</feature_name><symbol>:</symbol> <class_name>LINKED_LIST</class_name> <symbol>[</symbol><class_name>STRING</class_name><symbol>]</symbol>
</code_block>
		<paragraph>and some code to put some strings in 
			<feature_name>my_strings</feature_name>:
		</paragraph>
		<code_block>
	<keyword>create</keyword> <feature_name>my_things</feature_name>.<feature_name>make</feature_name>
	<feature_name>my_strings</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol>"<string>Hello</string>"<symbol>)</symbol>
	<feature_name>my_strings</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol>"<string>World!</string>"<symbol>)</symbol>
</code_block>
		<paragraph>Our class also has a feature called 
			<feature_name>print_on_new_line</feature_name> which we created to print a string preceded by a new line character.
		</paragraph>
		<code_block>
	<feature_name>print_on_new_line</feature_name> <symbol>(</symbol>s<symbol>:</symbol> <class_name>STRING</class_name><symbol>)</symbol> <keyword>is</keyword>
			<comment>-- Print `s' preceded by a new line</comment>
		<keyword>do</keyword>
			<feature_name>print</feature_name> <symbol>(</symbol>"<string>%N</string>" <symbol>+</symbol> s<symbol>)</symbol>
		<keyword>end</keyword>
</code_block>
		<paragraph>Now suppose we want to print the values of all the strings in 
			<feature_name>my_strings</feature_name> each on a separate line by invoking 
			<feature_name>print_on_new_line</feature_name>.  Traditionally, we would do it by traversing the 
			<class_name>LINKED_LIST</class_name> and printing each item. Like this:
		</paragraph>
		<code_block>
	<keyword>from</keyword>
		<feature_name>my_list</feature_name>.<feature_name>start</feature_name>
	<keyword>until</keyword>
		<feature_name>my_list</feature_name>.<feature_name>exhausted</feature_name>
	<keyword>loop</keyword>
		<feature_name>print_on_new_line </feature_name><symbol>(</symbol><feature_name>my_list</feature_name>.<feature_name>item</feature_name><symbol>)</symbol>
		<feature_name>my_list</feature_name>.<feature_name>forth</feature_name>
	<keyword>end</keyword>
</code_block>
		<paragraph>The availability of agents gives us new options. 
			<class_name>LINKED_LIST</class_name> has a feature 
			<feature_name>do_all</feature_name> which comes to it from its ancestor 
			<class_name>LINEAR</class_name>. The 
			<feature_name>do_all</feature_name> feature's signature looks like this:
		</paragraph>
		<code_block>
	<feature_name>do_all</feature_name> <symbol>(</symbol>action<symbol>:</symbol> <class_name>PROCEDURE</class_name> <symbol>[</symbol><class_name>ANY</class_name>, <class_name>TUPLE</class_name> <symbol>[</symbol><generics>G</generics><symbol>]</symbol><symbol>]</symbol><symbol>)</symbol>
</code_block>
		<paragraph>As an argument 
			<feature_name>do_all</feature_name> takes an agent based on a procedure with one open argument which is the same type as the list items (in this class, 
			<class_name>G</class_name> is the formal generic parameter representing the type of the items being stored). Then it traverses the list executing the routine associated with that agent and roviding the current list item to satisfy the open argument.
		</paragraph>
		<paragraph>Instead of coding the loop shown above, we can code this instruction:</paragraph>
		<code_block>
	<feature_name>my_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>print_on_new_line</feature_name> <symbol>(</symbol>?<symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>we leave the argument to 
			<feature_name>print</feature_name> open, and 
			<feature_name>do_all</feature_name> will provide it as a reference to the current list item as it traverses the list.
		</paragraph>
		<heading>
			<size>3</size>Targets for Agents' Routines
		</heading>
		<paragraph>In Eiffel every routine must be applied against a target object. In our model for computation, 
			<code>
				<indexing_tag>x</indexing_tag>
			</code>. 
			<feature_name>f</feature_name> ( 
			<code>
				<indexing_tag>a</indexing_tag>
			</code>, ...), 
			<code>
				<indexing_tag>x</indexing_tag>
			</code> is the target of the application of feature 
			<feature_name>f</feature_name>. In the case of an agent, the agent must account for objects for each of the arguments and an object for the target of the routine.
		</paragraph>
		<paragraph>Let's identify the targets in the examples shown. First:</paragraph>
		<code_block>
	<feature_name>button</feature_name>.<feature_name>select_actions</feature_name>.<feature_name>extend</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>gauge</feature_name>.<feature_name>step_forward</feature_name><symbol>)</symbol>
</code_block>
		<paragraph>Here the target is the object attached to the entity "gauge" which is (although you cannot determine it from this line taken out of context) an object of type 
			<class_name>EV_GAUGE</class_name>.
		</paragraph>
		<paragraph>How about this:</paragraph>
		<code_block>
	<feature_name>my_procedure</feature_name> <symbol>:</symbol><symbol>=</symbol> <keyword>agent</keyword> <feature_name>two_argument_procedure</feature_name> <symbol>(</symbol>1, 2<symbol>)</symbol>
</code_block>
		<paragraph>Here, since there was no qualification, then the target is the current instance. Same with this:</paragraph>
		<code_block>
	<feature_name>my_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>print_on_new_line</feature_name> <symbol>(</symbol>?<symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>Again, consider the fact that the agent must account for objects for each of the arguments to a routine, and an object for the target. So, in the examples we've seen so far, the target is close, that is provided at the time of the creation of the agent.</paragraph>
		<paragraph>But we can actually leave the target open as well. Now we cannot use the question mark notation to do that, because if we did, there would be no way to know of which class the routine is a feature. So instead, we mark an open target with the class name in braces.</paragraph>
		<paragraph>Suppose in our list of strings example, we wanted to print the strings, then convert them to lower case, then print them again. Remember that "do_all" has one open argument, which will be provided as the current list item during the traversal.</paragraph>
		<code_block>
	<feature_name>my_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>print_on_new_line</feature_name> <symbol>(</symbol>?<symbol>)</symbol><symbol>)</symbol>
	<feature_name>my_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <symbol>{</symbol><class_name>STRING</class_name><symbol>}</symbol><feature_name></feature_name>.<feature_name>to_lower</feature_name><symbol>)</symbol>
	<feature_name>my_list</feature_name>.<feature_name>do_all</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>print_on_new_line</feature_name> <symbol>(</symbol>?<symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>In between printing the list two times, we provide 
			<feature_name>do_all</feature_name> with an agent that representing the 
			<class_name>STRING</class_name> class's feature 
			<feature_name>to_lower</feature_name> which will convert each string in the list to lower case. Notice that 
			<feature_name>to_lower</feature_name> does not take an argument of type 
			<class_name>STRING</class_name> as 
			<feature_name>print_on_new_line</feature_name> did. Rather it gets applied to an instance of 
			<class_name>STRING</class_name>, so it is targeted to a string. So we leave its target open and 
			<feature_name>do_all</feature_name> provides the current list item as the target.
		</paragraph>
		<paragraph>Agents for Functions</paragraph>
		<paragraph>So far all the agents that we have coded have created instances of 
			<class_name>PROCEDURE</class_name>. But functions are routines and can be represented as agents as well. The difference is that functions have a return value.
		</paragraph>
		<paragraph>Let's extend the string example by using an agent that represents a function. Suppose we wanted to print only those strings which contain a particular character, say the exclamation point. </paragraph>
		<paragraph>Here again we'll use a feature of the 
			<class_name>LINKED_LIST</class_name> class. There is a feature called 
			<feature_name>do_if</feature_name> which takes two agents as arguments. One is an action procedure like the argument that 
			<feature_name>do_all</feature_name> takes, and the other is a function which returns a boolean and used as a test. As each list item is current, the test is applied first. If the result is true, then the action is applied with the current item.
		</paragraph>
		<code_block>
	<feature_name>my_list</feature_name>.<feature_name>do_if</feature_name> <symbol>(</symbol><keyword>agent</keyword> <feature_name>print_on_new_line</feature_name><symbol>(</symbol>?<symbol>)</symbol>, <keyword>agent</keyword> <symbol>{</symbol><class_name>STRING</class_name><symbol>}</symbol><feature_name></feature_name>.<feature_name>has</feature_name><symbol>(</symbol><symbol>'</symbol>!<symbol>'</symbol><symbol>)</symbol><symbol>)</symbol>
</code_block>
		<paragraph>The agent for the action is the same as we used earlier. We've added an agent for the test. It represents applying the 
			<feature_name>has</feature_name> feature of the 
			<class_name>STRING</class_name> class. Here the target is left open, because we want each of the strings in the list to be the target of 
			<feature_name>has</feature_name>.
		</paragraph>
	</paragraph></document>
