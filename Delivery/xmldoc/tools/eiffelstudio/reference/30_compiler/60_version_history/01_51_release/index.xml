<document output="studio" title="Major changes between  Eiffel Software  Eiffel 5.0 and  Eiffel Software  Eiffel 5.1">
	<meta_data/>
	<paragraph>
		<heading>
			<size>2</size>What's new
		</heading>
		<paragraph> </paragraph>
		<list ordered="false">
			<item>.NET generation now includes:
				<list ordered="false">
					<item>Support for multiple inheritance.</item>
					<item>Support for generics.</item>
					<item>Partial implementation of generic conformance (same as what was supported up to and including  Eiffel Software  Eiffel 4.2).</item>
					<item>Support for tuples and agents.</item>
					<item>Support for any existing Eiffel code that does not use C externals.</item>
					<item>Partial support for compiling Eiffel libraries using C externals (e.g. WEL)</item>
				</list>
				<paragraph>And the following limitations:</paragraph>
				<list ordered="false">
					<item>Eiffel classes cannot inherit from non-Eiffel .NET classes (but they can be clients).</item>
					<item>The compiler performances are rather poor now (both in terms of  memory usage and speed)</item>
				</list>
				<paragraph>Those limitations should disappear with 5.2 which will be the official release that fully supports .NET</paragraph>
				<list ordered="false">
					<item>Support for INTEGER_64 constants. Now a manifest integer value that is written in decimal or hexadecimal format that can't fit into an INTEGER_32 will be automatically promoted to an INTEGER_64 constant value.</item>
					<item>New feature access syntax for accessing constants, C/C++ externals and IL static externals. 
						<link>
							<url>../../10_ise_eiffel_specific/index.xml</url>
							<label>Check out more here</label>
						</link>.
					</item>
				</list>
			</item>
		</list>
		<heading>
			<size>2</size>Improvements
		</heading>
		<list ordered="false">
			<item>Compiler that is about 20% faster than 5.0.</item>
		</list>
		<heading>
			<size>2</size>Bug fixes
		</heading>
		<list ordered="false">
			<item>Fixed 
				<code><compiler_error>VAPE</compiler_error></code> errors that were not previously reported. Now 
				<code><compiler_error>VAPE</compiler_error></code> errors are checked against arguments of a feature used in a precondition and are also checked for a qualified call.
			</item>
			<item>Fixed a conformance bug that made a manifest array not conform to ANY.</item>
			<item>Fixed a generic conformance bug where an assignment attempt would change the behavior of the execution.</item>
			<item>Fixed a wrongly reported error by the compiler in the following case:
				<paragraph>In a system that has a generic class CLIENT with constraint `G -&gt; SUPPLIER create make end', where the creation procedure of SUPPLIER is exported to {CLIENT}. If another class has an attribute `x: CLIENT [SUPPLIER]' the compiler reports a 
					<code><compiler_error>VTCG</compiler_error></code> error, though it should accept the classes.
				</paragraph>
			</item>
			<item>Fixed a crash when one of the following command lines was used in a directory with no existing project that contains a file named "Ace":
				<code_block>ec -flat      -all
ec -short     -all
ec -flatshort -all
ec -flat      -all_and_parents
ec -short     -all_and_parents
ec -flatshort -all_and_parents</code_block>
			</item>
			<item>Fixed a bug in output display between standard output and error output. Doing the following:
				<code_block>io.put_string ("foo%N")
io.error.put_string ("bar%N")</code_block>
				<paragraph>you get the following output when simply launched from the command line:</paragraph>
				<code_block>foo
bar</code_block>
				<paragraph>however if you do:</paragraph>
				<code_block>my_program &gt;&amp; RESULT</code_block>
				<paragraph>to redirect both standard and error outputs to RESULT you get in the RESULT file this incorrect content:</paragraph>
				<code_block>bar
foo</code_block>
			</item>
			<item>Fixed a non reported 
				<code><compiler_error>VTEC</compiler_error></code> or 
				<code><compiler_error>VTCG</compiler_error></code> error when an invalid type used as actual generic parameters in an explicit type in a creation instruction.
			</item>
		</list>
	</paragraph></document>
