<document title="6 STARTING TO BROWSE" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>
			<link>
				<url>tour-help.xml</url>
				<label>Help reading this manual</label>
			</link>
		</paragraph>
		<paragraph>It was important to take a look at how EiffelStudio stores your project, but unless your idea of fun is to poke around directories to look at compiler-generated files that's not really the exciting part yet.  Among the most innovative aspects of EiffelStudio is a unique set of facilities to 
			<span>browse</span> through a software system.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Browsing style</content>
		</heading>
		<paragraph>Browsing -- traversing the structure -- is particularly important in object-oriented development and especially in Eiffel because of the speed at which you can construct sophisticated class structures, making use of inheritance, genericity, the client relation and information hiding, and subjecting features to all kinds of adaptations -- renaming, redefinition, undefinition, effecting -- that are key to the expressive power of the software, but call for smart tools to keep track of what's going on.  EiffelStudio's tools are second to none.  Among their key properties:</paragraph>
		<list ordered="false">
			<item>You can choose many different ways of browsing: sometimes you know the 
				<span>name</span> of a class or feature, and will get to it just by typing it; sometimes you want to traverse the system through its cluster-subcluster 
				<span>structure</span> ; often, you see a reference to element (class or feature) in the text of another element, and just want to get to it by following that reference, like a 
				<span>hyperlink</span> .  You'll be able to use all these techniques, and alternate freely between them.
			</item>
			<item>The browsing facilities are always available.  There is no "browser" in EiffelStudio; you just browse when you want to, by looking at the information you need.  You can do this while editing, debugging, or performing any other of the analysis, design, implementation, extension and maintenance tasks of system construction.  </item>
			<item>Although classes are stored in files and clusters in directories, you can for the most part forget about the file system.  Unlike most environments, which let you manipulate files containing software texts, EiffelStudio lets you concentrate on your 
				<span>development objects</span> -- the units that make sense for you: features, classes, clusters, systems.  You think in terms of those conceptual units, and don't have to worry about where they are stored.  Most of the time, you'll just forget about files and directories.
			</item>
			<item>You can produce many views of the development objects.  For a class, you may see the full text, the interface only, the inheritance structure, the clients, the features, and many other views.  You can even display 
				<span>graphical</span> views along with textual ones.  All these are fully browsable; you can go from one to the other as you please.
			</item>
		</list>
		<heading>
			<size>2</size>
			<content>A Development Window</content>
		</heading>
		<paragraph>Let's see how this works.  First, take a look at the EiffelStudio window:</paragraph>
		<div>
			<image_link>
				<url>index-8.png</url>
				<target>screenshots</target>
				<image>
					<url>index-8.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<note>
			<italic>If some parts are too small, just resize the window to arrive at something like what's on the figure.  When it first comes up, EiffelStudio initially uses a fairly small window, because it's designed to run on a 800x600 display, although of course a bigger display is recommended.  But as soon as you have resized it, EiffelStudio will come up, in the next session, with the size you've set.</italic>
		</note>
		<paragraph>You can see four panes, marked on the figure: 
			<code>
				<keyword>Features</keyword>
			</code>, 
			<code>
				<keyword>Class</keyword>
			</code>, 
			<code>
				<keyword>Clusters</keyword>
			</code>, 
			<code>
				<keyword>Context</keyword>
			</code> .  There will be others, such as 
			<code>
				<keyword>Search</keyword>
			</code>, and you can remove any of them, except 
			<code>
				<keyword>Class</keyword>
			</code>, at any time to make room for the others.
		</paragraph>
		<paragraph>So far we have talked about "
			<span>the</span> EiffelStudio window", but in fact that's not correct.  What you see is 
			<span>one</span> "
			<bold>Development Window</bold>", of which you can have as many as you wish.  Some people prefer to use a single development tool, avoiding screen clutter; others don't think twice about having lots of windows, taking the "desktop metaphor" to its full conclusion (some non-computer desktops are quite cluttered).  There are many ways to start a new Development Window; for example if you look at the entries in the 
			<code>
				<keyword>File</keyword>
			</code> menu at the top left -- don't select any of these entries yet, just look -- you'll see, among others, 
			<code>
				<keyword>New window</keyword>
			</code>, which would create a new Development Window.
		</paragraph>
		<paragraph>Whether you have one Development Window or many, each may have as its 
			<bold>target</bold> an element of the system: system, cluster, class (the most common case), feature, run-time object.  This simply means that the tool displays information about that element.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Retargeting by name</content>
		</heading>
		<paragraph>Our first example screen was targeted to the whole system.  To retarget it to a particular class, you can just type the class name -- if you know it -- into the Class Field at the top left:</paragraph>
		<div>
			<image_link>
				<url>index-9.png</url>
				<target>screenshots</target>
				<image>
					<url>index-9.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Let's use one of the most basic classes, 
			<code>
				<string>STRING</string>
			</code> from the Kernel Library of EiffelBase.  Bring the cursor to the Class Field, click to make it active, type 
			<code>
				<string>string</string>
			</code> (or 
			<code>
				<string>STRING</string>
			</code> ) and the Enter key.  As shown on the next figure, this retargets the tool to class 
			<code>
				<string>STRING</string>
			</code> .  Note that you didn't have to worry about where the class resides in the files of your computer.  Also, the Class Field will now show the target's class name, 
			<code>
				<string>STRING</string>
			</code>, in upper case, since that is the standard Eiffel convention for class names.  It doesn't matter, when you enter the name into the field, whether you use lower or upper case, or some mix; EiffelStudio will show the name back in all upper case.
		</paragraph>
		<div>
			<image_link>
				<url>index-10.png</url>
				<target>screenshots</target>
				<image>
					<url>index-10.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The Development Window is now targeted to class 
			<code>
				<string>STRING</string>
			</code> .  Each of the four panes contains a tool:
		</paragraph>
		<list ordered="false">
			<item>Features Tree, top-left: a tree view of all the features of the class, grouped by the feature categories ( 
				<code>
					<keyword>Initialization</keyword>
				</code>, 
				<code>
					<keyword>Access</keyword>
				</code>, 
				<span>...</span> ) as they appear in the class.
			</item>
			<item>Editing Tool, top-right: the source text of the class, editable.  For the moment the pane is too small to display much of interest -- it only shows the very first few lines -- but we'll enlarge it when we need to modify class texts.  (Not 
				<code>
					<string>STRING</string>
				</code>, though, as it's not the kind of class you want to change during your first session with EiffelStudio, so just wait a bit.  )
			</item>
			<item>Cluster Tree, bottom-left: a tree view of the clusters of the system.  </item>
			<item>Context Tool, bottom right: a bag full of neat tricks.  At the moment it just shows some general information about the system (where it resides, the name of its root class 
				<code>
					<string>TESTROOT</string>
				</code> ), but more generally it's there to give you all kinds of interesting views of the system, through the various tabs at the bottom: 
				<code>
					<keyword>Output</keyword>
				</code>, 
				<code>
					<keyword>Diagram</keyword>
				</code>, 
				<code>
					<keyword>Class</keyword>
				</code>, 
				<code>
					<keyword>Features</keyword>
				</code>, 
				<code>
					<keyword>Metrics</keyword>
				</code> .
			</item>
		</list>
		<heading>
			<size>2</size>
			<content>A peek at diagram</content>
		</heading>
		<paragraph>Note: The diagram tool is unavailable in the free version of EiffelStudio.  </paragraph>
		<paragraph>There's indeed a lot in the Context Tool, too much to see right now, but to feed our curiosity let's just take a peek at the Diagram View.  Click the 
			<code>
				<keyword>Diagram</keyword>
			</code> Tab at the bottom:
		</paragraph>
		<div>
			<image_link>
				<url>index-11.png</url>
				<target>screenshots</target>
				<image>
					<url>index-11.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This displays a class diagram in the Context Tool:</paragraph>
		<div>
			<image_link>
				<url>index-12.png</url>
				<target>screenshots</target>
				<image>
					<url>index-12.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<note>
			<italic>If nothing appears in the Context Tool when you click the Diagram Tab, that's because the Context Tool and the Class View are not linked.  Linking the two tools together will ensure that whenever a change is made in one tool the other will update to reflect that change.  To link the tools select the menu entry </italic>
			<code>
				<keyword>View</keyword>
			</code>
			<code>
				<symbol>--&gt;</symbol>
			</code>
			<code>
				<keyword>Link context tool</keyword>
			</code>
			<italic>; this will display the diagram as shown.  We'll see the explanation for this behavior in </italic>
			<link>
				<label>
					<italic>Isolating the context, pg 68</italic>
				</label>
				<url>index-11.xml#89659</url>
			</link>
		</note>
		<paragraph>The diagram is cropped to the available area; to get the whole picture, resize the window from the bottom-right corner.  You can now see the inheritance structure:</paragraph>
		<div>
			<image_link>
				<url>index-13.png</url>
				<target>screenshots</target>
				<image>
					<url>index-13.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The red arrows show 
			<span>inheritance</span> relations: 
			<code>
				<string>STRING</string>
			</code> inherits from 
			<code>
				<string>INDEXABLE</string>
			</code> and so on.  We'll see later how to display the other key inter-class relation, 
			<span>client</span>, but it's not particularly interesting for 
			<code>
				<string>STRING</string>
			</code> .  The default placement of the classes is quite good in this case, but if you don't like it you can change it; your changes will be retained the next time you bring up this diagram, in this session or a later one.  (That's part of the information the 
			<code>
				<keyword>Diagram</keyword>
			</code> directory keeps.  ) It will also be used in Web diagrams if you choose to generate an HTML form.  To move a class bubble, just use standard drag-and-drop.  For example you may move everything to the left and make the figure more compact:
		</paragraph>
		<div>
			<image_link>
				<url>index-14.png</url>
				<target>screenshots</target>
				<image>
					<url>index-14.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Later on you will learn how to use the Diagram View not just to display system structures graphically but also to build and modify systems.  EiffelStudio indeed integratesthe functionality of a CASE (Computer-Aided Software Engineering) workbench, seamlessly integrated with the programming facilities.  But for the moment this peek at the Diagram View is enough, so let's get back to browsing.  </paragraph>
		<heading>
			<size>2</size>
			<content>Retargeting from the Cluster Tree</content>
		</heading>
		<paragraph>Your first browsing action used a class of which you knew the name, 
			<code>
				<string>STRING</string>
			</code> .  What if you don't know what's in the system and want to explore it? Among other techniques, you can let the Cluster Tree, in the Cluster Tool at the bottom left of the Development Window, guide you through the system's structure:
		</paragraph>
		<div>
			<image_link>
				<url>index-15.png</url>
				<target>screenshots</target>
				<image>
					<url>index-15.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>An Eiffel system, as you know, is organized into clusters, which you can structure hierarchically into subclusters.  Here we see the top two clusters: 
			<code>
				<string>base</string>
			</code>, containing the EiffelBase library; and 
			<code>
				<string>root</string>
			</code>, containing the few classes specific to our Guided Tour system.  Let's go into 
			<code>
				<string>base</string>
			</code>, ISE's open-source library of fundamental reusable mechanisms.  Click the little 
			<code>
				<keyword>+</keyword>
			</code> sign to the left of its name; this expands the first level of the 
			<code>
				<string>base</string>
			</code> cluster, to show its four subclusters: 
			<code>
				<string>event</string>
			</code> for event handling, 
			<code>
				<string>kernel</string>
			</code> for the Kernel Library, 
			<code>
				<string>structures</string>
			</code> for the Data Structure Library, and 
			<code>
				<string>support</string>
			</code> for additional supporting mechanisms.
		</paragraph>
		<paragraph>
			<image>
				<url>index-16.png</url>
			</image>
		</paragraph>
		<paragraph>The most extensive of these EiffelBase libraries is 
			<code>
				<string>structures</string>
			</code>, which contains implementations of major data structures and algorithms of computing science.  Click the 
			<code>
				<keyword>+</keyword>
			</code> next to 
			<code>
				<string>structures</string>
			</code> to see its own subclusters:
		</paragraph>
		<div>
			<image_link>
				<url>index-17.png</url>
				<target>screenshots</target>
				<image>
					<url>index-17.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<note>
			<italic>If you initially don't see as many details as shown on this figure, you may get them by resizing the window, moving the vertical pane boundary, and possibly scrolling.   </italic>
		</note>
		<paragraph>The EiffelBase Data Structure library and its subclusters are described in the book 
			<span>
				<link>
					<url>http://www.eiffel.com/doc/#rs</url>
					<label>Reusable Software</label>
				</link>
			</span>.  Let's go to one of the most frequently used subclusters, 
			<code>
				<string>list</string>
			</code>, containing implementations of list structures.  Click the 
			<code>
				<keyword>+</keyword>
			</code> next to 
			<code>
				<string>list</string>
			</code> .  This time, since list is a terminal cluster, it's not subclusters you'll see, but 
			<bold>classes</bold>, identified by small ellipses:
		</paragraph>
		<div>
			<image_link>
				<url>index-18.png</url>
				<target>screenshots</target>
				<image>
					<url>index-18.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The ellipse, or "bubble", is indeed throughout EiffelStudio, as in the Business Object Notation (BON, the underlying graphical convention), the distinctive symbol for classes; remember the larger bubbles showing classes in the Diagram View a few moments ago.  </paragraph>
		<paragraph>Our second technique for retargeting a Development Window to a class (other than typing the class name as we did before) is to click the class in the Cluster Tree.  Do this now: click 
			<code>
				<string>LIST</string>
			</code> in the tree.  It doesn't matter whether you click on the class name or the adjacent bubble.  This retargets the tool to class 
			<code>
				<string>LIST</string>
			</code> .  Because the Context Tool is still in 
			<code>
				<keyword>Diagram</keyword>
			</code> view, it will display the inheritance structure for the new target class:
		</paragraph>
		<div>
			<image_link>
				<url>index-19.png</url>
				<target>screenshots</target>
				<image>
					<url>index-19.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>While this view is being produced you may see (or just get a glimpse of, if your machine is fast) messages indicating that it's producing the diagram for 
			<code>
				<string>LIST</string>
			</code> .  In a moment we'll switch views in the Context Tool as we won't need the diagrams.
		</paragraph>
		<paragraph>As the tool is now targeted to 
			<code>
				<string>LIST</string>
			</code>, the Class Field at the top left now shows the name of that class, exactly as if we had typed that name, the way we did with 
			<code>
				<string>STRING</string>
			</code> in the previous method of retargeting.
		</paragraph>
		<heading>
			<size>2</size>
			<content>Moving back and forth</content>
		</heading>
		<paragraph>Here now is a third way to retarget.  Towards the top-left part of the Development Window there are 
			<code>
				<keyword>Back</keyword>
			</code> and 
			<code>
				<keyword>Forth</keyword>
			</code> buttons, which will enable you to revisit classes already seen during the current session:
		</paragraph>
		<div>
			<image_link>
				<url>index-20.png</url>
				<target>screenshots</target>
				<image>
					<url>index-20.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>Click the 
			<code>
				<keyword>Back</keyword>
			</code> button.  This retargets the tool to the class you visited previously: 
			<code>
				<string>STRING</string>
			</code> .  The 
			<code>
				<keyword>Forth</keyword>
			</code> button, immediately to the right of 
			<code>
				<keyword>Back</keyword>
			</code>, becomes active.  Click it to retarget back to 
			<code>
				<string>LIST</string>
			</code> .
		</paragraph>
		<paragraph>Note that all buttons of the interface have a "tooltip": if you move the cursor on a button, 
			<bold>without clicking</bold>, and wait a second or so, a small message comes up, explaining the purpose of the button.  You may try this now on the 
			<code>
				<keyword>Back</keyword>
			</code> and 
			<code>
				<keyword>Forth</keyword>
			</code> buttons.
		</paragraph>
		<heading>
			<size>2</size>
			<content>The Target History</content>
		</heading>
		<paragraph>As a fourth way to retarget -- there are more, and after this one we'll stop counting -- you can also use the Target History menu, which you can bring up through the little arrow to the right of the Class Field:</paragraph>
		<div>
			<image_link>
				<url>index-21.png</url>
				<target>screenshots</target>
				<image>
					<url>index-21.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>If you click this arrow -- the little black triangle -- you will see a menu of all your recent targets.  Doing this now will only show the two classes visited so far, 
			<code>
				<string>STRING</string>
			</code> and 
			<code>
				<string>LIST</string>
			</code>, but later on there will be more entries.  By default EiffelStudio remembers 10 classes; this is one of the settings you can change later if you wish, through the menu 
			<code>
				<keyword>Tools</keyword>
			</code>
			<code>
				<symbol>--&gt;</symbol>
			</code>
			<code>
				<keyword>Preferences</keyword>
			</code>.  (There's no point in doing this now.  )
		</paragraph>
		<heading>
			<size>2</size>
			<content>Adding to Favorites</content>
		</heading>
		<paragraph>If you find yourself often needing to examine a particular class, you can add it to your "Favorites", similar to the favorites, also called 
			<span>bookmarks</span>, which you use to retain interesting pages in a Web browser.
		</paragraph>
		<paragraph>It's easy to add the current target -- currently, 
			<code>
				<string>LIST</string>
			</code> -- to your Favorites.  Do it now: go to the 
			<code>
				<keyword>Favorites</keyword>
			</code> menu and select 
			<code>
				<keyword>Add to favorites</keyword>
			</code> .  Now display the favorites; one way is to go back to that same Favorites menu and select 
			<code>
				<keyword>Show favorites</keyword>
			</code>.  The Favorites Tool appears below the Cluster Tree:
		</paragraph>
		<div>
			<image_link>
				<url>index-22.png</url>
				<target>screenshots</target>
				<image>
					<url>index-22.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>This also means one more way to retarget a Development Window: click a class in the Favorites Tool. 
			<span>Two</span> ways actually, since even if you don't see the Favorites Tool the class will appear in the 
			<code>
				<keyword>Favorites</keyword>
			</code> menu and you can select it there.
		</paragraph>
		<paragraph>Right now we don't need the Favorites Tool, so you can get rid of it by either selecting 
			<code>
				<keyword>Hide favorites</keyword>
			</code> in the 
			<code>
				<keyword>Favorites</keyword>
			</code> menu or clicking the little Close icon at the top right of the Favorites Tool:
		</paragraph>
		<div>
			<image_link>
				<url>index-23.png</url>
				<target>screenshots</target>
				<image>
					<url>index-23.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<heading>
			<size>2</size>
			<content>Starting a new tool</content>
		</heading>
		<paragraph>With all the techniques seen so far, you were able to retarget the current Development Window to a new class.  As noted, you may also wish to have two or more Development Windows targeted to different classes; this is useful to keep track of several things at one.  A simple way to start a new tool on a class is to find the class somewhere in the interface and 
			<bold>control-right-click</bold> it.
		</paragraph>
		<paragraph>Here, for example, the diagram in the Context Tool shows, at the top, a yellow bubble for the class 
			<code>
				<string>CHAIN</string>
			</code>, a parent of 
			<code>
				<string>LIST.  </string>
			</code> (You can see it for example on the next-to-last figure.  ) Go to that bubble and control-right-click it, that is to say, click with the rightmost button of the mouse while holding the CONTROL key on the keyboard.  This starts a new Development Window, targeted to the chosen class, 
			<code>
				<string>CHAIN</string>
			</code> :
		</paragraph>
		<div>
			<image_link>
				<url>index-24.png</url>
				<target>screenshots</target>
				<image>
					<url>index-24.png</url>
					<width>100</width>
				</image>
			</image_link>
		</div>
		<paragraph>The place where we found the class 
			<code>
				<string>CHAIN</string>
			</code> in the original tool (the one targeted to 
			<code>
				<string>LIST</string>
			</code> ) was the bubble representing the class in the Diagram View.  But that's just one possibility.  A general principle of EiffelStudio is 
			<bold>semantic consistency</bold> : when you want to work with a development object -- a class, a feature, a cluster -- you can grab it wherever it appears in the interface, and in whatever format it is displayed: you might have spotted it be in the Diagram View, in the text of a class in the Editing Tool, in the Cluster or Feature Tree, or in any of the class documentation formats that we will soon see; and the form under which you found it may be text -- the name of the class in a text document -- or some graphical representation, such as a class bubble in a diagram.  These variants don't matter: if the class or other development object catches your fancy, you can do whatever operations make sense for it, such as Control-right-click to start a new development object targeted to it, or any of the other operations we'll see next.
		</paragraph>
		<paragraph>While you are at it, try a couple of other ways to create a new Development Window.  Go to 
			<code>
				<keyword>File</keyword>
			</code>
			<code>
				<symbol>--&gt;</symbol>
			</code>
			<code>
				<keyword>New window</keyword>
			</code> ; this creates a new tool, untargeted.  The title bar says "
			<code>
				<keyword>Empty development tool #1</keyword>
			</code> ".  You can get the same effect by clicking the Create New Window icon, leftmost on the top row of buttons, just below "
			<code>
				<keyword>File</keyword>
			</code>".  The corresponding keyboard accelerator is CTRL- 
			<code>
				<keyword>N</keyword>
			</code> .
		</paragraph>
		<paragraph>
	<link>
		<url>index-06.xml</url>
		<label>&lt;&lt; Previous</label>
	</link> 
	<link>
		<url>index-08.xml</url>
		<label>Next &gt;&gt;</label>
	</link>
</paragraph>
	</paragraph></document>
