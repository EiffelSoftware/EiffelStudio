<document title="Eiffel for .NET Terminology">
	<meta_data>
		<help>
			<toc>
				<envision_title>Naming Conventions</envision_title>
				<envision_location>EiffelEnvision\A Guide to Eiffel for .NET\The Eiffel for .NET Language\Conventions</envision_location>
				<envision_pseudo_name>10</envision_pseudo_name>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<heading>
			<size>2</size>Eiffel Terminology Defined for C# and VB.NET Programmers
		</heading>
		<paragraph>Eiffel programmers feel that it is important to have a set of precise terms with which to communicate about our method of software development. Like everything else in Eiffel, the use of certain terms is not accidental. They were chosen carefully to impart particular meaning. Many of the Terms that Eiffel programmers use are different from those used by developers using other object-oriented languages. But that does not mean that their meanings will be foreign to you. If you have some understanding of object-oriented technology, you will find that in many cases the Eiffel terms describe concepts with which you were already familiar, just under different names, and possibly with slightly different meanings. </paragraph>
		<paragraph>The intention of this glossary is to give you a list of these terms with extended definitions that will relate the Eiffel terms to language with which you may be more familiar. Also, you will find an occasional term which comes from other programming cultures but is not used in Eiffel. </paragraph>
		<table>
			<row>
				<cell>Term</cell>
				<cell>Definition</cell>
			</row>
			<row>
				<cell>Ancestors</cell>
				<cell>The set of Classes from which a particular Class Inherits, including the Class itself. Somewhat analogous to Bases and Interfaces in C# and VB.NET (see Proper Ancestors).</cell>
			</row>
			<row>
				<cell>Argument</cell>
				<cell>An object which is passed to a routine. Called a Parameter in C# and VB.NET.</cell>
			</row>
			<row>
				<cell>Assertion</cell>
				<cell>A declaritive expression that evaluates to true or false. Assertions in Eiffel are of different types and are used primarily for expressing software specification to potential Reuse Consumers and ensuring that executing software complies with specification. Any violation of an assertion causes an exception, and is generally indicative of a defect in the software system. </cell>
			</row>
			<row>
				<cell>Attribute</cell>
				<cell>A Feature which represents storage used in every instance of a class. Used like a Field member in C#. </cell>
			</row>
			<row>
				<cell>Class</cell>
				<cell>Software text which is the static definition of a Type (or the pattern for a Type in the case of a Generic Class). Used in very nearly the same way as in C#. In C# Classes are used for reference types and Structures for value types. In Eiffel, Classes are used for both, but see Expanded Class.</cell>
			</row>
			<row>
				<cell>Class invariant</cell>
				<cell>An Assertion on a Class which defines the valid or stable state for objects which are instances of the Class. All instances of the Class must comply with the Class Invariant at any time that they are accessible to Clients. </cell>
			</row>
			<row>
				<cell>Client</cell>
				<cell>A Class whose role is that of Client in a Client/Supplier Relationship with another Class.</cell>
			</row>
			<row>
				<cell>Client/Supplier relationship</cell>
				<cell>One of the two Relationships that can exist between Classes. Client/Supplier is characterized by a situation in which one Class, called the Client, has or uses, instances of the other Class, called the Supplier. For example, if class "X" declares an entity "y" of type STRING, then Class X becomes a Client to Class STRING as a result. At the same time, Class STRING becomes a Supplier to class X.</cell>
			</row>
			<row>
				<cell>Cluster</cell>
				<cell>A group of classes (or recursively, clusters) which share some criteria which justifies their being grouped together. Classes are usually clustered together because they model similar entities or have similar functionality. For example, in the Eiffel Base Library, there is a cluster called "structures" which contains clusters for data structures. One cluster is "list" which contains classes like LINKED_LIST and TWO_WAY_LIST. Another "structures" cluster is "dispensers" which contains classes like "ARRAYED_STACK" and "PRIORITY_QUEUE". When .NET assemblies are made available to Eiffel programmers, each assembly is viewed as a cluster.</cell>
			</row>
			<row>
				<cell>Command</cell>
				<cell>A Class Feature which can change the state of the instance to which it is applied, and does not return a result. It is the Reuse Consumer's view of a Procedure.</cell>
			</row>
			<row>
				<cell>Contract</cell>
				<cell>Like a contract between human parties, a software Contract is a formal agreement between software components, Classes in the case of Eiffel. The contract is written in the Assertions of a Supplier Class and specifies in precise terms those conditions with which potential Clients may interact with the Supplier. The contract for a particular Class is composed of the contracts for each Exported Routine of the Class as well as the Class Invariant.</cell>
			</row>
			<row>
				<cell>Creation Procedure</cell>
				<cell>A Procedure which can be used to initialize and instance of a Class. Similar to a Constructor in C# or VB.NET, but slightly different. A Creation Procedure can be applied when an object is being created, but can also be applied later to reinitialize an existing object (such is not the case with Constructors). Also, Creation Procedures are responsible for ensuring that newly created objects comply with their Class Invariants.</cell>
			</row>
			<row>
				<cell>Deferred Class</cell>
				<cell>A class which has at least one Deferred Feature. The term "Deferred" is used in the Eiffel culture like the term "Abstract" in .NET. Like an abstract class in C# or VB.NET, it is not possible to make direct runtime instances of a Deferred Class.</cell>
			</row>
			<row>
				<cell>Deferred feature</cell>
				<cell>A Class Feature which has not implementation. Like a virtual method in C#. Can apply to Commands or Queries.</cell>
			</row>
			<row>
				<cell>Descendents</cell>
				<cell>The set of all Classes which Inherit from a particular Class, including the Class itself. Somewhat analogous to subclasses in C# and VB.NET (see Proper Descendants).</cell>
			</row>
			<row>
				<cell>Design by contract</cell>
				<cell>A method of developing software in which a System is composed of a set of interacting Classes which cooperate based upon precisely defined Contracts.</cell>
			</row>
			<row>
				<cell>Direct instance</cell>
				<cell>A runtime Object of some type, based directly on the definition from a specific Effective Class. See Instance for more information. Usually used in conjunction with the class name, e.g. "an instance of class POLYGON". </cell>
			</row>
			<row>
				<cell>Effective class</cell>
				<cell>A Class which has no Deferred Features. Only if a Class is Effective can it have direct runtime instances. Effective classes are called Concrete Classes in some programming cultures.</cell>
			</row>
			<row>
				<cell>Eiffel Metadata Consumer</cell>
				<cell>Applicable to Eiffel for .NET only, this is a mechanism that works behind the scenes to make Types from .NET assemblies available to Eiffel programmers. The Metadata Consumer reconciles the differences between the naming conventions of Eiffel and .NET by providing an Eiffel compliant view of the Types in .NET assemblies.</cell>
			</row>
			<row>
				<cell>Expanded Class</cell>
				<cell>Like a value type in C#, but with some restrictions. .NET value types are viewed to Eiffel programmers as Expanded Classes. For reference types, an object field holds a reference to a runtime object (or is Void). For value types, the object field holds the fields of the runtime object. A Type based on an Expanded Class is an Expanded Type.</cell>
			</row>
			<row>
				<cell>Exported feature</cell>
				<cell>A Feature which is available to Client Classes. Analogous to "public" in C# and VB.NET. However, Exporting in Eiffel has fine granularity. It is possible to make certain Features available to Clients of all types or only to Clients which conform to certain named Classes (vs Public, Protected, Private)</cell>
			</row>
			<row>
				<cell>Feature</cell>
				<cell>Any of a Class's Attributes or Routines. Used similarly to the term Member as in C#. In Eiffel class features can be only Attributes or Routines.</cell>
			</row>
			<row>
				<cell>Feature Application</cell>
				<cell>The process of using the Class Features on instances of the Class. The model for Feature Application is "x.f(a,...)" where "x" is an entity which will be attached to some object at runtime, "f" is some Feature of the Class on which x is based, and "a,..." is an optional list of arguments which may be appropriate for some Routines. Feature "f" is "applied" to the object attached to "x". Feature Application may involve calling Routines, or may only involve returning the value of an Attribute from memory. Feature application is sometimes called "feature call".</cell>
			</row>
			<row>
				<cell>Function</cell>
				<cell>A Routine that returns a result. In C# function results can be typed as "void", meaning that there is no result returned. Eiffel functions cannot be typed "void" (see Procedure). All Functions must specify a result type. Of course, if the result type is a reference type, there could be cases in which the reference resulting from some specific call might be Void. </cell>
			</row>
			<row>
				<cell>Generic Class</cell>
				<cell>A Class which is written using parameters to represent other Classes or Types to enhance its reusability. For example, the Class LINKED_LIST [G] is a generic class in which "G" represents some other Class. So, LINKED_LIST is written independent of the items an instance of the list will hold. We cannot declare a LINKED_LIST without specifiying a Class to substitute for "G". If we want a list of cats we can declare one by using the Type: LINKED_LIST [CAT]. Generic Classes are not currently implemented in .NET, so there's no corresponding concept in C#. </cell>
			</row>
			<row>
				<cell>Inheritance</cell>
				<cell>One of the two Relationships that can exist between Classes. If Class B inherits from Class A, then every feature in Class A is potentially available to instances of Class B. Also, when ever an instance of Class A is required, an instance of Class B will suffice. Inheritance is used in Eiffel much the same as in C#. The Eiffel model allows full, controlled multiple inheritance, though. Eiffel Classes may inherit from multiple Concrete Classes and name clashes are handled through a process called Feature Adaptation.</cell>
			</row>
			<row>
				<cell>Heir</cell>
				<cell>The adjacent Proper Descendants of a Class. If class C inherits from class B and class B inherits from class A, then class A's Proper Descendants include B and C, but A's Heirs only include B. </cell>
			</row>
			<row>
				<cell>Instance</cell>
				<cell>A runtime Object of some type, based on the definition from a Class. Usually used in conjunction with the class name, e.g. "an instance of class POLYGON". In contrast with Direct Instance, an Instance of class POLYGON is a Direct Instance of POLYGON or any Proper Descendant of POLYGON such, perhaps, as RECTANGLE. So it its possible to have Objects which are Instances of Deferred Classes, but it is impossible to have Objects which are Direct Instances of Deferred Classes. </cell>
			</row>
			<row>
				<cell>Interface</cell>
				<cell>Not supported as such in Eiffel. Used in C# and VB.NET, Interfaces provide sets of specific Class Features which must be effected by any Concrete Class that "implements" the Interface. There is no concept of Interface in Eiffel that is separate from the concept of Class. So, Interfaces from .NET appear to Eiffel programmers to be completely Deferred (abstract) Classes.</cell>
			</row>
			<row>
				<cell>Manifest string</cell>
				<cell>A quoted string used in source code, for example the "Hello World!" in:
					<line_break/>my_string := "Hello World!"
					<line_break/>This is often called a "literal" string in other languages. In Eiffel, the quoted string "Hello World!" above is, by virtue of its presence, an instance of the Eiffel STRING class. In Eiffel there are manifest constants of other types as well, like numbers coded explicitly in software text,  and the keywords True and False as the manifest booleans.
				</cell>
			</row>
			<row>
				<cell>Module</cell>
				<cell>A syntactical grouping of software text. Source code is divided into Modules in order to help organize it in some meaningful way or to achieve some goal. </cell>
			</row>
			<row>
				<cell>Object</cell>
				<cell>An instance of a Class during system execution. As such, Objects only exist at runtime. </cell>
			</row>
			<row>
				<cell>Overloading</cell>
				<cell>Not supported in Eiffel. Overloading is the ability to have more than one Feature with the same name, varying only by the Types of its Arguments. Overloading is supported by the underlying object model in .NET. As a result many classes in .NET assemblies have overloaded methods. The Eiffel Metadata Consumer disambiguates the overloaded names so that by the time you see them in the Eiffel context they appear no longer to be overloaded.</cell>
			</row>
			<row>
				<cell>Parent</cell>
				<cell>The adjacent Proper Ancestors of a Class. If class C inherits from class B and class B inherits from class A, then class C's Proper Ancestors include A and B, but C's Parents only include B. </cell>
			</row>
			<row>
				<cell>Postcondition</cell>
				<cell>An assertion coded on a Routine which defines the conditions will be true upon successful completion of the Routine. It is the responsibility of the Routine to ensure that the Postcondition holds after the Routine executes.</cell>
			</row>
			<row>
				<cell>Precondition</cell>
				<cell>An assertion coded on a Routine which defines the conditions under which the Routine can complete successfully. It is the responsibility of the Client to ensure that the Precondition holds before attempting to call the Routine.</cell>
			</row>
			<row>
				<cell>Procedure</cell>
				<cell>A Routine that does not return a result. Much like a "void" function in C#.</cell>
			</row>
			<row>
				<cell>Proper ancestors</cell>
				<cell>The set of all Classes from which a particular Class Inherits, excluding the Class itself. </cell>
			</row>
			<row>
				<cell>Proper descendents</cell>
				<cell>The set of all Classes which Inherit from a particular Class, excluding the Class itself. </cell>
			</row>
			<row>
				<cell>Query</cell>
				<cell>A Class Feature which returns information from the instance to which it is applied. Queries are the Reuse Consumer's view of Attributes and Functions. </cell>
			</row>
			<row>
				<cell>Reference type</cell>
				<cell>A type whose instances are accessed via a reference. For reference types, an object field holds a reference to a runtime object (or is Void). This is in contrast to value types, in which case, the object field holds the fields of the runtime object. In Eiffel, reference types are based on reference classes, i.e., any class which is not an Expanded Class.</cell>
			</row>
			<row>
				<cell>Relationship</cell>
				<cell>An association between two classes. There are only two types of Relationships that can exist between classes: Client/Supplier and Inheritance. </cell>
			</row>
			<row>
				<cell>Reuse consumer</cell>
				<cell>The role a software engineer assumes when in the process of making use of Classes or Types already in existence. As a reuse consumer, the engineer is interested primarily in the specification of those Classes or Types being used, rather than their implementation.</cell>
			</row>
			<row>
				<cell>Reuse producer</cell>
				<cell>The role a software engineer assumes when in the process or creating a new Class. In this role the engineer attempts to produce a product which will be reusable by him or herself and other engineers in the future. In the Eiffel culture, whenever a software engineer creates a class, it is as a Reuse Producer, and with the thought that each new class has the potential to become reusable.</cell>
			</row>
			<row>
				<cell>Root class</cell>
				<cell>For any System, the Class which will be instantiated to start the system. Specified by project settings.</cell>
			</row>
			<row>
				<cell>Root procedure</cell>
				<cell>A Creation Procedure of the Root Class of a System which will be applied to an initial instance of the Root Class at System startup. Similar to Main() in C# and VB.NET, but with the important difference that the fact that a particular Creation Procedure is the Root Procedure for a System is not define in the Class itself as with Main(). Rather, it is specified outside the Class in project settings. This helps Reuse Producers keep Classes more autonomous and therefore potentially more reusable.</cell>
			</row>
			<row>
				<cell>Routine</cell>
				<cell>A computational Class Feature which is either a Function or Procedure. Routines are the executable parts of a Class. Routines are similar to Methods in C#.</cell>
			</row>
			<row>
				<cell>Software specification</cell>
				<cell>A statement of how a software element is to be used and what it will do when executed. Ideally, this is stated in terms that do not betray how the software does what it does.In Eiffel, specification is included in the code, rather than a separate document. For a routine, it consists of its call signature and its contract. For a class, it consists of the signatures and contracts for all public features.</cell>
			</row>
			<row>
				<cell>Supplier</cell>
				<cell>A Class whose role is that of Supplier in a Client/Supplier Relationship with another Class.</cell>
			</row>
			<row>
				<cell>System</cell>
				<cell>A set of Classes related by the two Relationships which can be compiled to produce an executable. </cell>
			</row>
			<row>
				<cell>Type</cell>
				<cell>The description of a set of Objects equipped with certain Features.</cell>
			</row>
		</table>
	</paragraph></document>
