<document title="7 Exceptions">
	<meta_data>
		<help>
			<toc>
				<envision_location>EiffelEnvision\A Guide to Eiffel for .NET\Invitation to Eiffel</envision_location>
				<envision_pseudo_name>70</envision_pseudo_name>
				<envision_title>Exceptions</envision_title>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<paragraph>Whenever there is a contract, the risk exists that someone will break it.  This is where exceptions come in.  </paragraph>
		<paragraph>Exceptions -- contract violations -- may arise from several causes.  One is an assertion violation, if you've selected run-time assertion monitoring.  Another is a signal triggered by the hardware or operating system to indicate an abnormal condition such as arithmetic overflow, or an attempt to create a new object when there's not enough memory available.  </paragraph>
		<paragraph>Unless a routine has made specific provision to handle exceptions, it will 
			<bold>fail</bold> if an exception arises during its execution.  This in turn provides one more source of exceptions: a routine that fails triggers an exception in its caller.  
		</paragraph>
		<paragraph>A routine may, however, handle an exception through a 
			<code>
				<keyword>rescue</keyword>
			</code> clause.  This optional clause attempts to "patch things up" by bringing the current object to a stable state (one satisfying the class invariant).  Then it can terminate in either of two ways:<line_break/>
		<list ordered="false">
			<item>The 
				<code>
					<keyword>rescue</keyword>
				</code> clause may execute a 
				<code>
					<keyword>retry</keyword>
				</code>  instruction, which causes the routine to restart its execution from the beginning, attempting again to fulfill its contract, usually through another strategy.  This assumes that the instructions of the 
				<code>
					<keyword>rescue</keyword>
				</code> clause, before the 
				<code>
					<keyword>retry</keyword>
				</code>, have attempted to correct the cause of the exception.  
			</item>
			<item>If the 
				<code>
					<keyword>rescue</keyword>
				</code> clause does not end with 
				<code>
					<keyword>retry</keyword>
				</code>, then the routine fails: it returns to its caller, immediately triggering an exception.  (The caller's 
				<code>
					<keyword>rescue</keyword>
				</code> clause will be executed according to the same rules.)
			</item>
		</list></paragraph>
		<paragraph>The principle is that 
			<bold>a routine must either succeed or fail</bold>: it either fulfills its contract, or not; in the latter case it must notify its caller by triggering an exception.  
		</paragraph>
		<paragraph>Usually, only a few routines of a system will explicitly include a 
			<code>
				<keyword>rescue </keyword>
			</code>clause.  A routine that doesn't have an explicit 
			<code>
				<keyword>rescue</keyword>
			</code> is considered to have an implicit one, which calls a routine 
			<code>
				<feature_name>default_rescue</feature_name>
			</code> that by default does nothing, so that an exception will cause the routine to fail immediately, propagating the exception to the caller.  
		</paragraph>
		<paragraph>An example using the exception mechanism is a routine 
			<code>
				<feature_name>attempt_transmission</feature_name>
			</code> that tries to transmit a message over a phone line.  The actual transmission is performed by an external, low-level routine 
			<code>
				<feature_name>transmit</feature_name>
			</code>; once started, however, 
			<code>
				<feature_name>transmit</feature_name>
			</code> may abruptly fail, triggering an exception, if the line is disconnected.  Routine 
			<code>
				<feature_name>attempt_transmission</feature_name>
			</code> tries the transmission at most 50 times; before returning to its caller, it sets a boolean attribute 
			<code>
				<feature_name>successful</feature_name>
			</code> to  
			<code>
				<keyword>True</keyword>
			</code>
			<code>
				<keyword> or </keyword>
			</code>  
			<code>
				<keyword>False</keyword>
			</code> depending on the outcome.  Here is the text of the routine:
		</paragraph>
		<code_block>
<feature_name>attempt_transmission</feature_name> <symbol>(</symbol><local_variable>message</local_variable><symbol>:</symbol> <class_name>STRING</class_name><symbol>)</symbol> <keyword>is</keyword> 
		<comment>-- Try to transmit message, at most 50 times.
		-- Set successful accordingly.</comment>
	<keyword>local</keyword> 
		<local_variable>failures</local_variable><symbol>:</symbol> <class_name>INTEGER</class_name> 
	<keyword>do</keyword> 
		<keyword>if</keyword> <local_variable>failures</local_variable> &lt; 50 <keyword>then</keyword>
			<feature_name>transmit</feature_name> <symbol>(</symbol><local_variable>message</local_variable><symbol>)</symbol>
			<feature_name>successful</feature_name> <symbol>:</symbol><symbol>=</symbol> True
		<keyword>else</keyword> 
			<feature_name>successful</feature_name> <symbol>:</symbol><symbol>=</symbol> False
		<keyword>end</keyword> 
	<keyword>rescue</keyword> 
		<local_variable>failures</local_variable> <symbol>:</symbol><symbol>=</symbol> <local_variable>failures</local_variable> <symbol>+</symbol> 1
		<keyword>retry</keyword> 
	<keyword>end</keyword> 
</code_block>
		<paragraph>Initialization rules ensure that 
			<code>
				<local_variable>failures</local_variable>
			</code>, a local entity, is set to zero on entry.  
		</paragraph>
		<paragraph>This example illustrates the simplicity of the mechanism: the 
			<code>
				<keyword>rescue</keyword>
			</code> clause never attempts to achieve the routine's original intent; this is the sole responsibility of the body (the 
			<code>
				<keyword>do</keyword>
			</code> clause).  The only role of the 
			<code>
				<keyword>rescue</keyword>
			</code> clause is to clean up the objects involved, and then either to fail or to retry.  
		</paragraph>
		<paragraph>This disciplined exception mechanism is essential for software developers, who need protection against unexpected events, but cannot be expected to sacrifice safety and simplicity to pay for this protection.  </paragraph>
	</paragraph></document>
