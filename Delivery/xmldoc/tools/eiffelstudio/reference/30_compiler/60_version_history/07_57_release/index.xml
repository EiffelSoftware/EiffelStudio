<document title="Major changes between ISE Eiffel 5.6 and ISE Eiffel 5.7">
	<meta_data>
		<help>
			<toc>
				<envision_location>EiffelEnvision\Introduction to EiffelEnvision\History and Known Issues\Compiler History</envision_location>
			</toc>
		</help>
	</meta_data>
	<paragraph>
		<heading><size>2</size>What's new</heading>
		<seealso>See also: <link><label>Differences between standard ECMA-367 and Eiffel Software implementation</label><url>../../10_ise_eiffel_specific/ecma.xml</url></link></seealso>
		<list ordered="false">
			<item>Support for new expanded semantics defined in ECMA-367. The current limitations are: no copy semantics in the .NET code generation, and still no generic conformance.</item>
			<item>Inline agents as defined in ECMA-367 with the limitation to only accept the do form.</item>
			<item>Added possibility to define agents on attributes or externals.</item>
			<item>Named tuples as defined in ECMA-367.</item>
			<item>Added <class_name>PREDICATE</class_name> class for agent based on boolean queries.</item>
			<item>Added <class_name>CHARACTER_32</class_name> for Unicode support.</item>
		</list>
		<heading><size>2</size>Improvements</heading>
		<list ordered="false">
			<item>Improved memory management:
				<list ordered="false">
					<item>Ensure that if a block of allocated memory is not used it will eventually be freed. Before it will only be freed if it was the last allocated block.</item>
					<item>Compaction is actually working. Before it was working if you had a lot of dead objects, now it will compact even if all you have is alive objects and that the memory is fragmented.</item>
					<item>For large memory heap (i.e. larger than 1GB) improved speed of collections where there is a lot of dead objects.</item>
				</list>
			</item>
			<item>Changed the way we search melted file, it is done in the following order:
				<list ordered="false">
					<item>Directory specified by environment parameter MELT_PATH</item>
					<item>Current working directory</item>
					<item>Directory where application is launched</item>
					<item>Original directory where .melted file was generated the first time.</item>
				</list>
			</item>
			<item>Improved speed of initial compilation of .NET projects as well as the speed for incremental compilation at degree 6 which went from a few seconds to no time if no new assemblies have been added to the system.</item>
			<item>No freeze is required when adding an agent, saving you time since C compilation can be long for very large project.</item>
			<item>Reduced the required disk space for a workbench compilation in classic mode (went from 1.8 GB to 1GB for a very large project).</item>
			<item>Improved speed of agent calls in classic mode.</item>
			<item>Support use of IL enumerations with underlying integer types different from System.Int32. In particular, the built-in features `to_integer' and `from_integer' now use the underlying type rather than System.Int32.</item>
			<item>Support generation of IL properties as well as custom attributes for them.</item>
			<item>Support the new syntax without the <keyword>is</keyword> keyword in the feature declaration.</item>
			<item>Allowed bracket expressions to be used as a target of a qualified feature call (this is an extension to ECMA standard that does not permit this syntax at the moment).</item>
			<item>Added checks for <compiler_error>VYCP(2,3)</compiler_error> and <compiler_error>VYCQ(2,3)</compiler_error> (validity rules for conversion features to prohibit conversion to conforming types).</item>
		</list>
		<heading><size>2</size>Changes</heading>
		<list ordered="false">
			<item><compiler_error>VWEQ</compiler_error> is not an error, but a warning that can be triggered or not depending on your configuration.</item>
			<item>Inherited assertions are rechecked each time that a feature is redefined, meaning that some errors that were not previously detected by the compiler can now be found.</item>
		</list>
		<heading><size>2</size>Bug fixes</heading>
		<list ordered="false">
			<item>Fixed an issue with x2c if you had inlined C code which contains comments with single or double quote. Then it will not properly convert .x into .c file.</item>
			<item>Fixed bugs in code generation for once manifest strings that caused "index out of bounds" exception, void results.</item>
			<item>Fixed a bug in processing synonyms of a routine with an indexing clause that might cause a compiler crash, in particular this could happen for synonyms of a global once routine.</item>
			<item>Fixed a bug in recompilation of a once routine that changes its process-relative status into thread-relative one or back in multithreaded finalized mode that can cause C compilation to fail due to unresolved externals.</item>
			<item>Corrected inlining of routines redeclared into attributes or into routines with a different internal/external status.</item>
			<item>Fixed a bug in incremental recompilation of queries with assigner commands.</item>
			<item>Added detection of a <compiler_error>VUEX</compiler_error> error for static feature calls used in intervals of a multibranch instruction.</item>
		</list>
		<heading><size>3</size>Compiler issues</heading>
		<list ordered="false">
			<item>Added a new validity error <compiler_error>VTEC(3)</compiler_error> to report unsupported inheritance hierarchy under .NET when an expanded type is based on a class with an external ancestor.</item>
			<item>Not supported reverse attachment of boxed built-in .NET value types to Eiffel reference types such as <class_name>NUMERIC</class_name>, <class_name>HASHABLE</class_name>, etc.</item>
		</list>
		<heading><size>3</size>Runtime/code generation issues</heading>
		<list ordered="false">
			<item>Ensured that our runtime is async-safe for signals for all the runtime routines using some locking mechanisms.</item>
			<item>Fixed a memory corruption issue in <feature_name>arycpy</feature_name> if a GC cycle was triggered as part of the processus of reallocating the SPECIAL object.</item>
			<item>Fixed a bug with allocating memory for once routines that caused "no memory" exception at program startup when Borland run-time is used.</item>
		</list>
		<heading><size>3</size>.NET issues</heading>
		<list ordered="false">
				<item>Removed limitation to inherit an Eiffel class which inherited from a .NET class.</item>
		</list>
		<heading><size>3</size>Store/Retrieve issues</heading>
		<list ordered="false">
				<item>Fixed a memory leak in the recoverable retrieval when an exception is raised from a <feature_name>correct_mismatch</feature_name> routine call.</item>
				<item>Fixed test#store008 regarding a crash when retrieving a type that does not exist in retrieved system.</item>
		</list>
	</paragraph>
</document>
