indexing
	description: "An Eiffel pixmap matrix accessor, generated by Eiffel Matrix Generator."
	legal      : "See notice at end of class."
	status     : "See notice at end of class."
	date       : "$Date$"
	revision   : "$Revision$"

class
	${NAME}
	
create
	make

feature {NONE} -- Initialization

	make (a_file_name: STRING) is
			-- Initialize matrix
		require
			a_file_name_attached: a_file_name /= Void
			not_a_file_name_is_empty: not a_file_name.is_empty
			a_file_name_exists: (create {RAW_FILE}.make (a_file_name)).exists
		local
			retried: BOOLEAN
		do
			if not retried and then (create {RAW_FILE}.make (a_file_name)).exists then
				create raw_matrix
				raw_matrix.set_with_named_file (a_file_name)
			else
					-- Fail safe, use blank pixmap
				create raw_matrix.make_with_size ((width * pixel_width) + 1,(height * pixel_height) + 1)
			end
		rescue
			retried := True
			retry
		end
		
feature -- Access

${ACCESS}
feature {NONE} -- Access

	pixel_width: INTEGER is ${PIXEL_WIDTH}
			-- Element width
			
	pixel_height: INTEGER is ${PIXEL_HEIGHT}
			-- Element width
			
	width: INTEGER is ${WIDTH}
			-- Matrix width
	
	height: INTEGER is ${HEIGHT}
			-- Matrix height
			
feature {NONE} -- Query

	frozen pixmap_from_coords (a_x: INTEGER; a_y: INTEGER): EV_PIXMAP is
			-- Retrieves a pixmap from matrix coordinates `a_x', `a_y'	
		require
			a_x_positive: a_x > 0
			a_x_small_enough: a_x <= width
			a_y_positive: a_y > 0
			a_y_small_enough: a_y <= height
		local
			l_x_offset: INTEGER
			l_y_offset: INTEGER
			l_pw: INTEGER
			l_ph: INTEGER
			l_rectangle: like rectangle
		do
			l_pw := pixel_width
			l_ph := pixel_height
			l_x_offset := ((a_x - 1) * (l_pw + 1)) + 1
			l_y_offset := ((a_y - 1) * (l_ph + 1)) + 1

			l_rectangle := rectangle
			l_rectangle.set_x (l_x_offset)
			l_rectangle.set_y (l_y_offset)
			l_rectangle.set_width (l_pw)
			l_rectangle.set_height (l_ph)
			Result := raw_matrix.implementation.sub_pixmap (l_rectangle)
		ensure
			result_attached: Result /= Void
		end

feature {NONE} -- Implementation

${IMPLEMENTATION}
	raw_matrix: EV_PIXMAP
			-- raw matrix pixmap

	frozen rectangle: EV_RECTANGLE is
			-- Reusable rectangle for `pixmap_from_constant'.
		once
			create Result
		end

invariant
	raw_matrix_attached: raw_matrix /= Void

indexing
	copyright: "Copyright (c) 1984-2006, Eiffel Software and others"
	license: "Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"
	source: "[
		Eiffel Software
		356 Storke Road, Goleta, CA 93117 USA
		Telephone 805-685-1006, Fax 805-685-6869
		Website http://www.eiffel.com
		Customer support http://support.eiffel.com
	]"

end -- class {${NAME}}