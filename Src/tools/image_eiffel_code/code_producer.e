indexing
	description: "[
					Eiffel source code generator which generate a EV_PIXEL_BUFFER descendant class.
					The class have all image pixel data and can be created directly without orignal
					png file.
																									]"
	status: "See notice at end of class."
	legal: "See notice at end of class."
	date: "$Date$"
	revision: "$Revision$"

class
	CODE_PRODUCER

feature -- Commands

	build_colors_code (colors: ARRAYED_LIST [ARRAYED_LIST [NATURAL_32]]; a_height: INTEGER) : STRING is
			-- Build colors creating code.
			-- Use array instead of tuple to store colors do create Result.make_empty
		do
			create Result.make (200)
			Result.append ( "%Tbuild_colors is" + new_line +
				"%T%T%T-- Build `colors'." + new_line +
				"%T%T%T-- Here is all image pixels data." + new_line +
				"%T%Tdo" + new_line +
				"%T%T%Tcreate colors.make (" + a_height.out + ")" + new_line)
			from
				colors.start
			until
				colors.after
			loop

				Result.append (once "%T%T%Tcolors.put (({ARRAY [NATURAL_32]}) [<<")
				from
					colors.item.start
				until
					colors.item.after
				loop
					Result.append (build_draw_point_code (colors.item.item))
					if not colors.item.islast then
						Result.append (", ")
					end
					colors.item.forth
				end
				Result.append (">>], " + (colors.index - 1).out + ")" + new_line)
				colors.forth
			end
			Result.append ("%T%Tend" + new_line)
		end

	build_draw_point_code (a_color: NATURAL_32): STRING is
			-- Build single color creating code.
		do
			Result := "0x" + a_color.to_hex_string
		end

	new_line: STRING is
			-- New line
		do
			create Result.make_from_string ("%N")
		end

	build_top_code (file_name: STRING): STRING is
			-- Build code of the class before initialization code.
		do
			create Result.make_empty
			Result.append ("indexing" + new_line)
			Result.append ("%Tdescription: %"Pixel buffer that replaces orignal image file.%%" + new_line)
			Result.append ("%T%T%%The orignal version of this class has been generated by Image Eiffel Code.%"" + new_line)
			Result.append (new_line)
			Result.append ("class" + new_line)
			Result.append ("%T" + file_name.as_upper + new_line)
			Result.append (new_line)
			Result.append ("inherit" + new_line)
			Result.append ("%TEV_PIXEL_BUFFER" + new_line)
			Result.append (new_line)
			Result.append ("create" + new_line)
			Result.append ("%Tmake," + new_line)
			Result.append ("%Tmake_cw_90," + new_line)
			Result.append ("%Tmake_cw_180," + new_line)
			Result.append ("%Tmake_cw_270" + new_line)
			Result.append (new_line)
		end

	build_initialization_code (a_width, a_height: INTEGER) : STRING is
			-- Build initialization code.
		do
			create Result.make_empty
			Result.append ("feature {NONE} -- Initialization" + new_line)
			Result.append (new_line)
			Result.append ("%Tmake is" + new_line)
			Result.append ("%T%T%T-- Initialization" + new_line)
			Result.append ("%T%Tdo" + new_line)
			Result.append ("%T%T%Tmake_with_size (" + a_width.out + ", " + a_height.out + ")" + new_line)
			Result.append ("%T%T%Tdraw_direction := no_rotate" + new_line)
			Result.append ("%T%T%Tdraw" + new_line)
			Result.append ("%T%Tend" + new_line)
			Result.append (new_line)
			Result.append ("%Tmake_cw_90 is" + new_line)
			Result.append ("%T%T%T-- Initialization" + new_line)
			Result.append ("%T%T%T-- Colorwise 90 degree rotate." + new_line)
			Result.append ("%T%Tdo" + new_line)
			Result.append ("%T%T%Tmake_with_size (" + a_width.out + ", " + a_height.out + ")" + new_line)
			Result.append ("%T%T%Tdraw_direction := cw_90" + new_line)
			Result.append ("%T%T%Tdraw" + new_line)
			Result.append ("%T%Tend" + new_line)
			Result.append (new_line)
			Result.append ("%Tmake_cw_180 is" + new_line)
			Result.append ("%T%T%T-- Initialization" + new_line)
			Result.append ("%T%T%T-- Colokwise 180 degree rotate." + new_line)
			Result.append ("%T%Tdo" + new_line)
			Result.append ("%T%T%Tmake_with_size (" + a_height.out + ", " + a_width.out + ")" + new_line)
			Result.append ("%T%T%Tdraw_direction := cw_180" + new_line)
			Result.append ("%T%T%Tdraw" + new_line)
			Result.append ("%T%Tend" + new_line)
			Result.append (new_line)
			Result.append ("%Tmake_cw_270 is" + new_line)
			Result.append ("%T%T%T-- Initialization" + new_line)
			Result.append ("%T%T%T-- Colokwise 270 degree rotate." + new_line)
			Result.append ("%T%Tdo" + new_line)
			Result.append ("%T%T%Tmake_with_size (" + a_height.out + ", " + a_width.out + ")" + new_line)
			Result.append ("%T%T%Tdraw_direction := cw_270" + new_line)
			Result.append ("%T%T%Tdraw" + new_line)
			Result.append ("%T%Tend" + new_line)
			Result.append (new_line)
		end

	build_implementation_code (a_colors: ARRAYED_LIST [ARRAYED_LIST [NATURAL_32]]; a_height: INTEGER): STRING is
			-- Build implementation code.
		do
			create Result.make_empty
			Result.append ("feature {NONE} -- Implementation" + new_line)
			Result.append (new_line)
			Result.append ("%Tdraw is" + new_line)
			Result.append ("%T%T%T-- Draw current." + new_line)
			Result.append ("%T%Tlocal" + new_line)
			Result.append ("%T%T%Ti, j, t_count, colors_count, max_len: INTEGER" + new_line)
			Result.append ("%T%T%Tl_iterator: EV_PIXEL_BUFFER_ITERATOR" + new_line)
			Result.append ("%T%T%Tl_pixel_buffer_pixel: EV_PIXEL_BUFFER_PIXEL" + new_line)
			Result.append ("%T%Tdo" + new_line)
			Result.append ("%T%T%Tbuild_colors" + new_line)
			Result.append (new_line)
			Result.append ("%T%T%Tcolors_count := colors.count" + new_line)
			Result.append ("%T%T%Tmax_len := width.max (height)" + new_line)
			Result.append ("%T%T%Tfrom" + new_line)
			Result.append ("%T%T%T%Tj := 0" + new_line)
			Result.append ("%T%T%T%Tlock" + new_line)
			Result.append ("%T%T%T%Tl_iterator := pixel_iterator" + new_line)
			Result.append ("%T%T%T%Tl_iterator.start" + new_line)
			Result.append ("%T%T%Tuntil" + new_line)
			Result.append ("%T%T%T%Tj >= colors_count" + new_line)
			Result.append ("%T%T%Tloop" + new_line)
			Result.append ("%T%T%T%Tfrom" + new_line)
			Result.append ("%T%T%T%T%Ti := 0" + new_line)
			Result.append ("%T%T%T%T%Tt_count := colors.item (j).count" + new_line)
			Result.append ("%T%T%T%Tuntil" + new_line)
			Result.append ("%T%T%T%T%Ti >= t_count" + new_line)
			Result.append ("%T%T%T%Tloop" + new_line)
			Result.append ("%T%T%T%T%Tl_pixel_buffer_pixel := l_iterator.item" + new_line)
			Result.append ("%T%T%T%T%T%Tinspect draw_direction" + new_line)
			Result.append ("%T%T%T%T%T%Twhen no_rotate then" + new_line)
			Result.append ("%T%T%T%T%T%T%T%T-- Draw orignal image file." + new_line)
			Result.append ("%T%T%T%T%T%T%Tl_pixel_buffer_pixel.set_rgba_value (colors.item (j).item(i))" + new_line)

			Result.append ("%T%T%T%T%T%Twhen cw_90 then" + new_line)
			Result.append ("%T%T%T%T%T%T%T%T-- Draw colorwise 90 degree rotated image." + new_line)
			Result.append ("%T%T%T%T%T%T%Tl_pixel_buffer_pixel.set_rgba_value (colors.item (max_len - i - 1).item(j))" + new_line)

			Result.append ("%T%T%T%T%T%Twhen cw_180 then" + new_line)
			Result.append ("%T%T%T%T%T%T%T%T-- Draw colorwise 180 degree rotated image." + new_line)
			Result.append ("%T%T%T%T%T%T%Tl_pixel_buffer_pixel.set_rgba_value (colors.item (colors_count - j - 1).item(t_count - i - 1))" + new_line)

			Result.append ("%T%T%T%T%T%Twhen cw_270 then" + new_line)
			Result.append ("%T%T%T%T%T%T%T%T-- Draw colorwise 270 degree rotated image." + new_line)
			Result.append ("%T%T%T%T%T%T%Tl_pixel_buffer_pixel.set_rgba_value (colors.item (i).item(colors_count - j - 1))" + new_line)

			Result.append ("%T%T%T%T%T%Tend" + new_line)
			Result.append ("%T%T%T%T%Tl_iterator.forth" + new_line)
			Result.append ("%T%T%T%T%Ti := i + 1" + new_line)
			Result.append ("%T%T%T%Tend" + new_line)
			Result.append ("%T%T%T%Tj := j + 1" + new_line)
			Result.append ("%T%T%Tend" + new_line)
			Result.append ("%T%T%Tunlock" + new_line)
			Result.append ("%T%T%Tcolors := Void" + new_line)
			Result.append ("%T%Tend" + new_line)
			Result.append (new_line)
			Result.append (build_colors_code (a_colors, a_height))
			Result.append (new_line)
			Result.append ("%Tdraw_direction : INTEGER" + new_line)
			Result.append ("%T%T%T-- Drawing direction." + new_line)
			Result.append (new_line)
			Result.append ("%Tcolors: SPECIAL [SPECIAL [NATURAL_32]]" + new_line)
			Result.append ("%T%T%T-- All image pixel data." + new_line)
		end

	build_constants_code: STRING is
			-- Build constants code.
		do
			create Result.make_empty
			Result.append ("feature {NONE} -- Constants" + new_line)
			Result.append (new_line)
			Result.append ("%Tno_rotate: INTEGER is 1" + new_line)
			Result.append ("%T%T%T-- No rotate." + new_line)
			Result.append ("%Tcw_90: INTEGER is 2" + new_line)
			Result.append ("%T%T%T-- Colorwise 90 degree." + new_line)
			Result.append ("%Tcw_180:INTEGER is 3" + new_line)
			Result.append ("%T%T%T-- Colorwise 180 degree." + new_line)
			Result.append ("%Tcw_270: INTEGER is 4" + new_line)
			Result.append ("%T%T%T-- Colorwise 270 degree." + new_line)
		end

indexing
	copyright: "Copyright (c) 1984-2007, Eiffel Software"
	license:   "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			 Eiffel Software
			 356 Storke Road, Goleta, CA 93117 USA
			 Telephone 805-685-1006, Fax 805-685-6869
			 Website http://www.eiffel.com
			 Customer support http://support.eiffel.com
		]"

end
