<document title="Generated Files" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>The wizard generates code into the specified destination folder. The file hierarchy is the following:</paragraph>
		<heading>
			<size>2</size>Generated Files Hierarchy
		</heading>
		<image>
			<url>../images/com_image23.gif</url>
		</image> 
		<paragraph> The root folder has two files and four subclusters.</paragraph>
		<paragraph> The file <italic>generated.txt</italic> includes a list of all the files generated by the wizard.</paragraph>
		<paragraph> The file 
			<italic>component</italic>. 
			<italic>log</italic> contains a summary of the processing done by the wizard. The name of the file is the name of the definition file appended with log (so Figure 10 presumes that the definition file was e.g. 
			<italic>component</italic>. 
			<italic> idl</italic>)
		</paragraph>
		<paragraph>The folder 
			<italic>idl</italic> contains the generated IDL file.
		</paragraph>
		<paragraph> The folders 
			<italic>Client</italic> and 
			<italic>Server</italic> include the files generated respectively for reusing a component or creating a new component. Each consists of three subdirectories: 
			<italic>Include</italic> comprises header files needed to compile the Eiffel code, 
			<italic>CLib</italic> contains the generated C and C++ code as well as the library files.  
			<italic>Component</italic> holds Eiffel code that wraps or defines the component. The 
			<italic>Component</italic> subfolder of 
			<italic>Server</italic> also includes the registration class. This Eiffel class contains the code needed to activate the component; it depends whether the component is in-process or out-of-process. You do not need to read or edit the C and C++ code included in 
			<italic>CLib</italic> because the wizard automatically compiles it. It is given for information only and can be deleted (you need to keep the library file though). The 
			<italic>Client</italic> and 
			<italic>Server</italic> folders also have an Ace file used to compile the generated Eiffel code. In the case of a client, the generated code is precompiled whereas in the case of a server it is compiled in a normal system with the registration class being the root class of the system. In the case of an in-process server the Eiffel system is compiled into a DLL whereas in the case of an out-of-process server, it is compiled in a standard executable.
		</paragraph>
		<paragraph> The Common folder comprises code that is used for both the server and the client parts. The 
			<italic>Include</italic> and 
			<italic>CLib</italic> directories contain respectively the header files and the C and C++ code. The C and C++ sources are not needed and can be deleted, only the library file needs to be kept for the Eiffel system to compile. The 
			<italic>Interfaces</italic> subdirectory include Eiffel classes corresponding to the component interfaces and the 
			<italic>Structures</italic> subdirectory includes Eiffel classes wrapping data structures specified in the definition file.
		</paragraph>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>01_introduction_d.xml</url>
				<label>Introduction Dialog and Main Window</label>
			</link>
			<line_break/>
			<link>
				<url>02_generated_code_type_d.xml</url>
				<label>Generated Code Type Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>03_definition_file_d.xml</url>
				<label>Definition File Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>04_eiffel_project_file_d.xml</url>
				<label>Eiffel Project File Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>05_destination_folder_d.xml</url>
				<label>Destination Folder Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>06_idl_marshalling_d.xml</url>
				<label>IDL Marshaling Definition Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>07_type_lybrary_m_d.xml</url>
				<label>Type Library Marshaling Definition Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>08_final_d.xml</url>
				<label>Final Dialog</label>
			</link>
			<line_break/>
			<link>
				<url>09_com_definition_file_processing.xml</url>
				<label>COM Definition File Processing</label>
			</link>
			<line_break/>
			<link>
				<url>10_eiffel_project_processing.xml</url>
				<label>Eiffel Project Processing</label>
			</link>
			<line_break/>
			<link>
				<url>11_generated_files.xml</url>
				<label>Generated Files</label>
			</link>
			<line_break/>
			<link>
				<url>12_class_hierarchy.xml</url>
				<label>Class Hierarchy</label>
			</link>
			<line_break/>
			<link>
				<url>13_accessing_component.xml</url>
				<label>Accessing a Component</label>
			</link>
			<line_break/>
			<link>
				<url>14_building_component.xml</url>
				<label>Building a Component</label>
			</link>
		</seealso>
	</paragraph></document>
