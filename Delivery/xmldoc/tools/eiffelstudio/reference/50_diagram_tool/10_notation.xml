<document title="Notation" output="studio">
	<meta_data/>
	<paragraph>
		<paragraph>The diagram tool uses the 
			<link>
				<url>http://www.eiffel.com/products/bon.xml</url>
				<label>BON</label>
			</link> (Business Object Notation) to represent Eiffel systems. This article will give a summary of all components of an EiffelStudio diagram. For detailed information on BON, please read 
			<link>
				<url>http://bon-method.com/book.htm</url>
				<label>Seamless Object-Oriented Software Architecture</label>
			</link> by Kim Wald&amp;eacute;n and Jean-MarcNerson, Prentice Hall 1994.
		</paragraph>
		<heading>
			<size>2</size>Class
		</heading>
		<paragraph>
			<image>
				<url>/images/eiffelstudio/diagram/bon-class.png</url>
			</image> An object class is represented by an ellipse(sometimes referred to as 
			<italic>bubble</italic>). It contains the class name and formal generics of the Eiffel class it represents. Second, it displays information about properties of a class. These properties are:
		</paragraph>
		<list ordered="false">
			<item>Deferred: class is declared as 
				<code>
					<keyword>deferred</keyword>
				</code>. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-deferred.png</url>
					</image>
				</paragraph>
			</item>
			<item>Effective: class is not 
				<code>
					<keyword>deferred</keyword>
				</code> and has at least one 
				<code>
					<keyword>deferred</keyword>
				</code> parent, or redefines one ore more features. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-effective.png</url>
					</image>
				</paragraph>
			</item>
			<item>Persistent: class inherits 
				<class_name>STORABLE</class_name> or has indexing tag 
				<code>
					<indexing_tag>persistent</indexing_tag>
				</code>. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-persistent.png</url>
					</image>
				</paragraph>
			</item>
			<item>Interfaced: class has one ore more 
				<code>
					<keyword>external</keyword>
				</code> features. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-interfaced.png</url>
					</image>
				</paragraph>
			</item>
			<item>Reused: class resides in a precompiled library or in a 
				<code>
					<keyword>library</keyword>
				</code> cluster. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-reused.png</url>
					</image>
				</paragraph>
			</item>
			<item>Root class: class has the program's entry point. 
				<paragraph>
					<image>
						<url>/images/eiffelstudio/diagram/bon-class-root.png</url>
					</image>
				</paragraph>
			</item>
		</list>
		<seealso>
			<bold>See also</bold>
			<line_break/>
			<link>
				<url>../../how_to_s/60_designing_a_project/20_altering_the_system/30_class_header.xml</url>
				<label>Changing class names and formal generics</label>
			</link>
		</seealso>
		<heading>
			<size>2</size>Cluster
		</heading>
		<paragraph>A cluster is a collection of classes and sub-clusters. It is represented by a stippled, rounded rectangle. The cluster name is in a similar rectangle, by default located at the top of the cluster just outside of it. A cluster can be iconified, which means it is minimized to take up as less space as possible.</paragraph>
		<div>
			<image>
				<url>/images/eiffelstudio/diagram/bon-cluster-iconified.png</url>
			</image> 
			<image>
				<url>/images/eiffelstudio/diagram/bon-cluster.png</url>
			</image>
		</div>
		<line_break/>
		<seealso>
			<bold>See also</bold>
			<line_break/>
			<link>
				<url>../../how_to_s/60_designing_a_project/40_modifying_the_display/70_iconify.xml</url>
				<label>Iconifying a cluster</label>
			</link>
		</seealso>
		<heading>
			<size>2</size>Inheritance links
		</heading>
		<paragraph>Inheritance between classes is represented by a red arrow from a class to its parent. Typically, inheritance links point upwards.</paragraph>
		<div>
			<image>
				<url>/images/eiffelstudio/diagram/bon-inheritance.png</url>
			</image>
		</div>
		<line_break/>
		<line_break/> 
		<seealso>
			<bold>See also</bold>
			<line_break/>
			<link>
				<url>../../how_to_s/60_designing_a_project/30_managing_links/10_new_inheritance_link.xml</url>
				<label>Creating inheritance links</label>
			</link>
		</seealso>
		<heading>
			<size>2</size>Client/supplier links
		</heading>
		<paragraph>Client relationships between classes are represented by a blue arrow with a double line from the client to the supplier. Typically, these links point to the right. A special kind of relationship is the aggregate client/supplier link. Aggregate means that the supplier is an integral part of the client. In the class text, it corresponds to 
			<code>
				<keyword>expanded</keyword>
			</code> features. In the diagram, an aggregate link has a little line along the back side of the arrow.
		</paragraph>
		<div>
			<image>
				<url>/images/eiffelstudio/diagram/bon-client.png</url>
			</image>
			<image>
				<url>/images/eiffelstudio/diagram/bon-agg-client.png</url>
			</image>
		</div>
		<line_break/>
		<line_break/> 
		<seealso>
			<bold>See also</bold>
			<line_break/>
			<link>
				<url>../../how_to_s/60_designing_a_project/30_managing_links/20_new_client_link.xml</url>
				<label>Creating client/supplier links</label>
			</link>
		</seealso>
	</paragraph></document>
