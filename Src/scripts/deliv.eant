<?xml version="1.0"?>

<project name="DELIV_SCRIPT" default="help">
	<description>
		description: "delivery building"
		author: "Jocelyn Fiat and others"
		note: "This script could be split into severals scripts, one for each product"
	</description>

	<inherit>
		<parent location="${DELIV_SCRIPT.absdir}${path_separator}misc${path_separator}_helpers_.eant">
			<redefine target="check_environment"/>
			<redefine target="init"/>
			<redefine target="_log"/>
		</parent>
	</inherit>
	
	<target name="help">
		<echo message=" geant menu"/>
		<echo message=" geant build_es"/>
		<echo message=" ---- "/>
		<echo message=" geant compile_es"/>
		<echo message=" geant build_es_eiffelxx"/>
	</target>

	<target name="menu">
		<echo message="Menu"/>
		<echo message="1) clean ..." />
		<echo message="2) build_es (includes 3,4)" />
		<echo message="---(sub tasks)---" />
		<echo message="3) compile_es" />
		<echo message="4) build_es_eiffelxx" />
		<echo message="----" />
		<echo message="Q) quit" />
		<input message=" -> " variable="answer" answer_required="true" validargs="1,2,3,4,Q,q" />
		<geant target="_menu_clean" if="$answer=1" reuse_variables="true" />
		<geant target="build_es" if="$answer=2" reuse_variables="true" />
		<geant target="compile_es" if="$answer=3" reuse_variables="true" />
		<geant target="build_es_eiffelxx" if="$answer=4" reuse_variables="true" />
		<echo message="Bye..."/>
	</target>

	<target name="_menu_clean">
		<echo message="Menu"/>
		<echo message="1) clean all (3,4,5)" />
		<echo message="2) clean es (4,5 : all but output)" />
		<echo message="----" />
		<echo message="3) clean output folder (bin)" />
		<echo message="4) clean compile folder (EIFGENs)" />
		<echo message="5) clean delivery folder (EiffelXX)" />
		<echo message="----" />
		<echo message="Q) quit" />
		<input message=" -> " variable="answer" answer_required="true" validargs="1,2,3,4,5,Q,q" />
		<geant target="clean_all" if="$answer=1" reuse_variables="true" />
		<geant target="clean_es" if="$answer=2" reuse_variables="true" />
		<geant target="clean_bin" if="$answer=3" reuse_variables="true" />
		<geant target="clean_compile" if="$answer=4" reuse_variables="true" />
		<geant target="clean_delivery" if="$answer=5" reuse_variables="true" />
	</target>

	<target name="check_environment" once="true">
		<precursor/>
		<available resource="${ISE_EIFFEL}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin${path_separator}ec${exe}" variable="tmp_available"/>
		<echo message="Error: executable ec${exe} does not exists" if="${tmp_available}=false" />
		<set name="environment_valid" value="false" if="${tmp_available}=false" />
		<unset name="tmp_available" />
	</target>

	<target name="_log" >
		<argument name="a_msg" />
		<echo message="$a_msg" to_file="$_LOGFILE" append="true" />
	</target>

	<target name="init"  once="true">
		<echo message="System init" />
		<precursor/>

		<!-- compilation related -->
		<set name="_COMPILE_DIR" value="${cwd}"/>
		<set name="_FORCE_CLEAN" value="false" unless="$_FORCE_CLEAN=true" />
		<set name="_FORCE_BATCH" value="false" unless="$_FORCE_BATCH=true" />

		<!-- source related -->
		<!-- we support both location for Delivery, under Src, or under Trunk -->
		<set name="_DELIVERY_DIR" value="${EIFFEL_SRC}${path_separator}..${path_separator}Delivery" unless="${_DELIVERY_DIR}"/>
		<available resource="${_DELIVERY_DIR}" variable="tmp_available"/>
		<set name="_DELIVERY_DIR" value="${EIFFEL_SRC}${path_separator}Delivery" if="${tmp_available}=false"/>

		<!-- environment related -->
		<setenv name="ISE_LIBRARY" value="${EIFFEL_SRC}" />
		<setenv name="EIFFEL_DELIVERY" value="${delivery_dir}" />
	</target>

	<target name="init_deliv" depend="init" >
		<set name="_INSTALL_DIR" value="${cwd}${path_separator}EiffelXX" unless="$_INSTALL_DIR" />
		<set name="_OUTPUT_DIR" value="${cwd}${path_separator}bin" unless="$_OUTPUT_DIR"/>
		<set name="_LOGFILE" value="${cwd}${path_separator}deliv.log" unless="$_LOGFILE" />
		<set name="_WIPEOUT" value="true" unless="$_WIPEOUT" />
		<set name="_INCLUDE_DEVPACK" value="false" unless="$_INCLUDE_DEVPACK"/>
	</target>

	<target name="build_es" depend="init_deliv" >
		<geant target="_log" arguments="Build EiffelStudio ..." />

		<geant target="set_ec_version" fork="false" reuse_variables="true" />
		<geant target="set_esbuilder_version" fork="false" reuse_variables="true" />
		<geant target="compile_es" 			fork="false" reuse_variables="true" />
		<geant target="build_es_eiffelxx"	fork="false" reuse_variables="true" />
	</target>

	<target name="build_es_eiffelxx" depend="init_deliv" >
		<geant target="create_es_delivery" 	fork="false" reuse_variables="true" />
		<geant target="install_es" 			fork="false" reuse_variables="true" />
	</target>

	<target name="create_es_delivery" depend="init_deliv" >
		<geant target="_log" arguments="Building delivery for ES into ${_INSTALL_DIR}" />
		<!-- Delivery -->
		<available resource="${_INSTALL_DIR}" variable="installdir_available"/>
		<!--
		<geant target="_log" arguments="Clean delivery ..." if="${installdir_available}=true"  />
		<geant target="clean_delivery" reuse_variables="true" fork="false" if="${installdir_available}=true" />
		<echo message="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" />
		<geant target="_log" arguments="Error occurred during 'clean_delivery' (${return_code})" unless="${return_code}=0" />
		<exit code="${return_code}" unless="${return_code}=0" />

		<available resource="${_INSTALL_DIR}" variable="installdir_available"/>
		-->
		<mkdir directory="${_INSTALL_DIR}"  if="${installdir_available}=false" />

		<set name="return_code" value="0" />

		<geant target="_log" arguments="Make delivery in ${_INSTALL_DIR} ..." if="${installdir_available}=false" />
		<geant target="make_delivery" reuse_variables="true" fork="false" dir="${_INSTALL_DIR}" if="${installdir_available}=false" />
		<geant target="_log" arguments="Error occurred during 'make_delivery' (${return_code})" unless="${return_code}=0" />
		<exit code="${return_code}" unless="${return_code}=0" />

		<geant target="_log" arguments="Update delivery in ${_INSTALL_DIR} ..." if="${installdir_available}=true" />
		<geant target="update_delivery" reuse_variables="true" fork="false" dir="${_INSTALL_DIR}" if="${installdir_available}=true" />
		<geant target="_log" arguments="Error occurred during 'make_delivery' (${return_code})" unless="${return_code}=0"  />
		<exit code="${return_code}" unless="${return_code}=0" />

		<unset name="installdir_available" />
		<unset name="return_code" />
	</target>

	<target name="compile_es" depend="init_deliv" >
		<geant target="_log" arguments="Compiling ES into ${_OUTPUT_DIR}" />

		<mkdir directory="${_OUTPUT_DIR}" />
		
		<geant target="get__runtime" arguments="${_OUTPUT_DIR},runtime_compiled" />
		<geant target="get__library" arguments="${_OUTPUT_DIR},library_compiled"/>
		<geant target="get_bin__gobo" arguments="${_OUTPUT_DIR},gobo_compiled"/>
		
		<geant target="get_bin__" arguments="ec_bench,${_OUTPUT_DIR},ec${exe}" />
		<mkdir directory="${_OUTPUT_DIR}${path_separator}batch" />
		<geant target="get_bin__" arguments="ec_batch,${_OUTPUT_DIR}${path_separator}batch,ec${exe}"/>
		<geant target="get_bin__" arguments="estudio,${_OUTPUT_DIR},estudio${exe}" />
		<geant target="get_bin__" arguments="quick_finalize,${_OUTPUT_DIR},quick_finalize${exe}" />
		<geant target="get_bin__" arguments="finish_freezing,${_OUTPUT_DIR},finish_freezing${exe}"/>
		<geant target="get_bin__" arguments="h2e,${_OUTPUT_DIR},h2e${exe}"/>
		<geant target="get_bin__" arguments="emake,${_OUTPUT_DIR},emake${exe}"/>
		<geant target="get_bin__z" arguments="dotnet_consumer,${_OUTPUT_DIR},mdconsumer_compiled"/>
		<geant target="get_bin__" arguments="esbuilder,${_OUTPUT_DIR},esbuilder${exe}" />
		<geant target="get_bin__wizards" arguments="${_OUTPUT_DIR},wizards_compiled"/>

		<geant target="get_bin__" arguments="compile_all,${_OUTPUT_DIR},compile_all${exe}" 	if="${_INCLUDE_DEVPACK}=true"/>
		<geant target="get_bin__" arguments="escln,${_OUTPUT_DIR},escln${exe}" 				if="${_INCLUDE_DEVPACK}=true"/>
		<geant target="get_bin__" arguments="espawn,${_OUTPUT_DIR},espawn${exe}" 			if="${_INCLUDE_DEVPACK}=true"/>
		<geant target="get_bin__" arguments="eimgemb,${_OUTPUT_DIR},eimgemb${exe}" 			if="${_INCLUDE_DEVPACK}=true"/>

		<geant target="_log" arguments="Compiling ES is completed ..." />
	</target>

	<target name="get__runtime" >
		<argument name="a_output_dir" />
		<argument name="a_resource" />
		<available dir="$a_output_dir" resource="runtime_compiled" variable="tmp_available" />
		<geant target="_log" arguments="Compile runtime ..." 			if="$tmp_available=false" />
		<geant target="compile_runtime" reuse_variables="true" 			if="$tmp_available=false" />
		<echo message="compiled" dir="$a_output_dir" to_file="$a_resource" if="${return_code}=0" />
		<geant target="_log" arguments="Error occurred during 'compile_runtime' (${return_code})" unless="${return_code}=0"  />
		<unset name="tmp_available" />

		<!-- IL runtime -->
		<available resource="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time\EiffelSoftware.Runtime.dll" variable="tmp_available"/>
		<copy file="${EIFFEL_SRC}\Eiffel\eiffel\com_il_generation\Core\run-time\EiffelSoftware.Runtime.dll" to_file="${a_output_dir}${path_separator}EiffelSoftware.Runtime.dll" if="${tmp_available}=true" />
		<unset name="tmp_available" />
	</target>

	<target name="get__library" >
		<argument name="a_output_dir" />
		<argument name="a_resource" />
		<available dir="$a_output_dir" resource="$a_resource" variable="tmp_available"/>

		<geant target="_log" arguments="Compile library ..." 	if="$tmp_available=false" />
		<geant target="compile_library" reuse_variables="true"	if="$tmp_available=false" />
		<echo message="compiled" dir="$a_output_dir" to_file="$a_resource" if="${return_code}=0" />
		<geant target="_log" arguments="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0"  />

		<available resource="${EIFFEL_SRC}\library\wel\spec\msc\windows\dll\wel_hook.dll" variable="tmp_available"/>
		<copy file="${EIFFEL_SRC}\library\wel\spec\msc\windows\dll\wel_hook.dll" to_file="${a_output_dir}${path_separator}wel_hook.dll" if="${tmp_available}=true" />

		<unset name="tmp_available" />
	</target>

	<target name="get_bin__gobo" >
		<argument name="a_output_dir" />
		<argument name="a_resource" />
		<available dir="$a_output_dir" resource="$a_resource" variable="tmp_available"/>

		<geant target="_log" arguments="Compile gobo ..." 	if="$tmp_available=false" />
		<geant target="compile_gobo" reuse_variables="true"	if="$tmp_available=false" />
		<echo message="compiled" dir="$a_output_dir" to_file="$a_resource" if="${return_code}=0" />
		<geant target="_log" arguments="Error occurred during 'compile_gobo' (${return_code})" unless="${return_code}=0"  />

		<unset name="tmp_available" />
	</target>

	<target name="get_bin__wizards" >
		<argument name="a_output_dir" />
		<argument name="a_resource" />

		<available resource="$a_resource" variable="tmp_available"/>
		<set name="return_code" value="0" 						if="$tmp_available=true"  />
		<geant target="_log" arguments="Compile wizards ..." 	if="$tmp_available=false" />
		<geant target="compile_wizards" 						if="$tmp_available=false" />
		<geant target="_log" arguments="Error occurred during 'compile_wizards' (${return_code})" unless="${return_code}=0"  />

		<move dir="${_COMPILE_DIR}${path_separator}wizards" to_directory="${a_output_dir}${path_separator}wizards" if="${tmp_available}=false" >
			<fileset include="@(**/*)"  exclude="@(**/.svn/**/*)" />
		</move>
		<echo message="compiled" dir="$a_output_dir" to_file="$a_resource" if="${return_code}=0" />
	</target>

	<!-- helpers -->

	<target name="get_bin__" >
		<argument name="a_product_name" />
		<argument name="a_output_dir" />
		<argument name="a_resource" />
		<available resource="${a_output_dir}${path_separator}${a_resource}" variable="tmp_available" unless="-${a_resource}-=--" />
		<set name="tmp_available" value="false" if="-${a_resource}-=--" />

		<set name="return_code" value="0" 								if="$tmp_available=true"  />
		<geant target="_log" arguments="Building '$a_product_name' " 	if="$tmp_available=false" />
		<geant target="process_with_args" 								if="$tmp_available=false"
			arguments="finalize,$_COMPILE_DIR,$a_output_dir"
			file="${a_product_name}.eant" dir="${DELIV_SCRIPT.absdir}${path_separator}tools"
			fork="false" reuse_variables="true"
			/><!-- return variable `$return_code' -->
		<geant target="_log" arguments="Error occurred for '$a_product_name' (${return_code})" unless="${return_code}=0"  />

		<unset name="tmp_available" />
	</target>

	<target name="get_bin__z" >
		<argument name="a_product_name" />
		<argument name="a_output_dir" />
		<argument name="a_resource" />
		<geant target="get_bin__" reuse_variables="true" arguments="$a_product_name,$a_output_dir,$a_resource" /><!-- return variable `$return_code' -->
		<echo message="compiled" to_file="${a_output_dir}${path_separator}$a_resource" if="${return_code}=0" />
	</target>

	<!-- bridge -->

	<target name="compile_runtime" depend="init">
		<geant file="build.eant" dir="${EIFFEL_SRC}${path_separator}C" target="compile_runtime" 
				reuse_variables="true"  fork="false" />
		<geant file="build.eant" dir="${EIFFEL_SRC}${path_separator}Eiffel${path_separator}eiffel${path_separator}com_il_generation${path_separator}Core${path_separator}run-time" target="compile" 
				reuse_variables="true"  fork="false" if="${is_windows}" />
	</target>
	<target name="compile_library" depend="init">
		<geant file="build.eant" dir="${EIFFEL_SRC}${path_separator}C_library" 	target="compile" 
			reuse_variables="true"  fork="false" />
		<geant file="build.eant" dir="${EIFFEL_SRC}${path_separator}library" 	target="compile" 
			reuse_variables="true"  fork="false" />
		<geant file="build.eant" dir="${EIFFEL_SRC}${path_separator}framework" 	target="compile"
			reuse_variables="true"  fork="false" />
	</target>

	<target name="set_ec_version" depend="init">
		<geant file="${DELIV_SCRIPT.absdir}${path_separator}set_version.eant" target="set_version" 
			arguments="system_constants.e"
			dir="${EIFFEL_SRC}${path_separator}Eiffel${path_separator}API${path_separator}constants"
			reuse_variables="true"  fork="false" />
	</target>
	<target name="set_esbuilder_version" depend="init">
		<geant file="${DELIV_SCRIPT.absdir}${path_separator}set_version.eant" target="set_version" 
			arguments="gb_about_dialog_constants.e"
			dir="${EIFFEL_SRC}${path_separator}build${path_separator}Constants"
			reuse_variables="true"  fork="false" />
	</target>
	<target name="compile_wizards" depend="init">
		<geant dir="${DELIV_SCRIPT.absdir}" file="es_wizards.eant" target="compile_all_from" arguments="$_COMPILE_DIR" 
			reuse_variables="true"  fork="false" />
	</target>
	<target name="compile_gobo" depend="init">
		<geant dir="${DELIV_SCRIPT.absdir}" file="gobo_tools.eant" target="compile_from" arguments="$_COMPILE_DIR"
			reuse_variables="true"  fork="false" />
	</target>


	<!-- Install compiled products -->
	<target name="install_es" depend="init_deliv" >
		<geant target="_log" arguments="Installing ES into ${_INSTALL_DIR}" />

		<!-- install binaries -->
		<set name="tmp_install_dir" value="${_INSTALL_DIR}${path_separator}studio${path_separator}spec${path_separator}${ISE_PLATFORM}" />
		<set name="tmp_install_dir_bin" value="${tmp_install_dir}${path_separator}bin" />

		<!-- ec -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},ec${exe}" />
		<!-- ecbatch --> 
		<geant target="install__file_as" arguments="${_OUTPUT_DIR}${path_separator}batch,${tmp_install_dir_bin},ec${exe},ecbatch${exe}" />
		<!-- estudio --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},estudio${exe}" />
		<!-- quick_finalize --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},quick_finalize${exe}" />

		<!-- esbuilder --> 
		<mkdir directory="${_INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin" />
		<geant target="install__file" arguments="${_OUTPUT_DIR},${_INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin,esbuilder${exe}" />
		<!-- wizards -->
		<available dir="${_OUTPUT_DIR}" resource="wizards" variable="tmp_available"/>
		<copy dir="${_OUTPUT_DIR}${path_separator}wizards" to_directory="${_INSTALL_DIR}${path_separator}studio${path_separator}wizards"
			if="${tmp_available}=true">
			<fileset include="@(**/*)"  exclude="@(**/.svn/**/*)" />
		</copy>
		<unset name="tmp_available" />

		<!-- escln --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},escln${exe}"		if="${_INCLUDE_DEVPACK}=true" />
		<!-- eimgemb --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},eimgemb${exe}"	if="${_INCLUDE_DEVPACK}=true" />
		<!-- compile_all --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},compile_all${exe}"	if="${_INCLUDE_DEVPACK}=true" />

		<!-- platform specific -->
		<geant target="install_es_windows" fork="false" reuse_variables="true" if="${is_windows}" />
		<geant target="install_es_unix" fork="false" reuse_variables="true" unless="${is_windows}" />

		<unset name="tmp_install_dir_bin" />
		<unset name="tmp_install_dir" />
		
		<geant target="_log" arguments="Installing ES is completed ..." />
	</target>

	<target name="install_es_unix" depend="init_deliv" unless="${is_windows}" >
		<exec executable="chmod 755 ${tmp_install_dir_bin}/* " accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod 755 ${_INSTALL_DIR}/esbuilder/spec/${ISE_PLATFORM}/bin/*" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod 755 ${_INSTALL_DIR}/make_install" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod 755 ${_INSTALL_DIR}/library/vision2/implementation/gtk/Clib/vision2-gtk-config" accept_errors="true" exit_code_variable="return_code" />
		<exec executable="chmod 755 ${_INSTALL_DIR}/library/gobo/spec/${ISE_PLATFORM}/bin/*" accept_errors="true" exit_code_variable="return_code" />
	</target>

	<target name="install_es_windows" depend="init_deliv" if="${is_windows}" >
		<!-- install tool to compile libraries -->
		<copy dir="${EIFFEL_SRC}\C\shell\bin" to_directory="${tmp_install_dir}${path_separator}bin" >
			<fileset include="@(*.dll)" />
			<fileset include="@(*.exe)" />
		</copy>
		<mkdir directory="${tmp_install_dir}\..\etc"/>
		<copy file="${_DELIVERY_DIR}\studio\spec\windows\compile_library.bat" to_file="${tmp_install_dir}${path_separator}bin${path_separator}compile_library.bat" />
		<set name="tmp_config_fn" value="windows-x86-${ISE_C_COMPILER}" if="${ISE_PLATFORM}=windows" />
		<set name="tmp_config_fn" value="windows-x86-64-${ISE_C_COMPILER}" if="${ISE_PLATFORM}=win64" />
		<copy file="${EIFFEL_SRC}\C\CONFIGS\${tmp_config_fn}" to_file="${_INSTALL_DIR}\studio\config\${ISE_PLATFORM}\${ISE_C_COMPILER}\${tmp_config_fn}" />
		<unset name="tmp_config_fn" />

		<!-- wel_hook.dll -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${_INSTALL_DIR}${path_separator}esbuilder${path_separator}spec${path_separator}${ISE_PLATFORM}${path_separator}bin,wel_hook.dll" />
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},wel_hook.dll" />
		<!-- EiffelSoftware.Runtime -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},EiffelSoftware.Runtime.dll" />
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir}${path_separator}lib,EiffelSoftware.Runtime.dll" />
		<!-- finish_freezing -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},finish_freezing${exe}" />
		<!-- h2e -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},h2e${exe}" />
		<!-- emake -->
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},emake${exe}" />
		<!-- espawn --> 
		<geant target="install__file" arguments="${_OUTPUT_DIR},${tmp_install_dir_bin},espawn${exe}" 	if="${_INCLUDE_DEVPACK}=true" />

		<!-- continue with binaries -->
		<copy dir="${_OUTPUT_DIR}" to_directory="${tmp_install_dir_bin}" >
			<fileset include="@(*.exe)" />
			<fileset include="@(*.dll)" />
		</copy>
	</target>

	<target name="clean_all" depend="init_deliv" >
		<echo message="Cleaning All ..." />
		<geant target="clean_bin" reuse_variables="true" fork="false" />
		<geant target="clean_es" reuse_variables="true" fork="false" />
		<geant target="clean_compile" reuse_variables="true" fork="false" />
	</target>
	<target name="clean_bin" depend="init_deliv" >
		<geant target="clean__folder" arguments="${_OUTPUT_DIR}" />
	</target>
	<target name="clean_es" depend="init_deliv" >
		<echo message="Cleaning EIFGENs ..." />
		<geant target="clean_compile" reuse_variables="true" fork="false" />
		<geant target="clean_delivery" reuse_variables="true" fork="false" />
	</target>
	<target name="clean_compile" depend="init_deliv" >
		<geant target="clean__folder" arguments="${_COMPILE_DIR}${path_separator}EIFGENs" />
	</target>
	<target name="clean_delivery" depend="init_deliv" >
		<geant target="clean__folder" arguments="${_INSTALL_DIR}" />
	</target>

	<target name="make_delivery" depend="init_deliv" >
		<echo message="Task: make_delivery"/>
		<geant target="_log" arguments="Task: make_delivery" />

		<set name="NEW_ISE_EIFFEL" value="${cwd}" unless="${NEW_ISE_EIFFEL}" />
		<geant target="make_delivery_common" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" />
		<geant target="make_delivery_windows" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" if="${is_windows}" />
		<geant target="make_delivery_unix" reuse_variables="true" fork="false" dir="${NEW_ISE_EIFFEL}" unless="${is_windows}" />

		<!-- compile NEW_ISE_EIFFEL library -->
		<set name="old_ISE_LIBRARY" value="${ISE_LIBRARY}" />
		<setenv name="ISE_LIBRARY" value="${NEW_ISE_EIFFEL}" />
		<geant target="compile_library" reuse_variables="true" />
		<geant target="_log" arguments="Error occurred during 'compile_library' (${return_code})" unless="${return_code}=0"  />

		<geant target="compile_gobo" reuse_variables="true" />
		<geant target="_log" arguments="Error occurred during 'compile_gobo' (${return_code})" unless="${return_code}=0"  />

		<setenv name="ISE_LIBRARY" value="${old_ISE_LIBRARY}" />
		<unset name="old_ISE_LIBRARY" />
		<set name="return_code" value="0" />
	</target>

	<target name="update_delivery" depend="init_deliv" >
		<echo message="Task: update_delivery"/>
		<geant target="_log" arguments="Task: update_delivery" />
		<set name="NEW_ISE_EIFFEL" value="${cwd}" />
		<geant target="make_delivery" reuse_variables="true" fork="false" />
	</target>

	<target name="make_delivery_common" depend="init_deliv" >
		<!-- platform independant -->
		<echo message=" - Copy Delivery to ${cwd}"/>
		<copy to_directory="${cwd}" dir="${_DELIVERY_DIR}" >
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)"  />
		</copy>
		<mkdir directory="library"/>
		<echo message=" - Copy library to ${cwd}${path_separator}library"/>
		<copy to_directory="${cwd}${path_separator}library" dir="${EIFFEL_SRC}${path_separator}library" >
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)"  />
		</copy>
		<mkdir directory="C_library"/>
		<echo message=" - Copy C_library to ${cwd}${path_separator}C_library"/>
		<copy to_directory="${cwd}${path_separator}C_library" dir="${EIFFEL_SRC}${path_separator}C_library" >
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>

		<echo message=" - ..." />
		<mkdir directory="studio/spec/$ISE_PLATFORM"/>
		<mkdir directory="studio/spec/$ISE_PLATFORM/bin"/>
		<echo message="make dir : studio/spec/$ISE_PLATFORM/include" />
		<mkdir directory="studio/spec/$ISE_PLATFORM/include"/>
		<mkdir directory="studio/spec/$ISE_PLATFORM/lib"/>
		<copy to_directory="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/include" dir="${EIFFEL_SRC}/C/run-time" >
			<fileset include="@(*.h)" />
		</copy>
		<copy file="${EIFFEL_SRC}/C/eif_confmagic.h" 			to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/include/eif_confmagic.h" />
		<copy file="${EIFFEL_SRC}/C/run-time/x2c${exe}" 		to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/x2c${exe}" />
		<copy file="${EIFFEL_SRC}/C/ipc/daemon/ecdbgd${exe}" 	to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/ecdbgd${exe}" />

		<copy to_directory="${_INSTALL_DIR}${path_separator}precomp${path_separator}spec${path_separator}${ISE_PLATFORM}" dir="precomp${path_separator}spec${path_separator}platform" >
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
	</target>

	<target name="make_delivery_windows" depend="init_deliv" >
		<!-- Windows -->
		<mkdir directory="studio\spec\$ISE_PLATFORM\lib\$ISE_C_COMPILER"/>
		<copy to_directory="${_INSTALL_DIR}\studio\spec\${ISE_PLATFORM}\lib\$ISE_C_COMPILER" dir="${EIFFEL_SRC}\C\run-time\LIB" >
			<fileset include="@(*.lib|*.dll)" />
		</copy>


		<copy to_directory="${_INSTALL_DIR}\studio\config\${ISE_PLATFORM}" dir="studio\config\windows" unless="${ISE_PLATFORM}=windows" >
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
		<copy file="${EIFFEL_SRC}/C/config.sh" to_file="${_INSTALL_DIR}/studio/config/${ISE_PLATFORM}/${ISE_C_COMPILER}/config.sh" />

		<!-- Unix tools -->
		<copy file="${EIFFEL_SRC}/C/shell/bin/rt_converter${exe}" 	to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/rt_converter${exe}" />
		<copy file="${EIFFEL_SRC}/C/shell/bin/sed${exe}" 			to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/sed${exe}" />
		<copy file="${EIFFEL_SRC}/C/shell/bin/msys-1.0.dll" 		to_file="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/bin/msys-1.0.dll" />
		<mkdir directory="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/etc"  />
	</target>

	<target name="make_delivery_unix" depend="init_deliv" >
		<copy file="${EIFFEL_SRC}/C/config.sh" to_directory="studio/spec/${ISE_PLATFORM}/include" />
		<copy to_directory="${_INSTALL_DIR}/studio/spec/${ISE_PLATFORM}/lib" dir="${EIFFEL_SRC}/C/run-time" >
			<fileset include="@(lib*.*)" />
		</copy>
		<copy to_directory="${_INSTALL_DIR}/studio/config/${ISE_PLATFORM}" dir="studio/config/unix">
			<fileset include="@(**/*)" exclude="@(**/.svn/**/*)" />
		</copy>
		<copy file="${EIFFEL_SRC}/C/config.sh" to_file="${_INSTALL_DIR}/studio/config/${ISE_PLATFORM}/config.sh"  />
		<exec executable="ln -f -s ../../unix/finish_freezing finish_freezing" dir="studio/spec/$ISE_PLATFORM/bin" />
		<exec executable="ln -f -s ../../unix/prelink prelink" dir="studio/spec/$ISE_PLATFORM/bin" />
	</target>

</project>
