<document output="studio" title="EiffelStore Implementation Layer">
	<meta_data/>
	<paragraph>
		<paragraph>Each interface class has an implementation counterpart that implements specific DBMS handling. The class prefix indicates clearly its layer, for instance:</paragraph>
		<list ordered="false">
			<item><link><url>/libraries/store/reference/interface/DB_SELECTION_flatshort.html</url><label>DB_SELECTION</label></link> is the interface to perform a database selection query.</item>
			<item><link><url>/libraries/store/reference/dbms/support/DATABASE_SELECTION_flatshort.html</url><label>DATABASE_SELECTION</label></link> [<link><url>/libraries/store/reference/dbms/support/DATABASE_flatshort.html</url><label>DATABASE</label></link>] is its implementation. </item>
		</list>
		<paragraph>The abstract <link><url>/libraries/store/reference/dbms/support/DATABASE_flatshort.html</url><label>DATABASE</label></link> class represents a DBMS, i.e. it is the Eiffel-side database call interface. It is inherited for instance by the instantiable <code><class_name>ORACLE</class_name></code> and <code><class_name>ODBC</class_name></code> classes.</paragraph>
		<paragraph>EiffelStore enables to link common interface objects with database-specific implementation objects using a 
			<bold>handle</bold>. This handle also enables to switch between different databases.
		</paragraph>
		<paragraph>Let us see in 4 steps how EiffelStore implements this handle system: 
			<list ordered="false">
				<item>The 
					<link>
						<url>#handle</url>
						<label>active database handle</label>
					</link>.
				</item>
				<item>The 
					<link>
						<url>#association</url>
						<label>association between interface and implementation</label>
					</link> objects.
				</item>
				<item>The 
					<link>
						<url>#access</url>
						<label>access to the DBMS call interface</label>
					</link> from the implementation layer.
				</item>
				<item>The 
					<link>
						<url>#selection</url>
						<label>active database selection</label>
					</link> from the database application.0
				</item>
			</list>
			<heading>
				<size>2</size>The active database handle
			</heading>
			<paragraph>The <code><class_name>HANDLE_USE </class_name></code>class provides access to the unique <code><class_name>HANDLE</class_name></code> instance. This object stores all the information about the active database, mainly:</paragraph>
			<list ordered="false">
				<item>Database login information:
<code_block>
	<feature_name>login</feature_name><symbol>:</symbol> <class_name>LOGIN</class_name> <symbol>[</symbol><class_name>DATABASE</class_name><symbol>]</symbol>
		<comment>-- Session login</comment>
</code_block>
				</item>
				<item>Database status information:
<code_block>
	<feature_name>status</feature_name><symbol>:</symbol> <class_name>DB_STATUS</class_name>
		<comment>-- Status of active database</comment>
</code_block>
				</item>
			</list>
			<heading>
				<size>2</size>Association between interface and implementation
			</heading>
			<paragraph>The association between an interface object and its implementation counterpart is done at the interface object creation.</paragraph>
			<paragraph>Every interface class inherits from the <code><class_name>HANDLE_USE</class_name></code> class and can access the active database handle. This handle contains a <code><class_name>DB</class_name></code> [<code><class_name>DATABASE</class_name></code>] object that provides implementation objects corresponding to every interface objects.</paragraph>
			<paragraph>The creation procedure for a <code><class_name>DB_CHANGE</class_name></code> object is for instance:</paragraph>
<code_block>
	<feature_name>make</feature_name> <keyword>is</keyword>
			<comment>-- Create an interface object to change active base.</comment>
		<keyword>do</keyword>
			<feature_name>implementation</feature_name> <symbol>:</symbol><symbol>=</symbol> <feature_name>handle</feature_name>.<feature_name>database</feature_name>.<feature_name>db_change</feature_name>
			<keyword>create</keyword> <feature_name>ht</feature_name>.<feature_name>make</feature_name> <symbol>(</symbol><feature_name>name_table_size</feature_name><symbol>)</symbol>
			<feature_name>implementation</feature_name>.<feature_name>set_ht</feature_name> <symbol>(</symbol><feature_name>ht</feature_name><symbol>)</symbol>
		<keyword>end</keyword>
</code_block>
			<heading>
				<size>2</size>Access to the DBMS call interface
			</heading>
			<paragraph>Every implementation class can access the active database call interface by inheriting from the <code><class_name>HANDLE_SPEC</class_name></code> [<code><class_name>DATABASE</class_name></code>] class. This class provides access to the <code><class_name>DATABASE</class_name></code> object, i.e. an instance of class ORACLE or ODBC.</paragraph>
			<paragraph><code><class_name>DATABASE </class_name></code>descendants are actually wrappers for the DBMS call interfaces written in C. More precisely, call interfaces as delivered by the DBMS companies are called in an EiffelStore C library. The C libraries are then wrapped into Eiffel classes, <code><class_name>DATABASE</class_name></code> descendants.</paragraph>
			<heading>
				<size>2</size>Active database selection
			</heading>
			<paragraph>As seen in the 
				<link>
					<url>../10_interface_layer/10_database_connection/index.xml</url>
					<label>interface connection</label>
				</link> part, active database selection is performed by the {<code><class_name>DATABASE_APPL</class_name></code>}.<code><feature_name>set_base</feature_name></code> feature: when a <code><class_name>DATABASE_APPL</class_name></code> object calls set_base, database represented by this object is activated.
			</paragraph>
			<paragraph>Let us give some details about the set_base feature:</paragraph>
			<list ordered="false">
				<item>Database call interface global reference is updated through {<code><class_name>HANDLE_SPEC</class_name></code>}.<code><feature_name>update_handle</feature_name></code>.</item>
				<item>All information about the database is set to the handle, mainly: 
					<list ordered="false">
						<item>Login information.</item>
						<item>Status information. </item>
					</list>
					<note>
						<bold>Note</bold>: When database is inactive, its information is stored in the <code><class_name>DATABASE_APPL</class_name></code> object.
					</note>
				</item>
			</list>
			<paragraph>The corresponding code looks like:</paragraph>
<code_block>
	<feature_name>session_status</feature_name><symbol>:</symbol> <class_name>DB_STATUS</class_name>
			<comment>-- A session management object reference.</comment>
	...
	<feature_name>set_base</feature_name> <keyword>is</keyword>
		...
		<feature_name>update_handle</feature_name>
		<keyword>if</keyword> <feature_name>session_status</feature_name> <symbol>=</symbol> Void <keyword>then</keyword>
			<keyword>create</keyword> <feature_name>session_status</feature_name>.<feature_name>make</feature_name>
		<keyword>end</keyword>
		<feature_name>handle</feature_name>.<feature_name>set_status</feature_name> <symbol>(</symbol><feature_name>session_status</feature_name><symbol>)</symbol>
		...
</code_block>
			<seealso>
				<bold>See Also</bold>
				<line_break/>
				<link>
					<url>../10_interface_layer/index.xml</url>
					<label>The interface layer</label>
				</link>
				<line_break/>
			</seealso>
		</paragraph>
	</paragraph></document>
