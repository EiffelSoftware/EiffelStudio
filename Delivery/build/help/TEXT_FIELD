WIDGET	: Text field
DESCRIPTION : A text editor.

CLIENT INTERFACE:
-----------------

class interface
    TEXT_FIELD

creation 

    make (a_name: STRING; a_parent: COMPOSITE)
        require
            valid_name: a_name /= void;
            valid_parent: a_parent /= void
        ensure
            parent_set: parent = a_parent;
            identifier_set: identifier.is_equal (a_name);
            managed: managed

    make_unmanaged (a_name: STRING; a_parent: COMPOSITE)
        require
            valid_name: a_name /= void;
            valid_parent: a_parent /= void
        ensure
            parent_set: parent = a_parent;
            identifier_set: identifier.is_equal (a_name);
            not_managed: not managed

feature -- Access

    background_color: COLOR
            -- Background color of Current widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            valid_result: Result /= void

    background_pixmap: PIXMAP
            -- Background pixmap of Current widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            valid_result: Result /= void and then Result.is_valid

    cursor: SCREEN_CURSOR
            -- Cursor of current widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    font: FONT
            -- Font name of label
            -- (from FONTABLE)
        require -- from FONTABLE
            exists: not destroyed

    foreground_color: COLOR
            -- Foreground color of Current widget
            -- (from PRIMITIVE)
        require -- from PRIMITIVE
            exists: not destroyed
        ensure -- from PRIMITIVE
            valid_result: Result /= void

    get_multi_click_time: INTEGER
            -- Get time granted for clicking
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    identifier: STRING
            -- Name of widget
            -- (from WIDGET)

    parent: COMPOSITE
            -- Parent of Current widget
            -- (from PRIMITIVE)
        require -- from STACKABLE
            exists: not destroyed

    screen: SCREEN
            -- Screen of Current widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            valid_result: Result /= void

    screen_object: POINTER
            -- implementation of current widget
            -- (from STACKABLE)
        require -- from STACKABLE
            exists: not destroyed

    text: STRING
            -- Value of current text field
        require
            exists: not destroyed
        ensure
            Result.count = count

    top: TOP
            -- Top shell or base of Current widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            valid_result: Result /= void
    
feature -- Measurement

    count: INTEGER
            -- Number of character in current text field
        require
            exists: not destroyed
        ensure
            Result >= 0

    depth: INTEGER
            -- Depth of Current widget
            -- (top_shell's depth is 0, its child's depth is 1,...)
            -- (from WIDGET)

    height: INTEGER
            -- Height of widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            positive_height: Result >= 0

    maximum_size: INTEGER
            -- Maximum number of characters in current
            -- text field
        require
            exists: not destroyed

    real_x: INTEGER
            -- Vertical position relative to root window
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    real_y: INTEGER
            -- Horizontal position relative to root window
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    width: INTEGER
            -- Width of widget
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            positive_width: Result >= 0

    x: INTEGER
            -- Horizontal position relative to parent
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    y: INTEGER
            -- Vertical position relative to parent
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
    
feature -- Comparison

    same (other: like Current): BOOLEAN
            -- Does Current widget and `other' correspond
            -- to the same screen object?
            -- (from WIDGET)
        require -- from WIDGET
            other_exists: other /= void
    
feature -- Status report

    destroyed: BOOLEAN
            -- Is Current widget destroyed?
            -- (from WIDGET)

    insensitive: BOOLEAN
            -- Is current widget insensitive to
            -- user actions? (If it is, events will
            -- not be dispatched to Current widget or
            -- any of its children)
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    is_stackable: BOOLEAN
            -- (from STACKABLE)
        require -- from STACKABLE
            exists: not destroyed

    managed: BOOLEAN
            -- Is Current widget subject to
            -- geometry managment?
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    realized: BOOLEAN
            -- Is Current widget realized?
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        require else -- from STACKABLE
            exists: not destroyed
        require else -- from WIDGET
            exists: not destroyed
    
feature -- Status setting

    clear
            -- Clear current text field.
        require
            exists: not destroyed

    destroy
            -- Destroy actual screen object of Current
            -- widget and of all children.
            -- (from WIDGET)

    grab (a_cursor: SCREEN_CURSOR)
            -- Grab the mouse and the keyboard , i.e.
            -- channel all events to Current widget
            -- regardless of where they occur
            -- If `cursor' is not void, the pointer
            -- will have `a_cursor' shape during the grab.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized

    hide
            -- Hide Current widget.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized
        ensure -- from WIDGET
            shown: (parent /= void and then parent.shown implies not shown) or else (parent = void implies not shown)

    lower
            -- lower current to the bottom
            -- of its peer stacking order
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            is_realized: realized

    manage
            -- Enable geometry managment.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            managed: parent /= void implies managed

    propagate_event
            -- Propagate events not handled by Current
            -- widget to direct parent.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized

    raise
            -- raise the Current widget to the top
            -- of its peer stacking order
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            is_realized: realized

    realize
            -- Create actual screen object of Current
            -- widget and of all children (recursively) .
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            realized: realized

    set_insensitive
            -- Make Current widget insensitive
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            insensitive: insensitive

    set_managed (b: BOOLEAN)
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    set_maximum_size (a_max: INTEGER)
            -- Set maximum_size to `a_max'.
        require
            exists: not destroyed;
            not_negative_maximum: a_max >= 0

    set_no_event_propagation
            -- Do not propagate events to direct
            -- parent.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized

    set_sensitive
            -- Make Current widget sensitive.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            sensitive: not insensitive

    show
            -- Show Current widget.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized
        ensure -- from WIDGET
            shown: (parent /= void and then not parent.shown implies shown) or else (parent = void implies shown)

    shown: BOOLEAN
            -- Is current widget visible?
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized

    ungrab
            -- Release the mouse and the keyboard
            -- from an earlier grab.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            widget_realized: realized

    unmanage
            -- Disable geometry managment.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            not_managed: parent /= void implies not managed

    unrealize
            -- Destroy screen window implementation and all
            -- screen window implementations of its children if `flag'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
        ensure -- from WIDGET
            not_realized: not realized
    
feature -- Element change

    add_activate_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of action to be executed when
            -- an activate event occurs.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
        require
            exists: not destroyed;
            valid_command: a_command /= void

    add_button_motion_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the mouse is moved while the `number'-th mouse
            -- button is pressed.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_button_press_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the `number'-th mouse button is pressed.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_button_release_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the `number'-th mouse button is released.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_destroy_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when current widget is destroyed.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_enter_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the pointer enters Current widget.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_key_press_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when a key is pressed.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_key_release_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when a key is released.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_leave_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the pointer leaves Current widget.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    add_pointer_motion_action (a_command: COMMAND; argument: ANY)
            -- Add `a_command' to the list of actions to be executed
            -- when the mouse is moved.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    append (a_text: STRING)
            -- Append `a_text' at the end of current text.
        require
            exists: not destroyed;
            not_a_text_void: a_text /= void

    insert (a_text: STRING; a_position: INTEGER)
            -- Insert `a_text' in current text field at `a_position'.
            -- Same as `replace (a_position, a_position, a_text)'.
        require
            exists: not destroyed;
            not_a_text_void: a_text /= void;
            a_position_large_enough: a_position >= 0;
            a_position_small_enough: a_position <= count
        ensure
            a_text.count > 0 implies a_text.is_equal (text.substring (a_position + 1, a_position + a_text.count))

    replace (from_position, to_position: INTEGER; a_text: STRING)
            -- Replace text from `from_position' to `to_position' by `a_text'.
        require
            exists: not destroyed;
            not_text_void: a_text /= void;
            from_position_smaller_th_to_position: from_position <= to_position;
            from_position_large_enough: from_position >= 0;
            to_position_small_enough: to_position <= count
        ensure
            a_text.count > 0 implies a_text.is_equal (text.substring (from_position + 1, from_position + a_text.count))

    set_action (a_translation: STRING; a_command: COMMAND; argument: ANY)
            -- Set `a_command' to be executed when `a_translation' occurs.
            -- `a_translation' must be specified with the X toolkit conventions.
            -- `argument' will be passed to `a_command' whenever it is
            -- invoked as a callback.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void;
            valid_translation: a_translation /= void

    set_font (a_font: FONT)
            -- Set font label to `font_name'.
            -- (from FONTABLE)
        require -- from FONTABLE
            exists: not destroyed;
            a_font_exists: a_font /= void;
            a_font_specified: a_font.is_specified

    set_font_name (a_font_name: STRING)
            -- Set font label to `a_font_name'.
            -- (from FONTABLE)
        require -- from FONTABLE
            exists: not destroyed;
            a_font_name_exists: a_font_name /= void

    set_foreground_color (new_color: COLOR)
            -- Set foreground color to `new_color'.
            -- (from PRIMITIVE)
        require -- from PRIMITIVE
            exists: not destroyed;
            valid_color: new_color /= void
        ensure -- from PRIMITIVE
            foreground_set: foreground_color = new_color

    set_multi_click_time (time: INTEGER)
            -- Set time granted for clicking
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    set_text (a_text: STRING)
            -- Set `text' to `a_text'.
        require
            exists: not destroyed;
            not_a_text_void: a_text /= void
    
feature -- Removal

    remove_action (a_translation: STRING)
            -- Remove the command executed when `a_translation' occurs.
            -- Do nothing if no command has been specified.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_translation: a_translation /= void

    remove_activate_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of action to be executed
            -- when an activate event occurs.
        require
            exists: not destroyed;
            not_a_command_void: a_command /= void

    remove_button_motion_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- mouse is moved while the `number'-th mouse button is pressed.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_button_press_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- `number'-th mouse button is pressed.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_button_release_action (number: INTEGER; a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- `number'-th mouse button is released.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_destroy_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when
            -- Current widget is destroyed.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_enter_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- pointer enters Current widget.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_key_press_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when
            -- a key is pressed.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_key_release_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when
            -- a key is released.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_leave_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- pointer leaves Current widget.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    remove_pointer_motion_action (a_command: COMMAND; argument: ANY)
            -- Remove `a_command' from the list of actions to be executed when the
            -- mouse is moved.
            -- Do nothing if the pair (`a_command', `argument') had not
            -- been specified previously.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_command: a_command /= void

    set_background_color (new_color: COLOR)
            -- Set background color to `new_color'.
            --reset_background_pixmap_to_default:
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_color: new_color /= void
        ensure -- from WIDGET
            color_set: background_color = new_color

    set_background_pixmap (a_pixmap: PIXMAP)
            -- Set background pixmap to `a_pixmap'.
            --reset_background_color_to_default:
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_pixmap: a_pixmap /= void
        ensure -- from WIDGET
            pixmap_set: background_pixmap = a_pixmap

    set_cursor (a_cursor: SCREEN_CURSOR)
            -- Set `cursor' of current widget to `a_cursor'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            valid_cursor: a_cursor /= void;
            widget_realized: realized
    
feature -- Resizing

    set_height (new_height: INTEGER)
            -- Set height to `new_height'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            positive_height: new_height >= 0

    set_size (new_width: INTEGER; new_height: INTEGER)
            -- Set width and height to `new_width'
            -- and `new_height'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            positive_width: new_width >= 0;
            positive_height: new_height >= 0

    set_width (new_width: INTEGER)
            -- Set width to `new_width'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed;
            positive_width: new_width >= 0

    set_x (new_x: INTEGER)
            -- Set  horizontal position relative
            -- to parent to `new_x'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    set_x_y (new_x: INTEGER; new_y: INTEGER)
            -- Set horizontal position and
            -- vertical position relative to parent
            -- to `new_x' and `new_y'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed

    set_y (new_y: INTEGER)
            -- Set vertical position relative
            -- to parent to `new_y'.
            -- (from WIDGET)
        require -- from WIDGET
            exists: not destroyed
    
invariant

        -- from GENERAL
    reflexive_equality: standard_is_equal (Current);
    reflexive_conformance: conforms_to (Current);
        -- from PRIMITIVE
    positive_depth: depth > 0;
    has_parent: not destroyed implies parent /= void;
        -- from WIDGET
    widget_positive_depth: depth >= 0;

end -- class TEXT_FIELD


