system
	"ec"

root
	ES: make

default
	assertion (check)
	assertion (require)
	assertion (ensure)
	arguments (" ")
	disabled_debug (yes)
	debug (no)
	line_generation (no)
	profile (no)
	trace (no)
	il_verifiable (yes)
	cls_compliant (yes)
	cls_compliant_name (yes)
	msil_generation_type ("exe")
	check_vape (yes)
	console_application (yes)
	address_expression (no)
	array_optimization (no)
	dead_code_removal (yes)
	dynamic_runtime (no)
	exception_trace (yes)
	inlining (no)
	multithreaded (no)


cluster
	all base:		"$EIFFEL_SRC\library\base"
		exclude
			"table"; "CVS"; 
		visible
			array
				end
			string
				end
		end

	all wel:		"$EIFFEL_SRC\library\wel"
		exclude
			"CVS"; 
		end

	all com:		"$EIFFEL_SRC\library\com"
		exclude
			"CVS"; 
		visible
			ecom_array
				end
		end

	liman:		"$EIFFEL_SRC\Eiffel\limand"

	liman_bench (liman):		"$\bench"

	liman_abstract (liman):		"$\abstract"

	beurk:		"$EIFFEL_SRC\Eiffel\beurk"

	compiler_support:		"$EIFFEL_SRC\Eiffel\support"

	common:		"$EIFFEL_SRC\Eiffel\common"

	common_parser (common):		"$\parser"

	common_eiffel_parser (common_parser):		"$\parser"

	old_resources (common):		"$\resources"

	flat_short (common_parser):		"$\flat_short"
		exclude
			"format_context.e"; "local_format.e"; 
		end

	flat_short_b:		"$EIFFEL_SRC\Eiffel\flat_short\bench"

	yacc:		"$EIFFEL_SRC\Eiffel\yacc"

	const:		"$EIFFEL_SRC\Eiffel\const"

	all gobo:		"$EIFFEL_SRC\library\gobo\library"
		exclude
			"hact"; "se"; "ve"; "base"; "CVS"; 
		end

	all documentation:		"$EIFFEL_SRC\Eiffel\case\documentation"
		exclude
			"CVS"; 
		end

	all lace:		"$EIFFEL_SRC\Eiffel\lace"
		exclude
			"CVS"; 
		end

	all compiler:		"$EIFFEL_SRC\Eiffel\eiffel"
		exclude
			"CVS"; "unix"; "Clib"; "Core"; "junk"; "kernel"; 
		end

	all compiler_api:		"$EIFFEL_SRC\Eiffel\API"
		exclude
			"CVS"; 
		end

	all helpers:		"$EIFFEL_SRC/library/helpers"
		exclude
			"CVS"; 
		end

	switch:		"$EIFFEL_SRC\Eiffel\switch"

	interface_switch (switch):		"$\interface\batch_only"

	license_switch (switch):		"$\license\no_license"

	communications (switch):		"$\no_communication"

	status (communications):		"$\status"

	debuging_class (communications):		"$\debug"

	interface:		"$EIFFEL_SRC\Eiffel\interface"

	interface_shared (interface):		"$\shared"

	tty (interface):		"$\tty"

	preference_tool (interface):		"$\graphical\preference_tool"

	profile_tool (interface):		"$\graphical\profile_tool"

external

	include_path:
		"$(EIFFEL_SRC)\C\bench",
		"$(EIFFEL_SRC)\C\platform",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\core\Clib",
		"$(EIFFEL_SRC)\library\com\spec\windows\include",
		"$(EIFFEL_SRC)\library\wel\spec\windows\include",
		"$(EIFFEL_SRC)\library\gobo\library\kernel\include",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\eac\Clib"

	object:
		"$(EIFFEL_SRC)\C\bench\compiler.lib",
		"$(EIFFEL_SRC)\C\platform\platform.lib",
		"$(EIFFEL_SRC)\C\minilzo\minilzo.obj",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\core\Clib\ecom.lib",
		"$(EIFFEL_SRC)\library\com\spec\$(ISE_C_COMPILER)\lib\com.lib",
		"$(EIFFEL_SRC)\library\com\spec\$(ISE_C_COMPILER)\lib\com_runtime.lib",
		"$(EIFFEL_SRC)\library\wel\spec\$(ISE_C_COMPILER)\lib\wel.lib",
		"$(EIFFEL_SRC)\Eiffel\eiffel\com_il_generation\eac\Clib\ecom.lib"

end
