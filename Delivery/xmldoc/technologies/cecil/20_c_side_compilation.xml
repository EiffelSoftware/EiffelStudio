<document title="Using a CECIL archive" output="studio">
	<meta_data >
		<help >
			<meta >
				<meta_content >Compiler</meta_content>
				<name >MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph >
		<heading >
			<size >1</size>Using a CECIL archive
		</heading>
		<heading >
			<size >2</size>Linking the CECIL archive into a program
		</heading>The CECIL archive already incorporates the Eiffel run-time. To use the functions provided in the CECIL archive, simply write the C programs according to the CECIL specifications of ETL, and then include the CECIL archive in the link line of your C application. This line looks like: 
		<paragraph >on Unix/linux:</paragraph>

<code_block >	ld -o [name of your CECIL executable] [your C object files and archives]
	lib&amp;lt;system name&amp;gt;.a -lm</code_block>

		<note >
			<bold >Note</bold>: On Unix, linking with "-lm" is required since the Eiffel run-time uses the standard math libraries. You may need to link with other libraries (for example, on linux: with "-lbsd", in MT mode with "-lpthread" (posix threads) or "-lthread" (solaris)). 
		</note>
		<paragraph />
		<paragraph >on Windows, with MS VC++:</paragraph>

<code_block >	link [your link flags] -OUT:[name of your cecil executable] [your C
	object files and archives] lib&amp;lt;system name&amp;gt;.lib [other Windows
	libraries]</code_block>
		<paragraph />
		<paragraph >on Windows with Borland:</paragraph>

<code_block >	ilink32 -ap -c -Tpe main.obj c0w32.obj, [name of your cecil
	executable],,EIFGEN\W_code\lib&amp;lt;system name&amp;gt;.lib CW32 IMPORT32 OLE2w32,,</code_block>

		<paragraph />
		<paragraph >
			<bold />
			<line_break />The CECIL library is built automatically, which is unfortunately not the case of the corresponding object files of the cecil program you wrote. 
			<line_break />The C flags to use are usually the same as the ones needed during the compilation of the generated C-code plus those which are relevant to your own C-code. 
		</paragraph>
		<paragraph >Typically, you will compile with your flags as below (if you are using gcc):</paragraph>
<code_block >	gcc -c -O -I$ISE_EIFFEL/studio/spec/$PLATFORM/include -I&amp;lt;SOME_INCLUDE_PATH&amp;gt; -D&amp;lt;SOME_FLAGS&amp;gt; your_file.c</code_block>
		<paragraph >or , if you are on Windows using MS VC++:</paragraph>

<code_block >	cl -c -nologo -Ox -I$ISE_EIFFEL\studio\spec\windows\include -I&amp;lt;SOME_INCLUDE_PATH&amp;gt; -D&amp;lt;SOME_FLAGS&amp;gt; your_file.c</code_block>
		<paragraph >or, if you are on Windows using Borland:</paragraph>

<code_block >	bcc32 -c -I$ISE_EIFFEL\studio\spec\windows\include -I&amp;lt;SOME_INCLUDE_PATH&amp;gt; -D&amp;lt;SOME_FLAGS&amp;gt; your_file.c</code_block>
		<sample >
			<bold >Sample</bold>: if you want to use the multithreaded facilities of Eiffel, you should define the EIFFEL MT flags by adding "-DEIF_THREADS" to the command line and follow the instructions of your C compiler and platform to find out which additional flags you may need
			<bold >. For example:</bold> on Solaris you need to add "-DSOLARIS_THREADS -D_REENTRANT". 
		</sample>
		<paragraph >You can specify a Makefile in your Ace file, so that your C files will be compiled automatically after the Eiffel compilation and before the final linking. Just add at the end of your Ace file in the external clause:</paragraph>

<code_block >	external:
			"$PATH_TO_MAKEFILE/your_makefile";</code_block>

		<paragraph >This makefile will be run from the $/EIFGEN/W_code or $/EIFGEN/F_code directory. You should not give the CECIL executable the same name as your system, because it will be replaced by the Eiffel executable when you run another compilation. </paragraph>
		<heading >
			<size >2</size>Initializing the Eiffel run-time
		</heading>Even though the main thread of control resides in the "C side" of the program, the Eiffel run-time must be initialized correctly before it can use CECIL facilities to communicate with the Eiffel world. 
		<paragraph >In the C file containing the "main" C function, you must add the following line to include the header file "eif_setup. h" provided with this example:</paragraph>

<code_block >	#include "eif_setup.h"  /* Macros EIF_INITIALIZE and EIF_DISPOSE_ALL */
	#include "eif_eiffel.h" /* Exported functions of the Eiffel run-time */</code_block>

		<paragraph >Your "main" function must have the three standard arguments of the C "main" function: "argc", "argv" and "envp" and include the following macros that are defined in "eif_setup. h":</paragraph><code_block >
int main(int argc, char **argv, char **envp)
	/* Please respect this signature: `argc', `argv' and `envp' are used
	 * in EIF_INITIALIZE.
	 */
{
		/* declarations of variables */
		/* Initialize the Eiffel run-time. */
	EIF_INITIALIZE(failure)

	/* body of your "main" function */

		/* Reclaim the memory allocated by the Eiffel run-time. */
	EIF_DISPOSE_ALL
}
</code_block>
		<note >
			<bold >Notes</bold>:
			<line_break />The above mentioned macros must imperatively be in the body of the "main" function for the Eiffel exception handling mechanism to work correctly. 
			<bold /> You also need to add the Eiffel run time directory to the list of directories in which the C compiler searches for include files. You can do so by using the "-I" option of your C compiler. 
			<bold /> You can only link one CECIL library into your C applications at a time. 
		</note>
		<warning >
			<bold >Caution</bold>: Even though external object files and archives are correctly specified in the "object" clause of the Ace file, you will need to explicitly link them to your C application. 
		</warning>
	</paragraph></document>