#
# PCCTS makefile for: cplusplus.g stat.g expr.g
#
# [do a 'make Cplusplus=g++' or whatever if Cplusplus make macro not defined]
#
# PUBLIC DOMAIN PCCTS-BASED C++ GRAMMAR (cplusplus.g, stat.g, expr.g)
#
# VERSION 1.1
#
# Authors: Sumana Srinivasan, NeXT Inc.;            sumana_srinivasan@next.com
#          Terence Parr, Parr Research Corporation; parrt@parr-research.com
#          Russell Quong, Purdue University;        quong@ecn.purdue.edu
#
# SOFTWARE RIGHTS
#
# This file is a part of the ANTLR-based C++ grammar and is free
# software.  We do not reserve any LEGAL rights to its use or
# distribution, but you may NOT claim ownership or authorship of this
# grammar or support code.  An individual or company may otherwise do
# whatever they wish with the grammar distributed herewith including the
# incorporation of the grammar or the output generated by ANTLR into
# commerical software.  You may redistribute in source or binary form
# without payment of royalties to us as long as this header remains
# in all source distributions.
#
# We encourage users to develop parsers/tools using this grammar.
# In return, we ask that credit is given to us for developing this
# grammar.  By "credit", we mean that if you incorporate our grammar or
# the generated code into one of your programs (commercial product,
# research project, or otherwise) that you acknowledge this fact in the
# documentation, research report, etc....  In addition, you should say nice
# things about us at every opportunity.
#
# As long as these guidelines are kept, we expect to continue enhancing
# this grammar.  Feel free to send us enhancements, fixes, bug reports,
# suggestions, or general words of encouragement at parrt@parr-research.com.
# 
# NeXT Computer Inc.
# 900 Chesapeake Dr.
# Redwood City, CA 94555
# 12/02/1994
# 
# Restructured for public consumption by Terence Parr late February, 1995.
#
# Requires PCCTS 1.32b4 or higher to get past ANTLR. 
# 
# DISCLAIMER: we make no guarantees that this grammar works, makes sense,
#             or can be used to do anything useful.
#
# PCCTS release 1.32b4
# Project: cplusplus
# C++ output
# DLG scanner
# ANTLR-defined token types
#
TOKENS=tokens.h
#
# The following filenames must be consistent with ANTLR/DLG flags
DLG_FILE=parser.dlg
ERR=err
HDR_FILE=
SCAN=DLGLexer
PCCTS=..\PCCTS
ANTLR_H=$(PCCTS)\h
BIN=$(PCCTS)\bin
ANTLR=$(BIN)\antlr
DLG=$(BIN)\dlg
#CFLAGS=/I. /I$(ANTLR_H) /DW32MSC
#CFLAGS=/I. /I$(ANTLR_H) /DW32MSC /DCPP_DEBUG1
CFLAGS=/I. /I$(ANTLR_H) /DCPP_DEBUG /DW32MSC /W3 /nologo /D_CRT_SECURE_NO_DEPRECATE
#/Zi for the debug under VC++
AFLAGS=-CC -k 2 -gd -prc on -rl 150000
DFLAGS=-C2 -i -CC
CPPDIR=cppparser
GRM=cplusplus.g stat.g expr.g
SRC=main.cpp support.cpp Dictionary.cpp \
      cplusplus.cpp stat.cpp expr.cpp \
      CPPParser.cpp \
      $(ANTLR_H)\AParser.cpp $(ANTLR_H)\DLexerBase.cpp $(ANTLR_H)\ATokenBuffer.cpp $(SCAN).cpp
OBJ=main.obj support.obj Dictionary.obj \
      cplusplus.obj stat.obj expr.obj \
      CPPParser.obj \
      AParser.obj DLexerBase.obj ATokenBuffer.obj $(SCAN).obj
ANTLR_SPAWN=cplusplus.cpp stat.cpp expr.cpp CPPParser.cpp \
              CPPParser.h $(DLG_FILE) $(TOKENS)
DLG_SPAWN=$(SCAN).cpp $(SCAN).h
CC=cl
RM=-del

legacy:: $(OBJ) $(SRC) legacy.lnk
	$(RM) legacy.exe
	link @legacy.lnk
	$(RM) legacy.lnk

legacy.lnk:
	echo -OUT:legacy.exe -subsystem:CONSOLE > $@
	echo $(OBJ) >> $@

main.obj: main.cpp $(ANTLR_SPAWN) $(SCAN).h Constructor.h Field.h
        $(CC) /c $(CFLAGS) main.cpp

support.obj: support.cpp $(ANTLR_SPAWN) $(SCAN).h
        $(CC) /c $(CFLAGS) support.cpp

cplusplus.obj: $(TOKENS) $(SCAN).h cplusplus.cpp
        $(CC) /c $(CFLAGS) cplusplus.cpp

stat.obj: $(TOKENS) $(SCAN).h stat.cpp
        $(CC) /c $(CFLAGS) stat.cpp

expr.obj: $(TOKENS) $(SCAN).h expr.cpp
        $(CC) /c $(CFLAGS) expr.cpp

CPPParser.obj: $(TOKENS) $(SCAN).h CPPParser.cpp CPPParser.h
        $(CC) /c $(CFLAGS) CPPParser.cpp

Dictionary.obj: Dictionary.cpp
        $(CC) /c $(CFLAGS) Dictionary.cpp

$(SCAN).obj: $(SCAN).cpp $(TOKENS)
        $(CC) /c $(CFLAGS) $(SCAN).cpp

$(ANTLR_SPAWN): $(GRM)
	$(ANTLR) $(AFLAGS) $(GRM)

$(DLG_SPAWN): $(DLG_FILE)
	$(DLG) $(DFLAGS) $(DLG_FILE)

AParser.obj: $(ANTLR_H)/AParser.cpp
        $(CC) /c $(CFLAGS) $(ANTLR_H)/AParser.cpp

ATokenBuffer.obj: $(ANTLR_H)/ATokenBuffer.cpp
        $(CC) -c $(CFLAGS) $(ANTLR_H)/ATokenBuffer.cpp

DLexerBase.obj: $(ANTLR_H)/DLexerBase.cpp
        $(CC) -c $(CFLAGS) $(ANTLR_H)/DLexerBase.cpp
