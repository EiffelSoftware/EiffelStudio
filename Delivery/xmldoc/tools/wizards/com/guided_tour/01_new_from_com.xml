<document title="Creating a new COM component" output="studio">
	<meta_data>
		<help>
			<meta>
				<meta_content>EiffelCOM</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour</meta_content>
				<name>MS-HKWD</name>
			</meta>
			<meta>
				<meta_content>EiffelCOM Wizard, Guided Tour, Creating a new COM component</meta_content>
				<name>MS-HKWD</name>
			</meta>
		</help>
	</meta_data>
	<paragraph>This first tutorial describes creating a COM component from a COM definition file that is either an IDL file or a Type Library. The tutorial focuses on creating an in-process (DLL) component, called 
		<class_name>StringManipulator</class_name>. The component exposes one interface 
		<class_name>IString</class_name> that includes the functions 
		<feature_name>ReplaceSubstring</feature_name> and 
		<feature_name>PruneAll</feature_name> corresponding respectively to the features 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_replace_substring</anchor_name>
				<label>replace_substring</label>
			</link>
		</code> and 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url><anchor_name>f_prune_all</anchor_name>
				<label>prune_all</label>
			</link>
		</code> of the class 
		<code>
			<link>
				<url>../../../../libraries/base/reference/kernel/classic/string_chart.xml</url>
				<label>
					<class_name>STRING</class_name>
				</label>
			</link>
		</code> from the EiffelBase library. <class_name>IString</class_name> also exposes the property 
		<feature_name>String</feature_name> which represents the manipulated string. The property can be set or read.
		<heading>
			<size>2</size> Step by step instructions
		</heading>
		<list ordered="true">
			<item>
				In <bold>Project</bold>, in the <bold>Current project</bold> input field, type in <italic>string_manipulator_server</italic>
				 and press <bold>enter</bold>.
			</item>
			<item>
				In <bold>Project Type</bold>, choose 
				<italic>Create a new COM component</italic>.
			</item>
			<item>
				In <bold>Component Information</bold>, click the browse button (the button with <bold>...</bold>) and open the file 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\string_manipulator.idl</italic> where 
				<italic>$ISE_EIFFEL</italic> represents the path to the EiffelStudio installation directory.
			</item>
			<item>
				Make sure <bold>Generate and use marshaller DLL</bold> is not checked.
			</item>
			<item>
				<link/>Click 
				<bold>Next</bold>.
			</item>
			<item>
				In <bold>Component Type</bold>, choose  
				<italic>In-process (*.dll)</italic>.
			</item>
			<item>
				In <bold>Generation Options</bold>, click the browse button and select the directory where the project should be created (later referenced as <italic>destination folder</italic>). Choose 
				<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\component</italic> where 
				<italic>$ISE_EIFFEL</italic> represents the path to the EiffelStudio directory.
			</item>
			<item>
				Make sure both <bold>Compile C code</bold> and <bold>Compile Eiffel code</bold> are checked.
			</item>
			<item>
				Make sure <bold>Clean destination folder prior to generation</bold> is selected.
			</item>
			<item>
				Click <bold>Generate</bold>.
			</item>
			<item>
				Wait until the wizard is done.
			</item>
		</list>
		<heading>
			<size>2</size> First look at the generated code
		</heading>
		<paragraph>
			<link/>At the end of the processing the <bold>EiffelStudio</bold> button becomes enabled. Click on it. This will automatically start EiffelStudio with the generated project so you can more easily navigate through the created Eiffel classes. You can save the processing output by clicking the <bold>Save</bold> button.
		</paragraph>
		<paragraph>The deferred class 
			<class_name>STRING_MANIPULATOR_COCLASS</class_name> represents the component and exposes all its functionality. It inherits from 
			<class_name>ISTRING_INTERFACE</class_name> which corresponds to the 
			<bold>IString</bold> interface and has one heir 
			<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> which implements all the deferred features. The default implementation in the heir is empty.
		</paragraph>
		<heading>
			<size>2</size> Implementing the component
		</heading>
		<link/> To do something more interesting than merely returning an error to the client edit the implementation of the 
		<class_name>STRING_MANIPULATOR_COCLASS_IMP</class_name> class. There is an implementation of the class in 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\server</italic>\.  Copy this file over to 
		<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\component\server\component</italic> and freeze the project. Voila!, you have your first EiffelCOM component up and running.
		<heading>
			<size>2</size> Running the component
		</heading>
		The component needs to be registered prior to being loaded. Register an out-of-process component using the following syntax:
		<code_block>
system_name.exe -Regserver</code_block>
		 where <italic>system_name</italic> is the name of the component executable file. Register an in-process component using the 
		<italic>regsvr32</italic> utility using the following syntax:
		<code_block>
regsvr32 system_name.dll</code_block>
		where <italic>system_name</italic> is the name of the dll (e.g. string_manipulator). So to register the <class_name>
		StringManipulator</class_name> component, run:
		<code_block>
cd $ISE_EIFFEL\examples\com\wizard\string_manipulator\component\server\component\EIFGEN\W_code	
regsvr32 string_manipulator.dll</code_block>

		Once registered, follow the steps described in <link><url>03_accessing.xml</url><label>Accessing a COM component</label></link> 
		to build the component's client.
		<tip>
			<bold>Tip</bold>:
			<line_break/>
			In development mode, the Eiffel compiler generates byte code that is required by the Eiffel runtime 
			in order to run the compiled system. The Eiffel runtime looks in the working directory for the byte code and, 
			if not there, then in the directory pointed to by the <code>MELT_PATH</code> environment variable 
			if it is set. Since the client loads the EiffelCOM COM component from its current location, the 
			working directory will not contain the server's byte code. As a consequence when testing EiffelCOM COM components 
			the environment variable <code>MELT_PATH</code> must be defined and must point to the directory containing 
			the server byte code (the EIFGEN\W_Code folder in the project's folder).<line_break/> 
			For the <class_name>StringManipulator</class_name> component, the MELT_PATH environment variable must be set to: 
			<italic>$ISE_EIFFEL\examples\com\wizard\string_manipulator\component\server\EIFGEN\W_Code</italic>.<line_break/>
			Defining the <code>MELT_PATH</code> environment variable is not necessary for a finalized system since it doesn't use 
			any byte code.	
		</tip>
		<seealso>
			<bold>See Also</bold>
			<line_break/>
			<link>
				<url>02_new_from_eiffel.xml</url>
				<label>Creating a new component from an Eiffel Project</label>
			</link>
			<line_break/>
			<link>
				<url>03_accessing.xml</url>
				<label>Accessing a COM component.</label>
			</link>
		</seealso>
	</paragraph></document>
