indexing
	description: "Objects that represent an EV_TITLED_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	date: "$Date$"
	revision: "$Revision$"

class
	ROW_TAB

inherit
	ROW_TAB_IMP
	
	GRID_ACCESSOR
		undefine
			copy, default_create, is_equal
		end

feature {NONE} -- Initialization

	user_initialization is
			-- Called by `initialize'.
			-- Any custom user initialization that
			-- could not be performed in `initialize',
			-- (due to regeneration of implementation class)
			-- can be added here.
		do
			current_row_index := 1
			row_finder.set_prompt ("Row Finder : ")
			row_finder.motion_actions.extend (agent row_motion)
		end

feature {NONE} -- Implementation

	current_row_index: INTEGER
			-- Current index of row for property change.
		
	row_motion (an_item: EV_GRID_ITEM) is
			--
		do
			if an_item /= Void then
				row_properties_frame.enable_sensitive
				row_index_entry.change_actions.block
				row_index_entry.set_value (an_item.row.index)
				row_index_entry.change_actions.resume
				current_row_index := an_item.row.index
				if grid.is_row_height_fixed then
					row_height_entry.disable_sensitive
					row_height_entry.change_actions.block
					row_height_entry.set_value (grid.row_height)
					row_height_entry.change_actions.resume
				else
					row_height_entry.enable_sensitive
					row_height_entry.change_actions.block
					row_height_entry.set_value (an_item.row.height)
					row_height_entry.change_actions.resume
				end
				row_selected_button.select_actions.block
				if an_item.row.is_selected then
					row_selected_button.enable_select
				else
					row_selected_button.disable_select
				end
				row_selected_button.select_actions.resume
			else
				row_properties_frame.disable_sensitive
			end
		end
		
	row_index_entry_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `row_index_entry'.
		do
			current_row_index := a_value
			row_motion (grid.row (current_row_index).item (1))
		end
	
	row_height_entry_changed (a_value: INTEGER) is
			-- Called by `change_actions' of `row_height_entry'.
		do
			check
				variable_row_heights: not grid.is_row_height_fixed
			end
			grid.row (current_row_index).set_height (a_value)
		end
	
	row_selected_button_selected is
			-- Called by `select_actions' of `row_selected_button'.
		do
			if row_selected_button.is_selected then
				grid.row (current_row_index).enable_select
			else
				grid.row (current_row_index).disable_select
			end
		end
		
	swap_row_button_selected is
			-- Called by `select_actions' of `swap_row_button'.
		local
			row_counter: INTEGER
			first_selected, second_selected: INTEGER
		do
			from
				row_counter := 1
			until
				row_counter > grid.row_count or second_selected > 0
			loop
				if grid.row (row_counter).is_selected then
					if first_selected = 0 then
						first_selected := row_counter
					else
						second_selected := row_counter
					end
				end
				row_counter := row_counter + 1
			end
			grid.move_row (first_selected, second_selected)
		end

end -- class ROW_TAB

